
RCB_realtime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080098cc  080098cc  0000a8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800997c  0800997c  0000b044  2**0
                  CONTENTS
  4 .ARM          00000008  0800997c  0800997c  0000a97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009984  08009984  0000b044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009984  08009984  0000a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009988  08009988  0000a988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  0800998c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000048  080099d0  0000b048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  080099d0  0000b7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149d7  00000000  00000000  0000b06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e2  00000000  00000000  0001fa44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00022f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100c  00000000  00000000  000243b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019728  00000000  00000000  000253bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001722d  00000000  00000000  0003eae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093856  00000000  00000000  00055d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9567  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b0  00000000  00000000  000e95ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000eec5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	080098b4 	.word	0x080098b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	080098b4 	.word	0x080098b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000164:	4b22      	ldr	r3, [pc, #136]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000166:	68db      	ldr	r3, [r3, #12]
 8000168:	4798      	blx	r3
   WIZCHIP.CS._select();
 800016a:	4b21      	ldr	r3, [pc, #132]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800016c:	695b      	ldr	r3, [r3, #20]
 800016e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000170:	4b1f      	ldr	r3, [pc, #124]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000174:	2b00      	cmp	r3, #0
 8000176:	d003      	beq.n	8000180 <WIZCHIP_READ+0x24>
 8000178:	4b1d      	ldr	r3, [pc, #116]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800017a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800017c:	2b00      	cmp	r3, #0
 800017e:	d114      	bne.n	80001aa <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000180:	4b1b      	ldr	r3, [pc, #108]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000182:	6a1b      	ldr	r3, [r3, #32]
 8000184:	687a      	ldr	r2, [r7, #4]
 8000186:	0c12      	lsrs	r2, r2, #16
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	4610      	mov	r0, r2
 800018c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800018e:	4b18      	ldr	r3, [pc, #96]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000190:	6a1b      	ldr	r3, [r3, #32]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	0a12      	lsrs	r2, r2, #8
 8000196:	b2d2      	uxtb	r2, r2
 8000198:	4610      	mov	r0, r2
 800019a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800019c:	4b14      	ldr	r3, [pc, #80]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800019e:	6a1b      	ldr	r3, [r3, #32]
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	b2d2      	uxtb	r2, r2
 80001a4:	4610      	mov	r0, r2
 80001a6:	4798      	blx	r3
 80001a8:	e011      	b.n	80001ce <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	0c1b      	lsrs	r3, r3, #16
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	0a1b      	lsrs	r3, r3, #8
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80001c0:	4b0b      	ldr	r3, [pc, #44]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80001c4:	f107 020c 	add.w	r2, r7, #12
 80001c8:	2103      	movs	r1, #3
 80001ca:	4610      	mov	r0, r2
 80001cc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80001ce:	4b08      	ldr	r3, [pc, #32]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001d0:	69db      	ldr	r3, [r3, #28]
 80001d2:	4798      	blx	r3
 80001d4:	4603      	mov	r3, r0
 80001d6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80001de:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	4798      	blx	r3
   return ret;
 80001e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000004 	.word	0x20000004

080001f4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	460b      	mov	r3, r1
 80001fe:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000200:	4b22      	ldr	r3, [pc, #136]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000206:	4b21      	ldr	r3, [pc, #132]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000214:	4b1d      	ldr	r3, [pc, #116]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000218:	2b00      	cmp	r3, #0
 800021a:	d119      	bne.n	8000250 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800021c:	4b1b      	ldr	r3, [pc, #108]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	0c12      	lsrs	r2, r2, #16
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800022a:	4b18      	ldr	r3, [pc, #96]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800022c:	6a1b      	ldr	r3, [r3, #32]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	0a12      	lsrs	r2, r2, #8
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	4610      	mov	r0, r2
 8000236:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000238:	4b14      	ldr	r3, [pc, #80]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	4610      	mov	r0, r2
 8000242:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000244:	4b11      	ldr	r3, [pc, #68]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	78fa      	ldrb	r2, [r7, #3]
 800024a:	4610      	mov	r0, r2
 800024c:	4798      	blx	r3
 800024e:	e013      	b.n	8000278 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	0c1b      	lsrs	r3, r3, #16
 8000254:	b2db      	uxtb	r3, r3
 8000256:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	0a1b      	lsrs	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000266:	78fb      	ldrb	r3, [r7, #3]
 8000268:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800026a:	4b08      	ldr	r3, [pc, #32]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800026c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800026e:	f107 020c 	add.w	r2, r7, #12
 8000272:	2104      	movs	r1, #4
 8000274:	4610      	mov	r0, r2
 8000276:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000278:	4b04      	ldr	r3, [pc, #16]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	4798      	blx	r3
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000004 	.word	0x20000004

08000290 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800029e:	4b2b      	ldr	r3, [pc, #172]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80002a4:	4b29      	ldr	r3, [pc, #164]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80002aa:	4b28      	ldr	r3, [pc, #160]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d003      	beq.n	80002ba <WIZCHIP_READ_BUF+0x2a>
 80002b2:	4b26      	ldr	r3, [pc, #152]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d126      	bne.n	8000308 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80002ba:	4b24      	ldr	r3, [pc, #144]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002bc:	6a1b      	ldr	r3, [r3, #32]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	0c12      	lsrs	r2, r2, #16
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	4610      	mov	r0, r2
 80002c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80002c8:	4b20      	ldr	r3, [pc, #128]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	0a12      	lsrs	r2, r2, #8
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	4610      	mov	r0, r2
 80002d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80002d6:	4b1d      	ldr	r3, [pc, #116]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002d8:	6a1b      	ldr	r3, [r3, #32]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80002e2:	2300      	movs	r3, #0
 80002e4:	82fb      	strh	r3, [r7, #22]
 80002e6:	e00a      	b.n	80002fe <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	8afa      	ldrh	r2, [r7, #22]
 80002ee:	68b9      	ldr	r1, [r7, #8]
 80002f0:	188c      	adds	r4, r1, r2
 80002f2:	4798      	blx	r3
 80002f4:	4603      	mov	r3, r0
 80002f6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80002f8:	8afb      	ldrh	r3, [r7, #22]
 80002fa:	3301      	adds	r3, #1
 80002fc:	82fb      	strh	r3, [r7, #22]
 80002fe:	8afa      	ldrh	r2, [r7, #22]
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	429a      	cmp	r2, r3
 8000304:	d3f0      	bcc.n	80002e8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000306:	e017      	b.n	8000338 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	b2db      	uxtb	r3, r3
 800030e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	0a1b      	lsrs	r3, r3, #8
 8000314:	b2db      	uxtb	r3, r3
 8000316:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800031e:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 8000320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000322:	f107 0210 	add.w	r2, r7, #16
 8000326:	2103      	movs	r1, #3
 8000328:	4610      	mov	r0, r2
 800032a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 800032e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000330:	88fa      	ldrh	r2, [r7, #6]
 8000332:	4611      	mov	r1, r2
 8000334:	68b8      	ldr	r0, [r7, #8]
 8000336:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000338:	4b04      	ldr	r3, [pc, #16]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800033e:	4b03      	ldr	r3, [pc, #12]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 8000340:	691b      	ldr	r3, [r3, #16]
 8000342:	4798      	blx	r3
}
 8000344:	bf00      	nop
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	bd90      	pop	{r4, r7, pc}
 800034c:	20000004 	.word	0x20000004

08000350 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	4613      	mov	r3, r2
 800035c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800035e:	4b2b      	ldr	r3, [pc, #172]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000364:	4b29      	ldr	r3, [pc, #164]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000376:	2b00      	cmp	r3, #0
 8000378:	d126      	bne.n	80003c8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800037a:	4b24      	ldr	r3, [pc, #144]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 800037c:	6a1b      	ldr	r3, [r3, #32]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	0c12      	lsrs	r2, r2, #16
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	4610      	mov	r0, r2
 8000386:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000388:	4b20      	ldr	r3, [pc, #128]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	68fa      	ldr	r2, [r7, #12]
 800038e:	0a12      	lsrs	r2, r2, #8
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	4610      	mov	r0, r2
 8000394:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000398:	6a1b      	ldr	r3, [r3, #32]
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	4610      	mov	r0, r2
 80003a0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	82fb      	strh	r3, [r7, #22]
 80003a6:	e00a      	b.n	80003be <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80003a8:	4b18      	ldr	r3, [pc, #96]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003aa:	6a1b      	ldr	r3, [r3, #32]
 80003ac:	8afa      	ldrh	r2, [r7, #22]
 80003ae:	68b9      	ldr	r1, [r7, #8]
 80003b0:	440a      	add	r2, r1
 80003b2:	7812      	ldrb	r2, [r2, #0]
 80003b4:	4610      	mov	r0, r2
 80003b6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	3301      	adds	r3, #1
 80003bc:	82fb      	strh	r3, [r7, #22]
 80003be:	8afa      	ldrh	r2, [r7, #22]
 80003c0:	88fb      	ldrh	r3, [r7, #6]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3f0      	bcc.n	80003a8 <WIZCHIP_WRITE_BUF+0x58>
 80003c6:	e017      	b.n	80003f8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	0a1b      	lsrs	r3, r3, #8
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003e2:	f107 0210 	add.w	r2, r7, #16
 80003e6:	2103      	movs	r1, #3
 80003e8:	4610      	mov	r0, r2
 80003ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80003ec:	4b07      	ldr	r3, [pc, #28]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003f0:	88fa      	ldrh	r2, [r7, #6]
 80003f2:	4611      	mov	r1, r2
 80003f4:	68b8      	ldr	r0, [r7, #8]
 80003f6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80003f8:	4b04      	ldr	r3, [pc, #16]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80003fe:	4b03      	ldr	r3, [pc, #12]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	4798      	blx	r3
}
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000004 	.word	0x20000004

08000410 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800041a:	2300      	movs	r3, #0
 800041c:	81fb      	strh	r3, [r7, #14]
 800041e:	2300      	movs	r3, #0
 8000420:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	3301      	adds	r3, #1
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fe94 	bl	800015c <WIZCHIP_READ>
 8000434:	4603      	mov	r3, r0
 8000436:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000438:	89bb      	ldrh	r3, [r7, #12]
 800043a:	021b      	lsls	r3, r3, #8
 800043c:	b29c      	uxth	r4, r3
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	3301      	adds	r3, #1
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fe86 	bl	800015c <WIZCHIP_READ>
 8000450:	4603      	mov	r3, r0
 8000452:	4423      	add	r3, r4
 8000454:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000456:	89bb      	ldrh	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d019      	beq.n	8000490 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	3301      	adds	r3, #1
 8000462:	00db      	lsls	r3, r3, #3
 8000464:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fe77 	bl	800015c <WIZCHIP_READ>
 800046e:	4603      	mov	r3, r0
 8000470:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000472:	89fb      	ldrh	r3, [r7, #14]
 8000474:	021b      	lsls	r3, r3, #8
 8000476:	b29c      	uxth	r4, r3
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	3301      	adds	r3, #1
 800047e:	00db      	lsls	r3, r3, #3
 8000480:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe69 	bl	800015c <WIZCHIP_READ>
 800048a:	4603      	mov	r3, r0
 800048c:	4423      	add	r3, r4
 800048e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000490:	89fa      	ldrh	r2, [r7, #14]
 8000492:	89bb      	ldrh	r3, [r7, #12]
 8000494:	429a      	cmp	r2, r3
 8000496:	d1c4      	bne.n	8000422 <getSn_TX_FSR+0x12>
   return val;
 8000498:	89fb      	ldrh	r3, [r7, #14]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd90      	pop	{r4, r7, pc}

080004a2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80004a2:	b590      	push	{r4, r7, lr}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	81fb      	strh	r3, [r7, #14]
 80004b0:	2300      	movs	r3, #0
 80004b2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	3301      	adds	r3, #1
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fe4b 	bl	800015c <WIZCHIP_READ>
 80004c6:	4603      	mov	r3, r0
 80004c8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80004ca:	89bb      	ldrh	r3, [r7, #12]
 80004cc:	021b      	lsls	r3, r3, #8
 80004ce:	b29c      	uxth	r4, r3
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	3301      	adds	r3, #1
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fe3d 	bl	800015c <WIZCHIP_READ>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4423      	add	r3, r4
 80004e6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80004e8:	89bb      	ldrh	r3, [r7, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d019      	beq.n	8000522 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	3301      	adds	r3, #1
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe2e 	bl	800015c <WIZCHIP_READ>
 8000500:	4603      	mov	r3, r0
 8000502:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	b29c      	uxth	r4, r3
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	3301      	adds	r3, #1
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe20 	bl	800015c <WIZCHIP_READ>
 800051c:	4603      	mov	r3, r0
 800051e:	4423      	add	r3, r4
 8000520:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000522:	89fa      	ldrh	r2, [r7, #14]
 8000524:	89bb      	ldrh	r3, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d1c4      	bne.n	80004b4 <getSn_RX_RSR+0x12>
   return val;
 800052a:	89fb      	ldrh	r3, [r7, #14]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bd90      	pop	{r4, r7, pc}

08000534 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d046      	beq.n	80005e0 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	3301      	adds	r3, #1
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fdfc 	bl	800015c <WIZCHIP_READ>
 8000564:	4603      	mov	r3, r0
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	b29c      	uxth	r4, r3
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	3301      	adds	r3, #1
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fdf0 	bl	800015c <WIZCHIP_READ>
 800057c:	4603      	mov	r3, r0
 800057e:	4423      	add	r3, r4
 8000580:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000582:	89fb      	ldrh	r3, [r7, #14]
 8000584:	021a      	lsls	r2, r3, #8
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	3302      	adds	r3, #2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4413      	add	r3, r2
 8000590:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	461a      	mov	r2, r3
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	68b8      	ldr	r0, [r7, #8]
 800059a:	f7ff fed9 	bl	8000350 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800059e:	89fa      	ldrh	r2, [r7, #14]
 80005a0:	88bb      	ldrh	r3, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	3301      	adds	r3, #1
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80005b2:	461a      	mov	r2, r3
 80005b4:	89fb      	ldrh	r3, [r7, #14]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	4610      	mov	r0, r2
 80005c0:	f7ff fe18 	bl	80001f4 <WIZCHIP_WRITE>
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	3301      	adds	r3, #1
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80005d0:	461a      	mov	r2, r3
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	4610      	mov	r0, r2
 80005da:	f7ff fe0b 	bl	80001f4 <WIZCHIP_WRITE>
 80005de:	e000      	b.n	80005e2 <wiz_send_data+0xae>
   if(len == 0)  return;
 80005e0:	bf00      	nop
}
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd90      	pop	{r4, r7, pc}

080005e8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d046      	beq.n	8000694 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	3301      	adds	r3, #1
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fda2 	bl	800015c <WIZCHIP_READ>
 8000618:	4603      	mov	r3, r0
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	b29c      	uxth	r4, r3
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	3301      	adds	r3, #1
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fd96 	bl	800015c <WIZCHIP_READ>
 8000630:	4603      	mov	r3, r0
 8000632:	4423      	add	r3, r4
 8000634:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	021a      	lsls	r2, r3, #8
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3303      	adds	r3, #3
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	4413      	add	r3, r2
 8000644:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	461a      	mov	r2, r3
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	68b8      	ldr	r0, [r7, #8]
 800064e:	f7ff fe1f 	bl	8000290 <WIZCHIP_READ_BUF>
   ptr += len;
 8000652:	89fa      	ldrh	r2, [r7, #14]
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	3301      	adds	r3, #1
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000666:	461a      	mov	r2, r3
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	b29b      	uxth	r3, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff fdbe 	bl	80001f4 <WIZCHIP_WRITE>
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3301      	adds	r3, #1
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8000684:	461a      	mov	r2, r3
 8000686:	89fb      	ldrh	r3, [r7, #14]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	4610      	mov	r0, r2
 800068e:	f7ff fdb1 	bl	80001f4 <WIZCHIP_WRITE>
 8000692:	e000      	b.n	8000696 <wiz_recv_data+0xae>
   if(len == 0) return;
 8000694:	bf00      	nop
}
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <wizchip_select>:
#include "../Ethernet/wizchip_conf.h"

extern SPI_HandleTypeDef hspi1;

void wizchip_select(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2110      	movs	r1, #16
 80006a4:	4802      	ldr	r0, [pc, #8]	@ (80006b0 <wizchip_select+0x14>)
 80006a6:	f006 fa60 	bl	8006b6a <HAL_GPIO_WritePin>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40010800 	.word	0x40010800

080006b4 <wizchip_deselect>:

void wizchip_deselect(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4802      	ldr	r0, [pc, #8]	@ (80006c8 <wizchip_deselect+0x14>)
 80006be:	f006 fa54 	bl	8006b6a <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010800 	.word	0x40010800

080006cc <wizchip_read>:

uint8_t wizchip_read(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80006d2:	1df9      	adds	r1, r7, #7
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2201      	movs	r2, #1
 80006da:	4804      	ldr	r0, [pc, #16]	@ (80006ec <wizchip_read+0x20>)
 80006dc:	f007 f8bc 	bl	8007858 <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&hspi1, &rbuf, 1);
	return rbuf;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000d0 	.word	0x200000d0

080006f0 <wizchip_write>:

void wizchip_write(uint8_t b) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80006fa:	1df9      	adds	r1, r7, #7
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2201      	movs	r2, #1
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <wizchip_write+0x20>)
 8000704:	f006 ff64 	bl	80075d0 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, &b, 1);
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000d0 	.word	0x200000d0

08000714 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, pBuf, len, 0xFFFFFFFF);
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4803      	ldr	r0, [pc, #12]	@ (8000738 <wizchip_readburst+0x24>)
 800072a:	f007 f895 	bl	8007858 <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&hspi1, pBuf, len);
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000d0 	.word	0x200000d0

0800073c <wizchip_writeburst>:

void wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, pBuf, len, 0xFFFFFFFF);
 8000748:	887a      	ldrh	r2, [r7, #2]
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <wizchip_writeburst+0x24>)
 8000752:	f006 ff3d 	bl	80075d0 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, pBuf, len);
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000d0 	.word	0x200000d0

08000764 <W5500Init>:

void W5500Init()
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 800076a:	23ff      	movs	r3, #255	@ 0xff
 800076c:	75fb      	strb	r3, [r7, #23]
	uint8_t memsize[2][8] = {{16,0,0,0,0,0,0,0},{16,0,0,0,0,0,0,0}};
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <W5500Init+0x74>)
 8000770:	1d3c      	adds	r4, r7, #4
 8000772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	4817      	ldr	r0, [pc, #92]	@ (80007dc <W5500Init+0x78>)
 800077e:	f006 f9f4 	bl	8006b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2102      	movs	r1, #2
 8000786:	4816      	ldr	r0, [pc, #88]	@ (80007e0 <W5500Init+0x7c>)
 8000788:	f006 f9ef 	bl	8006b6a <HAL_GPIO_WritePin>
	while (tmp--);
 800078c:	bf00      	nop
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	75fa      	strb	r2, [r7, #23]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1fa      	bne.n	800078e <W5500Init+0x2a>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2102      	movs	r1, #2
 800079c:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <W5500Init+0x7c>)
 800079e:	f006 f9e4 	bl	8006b6a <HAL_GPIO_WritePin>
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80007a2:	4910      	ldr	r1, [pc, #64]	@ (80007e4 <W5500Init+0x80>)
 80007a4:	4810      	ldr	r0, [pc, #64]	@ (80007e8 <W5500Init+0x84>)
 80007a6:	f000 fca5 	bl	80010f4 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 80007aa:	4910      	ldr	r1, [pc, #64]	@ (80007ec <W5500Init+0x88>)
 80007ac:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <W5500Init+0x8c>)
 80007ae:	f000 fcc5 	bl	800113c <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 80007b2:	4910      	ldr	r1, [pc, #64]	@ (80007f4 <W5500Init+0x90>)
 80007b4:	4810      	ldr	r0, [pc, #64]	@ (80007f8 <W5500Init+0x94>)
 80007b6:	f000 fced 	bl	8001194 <reg_wizchip_spiburst_cbfunc>
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fd14 	bl	80011ec <ctlwizchip>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ca:	d101      	bne.n	80007d0 <W5500Init+0x6c>
	{
		while (1);
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <W5500Init+0x68>
	}
}
 80007d0:	bf00      	nop
 80007d2:	371c      	adds	r7, #28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	080098cc 	.word	0x080098cc
 80007dc:	40010800 	.word	0x40010800
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	080006b5 	.word	0x080006b5
 80007e8:	0800069d 	.word	0x0800069d
 80007ec:	080006f1 	.word	0x080006f1
 80007f0:	080006cd 	.word	0x080006cd
 80007f4:	0800073d 	.word	0x0800073d
 80007f8:	08000715 	.word	0x08000715

080007fc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	4604      	mov	r4, r0
 8000804:	4608      	mov	r0, r1
 8000806:	4611      	mov	r1, r2
 8000808:	461a      	mov	r2, r3
 800080a:	4623      	mov	r3, r4
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	460b      	mov	r3, r1
 8000814:	80bb      	strh	r3, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b08      	cmp	r3, #8
 800081e:	d902      	bls.n	8000826 <socket+0x2a>
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	e0ef      	b.n	8000a06 <socket+0x20a>
	switch(protocol)
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d005      	beq.n	8000838 <socket+0x3c>
 800082c:	2b00      	cmp	r3, #0
 800082e:	dd11      	ble.n	8000854 <socket+0x58>
 8000830:	3b02      	subs	r3, #2
 8000832:	2b02      	cmp	r3, #2
 8000834:	d80e      	bhi.n	8000854 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000836:	e011      	b.n	800085c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2204      	movs	r2, #4
 800083e:	4619      	mov	r1, r3
 8000840:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000844:	f7ff fd24 	bl	8000290 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <socket+0x5e>
 800084e:	f06f 0302 	mvn.w	r3, #2
 8000852:	e0d8      	b.n	8000a06 <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000854:	f06f 0304 	mvn.w	r3, #4
 8000858:	e0d5      	b.n	8000a06 <socket+0x20a>
	    break;
 800085a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <socket+0x70>
 8000866:	f06f 0305 	mvn.w	r3, #5
 800086a:	e0cc      	b.n	8000a06 <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d028      	beq.n	80008c4 <socket+0xc8>
	{
   	switch(protocol)
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d002      	beq.n	800087e <socket+0x82>
 8000878:	2b02      	cmp	r3, #2
 800087a:	d008      	beq.n	800088e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800087c:	e022      	b.n	80008c4 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11a      	bne.n	80008be <socket+0xc2>
 8000888:	f06f 0305 	mvn.w	r3, #5
 800088c:	e0bb      	b.n	8000a06 <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	f003 0320 	and.w	r3, r3, #32
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db02      	blt.n	80008a6 <socket+0xaa>
 80008a0:	f06f 0305 	mvn.w	r3, #5
 80008a4:	e0af      	b.n	8000a06 <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d008      	beq.n	80008c2 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80008b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db04      	blt.n	80008c2 <socket+0xc6>
 80008b8:	f06f 0305 	mvn.w	r3, #5
 80008bc:	e0a3      	b.n	8000a06 <socket+0x20a>
   	      break;
 80008be:	bf00      	nop
 80008c0:	e000      	b.n	80008c4 <socket+0xc8>
   	      break;
 80008c2:	bf00      	nop
   	}
   }
	close(sn);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f8ac 	bl	8000a24 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	3301      	adds	r3, #1
 80008d2:	00d8      	lsls	r0, r3, #3
 80008d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008d8:	f023 030f 	bic.w	r3, r3, #15
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	f7ff fc83 	bl	80001f4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d110      	bne.n	8000916 <socket+0x11a>
	{
	   port = sock_any_port++;
 80008f4:	4b46      	ldr	r3, [pc, #280]	@ (8000a10 <socket+0x214>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	b291      	uxth	r1, r2
 80008fc:	4a44      	ldr	r2, [pc, #272]	@ (8000a10 <socket+0x214>)
 80008fe:	8011      	strh	r1, [r2, #0]
 8000900:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000902:	4b43      	ldr	r3, [pc, #268]	@ (8000a10 <socket+0x214>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800090a:	4293      	cmp	r3, r2
 800090c:	d103      	bne.n	8000916 <socket+0x11a>
 800090e:	4b40      	ldr	r3, [pc, #256]	@ (8000a10 <socket+0x214>)
 8000910:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000914:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	3301      	adds	r3, #1
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000922:	461a      	mov	r2, r3
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	0a1b      	lsrs	r3, r3, #8
 8000928:	b29b      	uxth	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4619      	mov	r1, r3
 800092e:	4610      	mov	r0, r2
 8000930:	f7ff fc60 	bl	80001f4 <WIZCHIP_WRITE>
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	3301      	adds	r3, #1
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000940:	461a      	mov	r2, r3
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f7ff fc53 	bl	80001f4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	3301      	adds	r3, #1
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc49 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000962:	bf00      	nop
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	3301      	adds	r3, #1
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fbf3 	bl	800015c <WIZCHIP_READ>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f3      	bne.n	8000964 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2201      	movs	r2, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	b21b      	sxth	r3, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	b21a      	sxth	r2, r3
 800098a:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <socket+0x218>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b21b      	sxth	r3, r3
 8000990:	4013      	ands	r3, r2
 8000992:	b21b      	sxth	r3, r3
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <socket+0x218>)
 8000998:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	f003 0201 	and.w	r2, r3, #1
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <socket+0x218>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <socket+0x218>)
 80009b6:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <socket+0x21c>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <socket+0x21c>)
 80009d4:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <socket+0x220>)
 80009da:	2100      	movs	r1, #0
 80009dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <socket+0x224>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80009e8:	bf00      	nop
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	3301      	adds	r3, #1
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fbb0 	bl	800015c <WIZCHIP_READ>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f3      	beq.n	80009ea <socket+0x1ee>
   return (int8_t)sn;
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000064 	.word	0x20000064
 8000a18:	20000066 	.word	0x20000066
 8000a1c:	20000068 	.word	0x20000068
 8000a20:	2000007c 	.word	0x2000007c

08000a24 <close>:

int8_t close(uint8_t sn)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b08      	cmp	r3, #8
 8000a32:	d902      	bls.n	8000a3a <close+0x16>
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	e05f      	b.n	8000afa <close+0xd6>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	3301      	adds	r3, #1
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a46:	2110      	movs	r1, #16
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbd3 	bl	80001f4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000a4e:	bf00      	nop
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	3301      	adds	r3, #1
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fb7d 	bl	800015c <WIZCHIP_READ>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f3      	bne.n	8000a50 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000a74:	211f      	movs	r1, #31
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fbbc 	bl	80001f4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <close+0xe0>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <close+0xe0>)
 8000a98:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <close+0xe4>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4013      	ands	r3, r2
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <close+0xe4>)
 8000ab6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <close+0xe8>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <close+0xec>)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000aca:	e009      	b.n	8000ae0 <close+0xbc>
	{
		if (g_uart_request_exit == 1)
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <close+0xf0>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d105      	bne.n	8000ae0 <close+0xbc>
		{
			g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <close+0xf0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
			return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000ada:	f06f 030c 	mvn.w	r3, #12
 8000ade:	e00c      	b.n	8000afa <close+0xd6>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb35 	bl	800015c <WIZCHIP_READ>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1e9      	bne.n	8000acc <close+0xa8>
		}
	}
	return SOCK_OK;
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000064 	.word	0x20000064
 8000b08:	20000066 	.word	0x20000066
 8000b0c:	20000068 	.word	0x20000068
 8000b10:	2000007c 	.word	0x2000007c
 8000b14:	20000078 	.word	0x20000078

08000b18 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d902      	bls.n	8000b34 <connect+0x1c>
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e0d0      	b.n	8000cd6 <connect+0x1be>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	3301      	adds	r3, #1
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fb0d 	bl	800015c <WIZCHIP_READ>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f003 030f 	and.w	r3, r3, #15
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d002      	beq.n	8000b52 <connect+0x3a>
 8000b4c:	f06f 0304 	mvn.w	r3, #4
 8000b50:	e0c1      	b.n	8000cd6 <connect+0x1be>
   CHECK_SOCKINIT();
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	3301      	adds	r3, #1
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fafc 	bl	800015c <WIZCHIP_READ>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b13      	cmp	r3, #19
 8000b68:	d002      	beq.n	8000b70 <connect+0x58>
 8000b6a:	f06f 0302 	mvn.w	r3, #2
 8000b6e:	e0b2      	b.n	8000cd6 <connect+0x1be>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	021b      	lsls	r3, r3, #8
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	3201      	adds	r2, #1
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021b      	lsls	r3, r3, #8
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	3202      	adds	r2, #2
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	3203      	adds	r2, #3
 8000b9a:	7812      	ldrb	r2, [r2, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba6:	d002      	beq.n	8000bae <connect+0x96>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <connect+0x9c>
 8000bae:	f06f 030b 	mvn.w	r3, #11
 8000bb2:	e090      	b.n	8000cd6 <connect+0x1be>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8000bb4:	88bb      	ldrh	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <connect+0xa8>
 8000bba:	f06f 030a 	mvn.w	r3, #10
 8000bbe:	e08a      	b.n	8000cd6 <connect+0x1be>
	setSn_DIPR(sn,addr);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8000bcc:	2204      	movs	r2, #4
 8000bce:	6839      	ldr	r1, [r7, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fbbd 	bl	8000350 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	3301      	adds	r3, #1
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000be2:	461a      	mov	r2, r3
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4619      	mov	r1, r3
 8000bee:	4610      	mov	r0, r2
 8000bf0:	f7ff fb00 	bl	80001f4 <WIZCHIP_WRITE>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8000c00:	461a      	mov	r2, r3
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4619      	mov	r1, r3
 8000c08:	4610      	mov	r0, r2
 8000c0a:	f7ff faf3 	bl	80001f4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	3301      	adds	r3, #1
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fae9 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000c22:	bf00      	nop
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	3301      	adds	r3, #1
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fa93 	bl	800015c <WIZCHIP_READ>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f3      	bne.n	8000c24 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000c3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <connect+0x1c8>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	fa42 f303 	asr.w	r3, r2, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d035      	beq.n	8000cbc <connect+0x1a4>
 8000c50:	2300      	movs	r3, #0
 8000c52:	e040      	b.n	8000cd6 <connect+0x1be>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	3301      	adds	r3, #1
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fa7b 	bl	800015c <WIZCHIP_READ>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00c      	beq.n	8000c8a <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	3301      	adds	r3, #1
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fab8 	bl	80001f4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8000c84:	f06f 030c 	mvn.w	r3, #12
 8000c88:	e025      	b.n	8000cd6 <connect+0x1be>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3301      	adds	r3, #1
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fa60 	bl	800015c <WIZCHIP_READ>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8000ca2:	f06f 0303 	mvn.w	r3, #3
 8000ca6:	e016      	b.n	8000cd6 <connect+0x1be>
		}
		if (g_uart_request_exit == 1)
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <connect+0x1cc>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d105      	bne.n	8000cbc <connect+0x1a4>
		{
			g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <connect+0x1cc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
			return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000cb6:	f06f 030c 	mvn.w	r3, #12
 8000cba:	e00c      	b.n	8000cd6 <connect+0x1be>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fa47 	bl	800015c <WIZCHIP_READ>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b17      	cmp	r3, #23
 8000cd2:	d1bf      	bne.n	8000c54 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8000cd4:	2301      	movs	r3, #1
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000064 	.word	0x20000064
 8000ce4:	20000078 	.word	0x20000078

08000ce8 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d902      	bls.n	8000d0c <send+0x24>
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e0dd      	b.n	8000ec8 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	3301      	adds	r3, #1
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fa21 	bl	800015c <WIZCHIP_READ>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f003 030f 	and.w	r3, r3, #15
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d002      	beq.n	8000d2a <send+0x42>
 8000d24:	f06f 0304 	mvn.w	r3, #4
 8000d28:	e0ce      	b.n	8000ec8 <send+0x1e0>
   CHECK_SOCKDATA();
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <send+0x4e>
 8000d30:	f06f 030d 	mvn.w	r3, #13
 8000d34:	e0c8      	b.n	8000ec8 <send+0x1e0>
   tmp = getSn_SR(sn);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa0a 	bl	800015c <WIZCHIP_READ>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b17      	cmp	r3, #23
 8000d50:	d005      	beq.n	8000d5e <send+0x76>
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b1c      	cmp	r3, #28
 8000d56:	d002      	beq.n	8000d5e <send+0x76>
 8000d58:	f06f 0306 	mvn.w	r3, #6
 8000d5c:	e0b4      	b.n	8000ec8 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ed0 <send+0x1e8>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	fa42 f303 	asr.w	r3, r2, r3
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d039      	beq.n	8000de6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	3301      	adds	r3, #1
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff f9ec 	bl	800015c <WIZCHIP_READ>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f003 031f 	and.w	r3, r3, #31
 8000d8a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d019      	beq.n	8000dca <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000da2:	2110      	movs	r1, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa25 	bl	80001f4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2201      	movs	r2, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	4b45      	ldr	r3, [pc, #276]	@ (8000ed0 <send+0x1e8>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b42      	ldr	r3, [pc, #264]	@ (8000ed0 <send+0x1e8>)
 8000dc6:	801a      	strh	r2, [r3, #0]
 8000dc8:	e00d      	b.n	8000de6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <send+0xfa>
      {
         close(sn);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fe24 	bl	8000a24 <close>
         return SOCKERR_TIMEOUT;
 8000ddc:	f06f 030c 	mvn.w	r3, #12
 8000de0:	e072      	b.n	8000ec8 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e070      	b.n	8000ec8 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	3301      	adds	r3, #1
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff f9b2 	bl	800015c <WIZCHIP_READ>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	029b      	lsls	r3, r3, #10
 8000dfc:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000dfe:	88ba      	ldrh	r2, [r7, #4]
 8000e00:	89bb      	ldrh	r3, [r7, #12]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d901      	bls.n	8000e0a <send+0x122>
 8000e06:	89bb      	ldrh	r3, [r7, #12]
 8000e08:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff faff 	bl	8000410 <getSn_TX_FSR>
 8000e12:	4603      	mov	r3, r0
 8000e14:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f99a 	bl	800015c <WIZCHIP_READ>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b17      	cmp	r3, #23
 8000e30:	d009      	beq.n	8000e46 <send+0x15e>
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b1c      	cmp	r3, #28
 8000e36:	d006      	beq.n	8000e46 <send+0x15e>
      {
         close(sn);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fdf2 	bl	8000a24 <close>
         return SOCKERR_SOCKSTATUS;
 8000e40:	f06f 0306 	mvn.w	r3, #6
 8000e44:	e040      	b.n	8000ec8 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000e46:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <send+0x1ec>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	fa42 f303 	asr.w	r3, r2, r3
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d005      	beq.n	8000e66 <send+0x17e>
 8000e5a:	88ba      	ldrh	r2, [r7, #4]
 8000e5c:	89bb      	ldrh	r3, [r7, #12]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d901      	bls.n	8000e66 <send+0x17e>
 8000e62:	2300      	movs	r3, #0
 8000e64:	e030      	b.n	8000ec8 <send+0x1e0>
      if(len <= freesize) break;
 8000e66:	88ba      	ldrh	r2, [r7, #4]
 8000e68:	89bb      	ldrh	r3, [r7, #12]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d900      	bls.n	8000e70 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8000e6e:	e7cc      	b.n	8000e0a <send+0x122>
      if(len <= freesize) break;
 8000e70:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000e72:	88ba      	ldrh	r2, [r7, #4]
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	6839      	ldr	r1, [r7, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fb5b 	bl	8000534 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	3301      	adds	r3, #1
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff f9b1 	bl	80001f4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000e92:	bf00      	nop
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3301      	adds	r3, #1
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f95b 	bl	800015c <WIZCHIP_READ>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f3      	bne.n	8000e94 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <send+0x1e8>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <send+0x1e8>)
 8000ec4:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000066 	.word	0x20000066
 8000ed4:	20000064 	.word	0x20000064

08000ed8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	d902      	bls.n	8000efc <recv+0x24>
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e09b      	b.n	8001034 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	3301      	adds	r3, #1
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff f929 	bl	800015c <WIZCHIP_READ>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f003 030f 	and.w	r3, r3, #15
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d002      	beq.n	8000f1a <recv+0x42>
 8000f14:	f06f 0304 	mvn.w	r3, #4
 8000f18:	e08c      	b.n	8001034 <recv+0x15c>
   CHECK_SOCKDATA();
 8000f1a:	88bb      	ldrh	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <recv+0x4e>
 8000f20:	f06f 030d 	mvn.w	r3, #13
 8000f24:	e086      	b.n	8001034 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f912 	bl	800015c <WIZCHIP_READ>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	029b      	lsls	r3, r3, #10
 8000f3c:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8000f3e:	89ba      	ldrh	r2, [r7, #12]
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d201      	bcs.n	8000f4a <recv+0x72>
 8000f46:	89bb      	ldrh	r3, [r7, #12]
 8000f48:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff faa8 	bl	80004a2 <getSn_RX_RSR>
 8000f52:	4603      	mov	r3, r0
 8000f54:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f8fa 	bl	800015c <WIZCHIP_READ>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b17      	cmp	r3, #23
 8000f70:	d026      	beq.n	8000fc0 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b1c      	cmp	r3, #28
 8000f76:	d11c      	bne.n	8000fb2 <recv+0xda>
            {
               if(recvsize != 0) break;
 8000f78:	89bb      	ldrh	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d133      	bne.n	8000fe6 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa45 	bl	8000410 <getSn_TX_FSR>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461c      	mov	r4, r3
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	3301      	adds	r3, #1
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f8e0 	bl	800015c <WIZCHIP_READ>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	029b      	lsls	r3, r3, #10
 8000fa0:	429c      	cmp	r4, r3
 8000fa2:	d10d      	bne.n	8000fc0 <recv+0xe8>
               {
                  close(sn);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fd3c 	bl	8000a24 <close>
                  return SOCKERR_SOCKSTATUS;
 8000fac:	f06f 0306 	mvn.w	r3, #6
 8000fb0:	e040      	b.n	8001034 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fd35 	bl	8000a24 <close>
               return SOCKERR_SOCKSTATUS;
 8000fba:	f06f 0306 	mvn.w	r3, #6
 8000fbe:	e039      	b.n	8001034 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <recv+0x164>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	fa42 f303 	asr.w	r3, r2, r3
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <recv+0x106>
 8000fd4:	89bb      	ldrh	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <recv+0x106>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e02a      	b.n	8001034 <recv+0x15c>
         if(recvsize != 0) break;
 8000fde:	89bb      	ldrh	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8000fe4:	e7b1      	b.n	8000f4a <recv+0x72>
               if(recvsize != 0) break;
 8000fe6:	bf00      	nop
 8000fe8:	e000      	b.n	8000fec <recv+0x114>
         if(recvsize != 0) break;
 8000fea:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8000fec:	89ba      	ldrh	r2, [r7, #12]
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d201      	bcs.n	8000ff8 <recv+0x120>
 8000ff4:	89bb      	ldrh	r3, [r7, #12]
 8000ff6:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8000ff8:	88ba      	ldrh	r2, [r7, #4]
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff faf2 	bl	80005e8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	3301      	adds	r3, #1
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001010:	2140      	movs	r1, #64	@ 0x40
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f8ee 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001018:	bf00      	nop
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	3301      	adds	r3, #1
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f898 	bl	800015c <WIZCHIP_READ>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f3      	bne.n	800101a <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001032:	88bb      	ldrh	r3, [r7, #4]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}
 800103c:	20000064 	.word	0x20000064

08001040 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	78fa      	ldrb	r2, [r7, #3]
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	2300      	movs	r3, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	460b      	mov	r3, r1
 80010d0:	807b      	strh	r3, [r7, #2]
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
	...

080010f4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <reg_wizchip_cs_cbfunc+0x16>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <reg_wizchip_cs_cbfunc+0x3c>)
 800110c:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <reg_wizchip_cs_cbfunc+0x40>)
 800110e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <reg_wizchip_cs_cbfunc+0x3c>)
 8001112:	4a09      	ldr	r2, [pc, #36]	@ (8001138 <reg_wizchip_cs_cbfunc+0x44>)
 8001114:	619a      	str	r2, [r3, #24]
 8001116:	e006      	b.n	8001126 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001118:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <reg_wizchip_cs_cbfunc+0x3c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <reg_wizchip_cs_cbfunc+0x3c>)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	6193      	str	r3, [r2, #24]
   }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000004 	.word	0x20000004
 8001134:	08001059 	.word	0x08001059
 8001138:	08001065 	.word	0x08001065

0800113c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001146:	bf00      	nop
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <reg_wizchip_spi_cbfunc+0x4c>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f9      	beq.n	8001148 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <reg_wizchip_spi_cbfunc+0x24>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d106      	bne.n	800116e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <reg_wizchip_spi_cbfunc+0x4c>)
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <reg_wizchip_spi_cbfunc+0x50>)
 8001164:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <reg_wizchip_spi_cbfunc+0x4c>)
 8001168:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <reg_wizchip_spi_cbfunc+0x54>)
 800116a:	621a      	str	r2, [r3, #32]
 800116c:	e006      	b.n	800117c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800116e:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <reg_wizchip_spi_cbfunc+0x4c>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <reg_wizchip_spi_cbfunc+0x4c>)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	6213      	str	r3, [r2, #32]
   }
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000004 	.word	0x20000004
 800118c:	080010a5 	.word	0x080010a5
 8001190:	080010b3 	.word	0x080010b3

08001194 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800119e:	bf00      	nop
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f9      	beq.n	80011a0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <reg_wizchip_spiburst_cbfunc+0x24>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <reg_wizchip_spiburst_cbfunc+0x50>)
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011c0:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <reg_wizchip_spiburst_cbfunc+0x54>)
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80011c4:	e006      	b.n	80011d4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80011c6:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80011cc:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000004 	.word	0x20000004
 80011e4:	080010c7 	.word	0x080010c7
 80011e8:	080010dd 	.word	0x080010dd

080011ec <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f200 80c5 	bhi.w	8001396 <ctlwizchip+0x1aa>
 800120c:	a201      	add	r2, pc, #4	@ (adr r2, 8001214 <ctlwizchip+0x28>)
 800120e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001212:	bf00      	nop
 8001214:	08001255 	.word	0x08001255
 8001218:	0800125b 	.word	0x0800125b
 800121c:	08001287 	.word	0x08001287
 8001220:	0800127b 	.word	0x0800127b
 8001224:	08001295 	.word	0x08001295
 8001228:	080012a1 	.word	0x080012a1
 800122c:	080012af 	.word	0x080012af
 8001230:	080012d5 	.word	0x080012d5
 8001234:	080012f7 	.word	0x080012f7
 8001238:	0800133b 	.word	0x0800133b
 800123c:	08001341 	.word	0x08001341
 8001240:	08001349 	.word	0x08001349
 8001244:	0800139d 	.word	0x0800139d
 8001248:	08001351 	.word	0x08001351
 800124c:	0800135f 	.word	0x0800135f
 8001250:	0800137b 	.word	0x0800137b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001254:	f000 f8aa 	bl	80013ac <wizchip_sw_reset>
         break;
 8001258:	e0a1      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3308      	adds	r3, #8
 8001268:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f8e7 	bl	8001444 <wizchip_init>
 8001276:	4603      	mov	r3, r0
 8001278:	e092      	b.n	80013a0 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f96c 	bl	800155c <wizchip_clrinterrupt>
         break;
 8001284:	e08b      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8001286:	f000 f99d 	bl	80015c4 <wizchip_getinterrupt>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	801a      	strh	r2, [r3, #0]
         break;
 8001292:	e084      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f9b8 	bl	800160e <wizchip_setinterruptmask>
         break;         
 800129e:	e07e      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80012a0:	f000 f9d0 	bl	8001644 <wizchip_getinterruptmask>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	801a      	strh	r2, [r3, #0]
         break;
 80012ac:	e077      	b.n	800139e <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80012be:	f7fe ff99 	bl	80001f4 <WIZCHIP_WRITE>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80012ce:	f7fe ff91 	bl	80001f4 <WIZCHIP_WRITE>
         break;
 80012d2:	e064      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80012d4:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80012d8:	f7fe ff40 	bl	800015c <WIZCHIP_READ>
 80012dc:	4603      	mov	r3, r0
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b29c      	uxth	r4, r3
 80012e2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80012e6:	f7fe ff39 	bl	800015c <WIZCHIP_READ>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4423      	add	r3, r4
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	801a      	strh	r2, [r3, #0]
         break;
 80012f4:	e053      	b.n	800139e <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80012f6:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <ctlwizchip+0x1bc>)
 80012f8:	789a      	ldrb	r2, [r3, #2]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a29      	ldr	r2, [pc, #164]	@ (80013a8 <ctlwizchip+0x1bc>)
 8001304:	78d2      	ldrb	r2, [r2, #3]
 8001306:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	3302      	adds	r3, #2
 800130c:	4a26      	ldr	r2, [pc, #152]	@ (80013a8 <ctlwizchip+0x1bc>)
 800130e:	7912      	ldrb	r2, [r2, #4]
 8001310:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	3303      	adds	r3, #3
 8001316:	4a24      	ldr	r2, [pc, #144]	@ (80013a8 <ctlwizchip+0x1bc>)
 8001318:	7952      	ldrb	r2, [r2, #5]
 800131a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3304      	adds	r3, #4
 8001320:	4a21      	ldr	r2, [pc, #132]	@ (80013a8 <ctlwizchip+0x1bc>)
 8001322:	7992      	ldrb	r2, [r2, #6]
 8001324:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	3305      	adds	r3, #5
 800132a:	4a1f      	ldr	r2, [pc, #124]	@ (80013a8 <ctlwizchip+0x1bc>)
 800132c:	79d2      	ldrb	r2, [r2, #7]
 800132e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3306      	adds	r3, #6
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
         break;
 8001338:	e031      	b.n	800139e <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800133a:	f000 f9d5 	bl	80016e8 <wizphy_reset>
         break;
 800133e:	e02e      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f000 f9f8 	bl	8001736 <wizphy_setphyconf>
         break;
 8001346:	e02a      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8001348:	6838      	ldr	r0, [r7, #0]
 800134a:	f000 fa37 	bl	80017bc <wizphy_getphyconf>
         break;
 800134e:	e026      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fa9b 	bl	8001890 <wizphy_setphypmode>
 800135a:	4603      	mov	r3, r0
 800135c:	e020      	b.n	80013a0 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800135e:	f000 f9aa 	bl	80016b6 <wizphy_getphypmode>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	2bff      	cmp	r3, #255	@ 0xff
 800136a:	d102      	bne.n	8001372 <ctlwizchip+0x186>
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	e016      	b.n	80013a0 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	7dfa      	ldrb	r2, [r7, #23]
 8001376:	701a      	strb	r2, [r3, #0]
         break;
 8001378:	e011      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800137a:	f000 f986 	bl	800168a <wizphy_getphylink>
 800137e:	4603      	mov	r3, r0
 8001380:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	2bff      	cmp	r3, #255	@ 0xff
 8001386:	d102      	bne.n	800138e <ctlwizchip+0x1a2>
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	e008      	b.n	80013a0 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	7dfa      	ldrb	r2, [r7, #23]
 8001392:	701a      	strb	r2, [r3, #0]
         break;
 8001394:	e003      	b.n	800139e <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e001      	b.n	80013a0 <ctlwizchip+0x1b4>
         break;
 800139c:	bf00      	nop
   }
   return 0;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	20000004 	.word	0x20000004

080013ac <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2206      	movs	r2, #6
 80013b6:	4619      	mov	r1, r3
 80013b8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80013bc:	f7fe ff68 	bl	8000290 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2204      	movs	r2, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013cc:	f7fe ff60 	bl	8000290 <WIZCHIP_READ_BUF>
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	2204      	movs	r2, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80013dc:	f7fe ff58 	bl	8000290 <WIZCHIP_READ_BUF>
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2204      	movs	r2, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80013ec:	f7fe ff50 	bl	8000290 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7fe fefe 	bl	80001f4 <WIZCHIP_WRITE>
   getMR(); // for delay
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7fe feaf 	bl	800015c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2206      	movs	r2, #6
 8001402:	4619      	mov	r1, r3
 8001404:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001408:	f7fe ffa2 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2204      	movs	r2, #4
 8001412:	4619      	mov	r1, r3
 8001414:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001418:	f7fe ff9a 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	2204      	movs	r2, #4
 8001422:	4619      	mov	r1, r3
 8001424:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001428:	f7fe ff92 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2204      	movs	r2, #4
 8001432:	4619      	mov	r1, r3
 8001434:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001438:	f7fe ff8a 	bl	8000350 <WIZCHIP_WRITE_BUF>
}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001452:	f7ff ffab 	bl	80013ac <wizchip_sw_reset>
   if(txsize)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d03b      	beq.n	80014d4 <wizchip_init+0x90>
   {
      tmp = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e015      	b.n	8001492 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	4413      	add	r3, r2
 8001474:	b2db      	uxtb	r3, r3
 8001476:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800147c:	2b10      	cmp	r3, #16
 800147e:	dd02      	ble.n	8001486 <wizchip_init+0x42>
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	e066      	b.n	8001554 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	3301      	adds	r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	2b07      	cmp	r3, #7
 8001498:	dde5      	ble.n	8001466 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e015      	b.n	80014cc <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80014a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	3301      	adds	r3, #1
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80014ae:	4618      	mov	r0, r3
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7fe fe9a 	bl	80001f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	dde5      	ble.n	80014a0 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d03b      	beq.n	8001552 <wizchip_init+0x10e>
   {
      tmp = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	e015      	b.n	8001510 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	4413      	add	r3, r2
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80014f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	dd02      	ble.n	8001504 <wizchip_init+0xc0>
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e027      	b.n	8001554 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	3301      	adds	r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001514:	2b07      	cmp	r3, #7
 8001516:	dde5      	ble.n	80014e4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e015      	b.n	800154a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	3301      	adds	r3, #1
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800152c:	4618      	mov	r0, r3
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f7fe fe5b 	bl	80001f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	3301      	adds	r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	2b07      	cmp	r3, #7
 8001550:	dde5      	ble.n	800151e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b29b      	uxth	r3, r3
 8001570:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	f023 030f 	bic.w	r3, r3, #15
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4619      	mov	r1, r3
 800157c:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8001580:	f7fe fe38 	bl	80001f4 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e014      	b.n	80015b4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800158a:	7bba      	ldrb	r2, [r7, #14]
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	fa42 f303 	asr.w	r3, r2, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d009      	beq.n	80015ae <wizchip_clrinterrupt+0x52>
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	3301      	adds	r3, #1
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015a6:	211f      	movs	r1, #31
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe fe23 	bl	80001f4 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	3301      	adds	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	d9e7      	bls.n	800158a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80015ba:	bf00      	nop
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80015d6:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80015da:	f7fe fdbf 	bl	800015c <WIZCHIP_READ>
 80015de:	4603      	mov	r3, r0
 80015e0:	f023 030f 	bic.w	r3, r3, #15
 80015e4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80015e6:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80015ea:	f7fe fdb7 	bl	800015c <WIZCHIP_READ>
 80015ee:	4603      	mov	r3, r0
 80015f0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001604:	88bb      	ldrh	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	b29b      	uxth	r3, r3
 8001622:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	4619      	mov	r1, r3
 8001628:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800162c:	f7fe fde2 	bl	80001f4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001630:	7bbb      	ldrb	r3, [r7, #14]
 8001632:	4619      	mov	r1, r3
 8001634:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001638:	f7fe fddc 	bl	80001f4 <WIZCHIP_WRITE>
#endif   
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8001656:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800165a:	f7fe fd7f 	bl	800015c <WIZCHIP_READ>
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8001662:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001666:	f7fe fd79 	bl	800015c <WIZCHIP_READ>
 800166a:	4603      	mov	r3, r0
 800166c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8001672:	88bb      	ldrh	r3, [r7, #4]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b29a      	uxth	r2, r3
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4413      	add	r3, r2
 800167e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001680:	88bb      	ldrh	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8001690:	2300      	movs	r3, #0
 8001692:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001694:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001698:	f7fe fd60 	bl	800015c <WIZCHIP_READ>
 800169c:	4603      	mov	r3, r0
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80016a6:	2301      	movs	r3, #1
 80016a8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80016c0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016c4:	f7fe fd4a 	bl	800015c <WIZCHIP_READ>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016ce:	2b30      	cmp	r3, #48	@ 0x30
 80016d0:	d102      	bne.n	80016d8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80016d2:	2301      	movs	r3, #1
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	e001      	b.n	80016dc <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80016d8:	2300      	movs	r3, #0
 80016da:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80016ee:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016f2:	f7fe fd33 	bl	800015c <WIZCHIP_READ>
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001700:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800170a:	f7fe fd73 	bl	80001f4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800170e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001712:	f7fe fd23 	bl	800015c <WIZCHIP_READ>
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001720:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800172a:	f7fe fd63 	bl	80001f4 <WIZCHIP_WRITE>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d104      	bne.n	8001754 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e003      	b.n	800175c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800175a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	785b      	ldrb	r3, [r3, #1]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d104      	bne.n	800176e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e019      	b.n	80017a2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	78db      	ldrb	r3, [r3, #3]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10d      	bne.n	8001792 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	789b      	ldrb	r3, [r3, #2]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d104      	bne.n	8001788 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	f043 0318 	orr.w	r3, r3, #24
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e00c      	b.n	80017a2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e007      	b.n	80017a2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	789b      	ldrb	r3, [r3, #2]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d103      	bne.n	80017a2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017aa:	f7fe fd23 	bl	80001f4 <WIZCHIP_WRITE>
   wizphy_reset();
 80017ae:	f7ff ff9b 	bl	80016e8 <wizphy_reset>
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80017c8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017cc:	f7fe fcc6 	bl	800015c <WIZCHIP_READ>
 80017d0:	4603      	mov	r3, r0
 80017d2:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	119b      	asrs	r3, r3, #6
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	d001      	beq.n	80017f2 <wizphy_getphyconf+0x36>
 80017ee:	2b38      	cmp	r3, #56	@ 0x38
 80017f0:	d103      	bne.n	80017fa <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	705a      	strb	r2, [r3, #1]
         break;
 80017f8:	e003      	b.n	8001802 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	705a      	strb	r2, [r3, #1]
         break;
 8001800:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001808:	3b10      	subs	r3, #16
 800180a:	2b10      	cmp	r3, #16
 800180c:	bf8c      	ite	hi
 800180e:	2201      	movhi	r2, #1
 8001810:	2200      	movls	r2, #0
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	2a00      	cmp	r2, #0
 8001816:	d10f      	bne.n	8001838 <wizphy_getphyconf+0x7c>
 8001818:	4a1b      	ldr	r2, [pc, #108]	@ (8001888 <wizphy_getphyconf+0xcc>)
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	bf14      	ite	ne
 8001826:	2301      	movne	r3, #1
 8001828:	2300      	moveq	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	709a      	strb	r2, [r3, #2]
         break;
 8001836:	e003      	b.n	8001840 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	709a      	strb	r2, [r3, #2]
         break;
 800183e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001846:	3b08      	subs	r3, #8
 8001848:	2b18      	cmp	r3, #24
 800184a:	bf8c      	ite	hi
 800184c:	2201      	movhi	r2, #1
 800184e:	2200      	movls	r2, #0
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	2a00      	cmp	r2, #0
 8001854:	d10f      	bne.n	8001876 <wizphy_getphyconf+0xba>
 8001856:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <wizphy_getphyconf+0xd0>)
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	70da      	strb	r2, [r3, #3]
         break;
 8001874:	e003      	b.n	800187e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	70da      	strb	r2, [r3, #3]
         break;
 800187c:	bf00      	nop
   }
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	00010101 	.word	0x00010101
 800188c:	01010001 	.word	0x01010001

08001890 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800189e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018a2:	f7fe fc5b 	bl	800015c <WIZCHIP_READ>
 80018a6:	4603      	mov	r3, r0
 80018a8:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <wizphy_setphypmode+0x2a>
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	e030      	b.n	800191c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80018c0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d104      	bne.n	80018d2 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e003      	b.n	80018da <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80018d8:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018e2:	f7fe fc87 	bl	80001f4 <WIZCHIP_WRITE>
   wizphy_reset();
 80018e6:	f7ff feff 	bl	80016e8 <wizphy_reset>
   tmp = getPHYCFGR();
 80018ea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018ee:	f7fe fc35 	bl	800015c <WIZCHIP_READ>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <wizphy_setphypmode+0x88>
 8001906:	2300      	movs	r3, #0
 8001908:	e008      	b.n	800191c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <wizphy_setphypmode+0x88>
 8001914:	2300      	movs	r3, #0
 8001916:	e001      	b.n	800191c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2206      	movs	r2, #6
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001936:	f7fe fd0b 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330e      	adds	r3, #14
 800193e:	2204      	movs	r2, #4
 8001940:	4619      	mov	r1, r3
 8001942:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001946:	f7fe fd03 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	330a      	adds	r3, #10
 800194e:	2204      	movs	r2, #4
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001956:	f7fe fcfb 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3306      	adds	r3, #6
 800195e:	2204      	movs	r2, #4
 8001960:	4619      	mov	r1, r3
 8001962:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001966:	f7fe fcf3 	bl	8000350 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7c9a      	ldrb	r2, [r3, #18]
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <wizchip_setnetinfo+0x78>)
 8001970:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7cda      	ldrb	r2, [r3, #19]
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <wizchip_setnetinfo+0x78>)
 8001978:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7d1a      	ldrb	r2, [r3, #20]
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <wizchip_setnetinfo+0x78>)
 8001980:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7d5a      	ldrb	r2, [r3, #21]
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <wizchip_setnetinfo+0x78>)
 8001988:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7d9a      	ldrb	r2, [r3, #22]
 800198e:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <wizchip_setnetinfo+0x7c>)
 8001990:	701a      	strb	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000084 	.word	0x20000084
 80019a0:	20000088 	.word	0x20000088

080019a4 <csLOW>:
#include "main.h"
#include "W25Qxx.h"

uint8_t tempBytes[4];
void csLOW(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ae:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <csLOW+0x14>)
 80019b0:	f005 f8db 	bl	8006b6a <HAL_GPIO_WritePin>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40010c00 	.word	0x40010c00

080019bc <csHIGH>:
void csHIGH(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019c6:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <csHIGH+0x14>)
 80019c8:	f005 f8cf 	bl	8006b6a <HAL_GPIO_WritePin>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010c00 	.word	0x40010c00

080019d4 <W25Q_delay>:
void W25Q_delay(uint32_t time)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f003 fa65 	bl	8004eac <HAL_Delay>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <SPI_Write>:
void SPI_Write(uint8_t *data, uint16_t len)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 80019f8:	887a      	ldrh	r2, [r7, #2]
 80019fa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <SPI_Write+0x24>)
 8001a02:	f005 fde5 	bl	80075d0 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&W25Q_SPI, data, len);
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000128 	.word	0x20000128

08001a14 <SPI_Read>:
void SPI_Read(uint8_t *data, uint16_t len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4803      	ldr	r0, [pc, #12]	@ (8001a38 <SPI_Read+0x24>)
 8001a2a:	f005 ff15 	bl	8007858 <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&W25Q_SPI, data, len);
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000128 	.word	0x20000128

08001a3c <W25Q_WaitForWriteEnd>:
//	uint8_t	ret;
//	HAL_SPI_TransmitReceive(&W25Q_SPI,&Data,&ret,1,100);
//	return ret;
//}
void W25Q_WaitForWriteEnd(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
	uint8_t w25q_stt;
	uint8_t tData = 0x05;
 8001a42:	2305      	movs	r3, #5
 8001a44:	71bb      	strb	r3, [r7, #6]
	W25Q_delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff ffc4 	bl	80019d4 <W25Q_delay>

	csLOW();
 8001a4c:	f7ff ffaa 	bl	80019a4 <csLOW>
	HAL_SPI_Transmit(&W25Q_SPI, &tData, 1, 1000);
 8001a50:	1db9      	adds	r1, r7, #6
 8001a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a56:	2201      	movs	r2, #1
 8001a58:	480b      	ldr	r0, [pc, #44]	@ (8001a88 <W25Q_WaitForWriteEnd+0x4c>)
 8001a5a:	f005 fdb9 	bl	80075d0 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&W25Q_SPI, &tData, 1);
	do
	{
		HAL_SPI_Receive(&W25Q_SPI, &w25q_stt, 1, 1000);
 8001a5e:	1df9      	adds	r1, r7, #7
 8001a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a64:	2201      	movs	r2, #1
 8001a66:	4808      	ldr	r0, [pc, #32]	@ (8001a88 <W25Q_WaitForWriteEnd+0x4c>)
 8001a68:	f005 fef6 	bl	8007858 <HAL_SPI_Receive>
//		HAL_SPI_Receive_DMA(&W25Q_SPI, &w25q_stt, 1);
		W25Q_delay(1);
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f7ff ffb1 	bl	80019d4 <W25Q_delay>
	}
	while ((w25q_stt & 0x01) == 0x01);
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <W25Q_WaitForWriteEnd+0x22>
	csHIGH();
 8001a7c:	f7ff ff9e 	bl	80019bc <csHIGH>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000128 	.word	0x20000128

08001a8c <W25Q_Reset>:
void W25Q_Reset (void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x66; //  enable reset
 8001a92:	2366      	movs	r3, #102	@ 0x66
 8001a94:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99; //reset
 8001a96:	2399      	movs	r3, #153	@ 0x99
 8001a98:	717b      	strb	r3, [r7, #5]
	csLOW();
 8001a9a:	f7ff ff83 	bl	80019a4 <csLOW>
	HAL_SPI_Transmit(&W25Q_SPI, tData, 2, 1000);
 8001a9e:	1d39      	adds	r1, r7, #4
 8001aa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4804      	ldr	r0, [pc, #16]	@ (8001ab8 <W25Q_Reset+0x2c>)
 8001aa8:	f005 fd92 	bl	80075d0 <HAL_SPI_Transmit>
	csHIGH();
 8001aac:	f7ff ff86 	bl	80019bc <csHIGH>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000128 	.word	0x20000128

08001abc <W25Q_FastRead>:
	}
	SPI_Read(rData, size);
	csHIGH();
}
void W25Q_FastRead(uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
 8001ad0:	7afb      	ldrb	r3, [r7, #11]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	61fb      	str	r3, [r7, #28]
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x0B;// enable fast read
 8001ad6:	230b      	movs	r3, #11
 8001ad8:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	763b      	strb	r3, [r7, #24]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;// LSB addr;
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		tData[5] = 0;
	}
	csLOW();
 8001af4:	f7ff ff56 	bl	80019a4 <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 5);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2105      	movs	r1, #5
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff74 	bl	80019ec <SPI_Write>
	} else
	{
		SPI_Write(tData, 6);
	}
	SPI_Read(rData, size);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6838      	ldr	r0, [r7, #0]
 8001b0c:	f7ff ff82 	bl	8001a14 <SPI_Read>
	csHIGH();
 8001b10:	f7ff ff54 	bl	80019bc <csHIGH>
}
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <W25Q_FastRead_address>:

void W25Q_FastRead_address(uint32_t memAddr, uint32_t size, uint8_t *rData)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
	uint8_t tData[6];
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x0B;// enable fast read
 8001b28:	230b      	movs	r3, #11
 8001b2a:	743b      	strb	r3, [r7, #16]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	0c1b      	lsrs	r3, r3, #16
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	747b      	strb	r3, [r7, #17]
		tData[2] = (memAddr>>8)&0xFF;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	74bb      	strb	r3, [r7, #18]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	74fb      	strb	r3, [r7, #19]
		tData[4] = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	753b      	strb	r3, [r7, #20]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;// LSB addr;
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		tData[5] = 0;
	}
	csLOW();
 8001b46:	f7ff ff2d 	bl	80019a4 <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 5);
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	2105      	movs	r1, #5
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff4b 	bl	80019ec <SPI_Write>
	} else
	{
		SPI_Write(tData, 6);
	}
	SPI_Read(rData, size);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff59 	bl	8001a14 <SPI_Read>
	csHIGH();
 8001b62:	f7ff ff2b 	bl	80019bc <csHIGH>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <write_enable>:


void write_enable(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06; // enable write
 8001b74:	2306      	movs	r3, #6
 8001b76:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001b78:	f7ff ff14 	bl	80019a4 <csLOW>
	SPI_Write(&tData, 1);
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff33 	bl	80019ec <SPI_Write>
	csHIGH();
 8001b86:	f7ff ff19 	bl	80019bc <csHIGH>
	W25Q_delay(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff ff22 	bl	80019d4 <W25Q_delay>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <write_disable>:
void write_disable(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04; // disable write
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001ba2:	f7ff feff 	bl	80019a4 <csLOW>
	SPI_Write(&tData, 1);
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff1e 	bl	80019ec <SPI_Write>
	csHIGH();
 8001bb0:	f7ff ff04 	bl	80019bc <csHIGH>
	W25Q_delay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff ff0d 	bl	80019d4 <W25Q_delay>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <W25Q_EraseChip>:
{
	if ((size+offset)<4096) return size;
	else return 4096-offset;
}
void W25Q_EraseChip(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
	uint8_t tData = 0xC7;
 8001bc8:	23c7      	movs	r3, #199	@ 0xc7
 8001bca:	71fb      	strb	r3, [r7, #7]
	write_enable();
 8001bcc:	f7ff ffcf 	bl	8001b6e <write_enable>
	csLOW();
 8001bd0:	f7ff fee8 	bl	80019a4 <csLOW>
	SPI_Write(&tData, 1);
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff07 	bl	80019ec <SPI_Write>
	csHIGH();
 8001bde:	f7ff feed 	bl	80019bc <csHIGH>
	W25Q_WaitForWriteEnd();
 8001be2:	f7ff ff2b 	bl	8001a3c <W25Q_WaitForWriteEnd>
	W25Q_delay(5);
 8001be6:	2005      	movs	r0, #5
 8001be8:	f7ff fef4 	bl	80019d4 <W25Q_delay>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <W25Q_Erase_Sector>:
void W25Q_Erase_Sector (uint16_t numsector)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256; // mỗi sector có 16 page * 256 byte
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	031b      	lsls	r3, r3, #12
 8001c02:	617b      	str	r3, [r7, #20]
	W25Q_WaitForWriteEnd();
 8001c04:	f7ff ff1a 	bl	8001a3c <W25Q_WaitForWriteEnd>
	write_enable();
 8001c08:	f7ff ffb1 	bl	8001b6e <write_enable>
	if (numBLOCK<512)
	{
		tData[0] = 0x20;//Erase sector
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	0c1b      	lsrs	r3, r3, #16
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	73fb      	strb	r3, [r7, #15]
		csLOW();
 8001c26:	f7ff febd 	bl	80019a4 <csLOW>
		SPI_Write(tData, 4);
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2104      	movs	r1, #4
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fedb 	bl	80019ec <SPI_Write>
		csHIGH();
 8001c36:	f7ff fec1 	bl	80019bc <csHIGH>
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		csLOW();
		SPI_Write(tData, 5);
		csHIGH();
	}
	W25Q_WaitForWriteEnd();
 8001c3a:	f7ff feff 	bl	8001a3c <W25Q_WaitForWriteEnd>
	write_disable();
 8001c3e:	f7ff ffab 	bl	8001b98 <write_disable>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <W25Q_Read_Byte>:
		dataindx = dataindx + bytesRemaining;
		size = size - bytesRemaining;
	}
}
uint8_t W25Q_Read_Byte(uint32_t Addr)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	uint8_t tData[5];
	uint8_t rData;
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x03;// enable read
 8001c52:	2303      	movs	r3, #3
 8001c54:	743b      	strb	r3, [r7, #16]
		tData[1] = (Addr>>16)&0xFF;// MSB addr
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	747b      	strb	r3, [r7, #17]
		tData[2] = (Addr>>8)&0xFF;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	74bb      	strb	r3, [r7, #18]
		tData[3] = (Addr>>0)&0xFF;// LSB addr
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	74fb      	strb	r3, [r7, #19]
		tData[1] = (Addr>>24)&0xFF;// MSB addr
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;// LSB addr;
		tData[4] = (Addr>>0)&0xFF;// LSB addr
	}
	csLOW();
 8001c6c:	f7ff fe9a 	bl	80019a4 <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 4);
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	2104      	movs	r1, #4
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff feb8 	bl	80019ec <SPI_Write>
	} else
	{
		SPI_Write(tData, 5);
	}
	SPI_Read(&rData, 1);
 8001c7c:	f107 030f 	add.w	r3, r7, #15
 8001c80:	2101      	movs	r1, #1
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fec6 	bl	8001a14 <SPI_Read>
	csHIGH();
 8001c88:	f7ff fe98 	bl	80019bc <csHIGH>
	return rData;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <W25Q_Write_Nbytes>:
		W25Q_WaitForWriteEnd();
		write_disable();
	}
}
void W25Q_Write_Nbytes(uint32_t Addr, uint8_t *data, uint32_t len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b0c8      	sub	sp, #288	@ 0x120
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ca0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ca4:	6018      	str	r0, [r3, #0]
 8001ca6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001caa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001cae:	6019      	str	r1, [r3, #0]
 8001cb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cb4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cb8:	601a      	str	r2, [r3, #0]
	uint8_t tData[266];
	uint8_t indx;
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x02;// enable read
 8001cba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cbe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	701a      	strb	r2, [r3, #0]
		tData[1] = (Addr>>16)&0xFF;// MSB addr
 8001cc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cd8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cdc:	705a      	strb	r2, [r3, #1]
		tData[2] = (Addr>>8)&0xFF;
 8001cde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ce2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cf0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cf4:	709a      	strb	r2, [r3, #2]
		tData[3] = (Addr>>0)&0xFF;// LSB addr
 8001cf6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cfa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d06:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d0a:	70da      	strb	r2, [r3, #3]
		indx = 4;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;// LSB addr;
		tData[4] = (Addr>>0)&0xFF;// LSB addr
		indx = 5;
	}
	uint16_t bytestosend = len + indx;
 8001d12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d1c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
	for (uint16_t i=0; i<len; i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8001d30:	e018      	b.n	8001d64 <W25Q_Write_Nbytes+0xce>
	{
		tData[indx++] = data[i];
 8001d32:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d36:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d3a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	441a      	add	r2, r3
 8001d42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001d46:	1c59      	adds	r1, r3, #1
 8001d48:	f887 111f 	strb.w	r1, [r7, #287]	@ 0x11f
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d58:	545a      	strb	r2, [r3, r1]
	for (uint16_t i=0; i<len; i++)
 8001d5a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8001d64:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d68:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d6c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d8dd      	bhi.n	8001d32 <W25Q_Write_Nbytes+0x9c>
	}
	if (W25Q_Read_Byte(Addr) == 0xFF)
 8001d76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	f7ff ff63 	bl	8001c4a <W25Q_Read_Byte>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2bff      	cmp	r3, #255	@ 0xff
 8001d88:	d12b      	bne.n	8001de2 <W25Q_Write_Nbytes+0x14c>
	{
		write_enable();
 8001d8a:	f7ff fef0 	bl	8001b6e <write_enable>
		if (bytestosend > 250)
 8001d8e:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8001d92:	2bfa      	cmp	r3, #250	@ 0xfa
 8001d94:	d915      	bls.n	8001dc2 <W25Q_Write_Nbytes+0x12c>
		{
			csLOW();
 8001d96:	f7ff fe05 	bl	80019a4 <csLOW>
			SPI_Write(tData, 100);
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	2164      	movs	r1, #100	@ 0x64
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fe23 	bl	80019ec <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 8001da6:	f107 0310 	add.w	r3, r7, #16
 8001daa:	3364      	adds	r3, #100	@ 0x64
 8001dac:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8001db0:	3a64      	subs	r2, #100	@ 0x64
 8001db2:	b292      	uxth	r2, r2
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fe18 	bl	80019ec <SPI_Write>
			csHIGH();
 8001dbc:	f7ff fdfe 	bl	80019bc <csHIGH>
 8001dc0:	e00b      	b.n	8001dda <W25Q_Write_Nbytes+0x144>
		} else
		{
			csLOW();
 8001dc2:	f7ff fdef 	bl	80019a4 <csLOW>
			SPI_Write(tData, bytestosend);
 8001dc6:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fe0b 	bl	80019ec <SPI_Write>
			csHIGH();
 8001dd6:	f7ff fdf1 	bl	80019bc <csHIGH>
		}
//		W25Q_delay(5);
		W25Q_WaitForWriteEnd();
 8001dda:	f7ff fe2f 	bl	8001a3c <W25Q_WaitForWriteEnd>
		write_disable();
 8001dde:	f7ff fedb 	bl	8001b98 <write_disable>
	}
}
 8001de2:	bf00      	nop
 8001de4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == huart1.Instance)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef4 <HAL_UARTEx_RxEventCallback+0x108>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d165      	bne.n	8001ed0 <HAL_UARTEx_RxEventCallback+0xe4>
	{
		heardbit_REB = HAL_GetTick(); // Heard bit from REB
 8001e04:	f003 f848 	bl	8004e98 <HAL_GetTick>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef8 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001e0c:	6013      	str	r3, [r2, #0]
		switch (uart_data[0])
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001efc <HAL_UARTEx_RxEventCallback+0x110>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b43      	cmp	r3, #67	@ 0x43
 8001e14:	d03d      	beq.n	8001e92 <HAL_UARTEx_RxEventCallback+0xa6>
 8001e16:	2b44      	cmp	r3, #68	@ 0x44
 8001e18:	d15a      	bne.n	8001ed0 <HAL_UARTEx_RxEventCallback+0xe4>
		{
		case 0x44: //Data: D
			wcode = uart_data[1]<<24|uart_data[2]<<16|uart_data[3]<<8|uart_data[4];
 8001e1a:	4b38      	ldr	r3, [pc, #224]	@ (8001efc <HAL_UARTEx_RxEventCallback+0x110>)
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	061a      	lsls	r2, r3, #24
 8001e20:	4b36      	ldr	r3, [pc, #216]	@ (8001efc <HAL_UARTEx_RxEventCallback+0x110>)
 8001e22:	789b      	ldrb	r3, [r3, #2]
 8001e24:	041b      	lsls	r3, r3, #16
 8001e26:	431a      	orrs	r2, r3
 8001e28:	4b34      	ldr	r3, [pc, #208]	@ (8001efc <HAL_UARTEx_RxEventCallback+0x110>)
 8001e2a:	78db      	ldrb	r3, [r3, #3]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <HAL_UARTEx_RxEventCallback+0x110>)
 8001e32:	7912      	ldrb	r2, [r2, #4]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b31      	ldr	r3, [pc, #196]	@ (8001f00 <HAL_UARTEx_RxEventCallback+0x114>)
 8001e3a:	601a      	str	r2, [r3, #0]
			if (!write_mode && !write_mode_somecard && !write_card_by_hand)
 8001e3c:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <HAL_UARTEx_RxEventCallback+0x118>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01b      	beq.n	8001e82 <HAL_UARTEx_RxEventCallback+0x96>
 8001e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f08 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	f083 0301 	eor.w	r3, r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d014      	beq.n	8001e82 <HAL_UARTEx_RxEventCallback+0x96>
 8001e58:	4b2c      	ldr	r3, [pc, #176]	@ (8001f0c <HAL_UARTEx_RxEventCallback+0x120>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f083 0301 	eor.w	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00d      	beq.n	8001e82 <HAL_UARTEx_RxEventCallback+0x96>
			{
				sendData_eth("D", wcode);
 8001e66:	4b26      	ldr	r3, [pc, #152]	@ (8001f00 <HAL_UARTEx_RxEventCallback+0x114>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4828      	ldr	r0, [pc, #160]	@ (8001f10 <HAL_UARTEx_RxEventCallback+0x124>)
 8001e6e:	f001 ff63 	bl	8003d38 <sendData_eth>
				isSendDataEth = true;
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <HAL_UARTEx_RxEventCallback+0x128>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
				timeSendDataEth = HAL_GetTick();
 8001e78:	f003 f80e 	bl	8004e98 <HAL_GetTick>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a26      	ldr	r2, [pc, #152]	@ (8001f18 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001e80:	6013      	str	r3, [r2, #0]
			}
			if (write_card_by_hand)
 8001e82:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <HAL_UARTEx_RxEventCallback+0x120>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d021      	beq.n	8001ece <HAL_UARTEx_RxEventCallback+0xe2>
			{
				new_wcode = true;
 8001e8a:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_UARTEx_RxEventCallback+0x130>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e90:	e01d      	b.n	8001ece <HAL_UARTEx_RxEventCallback+0xe2>
		case 0x43://Comand: C
//			send_uart_to_REB = true;
			if (send_uart_to_REB)
 8001e92:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_UARTEx_RxEventCallback+0x134>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_UARTEx_RxEventCallback+0xc2>
			{
				send_uart_to_REB = false;
 8001e9a:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <HAL_UARTEx_RxEventCallback+0x134>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
				sendData_uart("I", send_uart);
 8001ea0:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x138>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4820      	ldr	r0, [pc, #128]	@ (8001f28 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001ea8:	f002 f8c8 	bl	800403c <sendData_uart>
 8001eac:	e005      	b.n	8001eba <HAL_UARTEx_RxEventCallback+0xce>
			} else
			{
				sendData_uart("I", uart_bypass);
 8001eae:	4b1f      	ldr	r3, [pc, #124]	@ (8001f2c <HAL_UARTEx_RxEventCallback+0x140>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	481c      	ldr	r0, [pc, #112]	@ (8001f28 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001eb6:	f002 f8c1 	bl	800403c <sendData_uart>
			}
//			time_send_uart = HAL_GetTick();
			bypass_from_REB = uart_data[4];
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <HAL_UARTEx_RxEventCallback+0x110>)
 8001ebc:	791b      	ldrb	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf14      	ite	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <HAL_UARTEx_RxEventCallback+0x144>)
 8001eca:	701a      	strb	r2, [r3, #0]
			break;
 8001ecc:	e000      	b.n	8001ed0 <HAL_UARTEx_RxEventCallback+0xe4>
			break;
 8001ece:	bf00      	nop
		}
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 50);
 8001ed0:	2232      	movs	r2, #50	@ 0x32
 8001ed2:	490a      	ldr	r1, [pc, #40]	@ (8001efc <HAL_UARTEx_RxEventCallback+0x110>)
 8001ed4:	4807      	ldr	r0, [pc, #28]	@ (8001ef4 <HAL_UARTEx_RxEventCallback+0x108>)
 8001ed6:	f006 fd58 	bl	800898a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001eda:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <HAL_UARTEx_RxEventCallback+0x148>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <HAL_UARTEx_RxEventCallback+0x148>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0204 	bic.w	r2, r2, #4
 8001ee8:	601a      	str	r2, [r3, #0]
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000210 	.word	0x20000210
 8001ef8:	200006b4 	.word	0x200006b4
 8001efc:	200002d0 	.word	0x200002d0
 8001f00:	2000058c 	.word	0x2000058c
 8001f04:	2000071f 	.word	0x2000071f
 8001f08:	2000071e 	.word	0x2000071e
 8001f0c:	20000727 	.word	0x20000727
 8001f10:	080098dc 	.word	0x080098dc
 8001f14:	2000071d 	.word	0x2000071d
 8001f18:	200006b8 	.word	0x200006b8
 8001f1c:	20000723 	.word	0x20000723
 8001f20:	2000072b 	.word	0x2000072b
 8001f24:	20000580 	.word	0x20000580
 8001f28:	080098e0 	.word	0x080098e0
 8001f2c:	20000030 	.word	0x20000030
 8001f30:	200006d8 	.word	0x200006d8
 8001f34:	20000258 	.word	0x20000258

08001f38 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RST_Pin)
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	2b40      	cmp	r3, #64	@ 0x40
 8001f46:	d145      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x9c>
	{
		HAL_Delay(20);
 8001f48:	2014      	movs	r0, #20
 8001f4a:	f002 ffaf 	bl	8004eac <HAL_Delay>
		if (HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin) == 0)
 8001f4e:	2140      	movs	r1, #64	@ 0x40
 8001f50:	4822      	ldr	r0, [pc, #136]	@ (8001fdc <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f52:	f004 fdf3 	bl	8006b3c <HAL_GPIO_ReadPin>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d13b      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x9c>
		{
			RST_set = true;
 8001f5c:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
			RST_timer = HAL_GetTick();
 8001f62:	f002 ff99 	bl	8004e98 <HAL_GetTick>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001f6a:	6013      	str	r3, [r2, #0]
			count_RST = 2000;
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001f6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001f72:	601a      	str	r2, [r3, #0]
			while (!HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin))
 8001f74:	e027      	b.n	8001fc6 <HAL_GPIO_EXTI_Callback+0x8e>
			{
				RST_timer_last = HAL_GetTick() - RST_timer;
 8001f76:	f002 ff8f 	bl	8004e98 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	4a1a      	ldr	r2, [pc, #104]	@ (8001fec <HAL_GPIO_EXTI_Callback+0xb4>)
 8001f84:	6013      	str	r3, [r2, #0]
//				if ((RST_timer_last > 5000) && (RST_timer_last < 10000))
//				{
//					count_RST = 500;
//				} else
				if (RST_timer_last > 10000)
 8001f86:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_GPIO_EXTI_Callback+0xb4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d902      	bls.n	8001f98 <HAL_GPIO_EXTI_Callback+0x60>
				{
					count_RST = 100;
 8001f92:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001f94:	2264      	movs	r2, #100	@ 0x64
 8001f96:	601a      	str	r2, [r3, #0]
				}
				if (HAL_GetTick() - RST_timer_now > count_RST)
 8001f98:	f002 ff7e 	bl	8004e98 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	1ad2      	subs	r2, r2, r3
 8001fa4:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d909      	bls.n	8001fc0 <HAL_GPIO_EXTI_Callback+0x88>
				{
					RST_timer_now = HAL_GetTick();
 8001fac:	f002 ff74 	bl	8004e98 <HAL_GetTick>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001fb4:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8001fb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fba:	480e      	ldr	r0, [pc, #56]	@ (8001ff4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001fbc:	f004 fded 	bl	8006b9a <HAL_GPIO_TogglePin>
				}
				HAL_Delay(10);
 8001fc0:	200a      	movs	r0, #10
 8001fc2:	f002 ff73 	bl	8004eac <HAL_Delay>
			while (!HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin))
 8001fc6:	2140      	movs	r1, #64	@ 0x40
 8001fc8:	4804      	ldr	r0, [pc, #16]	@ (8001fdc <HAL_GPIO_EXTI_Callback+0xa4>)
 8001fca:	f004 fdb7 	bl	8006b3c <HAL_GPIO_ReadPin>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0d0      	beq.n	8001f76 <HAL_GPIO_EXTI_Callback+0x3e>
			}
		}
	}
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40010c00 	.word	0x40010c00
 8001fe0:	20000729 	.word	0x20000729
 8001fe4:	200006c0 	.word	0x200006c0
 8001fe8:	200006cc 	.word	0x200006cc
 8001fec:	200006c8 	.word	0x200006c8
 8001ff0:	200006c4 	.word	0x200006c4
 8001ff4:	40011000 	.word	0x40011000

08001ff8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b48      	ldr	r3, [pc, #288]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d169      	bne.n	80020e0 <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		// calculator data
		if (counter_start < time_delay)
 800200c:	4b47      	ldr	r3, [pc, #284]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	4b47      	ldr	r3, [pc, #284]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d205      	bcs.n	8002024 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			counter_start++;
 8002018:	4b44      	ldr	r3, [pc, #272]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	b2da      	uxtb	r2, r3
 8002020:	4b42      	ldr	r3, [pc, #264]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002022:	701a      	strb	r2, [r3, #0]
		}
		if (write_mode || write_mode_somecard || unlock_fire || bypass_from_Eth || bypass_from_REB || !REB_connected || !HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin))
 8002024:	4b43      	ldr	r3, [pc, #268]	@ (8002134 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d11d      	bne.n	8002068 <HAL_TIM_PeriodElapsedCallback+0x70>
 800202c:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d119      	bne.n	8002068 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002034:	4b41      	ldr	r3, [pc, #260]	@ (800213c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d115      	bne.n	8002068 <HAL_TIM_PeriodElapsedCallback+0x70>
 800203c:	4b40      	ldr	r3, [pc, #256]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d111      	bne.n	8002068 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002044:	4b3f      	ldr	r3, [pc, #252]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10d      	bne.n	8002068 <HAL_TIM_PeriodElapsedCallback+0x70>
 800204c:	4b3e      	ldr	r3, [pc, #248]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_TIM_PeriodElapsedCallback+0x70>
 800205a:	2104      	movs	r1, #4
 800205c:	483b      	ldr	r0, [pc, #236]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800205e:	f004 fd6d 	bl	8006b3c <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d121      	bne.n	80020ac <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
			data_MC2B[0] = 1;
 8002068:	4b39      	ldr	r3, [pc, #228]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
			data_MC2B[1] = 0;
 800206e:	4b38      	ldr	r3, [pc, #224]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002070:	2200      	movs	r2, #0
 8002072:	705a      	strb	r2, [r3, #1]
			data_MC2B[2] = 0;
 8002074:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002076:	2200      	movs	r2, #0
 8002078:	709a      	strb	r2, [r3, #2]
			data_MC2B[3] = 0;
 800207a:	4b35      	ldr	r3, [pc, #212]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800207c:	2200      	movs	r2, #0
 800207e:	70da      	strb	r2, [r3, #3]
			data_MC2B[4] = 0;
 8002080:	4b33      	ldr	r3, [pc, #204]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002082:	2200      	movs	r2, #0
 8002084:	711a      	strb	r2, [r3, #4]
			data_MC2B[5] = 0;
 8002086:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002088:	2200      	movs	r2, #0
 800208a:	715a      	strb	r2, [r3, #5]
			data_MC2B[6] = 0;
 800208c:	4b30      	ldr	r3, [pc, #192]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800208e:	2200      	movs	r2, #0
 8002090:	719a      	strb	r2, [r3, #6]
			data_MC2B[7] = 0;
 8002092:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002094:	2200      	movs	r2, #0
 8002096:	71da      	strb	r2, [r3, #7]
			HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, 1);
 8002098:	2201      	movs	r2, #1
 800209a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800209e:	482d      	ldr	r0, [pc, #180]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020a0:	f004 fd63 	bl	8006b6a <HAL_GPIO_WritePin>
//			sendData_uart("I", 2);
			uart_bypass = 2;
 80020a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80020a6:	2202      	movs	r2, #2
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	e013      	b.n	80020d4 <HAL_TIM_PeriodElapsedCallback+0xdc>
//			send_uart_to_REB = true;
		} else
		{
			calculate_data_can(x, x_timer, data_MC2B, lock_default, time_delay, &counter_start);
 80020ac:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4a1e      	ldr	r2, [pc, #120]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80020b2:	9201      	str	r2, [sp, #4]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4b29      	ldr	r3, [pc, #164]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020b8:	4a25      	ldr	r2, [pc, #148]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80020ba:	4929      	ldr	r1, [pc, #164]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80020bc:	4829      	ldr	r0, [pc, #164]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80020be:	f002 f996 	bl	80043ee <calculate_data_can>
			HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020c8:	4822      	ldr	r0, [pc, #136]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020ca:	f004 fd4e 	bl	8006b6a <HAL_GPIO_WritePin>
			uart_bypass = 3;
 80020ce:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80020d0:	2203      	movs	r2, #3
 80020d2:	701a      	strb	r2, [r3, #0]
	//		send_uart_to_REB = true;
		}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader_MC2B, data_MC2B, &TxMailbox);
 80020d4:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80020d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80020d8:	4924      	ldr	r1, [pc, #144]	@ (800216c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80020da:	4825      	ldr	r0, [pc, #148]	@ (8002170 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80020dc:	f003 f930 	bl	8005340 <HAL_CAN_AddTxMessage>
//		sendData_uart("I", 3);
	}
	if (htim->Instance == htim3.Instance)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d119      	bne.n	8002120 <HAL_TIM_PeriodElapsedCallback+0x128>
	{
		HAL_IWDG_Refresh(&hiwdg);
 80020ec:	4822      	ldr	r0, [pc, #136]	@ (8002178 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80020ee:	f004 fdc9 	bl	8006c84 <HAL_IWDG_Refresh>
		if (HAL_GetTick() - timeBreak > 200)
 80020f2:	f002 fed1 	bl	8004e98 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b20      	ldr	r3, [pc, #128]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8002100:	d902      	bls.n	8002108 <HAL_TIM_PeriodElapsedCallback+0x110>
		{
			g_uart_request_exit = 1;
 8002102:	4b1f      	ldr	r3, [pc, #124]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
		}
		if (!RST_set)
 8002108:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_TIM_PeriodElapsedCallback+0x128>
		{
			HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8002116:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800211a:	480e      	ldr	r0, [pc, #56]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800211c:	f004 fd3d 	bl	8006b9a <HAL_GPIO_TogglePin>
		}
	}
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000180 	.word	0x20000180
 800212c:	20000576 	.word	0x20000576
 8002130:	20000510 	.word	0x20000510
 8002134:	2000071f 	.word	0x2000071f
 8002138:	2000071e 	.word	0x2000071e
 800213c:	2000072a 	.word	0x2000072a
 8002140:	200006d9 	.word	0x200006d9
 8002144:	200006d8 	.word	0x200006d8
 8002148:	20000036 	.word	0x20000036
 800214c:	40010800 	.word	0x40010800
 8002150:	20000544 	.word	0x20000544
 8002154:	40011000 	.word	0x40011000
 8002158:	20000030 	.word	0x20000030
 800215c:	20000514 	.word	0x20000514
 8002160:	20000594 	.word	0x20000594
 8002164:	200006dc 	.word	0x200006dc
 8002168:	20000590 	.word	0x20000590
 800216c:	200002b8 	.word	0x200002b8
 8002170:	2000009c 	.word	0x2000009c
 8002174:	200001c8 	.word	0x200001c8
 8002178:	200000c4 	.word	0x200000c4
 800217c:	200006bc 	.word	0x200006bc
 8002180:	20000078 	.word	0x20000078
 8002184:	20000729 	.word	0x20000729

08002188 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002192:	4a13      	ldr	r2, [pc, #76]	@ (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002194:	2100      	movs	r1, #0
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f003 fa19 	bl	80055ce <HAL_CAN_GetRxMessage>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
	    Error_Handler();
 80021a2:	f002 fbb7 	bl	8004914 <Error_Handler>
	}
	if (RxHeader.StdId == 0x740 && RxData[2] == 0x48)
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 80021ae:	d110      	bne.n	80021d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 80021b0:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80021b2:	789b      	ldrb	r3, [r3, #2]
 80021b4:	2b48      	cmp	r3, #72	@ 0x48
 80021b6:	d10c      	bne.n	80021d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	{
		if ((RxData[4] & 0x40) == 0x40)
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80021ba:	791b      	ldrb	r3, [r3, #4]
 80021bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		{
			unlock_fire = true;
 80021c4:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
		} else
		{
			unlock_fire = false;
		}
	}
}
 80021ca:	e002      	b.n	80021d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
			unlock_fire = false;
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000578 	.word	0x20000578
 80021e0:	2000029c 	.word	0x2000029c
 80021e4:	2000072a 	.word	0x2000072a

080021e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	b0b5      	sub	sp, #212	@ 0xd4
 80021ec:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ee:	f002 fdfb 	bl	8004de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f2:	f001 fad7 	bl	80037a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_DBGMCU_FREEZE_IWDG();
 80021f6:	4b92      	ldr	r3, [pc, #584]	@ (8002440 <main+0x258>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4a91      	ldr	r2, [pc, #580]	@ (8002440 <main+0x258>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002200:	6053      	str	r3, [r2, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002202:	f001 fcb7 	bl	8003b74 <MX_GPIO_Init>
  MX_DMA_Init();
 8002206:	f001 fc97 	bl	8003b38 <MX_DMA_Init>
  MX_CAN_Init();
 800220a:	f001 fb13 	bl	8003834 <MX_CAN_Init>
  MX_SPI1_Init();
 800220e:	f001 fb61 	bl	80038d4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002212:	f001 fb95 	bl	8003940 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002216:	f001 fc65 	bl	8003ae4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800221a:	f001 fc15 	bl	8003a48 <MX_TIM3_Init>
  MX_IWDG_Init();
 800221e:	f001 fb3f 	bl	80038a0 <MX_IWDG_Init>
  MX_TIM2_Init();
 8002222:	f001 fbc3 	bl	80039ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8002226:	4887      	ldr	r0, [pc, #540]	@ (8002444 <main+0x25c>)
 8002228:	f005 ff32 	bl	8008090 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 50);
 800222c:	2232      	movs	r2, #50	@ 0x32
 800222e:	4986      	ldr	r1, [pc, #536]	@ (8002448 <main+0x260>)
 8002230:	4886      	ldr	r0, [pc, #536]	@ (800244c <main+0x264>)
 8002232:	f006 fbaa 	bl	800898a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002236:	4b86      	ldr	r3, [pc, #536]	@ (8002450 <main+0x268>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b84      	ldr	r3, [pc, #528]	@ (8002450 <main+0x268>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0204 	bic.w	r2, r2, #4
 8002244:	601a      	str	r2, [r3, #0]
  TxHeader_MC2B.DLC = 8;
 8002246:	4b83      	ldr	r3, [pc, #524]	@ (8002454 <main+0x26c>)
 8002248:	2208      	movs	r2, #8
 800224a:	611a      	str	r2, [r3, #16]
  TxHeader_MC2B.ExtId = 0x47FF;
 800224c:	4b81      	ldr	r3, [pc, #516]	@ (8002454 <main+0x26c>)
 800224e:	f244 72ff 	movw	r2, #18431	@ 0x47ff
 8002252:	605a      	str	r2, [r3, #4]
  TxHeader_MC2B.IDE = CAN_ID_EXT;
 8002254:	4b7f      	ldr	r3, [pc, #508]	@ (8002454 <main+0x26c>)
 8002256:	2204      	movs	r2, #4
 8002258:	609a      	str	r2, [r3, #8]
  TxHeader_MC2B.RTR = CAN_RTR_DATA;
 800225a:	4b7e      	ldr	r3, [pc, #504]	@ (8002454 <main+0x26c>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
  TxHeader_MC2B.StdId = 0;
 8002260:	4b7c      	ldr	r3, [pc, #496]	@ (8002454 <main+0x26c>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
  TxHeader_MC2B.TransmitGlobalTime = DISABLE;
 8002266:	4b7b      	ldr	r3, [pc, #492]	@ (8002454 <main+0x26c>)
 8002268:	2200      	movs	r2, #0
 800226a:	751a      	strb	r2, [r3, #20]

  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800226c:	4b7a      	ldr	r3, [pc, #488]	@ (8002458 <main+0x270>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
  EraseInit.Banks = FLASH_BANK_1;
 8002272:	4b79      	ldr	r3, [pc, #484]	@ (8002458 <main+0x270>)
 8002274:	2201      	movs	r2, #1
 8002276:	605a      	str	r2, [r3, #4]
  EraseInit.PageAddress =  0x0800FC00;
 8002278:	4b77      	ldr	r3, [pc, #476]	@ (8002458 <main+0x270>)
 800227a:	4a78      	ldr	r2, [pc, #480]	@ (800245c <main+0x274>)
 800227c:	609a      	str	r2, [r3, #8]
  EraseInit.NbPages = 1;
 800227e:	4b76      	ldr	r3, [pc, #472]	@ (8002458 <main+0x270>)
 8002280:	2201      	movs	r2, #1
 8002282:	60da      	str	r2, [r3, #12]
  ip1 = *(uint32_t *)(0x0800FC00);
 8002284:	4b75      	ldr	r3, [pc, #468]	@ (800245c <main+0x274>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b75      	ldr	r3, [pc, #468]	@ (8002460 <main+0x278>)
 800228c:	701a      	strb	r2, [r3, #0]
  ip2 = *(uint32_t *)(0x0800FC04);
 800228e:	4b75      	ldr	r3, [pc, #468]	@ (8002464 <main+0x27c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b74      	ldr	r3, [pc, #464]	@ (8002468 <main+0x280>)
 8002296:	701a      	strb	r2, [r3, #0]
  ip3 = *(uint32_t *)(0x0800FC08);
 8002298:	4b74      	ldr	r3, [pc, #464]	@ (800246c <main+0x284>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b74      	ldr	r3, [pc, #464]	@ (8002470 <main+0x288>)
 80022a0:	701a      	strb	r2, [r3, #0]
  ip4 = *(uint32_t *)(0x0800FC0C);
 80022a2:	4b74      	ldr	r3, [pc, #464]	@ (8002474 <main+0x28c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b73      	ldr	r3, [pc, #460]	@ (8002478 <main+0x290>)
 80022aa:	701a      	strb	r2, [r3, #0]
  port_client = *(uint32_t *)(0x0800FC10);
 80022ac:	4b73      	ldr	r3, [pc, #460]	@ (800247c <main+0x294>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	4b73      	ldr	r3, [pc, #460]	@ (8002480 <main+0x298>)
 80022b4:	801a      	strh	r2, [r3, #0]
  ip_server1 = *(uint32_t *)(0x0800FC14);
 80022b6:	4b73      	ldr	r3, [pc, #460]	@ (8002484 <main+0x29c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b72      	ldr	r3, [pc, #456]	@ (8002488 <main+0x2a0>)
 80022be:	701a      	strb	r2, [r3, #0]
  ip_server2 = *(uint32_t *)(0x0800FC18);
 80022c0:	4b72      	ldr	r3, [pc, #456]	@ (800248c <main+0x2a4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b72      	ldr	r3, [pc, #456]	@ (8002490 <main+0x2a8>)
 80022c8:	701a      	strb	r2, [r3, #0]
  ip_server3 = *(uint32_t *)(0x0800FC1C);
 80022ca:	4b72      	ldr	r3, [pc, #456]	@ (8002494 <main+0x2ac>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b71      	ldr	r3, [pc, #452]	@ (8002498 <main+0x2b0>)
 80022d2:	701a      	strb	r2, [r3, #0]
  ip_server4 = *(uint32_t *)(0x0800FC20);
 80022d4:	4b71      	ldr	r3, [pc, #452]	@ (800249c <main+0x2b4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4b71      	ldr	r3, [pc, #452]	@ (80024a0 <main+0x2b8>)
 80022dc:	701a      	strb	r2, [r3, #0]
  port_server = *(uint32_t *)(0x0800FC24);
 80022de:	4b71      	ldr	r3, [pc, #452]	@ (80024a4 <main+0x2bc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	4b70      	ldr	r3, [pc, #448]	@ (80024a8 <main+0x2c0>)
 80022e6:	801a      	strh	r2, [r3, #0]
  time_delay = *(uint32_t *)(0x0800FC28);
 80022e8:	4b70      	ldr	r3, [pc, #448]	@ (80024ac <main+0x2c4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b70      	ldr	r3, [pc, #448]	@ (80024b0 <main+0x2c8>)
 80022f0:	701a      	strb	r2, [r3, #0]
  elevator_mode = *(uint32_t *)(0x0800FC2C);
 80022f2:	4b70      	ldr	r3, [pc, #448]	@ (80024b4 <main+0x2cc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b6f      	ldr	r3, [pc, #444]	@ (80024b8 <main+0x2d0>)
 80022fa:	701a      	strb	r2, [r3, #0]
  lock_default_1 = *(uint32_t *)(0x0800FC30);
 80022fc:	4b6f      	ldr	r3, [pc, #444]	@ (80024bc <main+0x2d4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6f      	ldr	r2, [pc, #444]	@ (80024c0 <main+0x2d8>)
 8002302:	6013      	str	r3, [r2, #0]
  lock_default_2 = *(uint32_t *)(0x0800FC34);
 8002304:	4b6f      	ldr	r3, [pc, #444]	@ (80024c4 <main+0x2dc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6f      	ldr	r2, [pc, #444]	@ (80024c8 <main+0x2e0>)
 800230a:	6013      	str	r3, [r2, #0]
  if (ip1 == 0xFF) ip1 = 192;
 800230c:	4b54      	ldr	r3, [pc, #336]	@ (8002460 <main+0x278>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2bff      	cmp	r3, #255	@ 0xff
 8002312:	d102      	bne.n	800231a <main+0x132>
 8002314:	4b52      	ldr	r3, [pc, #328]	@ (8002460 <main+0x278>)
 8002316:	22c0      	movs	r2, #192	@ 0xc0
 8002318:	701a      	strb	r2, [r3, #0]
  if (ip2 == 0xFF) ip2 = 168;
 800231a:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <main+0x280>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2bff      	cmp	r3, #255	@ 0xff
 8002320:	d102      	bne.n	8002328 <main+0x140>
 8002322:	4b51      	ldr	r3, [pc, #324]	@ (8002468 <main+0x280>)
 8002324:	22a8      	movs	r2, #168	@ 0xa8
 8002326:	701a      	strb	r2, [r3, #0]
  if (ip3 == 0xFF) ip3 = 0;
 8002328:	4b51      	ldr	r3, [pc, #324]	@ (8002470 <main+0x288>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2bff      	cmp	r3, #255	@ 0xff
 800232e:	d102      	bne.n	8002336 <main+0x14e>
 8002330:	4b4f      	ldr	r3, [pc, #316]	@ (8002470 <main+0x288>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
  if (ip4 == 0xFF) ip4 = 72;
 8002336:	4b50      	ldr	r3, [pc, #320]	@ (8002478 <main+0x290>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2bff      	cmp	r3, #255	@ 0xff
 800233c:	d102      	bne.n	8002344 <main+0x15c>
 800233e:	4b4e      	ldr	r3, [pc, #312]	@ (8002478 <main+0x290>)
 8002340:	2248      	movs	r2, #72	@ 0x48
 8002342:	701a      	strb	r2, [r3, #0]
  if (port_client == 0xFFFF) port_client = 0;
 8002344:	4b4e      	ldr	r3, [pc, #312]	@ (8002480 <main+0x298>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800234c:	4293      	cmp	r3, r2
 800234e:	d102      	bne.n	8002356 <main+0x16e>
 8002350:	4b4b      	ldr	r3, [pc, #300]	@ (8002480 <main+0x298>)
 8002352:	2200      	movs	r2, #0
 8002354:	801a      	strh	r2, [r3, #0]
  if (ip_server1 == 0xFF) ip_server1 = 192;
 8002356:	4b4c      	ldr	r3, [pc, #304]	@ (8002488 <main+0x2a0>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2bff      	cmp	r3, #255	@ 0xff
 800235c:	d102      	bne.n	8002364 <main+0x17c>
 800235e:	4b4a      	ldr	r3, [pc, #296]	@ (8002488 <main+0x2a0>)
 8002360:	22c0      	movs	r2, #192	@ 0xc0
 8002362:	701a      	strb	r2, [r3, #0]
  if (ip_server2 == 0xFF) ip_server2 = 168;
 8002364:	4b4a      	ldr	r3, [pc, #296]	@ (8002490 <main+0x2a8>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2bff      	cmp	r3, #255	@ 0xff
 800236a:	d102      	bne.n	8002372 <main+0x18a>
 800236c:	4b48      	ldr	r3, [pc, #288]	@ (8002490 <main+0x2a8>)
 800236e:	22a8      	movs	r2, #168	@ 0xa8
 8002370:	701a      	strb	r2, [r3, #0]
  if (ip_server3 == 0xFF) ip_server3 = 0;
 8002372:	4b49      	ldr	r3, [pc, #292]	@ (8002498 <main+0x2b0>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2bff      	cmp	r3, #255	@ 0xff
 8002378:	d102      	bne.n	8002380 <main+0x198>
 800237a:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <main+0x2b0>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
  if (ip_server4 == 0xFF) ip_server4 = 2;
 8002380:	4b47      	ldr	r3, [pc, #284]	@ (80024a0 <main+0x2b8>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2bff      	cmp	r3, #255	@ 0xff
 8002386:	d102      	bne.n	800238e <main+0x1a6>
 8002388:	4b45      	ldr	r3, [pc, #276]	@ (80024a0 <main+0x2b8>)
 800238a:	2202      	movs	r2, #2
 800238c:	701a      	strb	r2, [r3, #0]
  if (port_server == 0xFFFF) port_server = 6000;
 800238e:	4b46      	ldr	r3, [pc, #280]	@ (80024a8 <main+0x2c0>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002396:	4293      	cmp	r3, r2
 8002398:	d103      	bne.n	80023a2 <main+0x1ba>
 800239a:	4b43      	ldr	r3, [pc, #268]	@ (80024a8 <main+0x2c0>)
 800239c:	f241 7270 	movw	r2, #6000	@ 0x1770
 80023a0:	801a      	strh	r2, [r3, #0]
  if (time_delay == 0xFF) time_delay = 1;
 80023a2:	4b43      	ldr	r3, [pc, #268]	@ (80024b0 <main+0x2c8>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2bff      	cmp	r3, #255	@ 0xff
 80023a8:	d102      	bne.n	80023b0 <main+0x1c8>
 80023aa:	4b41      	ldr	r3, [pc, #260]	@ (80024b0 <main+0x2c8>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
  if (elevator_mode == 0xFF) elevator_mode = 0;
 80023b0:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <main+0x2d0>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2bff      	cmp	r3, #255	@ 0xff
 80023b6:	d102      	bne.n	80023be <main+0x1d6>
 80023b8:	4b3f      	ldr	r3, [pc, #252]	@ (80024b8 <main+0x2d0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
//  if (lock_default_1 == 0xFFFFFFFF) lock_default_1 = 0;
//  if (lock_default_2 == 0xFFFFFFFF) lock_default_2 = 0;
  lock_default[0] = lock_default_1 & 0xFF;
 80023be:	4b40      	ldr	r3, [pc, #256]	@ (80024c0 <main+0x2d8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b41      	ldr	r3, [pc, #260]	@ (80024cc <main+0x2e4>)
 80023c6:	701a      	strb	r2, [r3, #0]
  lock_default[1] = (lock_default_1>>8) & 0xFF;
 80023c8:	4b3d      	ldr	r3, [pc, #244]	@ (80024c0 <main+0x2d8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b3e      	ldr	r3, [pc, #248]	@ (80024cc <main+0x2e4>)
 80023d2:	705a      	strb	r2, [r3, #1]
  lock_default[2] = (lock_default_1>>16) & 0xFF;
 80023d4:	4b3a      	ldr	r3, [pc, #232]	@ (80024c0 <main+0x2d8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b3b      	ldr	r3, [pc, #236]	@ (80024cc <main+0x2e4>)
 80023de:	709a      	strb	r2, [r3, #2]
  lock_default[3] = (lock_default_1>>24) & 0xFF;
 80023e0:	4b37      	ldr	r3, [pc, #220]	@ (80024c0 <main+0x2d8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0e1b      	lsrs	r3, r3, #24
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <main+0x2e4>)
 80023ea:	70da      	strb	r2, [r3, #3]
  lock_default[4] = lock_default_2 & 0xFF;
 80023ec:	4b36      	ldr	r3, [pc, #216]	@ (80024c8 <main+0x2e0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b36      	ldr	r3, [pc, #216]	@ (80024cc <main+0x2e4>)
 80023f4:	711a      	strb	r2, [r3, #4]
  lock_default[5] = (lock_default_2>>8) & 0xFF;
 80023f6:	4b34      	ldr	r3, [pc, #208]	@ (80024c8 <main+0x2e0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b33      	ldr	r3, [pc, #204]	@ (80024cc <main+0x2e4>)
 8002400:	715a      	strb	r2, [r3, #5]
  lock_default[6] = (lock_default_2>>16) & 0xFF;
 8002402:	4b31      	ldr	r3, [pc, #196]	@ (80024c8 <main+0x2e0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b30      	ldr	r3, [pc, #192]	@ (80024cc <main+0x2e4>)
 800240c:	719a      	strb	r2, [r3, #6]
  lock_default[7] = (lock_default_2>>24) & 0xFF;
 800240e:	4b2e      	ldr	r3, [pc, #184]	@ (80024c8 <main+0x2e0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e1b      	lsrs	r3, r3, #24
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b2d      	ldr	r3, [pc, #180]	@ (80024cc <main+0x2e4>)
 8002418:	71da      	strb	r2, [r3, #7]
  server_ip[0] = ip_server1;
 800241a:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <main+0x2a0>)
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	4b2c      	ldr	r3, [pc, #176]	@ (80024d0 <main+0x2e8>)
 8002420:	701a      	strb	r2, [r3, #0]
  server_ip[1] = ip_server2;
 8002422:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <main+0x2a8>)
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <main+0x2e8>)
 8002428:	705a      	strb	r2, [r3, #1]
  server_ip[2] = ip_server3;
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <main+0x2b0>)
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	4b28      	ldr	r3, [pc, #160]	@ (80024d0 <main+0x2e8>)
 8002430:	709a      	strb	r2, [r3, #2]
  server_ip[3] = ip_server4;
 8002432:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <main+0x2b8>)
 8002434:	781a      	ldrb	r2, [r3, #0]
 8002436:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <main+0x2e8>)
 8002438:	70da      	strb	r2, [r3, #3]

  W25Q_Reset();
 800243a:	f7ff fb27 	bl	8001a8c <W25Q_Reset>
//  W25Q_EraseChip();
  while(user.STT!=0xFFFFFFFF)
 800243e:	e05c      	b.n	80024fa <main+0x312>
 8002440:	e0042000 	.word	0xe0042000
 8002444:	200001c8 	.word	0x200001c8
 8002448:	200002d0 	.word	0x200002d0
 800244c:	20000210 	.word	0x20000210
 8002450:	20000258 	.word	0x20000258
 8002454:	200002b8 	.word	0x200002b8
 8002458:	2000008c 	.word	0x2000008c
 800245c:	0800fc00 	.word	0x0800fc00
 8002460:	2000051c 	.word	0x2000051c
 8002464:	0800fc04 	.word	0x0800fc04
 8002468:	2000051d 	.word	0x2000051d
 800246c:	0800fc08 	.word	0x0800fc08
 8002470:	2000051e 	.word	0x2000051e
 8002474:	0800fc0c 	.word	0x0800fc0c
 8002478:	2000051f 	.word	0x2000051f
 800247c:	0800fc10 	.word	0x0800fc10
 8002480:	20000584 	.word	0x20000584
 8002484:	0800fc14 	.word	0x0800fc14
 8002488:	20000520 	.word	0x20000520
 800248c:	0800fc18 	.word	0x0800fc18
 8002490:	20000521 	.word	0x20000521
 8002494:	0800fc1c 	.word	0x0800fc1c
 8002498:	20000522 	.word	0x20000522
 800249c:	0800fc20 	.word	0x0800fc20
 80024a0:	20000523 	.word	0x20000523
 80024a4:	0800fc24 	.word	0x0800fc24
 80024a8:	20000582 	.word	0x20000582
 80024ac:	0800fc28 	.word	0x0800fc28
 80024b0:	20000510 	.word	0x20000510
 80024b4:	0800fc2c 	.word	0x0800fc2c
 80024b8:	20000542 	.word	0x20000542
 80024bc:	0800fc30 	.word	0x0800fc30
 80024c0:	200006a8 	.word	0x200006a8
 80024c4:	0800fc34 	.word	0x0800fc34
 80024c8:	200006ac 	.word	0x200006ac
 80024cc:	20000514 	.word	0x20000514
 80024d0:	2000050c 	.word	0x2000050c
  {
	  W25Q_FastRead_address(number_card*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&user);
 80024d4:	4bb4      	ldr	r3, [pc, #720]	@ (80027a8 <main+0x5c0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	015b      	lsls	r3, r3, #5
 80024da:	4ab4      	ldr	r2, [pc, #720]	@ (80027ac <main+0x5c4>)
 80024dc:	2120      	movs	r1, #32
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fb1c 	bl	8001b1c <W25Q_FastRead_address>
	  if (user.STT -1 == number_card)
 80024e4:	4bb1      	ldr	r3, [pc, #708]	@ (80027ac <main+0x5c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	4baf      	ldr	r3, [pc, #700]	@ (80027a8 <main+0x5c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d103      	bne.n	80024fa <main+0x312>
	  {
		  number_card = user.STT;
 80024f2:	4bae      	ldr	r3, [pc, #696]	@ (80027ac <main+0x5c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4aac      	ldr	r2, [pc, #688]	@ (80027a8 <main+0x5c0>)
 80024f8:	6013      	str	r3, [r2, #0]
  while(user.STT!=0xFFFFFFFF)
 80024fa:	4bac      	ldr	r3, [pc, #688]	@ (80027ac <main+0x5c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d1e7      	bne.n	80024d4 <main+0x2ec>
	  }
  }
  while(user_before.STT!=0xFFFFFFFF)
 8002504:	e014      	b.n	8002530 <main+0x348>
  {
	  W25Q_FastRead_address(number_card_old*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&user_before);
 8002506:	4baa      	ldr	r3, [pc, #680]	@ (80027b0 <main+0x5c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800250e:	015b      	lsls	r3, r3, #5
 8002510:	4aa8      	ldr	r2, [pc, #672]	@ (80027b4 <main+0x5cc>)
 8002512:	2120      	movs	r1, #32
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fb01 	bl	8001b1c <W25Q_FastRead_address>
	  if (user_before.STT -1 == number_card_old)
 800251a:	4ba6      	ldr	r3, [pc, #664]	@ (80027b4 <main+0x5cc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	4ba3      	ldr	r3, [pc, #652]	@ (80027b0 <main+0x5c8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d103      	bne.n	8002530 <main+0x348>
	  {
		  number_card_old = user_before.STT;
 8002528:	4ba2      	ldr	r3, [pc, #648]	@ (80027b4 <main+0x5cc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4aa0      	ldr	r2, [pc, #640]	@ (80027b0 <main+0x5c8>)
 800252e:	6013      	str	r3, [r2, #0]
  while(user_before.STT!=0xFFFFFFFF)
 8002530:	4ba0      	ldr	r3, [pc, #640]	@ (80027b4 <main+0x5cc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d1e5      	bne.n	8002506 <main+0x31e>
	  }
  }
  if (number_card_old > 0)
 800253a:	4b9d      	ldr	r3, [pc, #628]	@ (80027b0 <main+0x5c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d01a      	beq.n	8002578 <main+0x390>
  {
	  for (uint32_t i=0; i<(number_card_old*sizeof(user_info_t)/Sector +2); i++)
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002548:	e00d      	b.n	8002566 <main+0x37e>
	  {
		  W25Q_Erase_Sector(i + Block32/0x1000);
 800254a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800254e:	b29b      	uxth	r3, r3
 8002550:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002554:	b29b      	uxth	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fb4c 	bl	8001bf4 <W25Q_Erase_Sector>
	  for (uint32_t i=0; i<(number_card_old*sizeof(user_info_t)/Sector +2); i++)
 800255c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002560:	3301      	adds	r3, #1
 8002562:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002566:	4b92      	ldr	r3, [pc, #584]	@ (80027b0 <main+0x5c8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	015b      	lsls	r3, r3, #5
 800256c:	0b1b      	lsrs	r3, r3, #12
 800256e:	3302      	adds	r3, #2
 8002570:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002574:	429a      	cmp	r2, r3
 8002576:	d3e8      	bcc.n	800254a <main+0x362>
	  }
  }
  wiz_NetInfo gWIZNETINFO = {
 8002578:	2300      	movs	r3, #0
 800257a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800257e:	231c      	movs	r3, #28
 8002580:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8002584:	2316      	movs	r3, #22
 8002586:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 800258a:	f002 fcb3 	bl	8004ef4 <HAL_GetUIDw0>
 800258e:	4603      	mov	r3, r0
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b89      	ldr	r3, [pc, #548]	@ (80027b8 <main+0x5d0>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4053      	eors	r3, r2
 8002598:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 800259a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 800259e:	f002 fcb3 	bl	8004f08 <HAL_GetUIDw1>
 80025a2:	4603      	mov	r3, r0
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b84      	ldr	r3, [pc, #528]	@ (80027b8 <main+0x5d0>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	4053      	eors	r3, r2
 80025ac:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 80025ae:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 80025b2:	f002 fcb3 	bl	8004f1c <HAL_GetUIDw2>
 80025b6:	4603      	mov	r3, r0
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b7f      	ldr	r3, [pc, #508]	@ (80027b8 <main+0x5d0>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	4053      	eors	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 80025c2:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 80025c6:	4b7d      	ldr	r3, [pc, #500]	@ (80027bc <main+0x5d4>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 80025ce:	4b7c      	ldr	r3, [pc, #496]	@ (80027c0 <main+0x5d8>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80025d6:	4b7b      	ldr	r3, [pc, #492]	@ (80027c4 <main+0x5dc>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 80025de:	4b76      	ldr	r3, [pc, #472]	@ (80027b8 <main+0x5d0>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 80025e6:	4a78      	ldr	r2, [pc, #480]	@ (80027c8 <main+0x5e0>)
 80025e8:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80025ec:	6810      	ldr	r0, [r2, #0]
 80025ee:	6018      	str	r0, [r3, #0]
 80025f0:	4a76      	ldr	r2, [pc, #472]	@ (80027cc <main+0x5e4>)
 80025f2:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 80025f6:	6810      	ldr	r0, [r2, #0]
 80025f8:	6018      	str	r0, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	@ (80027d0 <main+0x5e8>)
 80025fc:	f107 0376 	add.w	r3, r7, #118	@ 0x76
 8002600:	6810      	ldr	r0, [r2, #0]
 8002602:	6018      	str	r0, [r3, #0]
 8002604:	2301      	movs	r3, #1
 8002606:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
  		  .ip = {ip1,ip2,ip3,ip4},
  		  .sn = {255, 255, 255, 0},
  		  .gw = {192, 168, 0, 1},
  		  .dns = {168, 126, 63, 1},
  		  .dhcp = NETINFO_STATIC};
  W5500Init();
 800260a:	f7fe f8ab 	bl	8000764 <W5500Init>
  HAL_Delay(2000);
 800260e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002612:	f002 fc4b 	bl	8004eac <HAL_Delay>
  wizchip_setnetinfo(&gWIZNETINFO);
 8002616:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f982 	bl	8001924 <wizchip_setnetinfo>
  socket(SOCK_NUM, Sn_MR_TCP, port_client, SF_TCP_NODELAY);
 8002620:	4b6c      	ldr	r3, [pc, #432]	@ (80027d4 <main+0x5ec>)
 8002622:	881a      	ldrh	r2, [r3, #0]
 8002624:	2320      	movs	r3, #32
 8002626:	2101      	movs	r1, #1
 8002628:	2000      	movs	r0, #0
 800262a:	f7fe f8e7 	bl	80007fc <socket>
  connect(SOCK_NUM, server_ip, port_server);
 800262e:	4b6a      	ldr	r3, [pc, #424]	@ (80027d8 <main+0x5f0>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	4969      	ldr	r1, [pc, #420]	@ (80027dc <main+0x5f4>)
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe fa6e 	bl	8000b18 <connect>
  Set_speed_can(elevator_mode);
 800263c:	4b68      	ldr	r3, [pc, #416]	@ (80027e0 <main+0x5f8>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f002 f847 	bl	80046d4 <Set_speed_can>
  HAL_TIM_Base_Start_IT(&htim2);
 8002646:	4867      	ldr	r0, [pc, #412]	@ (80027e4 <main+0x5fc>)
 8002648:	f005 fd22 	bl	8008090 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lenData = getSn_RX_RSR(SOCK_NUM);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fd ff28 	bl	80004a2 <getSn_RX_RSR>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	4b64      	ldr	r3, [pc, #400]	@ (80027e8 <main+0x600>)
 8002658:	601a      	str	r2, [r3, #0]
	  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 800265a:	2000      	movs	r0, #0
 800265c:	f7fd ff21 	bl	80004a2 <getSn_RX_RSR>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	4b60      	ldr	r3, [pc, #384]	@ (80027e8 <main+0x600>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	f041 8068 	bne.w	800373e <main+0x1556>
	  {
		  if (lenData > 512)
 800266e:	4b5e      	ldr	r3, [pc, #376]	@ (80027e8 <main+0x600>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002676:	d901      	bls.n	800267c <main+0x494>
		  {
			  HAL_NVIC_SystemReset();
 8002678:	f003 fc29 	bl	8005ece <HAL_NVIC_SystemReset>
		  }
		  if (lenData > 0)
 800267c:	4b5a      	ldr	r3, [pc, #360]	@ (80027e8 <main+0x600>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 810b 	beq.w	800289c <main+0x6b4>
		  {
			  recv(SOCK_NUM, buf, lenData);
 8002686:	4b58      	ldr	r3, [pc, #352]	@ (80027e8 <main+0x600>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	4957      	ldr	r1, [pc, #348]	@ (80027ec <main+0x604>)
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe fc21 	bl	8000ed8 <recv>
			  switch (buf[0])
 8002696:	4b55      	ldr	r3, [pc, #340]	@ (80027ec <main+0x604>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	3b44      	subs	r3, #68	@ 0x44
 800269c:	2b13      	cmp	r3, #19
 800269e:	f200 80fd 	bhi.w	800289c <main+0x6b4>
 80026a2:	a201      	add	r2, pc, #4	@ (adr r2, 80026a8 <main+0x4c0>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	08002741 	.word	0x08002741
 80026ac:	0800289d 	.word	0x0800289d
 80026b0:	0800289d 	.word	0x0800289d
 80026b4:	0800289d 	.word	0x0800289d
 80026b8:	080026f9 	.word	0x080026f9
 80026bc:	0800289d 	.word	0x0800289d
 80026c0:	0800289d 	.word	0x0800289d
 80026c4:	0800289d 	.word	0x0800289d
 80026c8:	0800289d 	.word	0x0800289d
 80026cc:	0800289d 	.word	0x0800289d
 80026d0:	0800289d 	.word	0x0800289d
 80026d4:	0800289d 	.word	0x0800289d
 80026d8:	0800289d 	.word	0x0800289d
 80026dc:	0800289d 	.word	0x0800289d
 80026e0:	0800280d 	.word	0x0800280d
 80026e4:	08002775 	.word	0x08002775
 80026e8:	0800289d 	.word	0x0800289d
 80026ec:	0800289d 	.word	0x0800289d
 80026f0:	0800289d 	.word	0x0800289d
 80026f4:	08002851 	.word	0x08002851
			  {
			  case 0x48:
				  connected = HAL_GetTick();
 80026f8:	f002 fbce 	bl	8004e98 <HAL_GetTick>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4a3c      	ldr	r2, [pc, #240]	@ (80027f0 <main+0x608>)
 8002700:	6013      	str	r3, [r2, #0]
				  yearNow = (buf[3]<<8) | buf[4];
 8002702:	4b3a      	ldr	r3, [pc, #232]	@ (80027ec <main+0x604>)
 8002704:	78db      	ldrb	r3, [r3, #3]
 8002706:	b21b      	sxth	r3, r3
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	b21a      	sxth	r2, r3
 800270c:	4b37      	ldr	r3, [pc, #220]	@ (80027ec <main+0x604>)
 800270e:	791b      	ldrb	r3, [r3, #4]
 8002710:	b21b      	sxth	r3, r3
 8002712:	4313      	orrs	r3, r2
 8002714:	b21b      	sxth	r3, r3
 8002716:	b29a      	uxth	r2, r3
 8002718:	4b36      	ldr	r3, [pc, #216]	@ (80027f4 <main+0x60c>)
 800271a:	801a      	strh	r2, [r3, #0]
				  timeNow = mktime(yearNow, buf[2], buf[1], buf[5], buf[6]);
 800271c:	4b35      	ldr	r3, [pc, #212]	@ (80027f4 <main+0x60c>)
 800271e:	8818      	ldrh	r0, [r3, #0]
 8002720:	4b32      	ldr	r3, [pc, #200]	@ (80027ec <main+0x604>)
 8002722:	7899      	ldrb	r1, [r3, #2]
 8002724:	4b31      	ldr	r3, [pc, #196]	@ (80027ec <main+0x604>)
 8002726:	785a      	ldrb	r2, [r3, #1]
 8002728:	4b30      	ldr	r3, [pc, #192]	@ (80027ec <main+0x604>)
 800272a:	795c      	ldrb	r4, [r3, #5]
 800272c:	4b2f      	ldr	r3, [pc, #188]	@ (80027ec <main+0x604>)
 800272e:	799b      	ldrb	r3, [r3, #6]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4623      	mov	r3, r4
 8002734:	f002 f866 	bl	8004804 <mktime>
 8002738:	4603      	mov	r3, r0
 800273a:	4a2f      	ldr	r2, [pc, #188]	@ (80027f8 <main+0x610>)
 800273c:	6013      	str	r3, [r2, #0]
				  break;
 800273e:	e0ad      	b.n	800289c <main+0x6b4>
			  case 0x44://data: D
				  Ethernet_received = true;
 8002740:	4b2e      	ldr	r3, [pc, #184]	@ (80027fc <main+0x614>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
				  for (uint8_t i =0; i<9; i++)
 8002746:	2300      	movs	r3, #0
 8002748:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800274c:	e00d      	b.n	800276a <main+0x582>
				  {
					  Ethernet_received_data[i] = buf[i+1];
 800274e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002758:	4924      	ldr	r1, [pc, #144]	@ (80027ec <main+0x604>)
 800275a:	5c89      	ldrb	r1, [r1, r2]
 800275c:	4a28      	ldr	r2, [pc, #160]	@ (8002800 <main+0x618>)
 800275e:	54d1      	strb	r1, [r2, r3]
				  for (uint8_t i =0; i<9; i++)
 8002760:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002764:	3301      	adds	r3, #1
 8002766:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800276a:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800276e:	2b08      	cmp	r3, #8
 8002770:	d9ed      	bls.n	800274e <main+0x566>
				  }
				  break;
 8002772:	e093      	b.n	800289c <main+0x6b4>
			  case 0x53://setting: S
				  Ethernet_setting = true;
 8002774:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <main+0x61c>)
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
				  for (uint8_t i =0; i<23; i++)
 800277a:	2300      	movs	r3, #0
 800277c:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 8002780:	e00d      	b.n	800279e <main+0x5b6>
				  {
					  Ethernet_setting_data[i] = buf[i+1];
 8002782:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 800278c:	4917      	ldr	r1, [pc, #92]	@ (80027ec <main+0x604>)
 800278e:	5c89      	ldrb	r1, [r1, r2]
 8002790:	4a1d      	ldr	r2, [pc, #116]	@ (8002808 <main+0x620>)
 8002792:	54d1      	strb	r1, [r2, r3]
				  for (uint8_t i =0; i<23; i++)
 8002794:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8002798:	3301      	adds	r3, #1
 800279a:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 800279e:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80027a2:	2b16      	cmp	r3, #22
 80027a4:	d9ed      	bls.n	8002782 <main+0x59a>
				  }
				  break;
 80027a6:	e079      	b.n	800289c <main+0x6b4>
 80027a8:	20000694 	.word	0x20000694
 80027ac:	2000072c 	.word	0x2000072c
 80027b0:	200006a4 	.word	0x200006a4
 80027b4:	2000074c 	.word	0x2000074c
 80027b8:	2000051f 	.word	0x2000051f
 80027bc:	2000051c 	.word	0x2000051c
 80027c0:	2000051d 	.word	0x2000051d
 80027c4:	2000051e 	.word	0x2000051e
 80027c8:	08009910 	.word	0x08009910
 80027cc:	08009914 	.word	0x08009914
 80027d0:	08009918 	.word	0x08009918
 80027d4:	20000584 	.word	0x20000584
 80027d8:	20000582 	.word	0x20000582
 80027dc:	2000050c 	.word	0x2000050c
 80027e0:	20000542 	.word	0x20000542
 80027e4:	20000180 	.word	0x20000180
 80027e8:	200006a0 	.word	0x200006a0
 80027ec:	20000304 	.word	0x20000304
 80027f0:	20000698 	.word	0x20000698
 80027f4:	20000586 	.word	0x20000586
 80027f8:	200006d4 	.word	0x200006d4
 80027fc:	20000724 	.word	0x20000724
 8002800:	20000550 	.word	0x20000550
 8002804:	20000725 	.word	0x20000725
 8002808:	2000055c 	.word	0x2000055c
			  case 0x52:// reset board R: 0; read data: 1
				  if (buf[1] == 2)
 800280c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a0c <main+0x824>)
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d108      	bne.n	8002826 <main+0x63e>
				  {
					  send_card_to_pc = true;
 8002814:	4b7e      	ldr	r3, [pc, #504]	@ (8002a10 <main+0x828>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 800281a:	f002 fb3d 	bl	8004e98 <HAL_GetTick>
 800281e:	4603      	mov	r3, r0
 8002820:	4a7c      	ldr	r2, [pc, #496]	@ (8002a14 <main+0x82c>)
 8002822:	6013      	str	r3, [r2, #0]
				  } else
				  {
					  Ethernet_read_and_reset = true;
					  Ethernet_read_and_reset_data = buf[1];
				  }
				  break;
 8002824:	e03a      	b.n	800289c <main+0x6b4>
				  } else if (buf[1] == 3)
 8002826:	4b79      	ldr	r3, [pc, #484]	@ (8002a0c <main+0x824>)
 8002828:	785b      	ldrb	r3, [r3, #1]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d108      	bne.n	8002840 <main+0x658>
					  send_card_done = true;
 800282e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a18 <main+0x830>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002834:	f002 fb30 	bl	8004e98 <HAL_GetTick>
 8002838:	4603      	mov	r3, r0
 800283a:	4a76      	ldr	r2, [pc, #472]	@ (8002a14 <main+0x82c>)
 800283c:	6013      	str	r3, [r2, #0]
				  break;
 800283e:	e02d      	b.n	800289c <main+0x6b4>
					  Ethernet_read_and_reset = true;
 8002840:	4b76      	ldr	r3, [pc, #472]	@ (8002a1c <main+0x834>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
					  Ethernet_read_and_reset_data = buf[1];
 8002846:	4b71      	ldr	r3, [pc, #452]	@ (8002a0c <main+0x824>)
 8002848:	785a      	ldrb	r2, [r3, #1]
 800284a:	4b75      	ldr	r3, [pc, #468]	@ (8002a20 <main+0x838>)
 800284c:	701a      	strb	r2, [r3, #0]
				  break;
 800284e:	e025      	b.n	800289c <main+0x6b4>
			  case 0x57: // W
				  switch (buf[1])
 8002850:	4b6e      	ldr	r3, [pc, #440]	@ (8002a0c <main+0x824>)
 8002852:	785b      	ldrb	r3, [r3, #1]
 8002854:	2b48      	cmp	r3, #72	@ 0x48
 8002856:	d017      	beq.n	8002888 <main+0x6a0>
 8002858:	2b48      	cmp	r3, #72	@ 0x48
 800285a:	dc1e      	bgt.n	800289a <main+0x6b2>
 800285c:	2b41      	cmp	r3, #65	@ 0x41
 800285e:	d00a      	beq.n	8002876 <main+0x68e>
 8002860:	2b45      	cmp	r3, #69	@ 0x45
 8002862:	d11a      	bne.n	800289a <main+0x6b2>
				  {
				  case 0x45:// E: errase
					  write_mode = true;
 8002864:	4b6f      	ldr	r3, [pc, #444]	@ (8002a24 <main+0x83c>)
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 800286a:	f002 fb15 	bl	8004e98 <HAL_GetTick>
 800286e:	4603      	mov	r3, r0
 8002870:	4a68      	ldr	r2, [pc, #416]	@ (8002a14 <main+0x82c>)
 8002872:	6013      	str	r3, [r2, #0]
					  break;
 8002874:	e011      	b.n	800289a <main+0x6b2>
				  case 0x41:// A: add card
					  write_mode_somecard = true;
 8002876:	4b6c      	ldr	r3, [pc, #432]	@ (8002a28 <main+0x840>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 800287c:	f002 fb0c 	bl	8004e98 <HAL_GetTick>
 8002880:	4603      	mov	r3, r0
 8002882:	4a64      	ldr	r2, [pc, #400]	@ (8002a14 <main+0x82c>)
 8002884:	6013      	str	r3, [r2, #0]
					  break;
 8002886:	e008      	b.n	800289a <main+0x6b2>
				  case 0x48:// H: add card by hand
					  write_card_by_hand = true;
 8002888:	4b68      	ldr	r3, [pc, #416]	@ (8002a2c <main+0x844>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 800288e:	f002 fb03 	bl	8004e98 <HAL_GetTick>
 8002892:	4603      	mov	r3, r0
 8002894:	4a5f      	ldr	r2, [pc, #380]	@ (8002a14 <main+0x82c>)
 8002896:	6013      	str	r3, [r2, #0]
					  break;
 8002898:	bf00      	nop
				  }
				  break;
 800289a:	bf00      	nop
	  } else
	  {
		  continue;
	  }

	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 800289c:	4864      	ldr	r0, [pc, #400]	@ (8002a30 <main+0x848>)
 800289e:	f002 fe62 	bl	8005566 <HAL_CAN_GetTxMailboxesFreeLevel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <main+0x6d6>
	  {
		  if (HAL_CAN_AbortTxRequest(&hcan, TxMailbox) != HAL_OK)
 80028a8:	4b62      	ldr	r3, [pc, #392]	@ (8002a34 <main+0x84c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	4860      	ldr	r0, [pc, #384]	@ (8002a30 <main+0x848>)
 80028b0:	f002 fe15 	bl	80054de <HAL_CAN_AbortTxRequest>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <main+0x6d6>
		  {
			HAL_NVIC_SystemReset();
 80028ba:	f003 fb08 	bl	8005ece <HAL_NVIC_SystemReset>
		  }
	  }

	  // check connection Ethernet
	  if (keepalive == SOCK_ESTABLISHED && (abs(HAL_GetTick() - connected) < Timeout_heartbit))
 80028be:	4b5e      	ldr	r3, [pc, #376]	@ (8002a38 <main+0x850>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b17      	cmp	r3, #23
 80028c4:	d110      	bne.n	80028e8 <main+0x700>
 80028c6:	f002 fae7 	bl	8004e98 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4b5b      	ldr	r3, [pc, #364]	@ (8002a3c <main+0x854>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bfb8      	it	lt
 80028d6:	425b      	neglt	r3, r3
 80028d8:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80028dc:	4293      	cmp	r3, r2
 80028de:	dc03      	bgt.n	80028e8 <main+0x700>
	  {
		  Ethernet_connected = true;
 80028e0:	4b57      	ldr	r3, [pc, #348]	@ (8002a40 <main+0x858>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e002      	b.n	80028ee <main+0x706>
	  } else
	  {
		  Ethernet_connected = false;// false
 80028e8:	4b55      	ldr	r3, [pc, #340]	@ (8002a40 <main+0x858>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
	  }
	  // check connection REB
	  if (abs(HAL_GetTick() - heardbit_REB) > Timeout_heartbit)
 80028ee:	f002 fad3 	bl	8004e98 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b53      	ldr	r3, [pc, #332]	@ (8002a44 <main+0x85c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bfb8      	it	lt
 80028fe:	425b      	neglt	r3, r3
 8002900:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002904:	4293      	cmp	r3, r2
 8002906:	dd03      	ble.n	8002910 <main+0x728>
	  {
		  REB_connected = false;// false
 8002908:	4b4f      	ldr	r3, [pc, #316]	@ (8002a48 <main+0x860>)
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e002      	b.n	8002916 <main+0x72e>
	  } else
	  {
		  REB_connected = true;
 8002910:	4b4d      	ldr	r3, [pc, #308]	@ (8002a48 <main+0x860>)
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
	  }
	  //// received data from Ethernet
	  if (Ethernet_received)// 0x44
 8002916:	4b4d      	ldr	r3, [pc, #308]	@ (8002a4c <main+0x864>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d022      	beq.n	8002964 <main+0x77c>
	  {
		  Ethernet_received = false;
 800291e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a4c <main+0x864>)
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_received_data[0])
 8002924:	4b4a      	ldr	r3, [pc, #296]	@ (8002a50 <main+0x868>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <main+0x74a>
 800292c:	2b01      	cmp	r3, #1
 800292e:	d00a      	beq.n	8002946 <main+0x75e>
 8002930:	e018      	b.n	8002964 <main+0x77c>
		  {
		  case 0:
			  send_uart = 0;
 8002932:	4b48      	ldr	r3, [pc, #288]	@ (8002a54 <main+0x86c>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 8002938:	4b47      	ldr	r3, [pc, #284]	@ (8002a58 <main+0x870>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
			  isSendDataEth = false;
 800293e:	4b47      	ldr	r3, [pc, #284]	@ (8002a5c <main+0x874>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
			  break;
 8002944:	e00e      	b.n	8002964 <main+0x77c>
		  case 1: // data ok
			  new_card_update(&Ethernet_received_data[1], x, x_timer);
 8002946:	4a46      	ldr	r2, [pc, #280]	@ (8002a60 <main+0x878>)
 8002948:	4946      	ldr	r1, [pc, #280]	@ (8002a64 <main+0x87c>)
 800294a:	4847      	ldr	r0, [pc, #284]	@ (8002a68 <main+0x880>)
 800294c:	f001 fce4 	bl	8004318 <new_card_update>
			  send_uart = 1;
 8002950:	4b40      	ldr	r3, [pc, #256]	@ (8002a54 <main+0x86c>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 8002956:	4b40      	ldr	r3, [pc, #256]	@ (8002a58 <main+0x870>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
			  isSendDataEth = false;
 800295c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <main+0x874>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
			  break;
 8002962:	bf00      	nop
		  }
	  }

	  // Nếu không nhận được Data từ server sau khi gửi mã thẻ, thì xử lý offline

	  if (isSendDataEth)
 8002964:	4b3d      	ldr	r3, [pc, #244]	@ (8002a5c <main+0x874>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03f      	beq.n	80029ec <main+0x804>
	  {
		  if (!Ethernet_connected || ((HAL_GetTick() - timeSendDataEth) > 500))
 800296c:	4b34      	ldr	r3, [pc, #208]	@ (8002a40 <main+0x858>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	f083 0301 	eor.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d108      	bne.n	800298c <main+0x7a4>
 800297a:	f002 fa8d 	bl	8004e98 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	4b3a      	ldr	r3, [pc, #232]	@ (8002a6c <main+0x884>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800298a:	d92f      	bls.n	80029ec <main+0x804>
		  {
			  isSendDataEth = false;
 800298c:	4b33      	ldr	r3, [pc, #204]	@ (8002a5c <main+0x874>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
			  compare_user = binary_search(number_card, wcode);
 8002992:	4b37      	ldr	r3, [pc, #220]	@ (8002a70 <main+0x888>)
 8002994:	6819      	ldr	r1, [r3, #0]
 8002996:	4b37      	ldr	r3, [pc, #220]	@ (8002a74 <main+0x88c>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4c37      	ldr	r4, [pc, #220]	@ (8002a78 <main+0x890>)
 800299c:	463b      	mov	r3, r7
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 fc6c 	bl	800427c <binary_search>
 80029a4:	4625      	mov	r5, r4
 80029a6:	463c      	mov	r4, r7
 80029a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			  if (compare_user.STT > 0 && compare_user.STT <= number_card)
 80029b4:	4b30      	ldr	r3, [pc, #192]	@ (8002a78 <main+0x890>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d011      	beq.n	80029e0 <main+0x7f8>
 80029bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a78 <main+0x890>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a70 <main+0x888>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d80b      	bhi.n	80029e0 <main+0x7f8>
			  {
//				  timeBegin = mktime(compare_user.beginYear, compare_user.beginMonth, compare_user.beginDate, compare_user.beginHour, compare_user.beginMinute);
//				  timeEnd = mktime(compare_user.endYear, compare_user.endMonth, compare_user.endDate, compare_user.endHour, compare_user.endMinute);
//				  if ((timeBegin < timeNow) && (timeNow < timeEnd) && (timeBegin != 0) && (timeEnd != 0) && (timeNow != 0))
//				  {
					  new_card_update(compare_user.permis, x, x_timer);
 80029c8:	4a25      	ldr	r2, [pc, #148]	@ (8002a60 <main+0x878>)
 80029ca:	4926      	ldr	r1, [pc, #152]	@ (8002a64 <main+0x87c>)
 80029cc:	482b      	ldr	r0, [pc, #172]	@ (8002a7c <main+0x894>)
 80029ce:	f001 fca3 	bl	8004318 <new_card_update>
					  send_uart = 1;
 80029d2:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <main+0x86c>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
					  send_uart_to_REB = true;
 80029d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a58 <main+0x870>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e005      	b.n	80029ec <main+0x804>
//					  send_uart = 0;
//					  send_uart_to_REB = true;
//				  }
			  } else
			  {
				  send_uart = 0;
 80029e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a54 <main+0x86c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
				  send_uart_to_REB = true;
 80029e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <main+0x870>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	  //// setting from PC Ethernet
	  if (Ethernet_setting) // 0x53
 80029ec:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <main+0x898>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80c2 	beq.w	8002b7a <main+0x992>
	  {
		  Ethernet_setting = false;
 80029f6:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <main+0x898>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_setting_data[0])
 80029fc:	4b21      	ldr	r3, [pc, #132]	@ (8002a84 <main+0x89c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d041      	beq.n	8002a88 <main+0x8a0>
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	f000 80ae 	beq.w	8002b66 <main+0x97e>
 8002a0a:	e0b6      	b.n	8002b7a <main+0x992>
 8002a0c:	20000304 	.word	0x20000304
 8002a10:	20000721 	.word	0x20000721
 8002a14:	2000069c 	.word	0x2000069c
 8002a18:	20000722 	.word	0x20000722
 8002a1c:	20000728 	.word	0x20000728
 8002a20:	20000575 	.word	0x20000575
 8002a24:	2000071f 	.word	0x2000071f
 8002a28:	2000071e 	.word	0x2000071e
 8002a2c:	20000727 	.word	0x20000727
 8002a30:	2000009c 	.word	0x2000009c
 8002a34:	20000590 	.word	0x20000590
 8002a38:	2000054c 	.word	0x2000054c
 8002a3c:	20000698 	.word	0x20000698
 8002a40:	2000071c 	.word	0x2000071c
 8002a44:	200006b4 	.word	0x200006b4
 8002a48:	20000036 	.word	0x20000036
 8002a4c:	20000724 	.word	0x20000724
 8002a50:	20000550 	.word	0x20000550
 8002a54:	20000580 	.word	0x20000580
 8002a58:	2000072b 	.word	0x2000072b
 8002a5c:	2000071d 	.word	0x2000071d
 8002a60:	20000594 	.word	0x20000594
 8002a64:	200006dc 	.word	0x200006dc
 8002a68:	20000551 	.word	0x20000551
 8002a6c:	200006b8 	.word	0x200006b8
 8002a70:	20000694 	.word	0x20000694
 8002a74:	2000058c 	.word	0x2000058c
 8002a78:	2000076c 	.word	0x2000076c
 8002a7c:	20000774 	.word	0x20000774
 8002a80:	20000725 	.word	0x20000725
 8002a84:	2000055c 	.word	0x2000055c
		  {
		  case 0:// setting board
			  ip1 = Ethernet_setting_data[1];
 8002a88:	4b98      	ldr	r3, [pc, #608]	@ (8002cec <main+0xb04>)
 8002a8a:	785a      	ldrb	r2, [r3, #1]
 8002a8c:	4b98      	ldr	r3, [pc, #608]	@ (8002cf0 <main+0xb08>)
 8002a8e:	701a      	strb	r2, [r3, #0]
			  ip2 = Ethernet_setting_data[2];
 8002a90:	4b96      	ldr	r3, [pc, #600]	@ (8002cec <main+0xb04>)
 8002a92:	789a      	ldrb	r2, [r3, #2]
 8002a94:	4b97      	ldr	r3, [pc, #604]	@ (8002cf4 <main+0xb0c>)
 8002a96:	701a      	strb	r2, [r3, #0]
			  ip3 = Ethernet_setting_data[3];
 8002a98:	4b94      	ldr	r3, [pc, #592]	@ (8002cec <main+0xb04>)
 8002a9a:	78da      	ldrb	r2, [r3, #3]
 8002a9c:	4b96      	ldr	r3, [pc, #600]	@ (8002cf8 <main+0xb10>)
 8002a9e:	701a      	strb	r2, [r3, #0]
			  ip4 = Ethernet_setting_data[4];
 8002aa0:	4b92      	ldr	r3, [pc, #584]	@ (8002cec <main+0xb04>)
 8002aa2:	791a      	ldrb	r2, [r3, #4]
 8002aa4:	4b95      	ldr	r3, [pc, #596]	@ (8002cfc <main+0xb14>)
 8002aa6:	701a      	strb	r2, [r3, #0]
			  port_client = Ethernet_setting_data[5]<<8|Ethernet_setting_data[6];
 8002aa8:	4b90      	ldr	r3, [pc, #576]	@ (8002cec <main+0xb04>)
 8002aaa:	795b      	ldrb	r3, [r3, #5]
 8002aac:	b21b      	sxth	r3, r3
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	b21a      	sxth	r2, r3
 8002ab2:	4b8e      	ldr	r3, [pc, #568]	@ (8002cec <main+0xb04>)
 8002ab4:	799b      	ldrb	r3, [r3, #6]
 8002ab6:	b21b      	sxth	r3, r3
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b90      	ldr	r3, [pc, #576]	@ (8002d00 <main+0xb18>)
 8002ac0:	801a      	strh	r2, [r3, #0]
			  ip_server1 = Ethernet_setting_data[7];
 8002ac2:	4b8a      	ldr	r3, [pc, #552]	@ (8002cec <main+0xb04>)
 8002ac4:	79da      	ldrb	r2, [r3, #7]
 8002ac6:	4b8f      	ldr	r3, [pc, #572]	@ (8002d04 <main+0xb1c>)
 8002ac8:	701a      	strb	r2, [r3, #0]
			  ip_server2 = Ethernet_setting_data[8];
 8002aca:	4b88      	ldr	r3, [pc, #544]	@ (8002cec <main+0xb04>)
 8002acc:	7a1a      	ldrb	r2, [r3, #8]
 8002ace:	4b8e      	ldr	r3, [pc, #568]	@ (8002d08 <main+0xb20>)
 8002ad0:	701a      	strb	r2, [r3, #0]
			  ip_server3 = Ethernet_setting_data[9];
 8002ad2:	4b86      	ldr	r3, [pc, #536]	@ (8002cec <main+0xb04>)
 8002ad4:	7a5a      	ldrb	r2, [r3, #9]
 8002ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8002d0c <main+0xb24>)
 8002ad8:	701a      	strb	r2, [r3, #0]
			  ip_server4 = Ethernet_setting_data[10];
 8002ada:	4b84      	ldr	r3, [pc, #528]	@ (8002cec <main+0xb04>)
 8002adc:	7a9a      	ldrb	r2, [r3, #10]
 8002ade:	4b8c      	ldr	r3, [pc, #560]	@ (8002d10 <main+0xb28>)
 8002ae0:	701a      	strb	r2, [r3, #0]
			  port_server = Ethernet_setting_data[11]<<8|Ethernet_setting_data[12];
 8002ae2:	4b82      	ldr	r3, [pc, #520]	@ (8002cec <main+0xb04>)
 8002ae4:	7adb      	ldrb	r3, [r3, #11]
 8002ae6:	b21b      	sxth	r3, r3
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	b21a      	sxth	r2, r3
 8002aec:	4b7f      	ldr	r3, [pc, #508]	@ (8002cec <main+0xb04>)
 8002aee:	7b1b      	ldrb	r3, [r3, #12]
 8002af0:	b21b      	sxth	r3, r3
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b21b      	sxth	r3, r3
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b86      	ldr	r3, [pc, #536]	@ (8002d14 <main+0xb2c>)
 8002afa:	801a      	strh	r2, [r3, #0]
			  time_delay = Ethernet_setting_data[13];
 8002afc:	4b7b      	ldr	r3, [pc, #492]	@ (8002cec <main+0xb04>)
 8002afe:	7b5a      	ldrb	r2, [r3, #13]
 8002b00:	4b85      	ldr	r3, [pc, #532]	@ (8002d18 <main+0xb30>)
 8002b02:	701a      	strb	r2, [r3, #0]
			  elevator_mode = Ethernet_setting_data[14];
 8002b04:	4b79      	ldr	r3, [pc, #484]	@ (8002cec <main+0xb04>)
 8002b06:	7b9a      	ldrb	r2, [r3, #14]
 8002b08:	4b84      	ldr	r3, [pc, #528]	@ (8002d1c <main+0xb34>)
 8002b0a:	701a      	strb	r2, [r3, #0]
			  lock_default_1 = Ethernet_setting_data[15]|(Ethernet_setting_data[16]<<8)|(Ethernet_setting_data[17]<<16)|(Ethernet_setting_data[18]<<24);
 8002b0c:	4b77      	ldr	r3, [pc, #476]	@ (8002cec <main+0xb04>)
 8002b0e:	7bdb      	ldrb	r3, [r3, #15]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b76      	ldr	r3, [pc, #472]	@ (8002cec <main+0xb04>)
 8002b14:	7c1b      	ldrb	r3, [r3, #16]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	4b74      	ldr	r3, [pc, #464]	@ (8002cec <main+0xb04>)
 8002b1c:	7c5b      	ldrb	r3, [r3, #17]
 8002b1e:	041b      	lsls	r3, r3, #16
 8002b20:	431a      	orrs	r2, r3
 8002b22:	4b72      	ldr	r3, [pc, #456]	@ (8002cec <main+0xb04>)
 8002b24:	7c9b      	ldrb	r3, [r3, #18]
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b7c      	ldr	r3, [pc, #496]	@ (8002d20 <main+0xb38>)
 8002b2e:	601a      	str	r2, [r3, #0]
			  lock_default_2 = Ethernet_setting_data[19]|(Ethernet_setting_data[20]<<8)|(Ethernet_setting_data[21]<<16)|(Ethernet_setting_data[22]<<24);
 8002b30:	4b6e      	ldr	r3, [pc, #440]	@ (8002cec <main+0xb04>)
 8002b32:	7cdb      	ldrb	r3, [r3, #19]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b6d      	ldr	r3, [pc, #436]	@ (8002cec <main+0xb04>)
 8002b38:	7d1b      	ldrb	r3, [r3, #20]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	4b6b      	ldr	r3, [pc, #428]	@ (8002cec <main+0xb04>)
 8002b40:	7d5b      	ldrb	r3, [r3, #21]
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	431a      	orrs	r2, r3
 8002b46:	4b69      	ldr	r3, [pc, #420]	@ (8002cec <main+0xb04>)
 8002b48:	7d9b      	ldrb	r3, [r3, #22]
 8002b4a:	061b      	lsls	r3, r3, #24
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b74      	ldr	r3, [pc, #464]	@ (8002d24 <main+0xb3c>)
 8002b52:	601a      	str	r2, [r3, #0]
			  save_data();
 8002b54:	f001 fa9e 	bl	8004094 <save_data>
			  sendString("S", "OK");
 8002b58:	4973      	ldr	r1, [pc, #460]	@ (8002d28 <main+0xb40>)
 8002b5a:	4874      	ldr	r0, [pc, #464]	@ (8002d2c <main+0xb44>)
 8002b5c:	f001 f92c 	bl	8003db8 <sendString>
			  HAL_NVIC_SystemReset();
 8002b60:	f003 f9b5 	bl	8005ece <HAL_NVIC_SystemReset>
			  break;
 8002b64:	e009      	b.n	8002b7a <main+0x992>
		  case 1:// bypass mode
			  bypass_from_Eth = Ethernet_setting_data[1];
 8002b66:	4b61      	ldr	r3, [pc, #388]	@ (8002cec <main+0xb04>)
 8002b68:	785b      	ldrb	r3, [r3, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	4b6e      	ldr	r3, [pc, #440]	@ (8002d30 <main+0xb48>)
 8002b76:	701a      	strb	r2, [r3, #0]
			  break;
 8002b78:	bf00      	nop
		  }
	  }
	  /// reset or conmand read data from PC
	  if (Ethernet_read_and_reset)// 0x52
 8002b7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d34 <main+0xb4c>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8089 	beq.w	8002c96 <main+0xaae>
	  {
		  Ethernet_read_and_reset = false;
 8002b84:	4b6b      	ldr	r3, [pc, #428]	@ (8002d34 <main+0xb4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_read_and_reset_data)
 8002b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002d38 <main+0xb50>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <main+0x9b0>
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d003      	beq.n	8002b9e <main+0x9b6>
 8002b96:	e07e      	b.n	8002c96 <main+0xaae>
		  {
		  case 0:
			  HAL_NVIC_SystemReset();
 8002b98:	f003 f999 	bl	8005ece <HAL_NVIC_SystemReset>
			  break;
 8002b9c:	e07b      	b.n	8002c96 <main+0xaae>
		  case 1:
			  data_info[0] = ip1;
 8002b9e:	4b54      	ldr	r3, [pc, #336]	@ (8002cf0 <main+0xb08>)
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	4b66      	ldr	r3, [pc, #408]	@ (8002d3c <main+0xb54>)
 8002ba4:	701a      	strb	r2, [r3, #0]
			  data_info[1] = ip2;
 8002ba6:	4b53      	ldr	r3, [pc, #332]	@ (8002cf4 <main+0xb0c>)
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	4b64      	ldr	r3, [pc, #400]	@ (8002d3c <main+0xb54>)
 8002bac:	705a      	strb	r2, [r3, #1]
			  data_info[2] = ip3;
 8002bae:	4b52      	ldr	r3, [pc, #328]	@ (8002cf8 <main+0xb10>)
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	4b62      	ldr	r3, [pc, #392]	@ (8002d3c <main+0xb54>)
 8002bb4:	709a      	strb	r2, [r3, #2]
			  data_info[3] = ip4;
 8002bb6:	4b51      	ldr	r3, [pc, #324]	@ (8002cfc <main+0xb14>)
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b60      	ldr	r3, [pc, #384]	@ (8002d3c <main+0xb54>)
 8002bbc:	70da      	strb	r2, [r3, #3]
			  data_info[4] = port_client>>8;
 8002bbe:	4b50      	ldr	r3, [pc, #320]	@ (8002d00 <main+0xb18>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	4b5c      	ldr	r3, [pc, #368]	@ (8002d3c <main+0xb54>)
 8002bca:	711a      	strb	r2, [r3, #4]
			  data_info[5] = port_client & 0xFF;
 8002bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8002d00 <main+0xb18>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b5a      	ldr	r3, [pc, #360]	@ (8002d3c <main+0xb54>)
 8002bd4:	715a      	strb	r2, [r3, #5]
			  data_info[6] = ip_server1;
 8002bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8002d04 <main+0xb1c>)
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	4b58      	ldr	r3, [pc, #352]	@ (8002d3c <main+0xb54>)
 8002bdc:	719a      	strb	r2, [r3, #6]
			  data_info[7] = ip_server2;
 8002bde:	4b4a      	ldr	r3, [pc, #296]	@ (8002d08 <main+0xb20>)
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	4b56      	ldr	r3, [pc, #344]	@ (8002d3c <main+0xb54>)
 8002be4:	71da      	strb	r2, [r3, #7]
			  data_info[8] = ip_server3;
 8002be6:	4b49      	ldr	r3, [pc, #292]	@ (8002d0c <main+0xb24>)
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	4b54      	ldr	r3, [pc, #336]	@ (8002d3c <main+0xb54>)
 8002bec:	721a      	strb	r2, [r3, #8]
			  data_info[9] = ip_server4;
 8002bee:	4b48      	ldr	r3, [pc, #288]	@ (8002d10 <main+0xb28>)
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	4b52      	ldr	r3, [pc, #328]	@ (8002d3c <main+0xb54>)
 8002bf4:	725a      	strb	r2, [r3, #9]
			  data_info[10] = port_server>>8;
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <main+0xb2c>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	4b4e      	ldr	r3, [pc, #312]	@ (8002d3c <main+0xb54>)
 8002c02:	729a      	strb	r2, [r3, #10]
			  data_info[11] = port_server & 0xFF;
 8002c04:	4b43      	ldr	r3, [pc, #268]	@ (8002d14 <main+0xb2c>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d3c <main+0xb54>)
 8002c0c:	72da      	strb	r2, [r3, #11]
			  data_info[12] = time_delay;
 8002c0e:	4b42      	ldr	r3, [pc, #264]	@ (8002d18 <main+0xb30>)
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	4b4a      	ldr	r3, [pc, #296]	@ (8002d3c <main+0xb54>)
 8002c14:	731a      	strb	r2, [r3, #12]
			  data_info[13] = elevator_mode;
 8002c16:	4b41      	ldr	r3, [pc, #260]	@ (8002d1c <main+0xb34>)
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	4b48      	ldr	r3, [pc, #288]	@ (8002d3c <main+0xb54>)
 8002c1c:	735a      	strb	r2, [r3, #13]
			  data_info[14] = number_card>>24&0xFF;
 8002c1e:	4b48      	ldr	r3, [pc, #288]	@ (8002d40 <main+0xb58>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0e1b      	lsrs	r3, r3, #24
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b45      	ldr	r3, [pc, #276]	@ (8002d3c <main+0xb54>)
 8002c28:	739a      	strb	r2, [r3, #14]
			  data_info[15] = number_card>>16&0xFF;
 8002c2a:	4b45      	ldr	r3, [pc, #276]	@ (8002d40 <main+0xb58>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0c1b      	lsrs	r3, r3, #16
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b42      	ldr	r3, [pc, #264]	@ (8002d3c <main+0xb54>)
 8002c34:	73da      	strb	r2, [r3, #15]
			  data_info[16] = number_card>>8&0xFF;
 8002c36:	4b42      	ldr	r3, [pc, #264]	@ (8002d40 <main+0xb58>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d3c <main+0xb54>)
 8002c40:	741a      	strb	r2, [r3, #16]
			  data_info[17] = number_card&0xFF;
 8002c42:	4b3f      	ldr	r3, [pc, #252]	@ (8002d40 <main+0xb58>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	4b3c      	ldr	r3, [pc, #240]	@ (8002d3c <main+0xb54>)
 8002c4a:	745a      	strb	r2, [r3, #17]
			  data_info[18] = lock_default[0];
 8002c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d44 <main+0xb5c>)
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	4b3a      	ldr	r3, [pc, #232]	@ (8002d3c <main+0xb54>)
 8002c52:	749a      	strb	r2, [r3, #18]
			  data_info[19] = lock_default[1];
 8002c54:	4b3b      	ldr	r3, [pc, #236]	@ (8002d44 <main+0xb5c>)
 8002c56:	785a      	ldrb	r2, [r3, #1]
 8002c58:	4b38      	ldr	r3, [pc, #224]	@ (8002d3c <main+0xb54>)
 8002c5a:	74da      	strb	r2, [r3, #19]
			  data_info[20] = lock_default[2];
 8002c5c:	4b39      	ldr	r3, [pc, #228]	@ (8002d44 <main+0xb5c>)
 8002c5e:	789a      	ldrb	r2, [r3, #2]
 8002c60:	4b36      	ldr	r3, [pc, #216]	@ (8002d3c <main+0xb54>)
 8002c62:	751a      	strb	r2, [r3, #20]
			  data_info[21] = lock_default[3];
 8002c64:	4b37      	ldr	r3, [pc, #220]	@ (8002d44 <main+0xb5c>)
 8002c66:	78da      	ldrb	r2, [r3, #3]
 8002c68:	4b34      	ldr	r3, [pc, #208]	@ (8002d3c <main+0xb54>)
 8002c6a:	755a      	strb	r2, [r3, #21]
			  data_info[22] = lock_default[4];
 8002c6c:	4b35      	ldr	r3, [pc, #212]	@ (8002d44 <main+0xb5c>)
 8002c6e:	791a      	ldrb	r2, [r3, #4]
 8002c70:	4b32      	ldr	r3, [pc, #200]	@ (8002d3c <main+0xb54>)
 8002c72:	759a      	strb	r2, [r3, #22]
			  data_info[23] = lock_default[5];
 8002c74:	4b33      	ldr	r3, [pc, #204]	@ (8002d44 <main+0xb5c>)
 8002c76:	795a      	ldrb	r2, [r3, #5]
 8002c78:	4b30      	ldr	r3, [pc, #192]	@ (8002d3c <main+0xb54>)
 8002c7a:	75da      	strb	r2, [r3, #23]
			  data_info[24] = lock_default[6];
 8002c7c:	4b31      	ldr	r3, [pc, #196]	@ (8002d44 <main+0xb5c>)
 8002c7e:	799a      	ldrb	r2, [r3, #6]
 8002c80:	4b2e      	ldr	r3, [pc, #184]	@ (8002d3c <main+0xb54>)
 8002c82:	761a      	strb	r2, [r3, #24]
			  data_info[25] = lock_default[7];
 8002c84:	4b2f      	ldr	r3, [pc, #188]	@ (8002d44 <main+0xb5c>)
 8002c86:	79da      	ldrb	r2, [r3, #7]
 8002c88:	4b2c      	ldr	r3, [pc, #176]	@ (8002d3c <main+0xb54>)
 8002c8a:	765a      	strb	r2, [r3, #25]
			  sendData_eth_info("R", data_info);
 8002c8c:	492b      	ldr	r1, [pc, #172]	@ (8002d3c <main+0xb54>)
 8002c8e:	482e      	ldr	r0, [pc, #184]	@ (8002d48 <main+0xb60>)
 8002c90:	f001 f8e8 	bl	8003e64 <sendData_eth_info>
			  break;
 8002c94:	bf00      	nop
		  }
	  }
	  //// send data to PC, to keep alive connection
	  if (!add_card_uart && (abs(HAL_GetTick() - time_check) > 5000))
 8002c96:	4b2d      	ldr	r3, [pc, #180]	@ (8002d4c <main+0xb64>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	f083 0301 	eor.w	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80c9 	beq.w	8002e38 <main+0xc50>
 8002ca6:	f002 f8f7 	bl	8004e98 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	4b28      	ldr	r3, [pc, #160]	@ (8002d50 <main+0xb68>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bfb8      	it	lt
 8002cb6:	425b      	neglt	r3, r3
 8002cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	f340 80bb 	ble.w	8002e38 <main+0xc50>
	  {
		  keepalive = reconect_eth(SOCK_NUM);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f001 fc74 	bl	80045b0 <reconect_eth>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4b21      	ldr	r3, [pc, #132]	@ (8002d54 <main+0xb6c>)
 8002cce:	701a      	strb	r2, [r3, #0]
		  if (keepalive == SOCK_ESTABLISHED)
 8002cd0:	4b20      	ldr	r3, [pc, #128]	@ (8002d54 <main+0xb6c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b17      	cmp	r3, #23
 8002cd6:	f040 80af 	bne.w	8002e38 <main+0xc50>
		  {
			  if (unlock_fire)
 8002cda:	4b1f      	ldr	r3, [pc, #124]	@ (8002d58 <main+0xb70>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d03e      	beq.n	8002d60 <main+0xb78>
			  {
				  c[1] = 0x46;//F
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d5c <main+0xb74>)
 8002ce4:	2246      	movs	r2, #70	@ 0x46
 8002ce6:	705a      	strb	r2, [r3, #1]
 8002ce8:	e06e      	b.n	8002dc8 <main+0xbe0>
 8002cea:	bf00      	nop
 8002cec:	2000055c 	.word	0x2000055c
 8002cf0:	2000051c 	.word	0x2000051c
 8002cf4:	2000051d 	.word	0x2000051d
 8002cf8:	2000051e 	.word	0x2000051e
 8002cfc:	2000051f 	.word	0x2000051f
 8002d00:	20000584 	.word	0x20000584
 8002d04:	20000520 	.word	0x20000520
 8002d08:	20000521 	.word	0x20000521
 8002d0c:	20000522 	.word	0x20000522
 8002d10:	20000523 	.word	0x20000523
 8002d14:	20000582 	.word	0x20000582
 8002d18:	20000510 	.word	0x20000510
 8002d1c:	20000542 	.word	0x20000542
 8002d20:	200006a8 	.word	0x200006a8
 8002d24:	200006ac 	.word	0x200006ac
 8002d28:	080098e4 	.word	0x080098e4
 8002d2c:	080098e8 	.word	0x080098e8
 8002d30:	200006d9 	.word	0x200006d9
 8002d34:	20000728 	.word	0x20000728
 8002d38:	20000575 	.word	0x20000575
 8002d3c:	20000524 	.word	0x20000524
 8002d40:	20000694 	.word	0x20000694
 8002d44:	20000514 	.word	0x20000514
 8002d48:	080098ec 	.word	0x080098ec
 8002d4c:	20000726 	.word	0x20000726
 8002d50:	200006b0 	.word	0x200006b0
 8002d54:	2000054c 	.word	0x2000054c
 8002d58:	2000072a 	.word	0x2000072a
 8002d5c:	20000034 	.word	0x20000034
			  } else if (bypass_from_Eth)
 8002d60:	4ba1      	ldr	r3, [pc, #644]	@ (8002fe8 <main+0xe00>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <main+0xb88>
			  {
				  c[1] = 0x50;//P
 8002d68:	4ba0      	ldr	r3, [pc, #640]	@ (8002fec <main+0xe04>)
 8002d6a:	2250      	movs	r2, #80	@ 0x50
 8002d6c:	705a      	strb	r2, [r3, #1]
 8002d6e:	e02b      	b.n	8002dc8 <main+0xbe0>
			  } else if (bypass_from_REB)
 8002d70:	4b9f      	ldr	r3, [pc, #636]	@ (8002ff0 <main+0xe08>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <main+0xb98>
			  {
				  c[1] = 0x45;//E
 8002d78:	4b9c      	ldr	r3, [pc, #624]	@ (8002fec <main+0xe04>)
 8002d7a:	2245      	movs	r2, #69	@ 0x45
 8002d7c:	705a      	strb	r2, [r3, #1]
 8002d7e:	e023      	b.n	8002dc8 <main+0xbe0>
			  } else if (!REB_connected)
 8002d80:	4b9c      	ldr	r3, [pc, #624]	@ (8002ff4 <main+0xe0c>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	f083 0301 	eor.w	r3, r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <main+0xbae>
			  {
				  c[1] = 0x44;//D
 8002d8e:	4b97      	ldr	r3, [pc, #604]	@ (8002fec <main+0xe04>)
 8002d90:	2244      	movs	r2, #68	@ 0x44
 8002d92:	705a      	strb	r2, [r3, #1]
 8002d94:	e018      	b.n	8002dc8 <main+0xbe0>
			  } else if (!HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin))
 8002d96:	2104      	movs	r1, #4
 8002d98:	4897      	ldr	r0, [pc, #604]	@ (8002ff8 <main+0xe10>)
 8002d9a:	f003 fecf 	bl	8006b3c <HAL_GPIO_ReadPin>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <main+0xbc4>
			  {
				  c[1] = 0x43;//C
 8002da4:	4b91      	ldr	r3, [pc, #580]	@ (8002fec <main+0xe04>)
 8002da6:	2243      	movs	r2, #67	@ 0x43
 8002da8:	705a      	strb	r2, [r3, #1]
 8002daa:	e00d      	b.n	8002dc8 <main+0xbe0>
			  } else if (!Ethernet_connected)
 8002dac:	4b93      	ldr	r3, [pc, #588]	@ (8002ffc <main+0xe14>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	f083 0301 	eor.w	r3, r3, #1
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <main+0xbda>
			  {
				  c[1] = 0x4F;//o
 8002dba:	4b8c      	ldr	r3, [pc, #560]	@ (8002fec <main+0xe04>)
 8002dbc:	224f      	movs	r2, #79	@ 0x4f
 8002dbe:	705a      	strb	r2, [r3, #1]
 8002dc0:	e002      	b.n	8002dc8 <main+0xbe0>
			  } else
			  {
				  c[1] = 0x52;//r
 8002dc2:	4b8a      	ldr	r3, [pc, #552]	@ (8002fec <main+0xe04>)
 8002dc4:	2252      	movs	r2, #82	@ 0x52
 8002dc6:	705a      	strb	r2, [r3, #1]
			  }
			  send(SOCK_NUM, c, 2);
 8002dc8:	2202      	movs	r2, #2
 8002dca:	4988      	ldr	r1, [pc, #544]	@ (8002fec <main+0xe04>)
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd ff8b 	bl	8000ce8 <send>
		  }
	  }

	  while (send_card_to_pc)
 8002dd2:	e031      	b.n	8002e38 <main+0xc50>
	  {
		  HAL_Delay(1000);
 8002dd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dd8:	f002 f868 	bl	8004eac <HAL_Delay>
		  for (uint32_t i=0; i< number_card; i++)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002de2:	e01c      	b.n	8002e1e <main+0xc36>
		  {
			  W25Q_FastRead_address(i*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&send_user);
 8002de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002de8:	015b      	lsls	r3, r3, #5
 8002dea:	4a85      	ldr	r2, [pc, #532]	@ (8003000 <main+0xe18>)
 8002dec:	2120      	movs	r1, #32
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fe94 	bl	8001b1c <W25Q_FastRead_address>
			  sendData_eth_CardID ("X", send_user);
 8002df4:	4e82      	ldr	r6, [pc, #520]	@ (8003000 <main+0xe18>)
 8002df6:	466d      	mov	r5, sp
 8002df8:	f106 040c 	add.w	r4, r6, #12
 8002dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	602b      	str	r3, [r5, #0]
 8002e04:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002e08:	487e      	ldr	r0, [pc, #504]	@ (8003004 <main+0xe1c>)
 8002e0a:	f001 f85d 	bl	8003ec8 <sendData_eth_CardID>
			  HAL_Delay(100);
 8002e0e:	2064      	movs	r0, #100	@ 0x64
 8002e10:	f002 f84c 	bl	8004eac <HAL_Delay>
		  for (uint32_t i=0; i< number_card; i++)
 8002e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003008 <main+0xe20>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3dc      	bcc.n	8002de4 <main+0xbfc>
		  }
		  send_u8_eth("X", 1);
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4875      	ldr	r0, [pc, #468]	@ (8003004 <main+0xe1c>)
 8002e2e:	f000 ffa9 	bl	8003d84 <send_u8_eth>
		  send_card_to_pc = false;
 8002e32:	4b76      	ldr	r3, [pc, #472]	@ (800300c <main+0xe24>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
	  while (send_card_to_pc)
 8002e38:	4b74      	ldr	r3, [pc, #464]	@ (800300c <main+0xe24>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1c9      	bne.n	8002dd4 <main+0xbec>
	  }
	  while (write_mode)
 8002e40:	e16f      	b.n	8003122 <main+0xf3a>
	  {
		  HAL_Delay(1000);
 8002e42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e46:	f002 f831 	bl	8004eac <HAL_Delay>
		  uint32_t totalCard = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		  sendString("W", "EOK");
 8002e50:	496f      	ldr	r1, [pc, #444]	@ (8003010 <main+0xe28>)
 8002e52:	4870      	ldr	r0, [pc, #448]	@ (8003014 <main+0xe2c>)
 8002e54:	f000 ffb0 	bl	8003db8 <sendString>
		  time_break = HAL_GetTick();
 8002e58:	f002 f81e 	bl	8004e98 <HAL_GetTick>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4a6e      	ldr	r2, [pc, #440]	@ (8003018 <main+0xe30>)
 8002e60:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 8002e62:	4b61      	ldr	r3, [pc, #388]	@ (8002fe8 <main+0xe00>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd fb1a 	bl	80004a2 <getSn_RX_RSR>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b6a      	ldr	r3, [pc, #424]	@ (800301c <main+0xe34>)
 8002e74:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fd fb13 	bl	80004a2 <getSn_RX_RSR>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4b66      	ldr	r3, [pc, #408]	@ (800301c <main+0xe34>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 814a 	bne.w	800311e <main+0xf36>
			  {
				  if (lenData > 500)
 8002e8a:	4b64      	ldr	r3, [pc, #400]	@ (800301c <main+0xe34>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002e92:	d901      	bls.n	8002e98 <main+0xcb0>
				  {
					  HAL_NVIC_SystemReset();
 8002e94:	f003 f81b 	bl	8005ece <HAL_NVIC_SystemReset>
				  }
				  if (!add_card_uart && (lenData > 0))
 8002e98:	4b61      	ldr	r3, [pc, #388]	@ (8003020 <main+0xe38>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	f083 0301 	eor.w	r3, r3, #1
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8126 	beq.w	80030f4 <main+0xf0c>
 8002ea8:	4b5c      	ldr	r3, [pc, #368]	@ (800301c <main+0xe34>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8121 	beq.w	80030f4 <main+0xf0c>
				  {
					  recv(SOCK_NUM, buf, lenData);
 8002eb2:	4b5a      	ldr	r3, [pc, #360]	@ (800301c <main+0xe34>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	495a      	ldr	r1, [pc, #360]	@ (8003024 <main+0xe3c>)
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7fe f80b 	bl	8000ed8 <recv>
					  if (buf[0] == 0x57)
 8002ec2:	4b58      	ldr	r3, [pc, #352]	@ (8003024 <main+0xe3c>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b57      	cmp	r3, #87	@ 0x57
 8002ec8:	f040 8114 	bne.w	80030f4 <main+0xf0c>
					  {
						  if (buf[1] == 0x44)
 8002ecc:	4b55      	ldr	r3, [pc, #340]	@ (8003024 <main+0xe3c>)
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	2b44      	cmp	r3, #68	@ 0x44
 8002ed2:	f040 80ad 	bne.w	8003030 <main+0xe48>
						  {
							  totalCard++;
 8002ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eda:	3301      	adds	r3, #1
 8002edc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							  write_user.STT = totalCard;
 8002ee0:	4a51      	ldr	r2, [pc, #324]	@ (8003028 <main+0xe40>)
 8002ee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ee6:	6013      	str	r3, [r2, #0]
							  write_user.cardID =  buf[2]<<24|buf[3]<<16|buf[4]<<8|buf[5];
 8002ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8003024 <main+0xe3c>)
 8002eea:	789b      	ldrb	r3, [r3, #2]
 8002eec:	061a      	lsls	r2, r3, #24
 8002eee:	4b4d      	ldr	r3, [pc, #308]	@ (8003024 <main+0xe3c>)
 8002ef0:	78db      	ldrb	r3, [r3, #3]
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8003024 <main+0xe3c>)
 8002ef8:	791b      	ldrb	r3, [r3, #4]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	4313      	orrs	r3, r2
 8002efe:	4a49      	ldr	r2, [pc, #292]	@ (8003024 <main+0xe3c>)
 8002f00:	7952      	ldrb	r2, [r2, #5]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b48      	ldr	r3, [pc, #288]	@ (8003028 <main+0xe40>)
 8002f08:	605a      	str	r2, [r3, #4]
							  write_user.permis[0] = buf[6];
 8002f0a:	4b46      	ldr	r3, [pc, #280]	@ (8003024 <main+0xe3c>)
 8002f0c:	799a      	ldrb	r2, [r3, #6]
 8002f0e:	4b46      	ldr	r3, [pc, #280]	@ (8003028 <main+0xe40>)
 8002f10:	721a      	strb	r2, [r3, #8]
							  write_user.permis[1] = buf[7];
 8002f12:	4b44      	ldr	r3, [pc, #272]	@ (8003024 <main+0xe3c>)
 8002f14:	79da      	ldrb	r2, [r3, #7]
 8002f16:	4b44      	ldr	r3, [pc, #272]	@ (8003028 <main+0xe40>)
 8002f18:	725a      	strb	r2, [r3, #9]
							  write_user.permis[2] = buf[8];
 8002f1a:	4b42      	ldr	r3, [pc, #264]	@ (8003024 <main+0xe3c>)
 8002f1c:	7a1a      	ldrb	r2, [r3, #8]
 8002f1e:	4b42      	ldr	r3, [pc, #264]	@ (8003028 <main+0xe40>)
 8002f20:	729a      	strb	r2, [r3, #10]
							  write_user.permis[3] = buf[9];
 8002f22:	4b40      	ldr	r3, [pc, #256]	@ (8003024 <main+0xe3c>)
 8002f24:	7a5a      	ldrb	r2, [r3, #9]
 8002f26:	4b40      	ldr	r3, [pc, #256]	@ (8003028 <main+0xe40>)
 8002f28:	72da      	strb	r2, [r3, #11]
							  write_user.permis[4] = buf[10];
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003024 <main+0xe3c>)
 8002f2c:	7a9a      	ldrb	r2, [r3, #10]
 8002f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003028 <main+0xe40>)
 8002f30:	731a      	strb	r2, [r3, #12]
							  write_user.permis[5] = buf[11];
 8002f32:	4b3c      	ldr	r3, [pc, #240]	@ (8003024 <main+0xe3c>)
 8002f34:	7ada      	ldrb	r2, [r3, #11]
 8002f36:	4b3c      	ldr	r3, [pc, #240]	@ (8003028 <main+0xe40>)
 8002f38:	735a      	strb	r2, [r3, #13]
							  write_user.permis[6] = buf[12];
 8002f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003024 <main+0xe3c>)
 8002f3c:	7b1a      	ldrb	r2, [r3, #12]
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <main+0xe40>)
 8002f40:	739a      	strb	r2, [r3, #14]
							  write_user.permis[7] = buf[13];
 8002f42:	4b38      	ldr	r3, [pc, #224]	@ (8003024 <main+0xe3c>)
 8002f44:	7b5a      	ldrb	r2, [r3, #13]
 8002f46:	4b38      	ldr	r3, [pc, #224]	@ (8003028 <main+0xe40>)
 8002f48:	73da      	strb	r2, [r3, #15]
							  write_user.beginDate = buf[14];
 8002f4a:	4b36      	ldr	r3, [pc, #216]	@ (8003024 <main+0xe3c>)
 8002f4c:	7b9a      	ldrb	r2, [r3, #14]
 8002f4e:	4b36      	ldr	r3, [pc, #216]	@ (8003028 <main+0xe40>)
 8002f50:	74da      	strb	r2, [r3, #19]
							  write_user.beginMonth = buf[15];
 8002f52:	4b34      	ldr	r3, [pc, #208]	@ (8003024 <main+0xe3c>)
 8002f54:	7bda      	ldrb	r2, [r3, #15]
 8002f56:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <main+0xe40>)
 8002f58:	749a      	strb	r2, [r3, #18]
							  write_user.beginYear = buf[16]<<8 | buf[17];
 8002f5a:	4b32      	ldr	r3, [pc, #200]	@ (8003024 <main+0xe3c>)
 8002f5c:	7c1b      	ldrb	r3, [r3, #16]
 8002f5e:	b21b      	sxth	r3, r3
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	b21a      	sxth	r2, r3
 8002f64:	4b2f      	ldr	r3, [pc, #188]	@ (8003024 <main+0xe3c>)
 8002f66:	7c5b      	ldrb	r3, [r3, #17]
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b21b      	sxth	r3, r3
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <main+0xe40>)
 8002f72:	821a      	strh	r2, [r3, #16]
							  write_user.beginHour = buf[18];
 8002f74:	4b2b      	ldr	r3, [pc, #172]	@ (8003024 <main+0xe3c>)
 8002f76:	7c9a      	ldrb	r2, [r3, #18]
 8002f78:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <main+0xe40>)
 8002f7a:	751a      	strb	r2, [r3, #20]
							  write_user.beginMinute = buf[19];
 8002f7c:	4b29      	ldr	r3, [pc, #164]	@ (8003024 <main+0xe3c>)
 8002f7e:	7cda      	ldrb	r2, [r3, #19]
 8002f80:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <main+0xe40>)
 8002f82:	755a      	strb	r2, [r3, #21]
							  write_user.endDate = buf[20];
 8002f84:	4b27      	ldr	r3, [pc, #156]	@ (8003024 <main+0xe3c>)
 8002f86:	7d1a      	ldrb	r2, [r3, #20]
 8002f88:	4b27      	ldr	r3, [pc, #156]	@ (8003028 <main+0xe40>)
 8002f8a:	765a      	strb	r2, [r3, #25]
							  write_user.endMonth = buf[21];
 8002f8c:	4b25      	ldr	r3, [pc, #148]	@ (8003024 <main+0xe3c>)
 8002f8e:	7d5a      	ldrb	r2, [r3, #21]
 8002f90:	4b25      	ldr	r3, [pc, #148]	@ (8003028 <main+0xe40>)
 8002f92:	761a      	strb	r2, [r3, #24]
							  write_user.endYear = buf[22]<<8 | buf[23];
 8002f94:	4b23      	ldr	r3, [pc, #140]	@ (8003024 <main+0xe3c>)
 8002f96:	7d9b      	ldrb	r3, [r3, #22]
 8002f98:	b21b      	sxth	r3, r3
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	b21a      	sxth	r2, r3
 8002f9e:	4b21      	ldr	r3, [pc, #132]	@ (8003024 <main+0xe3c>)
 8002fa0:	7ddb      	ldrb	r3, [r3, #23]
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	4b1f      	ldr	r3, [pc, #124]	@ (8003028 <main+0xe40>)
 8002fac:	82da      	strh	r2, [r3, #22]
							  write_user.endHour = buf[24];
 8002fae:	4b1d      	ldr	r3, [pc, #116]	@ (8003024 <main+0xe3c>)
 8002fb0:	7e1a      	ldrb	r2, [r3, #24]
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003028 <main+0xe40>)
 8002fb4:	769a      	strb	r2, [r3, #26]
							  write_user.endMinute = buf[25];
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <main+0xe3c>)
 8002fb8:	7e5a      	ldrb	r2, [r3, #25]
 8002fba:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <main+0xe40>)
 8002fbc:	76da      	strb	r2, [r3, #27]
							  W25Q_Write_Nbytes((totalCard-1)*sizeof(user_info_t) + Block32, (uint8_t *)&write_user, sizeof(user_info_t));
 8002fbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fc2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002fc6:	33ff      	adds	r3, #255	@ 0xff
 8002fc8:	015b      	lsls	r3, r3, #5
 8002fca:	2220      	movs	r2, #32
 8002fcc:	4916      	ldr	r1, [pc, #88]	@ (8003028 <main+0xe40>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fe61 	bl	8001c96 <W25Q_Write_Nbytes>
							  sendString("W", "DOK");
 8002fd4:	4915      	ldr	r1, [pc, #84]	@ (800302c <main+0xe44>)
 8002fd6:	480f      	ldr	r0, [pc, #60]	@ (8003014 <main+0xe2c>)
 8002fd8:	f000 feee 	bl	8003db8 <sendString>
							  time_break = HAL_GetTick();
 8002fdc:	f001 ff5c 	bl	8004e98 <HAL_GetTick>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8003018 <main+0xe30>)
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e085      	b.n	80030f4 <main+0xf0c>
 8002fe8:	200006d9 	.word	0x200006d9
 8002fec:	20000034 	.word	0x20000034
 8002ff0:	200006d8 	.word	0x200006d8
 8002ff4:	20000036 	.word	0x20000036
 8002ff8:	40010800 	.word	0x40010800
 8002ffc:	2000071c 	.word	0x2000071c
 8003000:	200007ac 	.word	0x200007ac
 8003004:	080098f0 	.word	0x080098f0
 8003008:	20000694 	.word	0x20000694
 800300c:	20000721 	.word	0x20000721
 8003010:	080098f4 	.word	0x080098f4
 8003014:	080098f8 	.word	0x080098f8
 8003018:	2000069c 	.word	0x2000069c
 800301c:	200006a0 	.word	0x200006a0
 8003020:	20000726 	.word	0x20000726
 8003024:	20000304 	.word	0x20000304
 8003028:	2000078c 	.word	0x2000078c
 800302c:	080098fc 	.word	0x080098fc
						  } else if (buf[1] == 0x43)
 8003030:	4ba9      	ldr	r3, [pc, #676]	@ (80032d8 <main+0x10f0>)
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	2b43      	cmp	r3, #67	@ 0x43
 8003036:	d15d      	bne.n	80030f4 <main+0xf0c>
						  {
							  write_done = true;
 8003038:	4ba8      	ldr	r3, [pc, #672]	@ (80032dc <main+0x10f4>)
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
				  }
			  } else
			  {
				  continue;
			  }
			  while (write_done)
 800303e:	e059      	b.n	80030f4 <main+0xf0c>
			  {
				  for (uint8_t i=0; i<(number_card)*sizeof(user_info_t)/Sector+1; i++)
 8003040:	2300      	movs	r3, #0
 8003042:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8003046:	e00a      	b.n	800305e <main+0xe76>
				  {
					  W25Q_Erase_Sector(i);
 8003048:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800304c:	b29b      	uxth	r3, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fdd0 	bl	8001bf4 <W25Q_Erase_Sector>
				  for (uint8_t i=0; i<(number_card)*sizeof(user_info_t)/Sector+1; i++)
 8003054:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8003058:	3301      	adds	r3, #1
 800305a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800305e:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8003062:	4b9f      	ldr	r3, [pc, #636]	@ (80032e0 <main+0x10f8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	015b      	lsls	r3, r3, #5
 8003068:	0b1b      	lsrs	r3, r3, #12
 800306a:	3301      	adds	r3, #1
 800306c:	429a      	cmp	r2, r3
 800306e:	d3eb      	bcc.n	8003048 <main+0xe60>
				  }
				  for (uint32_t i = 0; i<totalCard; i++)
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003076:	e016      	b.n	80030a6 <main+0xebe>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t)+ Block32, sizeof(user_info_t), (uint8_t *)&send_user);
 8003078:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800307c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003080:	015b      	lsls	r3, r3, #5
 8003082:	4a98      	ldr	r2, [pc, #608]	@ (80032e4 <main+0x10fc>)
 8003084:	2120      	movs	r1, #32
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fd48 	bl	8001b1c <W25Q_FastRead_address>
					  W25Q_Write_Nbytes(i*sizeof(user_info_t), (uint8_t *)&send_user, sizeof(user_info_t));
 800308c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003090:	015b      	lsls	r3, r3, #5
 8003092:	2220      	movs	r2, #32
 8003094:	4993      	ldr	r1, [pc, #588]	@ (80032e4 <main+0x10fc>)
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fdfd 	bl	8001c96 <W25Q_Write_Nbytes>
				  for (uint32_t i = 0; i<totalCard; i++)
 800309c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030a0:	3301      	adds	r3, #1
 80030a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030a6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80030aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d3e2      	bcc.n	8003078 <main+0xe90>
				  }
				  for (uint32_t i=0; i<((totalCard*sizeof(user_info_t)/Sector)+1); i++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030b8:	e00d      	b.n	80030d6 <main+0xeee>
				  {
					  W25Q_Erase_Sector(i + Block32/0x1000);
 80030ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fd94 	bl	8001bf4 <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((totalCard*sizeof(user_info_t)/Sector)+1); i++)
 80030cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030d0:	3301      	adds	r3, #1
 80030d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030da:	015b      	lsls	r3, r3, #5
 80030dc:	0b1b      	lsrs	r3, r3, #12
 80030de:	3301      	adds	r3, #1
 80030e0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3e8      	bcc.n	80030ba <main+0xed2>
				  }
				  sendString("W", "COK");
 80030e8:	497f      	ldr	r1, [pc, #508]	@ (80032e8 <main+0x1100>)
 80030ea:	4880      	ldr	r0, [pc, #512]	@ (80032ec <main+0x1104>)
 80030ec:	f000 fe64 	bl	8003db8 <sendString>
				  HAL_NVIC_SystemReset();
 80030f0:	f002 feed 	bl	8005ece <HAL_NVIC_SystemReset>
			  while (write_done)
 80030f4:	4b79      	ldr	r3, [pc, #484]	@ (80032dc <main+0x10f4>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1a1      	bne.n	8003040 <main+0xe58>
			  }

			  if ((abs(HAL_GetTick() - time_break) > Timeout_online))
 80030fc:	f001 fecc 	bl	8004e98 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	4b7b      	ldr	r3, [pc, #492]	@ (80032f0 <main+0x1108>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bfb8      	it	lt
 800310c:	425b      	neglt	r3, r3
 800310e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003112:	4293      	cmp	r3, r2
 8003114:	f77f aea8 	ble.w	8002e68 <main+0xc80>
			  {
				  HAL_NVIC_SystemReset();
 8003118:	f002 fed9 	bl	8005ece <HAL_NVIC_SystemReset>
 800311c:	e6a4      	b.n	8002e68 <main+0xc80>
				  continue;
 800311e:	bf00      	nop
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003120:	e6a2      	b.n	8002e68 <main+0xc80>
	  while (write_mode)
 8003122:	4b74      	ldr	r3, [pc, #464]	@ (80032f4 <main+0x110c>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f47f ae8b 	bne.w	8002e42 <main+0xc5a>
			  }
		  }
	  }
	  while (write_mode_somecard)
 800312c:	e257      	b.n	80035de <main+0x13f6>
	  {
		  HAL_Delay(1000);
 800312e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003132:	f001 febb 	bl	8004eac <HAL_Delay>
		  uint32_t add_card = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  sendString("W", "AOK");
 800313c:	496e      	ldr	r1, [pc, #440]	@ (80032f8 <main+0x1110>)
 800313e:	486b      	ldr	r0, [pc, #428]	@ (80032ec <main+0x1104>)
 8003140:	f000 fe3a 	bl	8003db8 <sendString>
		  time_break = HAL_GetTick();
 8003144:	f001 fea8 	bl	8004e98 <HAL_GetTick>
 8003148:	4603      	mov	r3, r0
 800314a:	4a69      	ldr	r2, [pc, #420]	@ (80032f0 <main+0x1108>)
 800314c:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 800314e:	4b6b      	ldr	r3, [pc, #428]	@ (80032fc <main+0x1114>)
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003154:	2000      	movs	r0, #0
 8003156:	f7fd f9a4 	bl	80004a2 <getSn_RX_RSR>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	4b68      	ldr	r3, [pc, #416]	@ (8003300 <main+0x1118>)
 8003160:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 8003162:	2000      	movs	r0, #0
 8003164:	f7fd f99d 	bl	80004a2 <getSn_RX_RSR>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	4b64      	ldr	r3, [pc, #400]	@ (8003300 <main+0x1118>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	f040 8232 	bne.w	80035da <main+0x13f2>
			  {
				  if (lenData > 512)
 8003176:	4b62      	ldr	r3, [pc, #392]	@ (8003300 <main+0x1118>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800317e:	d901      	bls.n	8003184 <main+0xf9c>
				  {
					  HAL_NVIC_SystemReset();
 8003180:	f002 fea5 	bl	8005ece <HAL_NVIC_SystemReset>
				  }
				  if (!add_card_uart && (lenData > 0))
 8003184:	4b5f      	ldr	r3, [pc, #380]	@ (8003304 <main+0x111c>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	f083 0301 	eor.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 820d 	beq.w	80035ae <main+0x13c6>
 8003194:	4b5a      	ldr	r3, [pc, #360]	@ (8003300 <main+0x1118>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8208 	beq.w	80035ae <main+0x13c6>
				  {
					  recv(SOCK_NUM, buf, lenData);
 800319e:	4b58      	ldr	r3, [pc, #352]	@ (8003300 <main+0x1118>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	494c      	ldr	r1, [pc, #304]	@ (80032d8 <main+0x10f0>)
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fd fe95 	bl	8000ed8 <recv>
					  if (buf[0] == 0x57)
 80031ae:	4b4a      	ldr	r3, [pc, #296]	@ (80032d8 <main+0x10f0>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b57      	cmp	r3, #87	@ 0x57
 80031b4:	f040 81fb 	bne.w	80035ae <main+0x13c6>
					  {
						  if (buf[1] == 0x44)
 80031b8:	4b47      	ldr	r3, [pc, #284]	@ (80032d8 <main+0x10f0>)
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	2b44      	cmp	r3, #68	@ 0x44
 80031be:	f040 80a7 	bne.w	8003310 <main+0x1128>
						  {
							  add_card++;
 80031c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031c6:	3301      	adds	r3, #1
 80031c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							  write_user.STT++;
 80031cc:	4b4e      	ldr	r3, [pc, #312]	@ (8003308 <main+0x1120>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003308 <main+0x1120>)
 80031d4:	6013      	str	r3, [r2, #0]
							  write_user.cardID =  buf[2]<<24|buf[3]<<16|buf[4]<<8|buf[5];
 80031d6:	4b40      	ldr	r3, [pc, #256]	@ (80032d8 <main+0x10f0>)
 80031d8:	789b      	ldrb	r3, [r3, #2]
 80031da:	061a      	lsls	r2, r3, #24
 80031dc:	4b3e      	ldr	r3, [pc, #248]	@ (80032d8 <main+0x10f0>)
 80031de:	78db      	ldrb	r3, [r3, #3]
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	431a      	orrs	r2, r3
 80031e4:	4b3c      	ldr	r3, [pc, #240]	@ (80032d8 <main+0x10f0>)
 80031e6:	791b      	ldrb	r3, [r3, #4]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	4313      	orrs	r3, r2
 80031ec:	4a3a      	ldr	r2, [pc, #232]	@ (80032d8 <main+0x10f0>)
 80031ee:	7952      	ldrb	r2, [r2, #5]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b44      	ldr	r3, [pc, #272]	@ (8003308 <main+0x1120>)
 80031f6:	605a      	str	r2, [r3, #4]
							  write_user.permis[0] = buf[6];
 80031f8:	4b37      	ldr	r3, [pc, #220]	@ (80032d8 <main+0x10f0>)
 80031fa:	799a      	ldrb	r2, [r3, #6]
 80031fc:	4b42      	ldr	r3, [pc, #264]	@ (8003308 <main+0x1120>)
 80031fe:	721a      	strb	r2, [r3, #8]
							  write_user.permis[1] = buf[7];
 8003200:	4b35      	ldr	r3, [pc, #212]	@ (80032d8 <main+0x10f0>)
 8003202:	79da      	ldrb	r2, [r3, #7]
 8003204:	4b40      	ldr	r3, [pc, #256]	@ (8003308 <main+0x1120>)
 8003206:	725a      	strb	r2, [r3, #9]
							  write_user.permis[2] = buf[8];
 8003208:	4b33      	ldr	r3, [pc, #204]	@ (80032d8 <main+0x10f0>)
 800320a:	7a1a      	ldrb	r2, [r3, #8]
 800320c:	4b3e      	ldr	r3, [pc, #248]	@ (8003308 <main+0x1120>)
 800320e:	729a      	strb	r2, [r3, #10]
							  write_user.permis[3] = buf[9];
 8003210:	4b31      	ldr	r3, [pc, #196]	@ (80032d8 <main+0x10f0>)
 8003212:	7a5a      	ldrb	r2, [r3, #9]
 8003214:	4b3c      	ldr	r3, [pc, #240]	@ (8003308 <main+0x1120>)
 8003216:	72da      	strb	r2, [r3, #11]
							  write_user.permis[4] = buf[10];
 8003218:	4b2f      	ldr	r3, [pc, #188]	@ (80032d8 <main+0x10f0>)
 800321a:	7a9a      	ldrb	r2, [r3, #10]
 800321c:	4b3a      	ldr	r3, [pc, #232]	@ (8003308 <main+0x1120>)
 800321e:	731a      	strb	r2, [r3, #12]
							  write_user.permis[5] = buf[11];
 8003220:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <main+0x10f0>)
 8003222:	7ada      	ldrb	r2, [r3, #11]
 8003224:	4b38      	ldr	r3, [pc, #224]	@ (8003308 <main+0x1120>)
 8003226:	735a      	strb	r2, [r3, #13]
							  write_user.permis[6] = buf[12];
 8003228:	4b2b      	ldr	r3, [pc, #172]	@ (80032d8 <main+0x10f0>)
 800322a:	7b1a      	ldrb	r2, [r3, #12]
 800322c:	4b36      	ldr	r3, [pc, #216]	@ (8003308 <main+0x1120>)
 800322e:	739a      	strb	r2, [r3, #14]
							  write_user.permis[7] = buf[13];
 8003230:	4b29      	ldr	r3, [pc, #164]	@ (80032d8 <main+0x10f0>)
 8003232:	7b5a      	ldrb	r2, [r3, #13]
 8003234:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <main+0x1120>)
 8003236:	73da      	strb	r2, [r3, #15]
							  write_user.beginDate = buf[14];
 8003238:	4b27      	ldr	r3, [pc, #156]	@ (80032d8 <main+0x10f0>)
 800323a:	7b9a      	ldrb	r2, [r3, #14]
 800323c:	4b32      	ldr	r3, [pc, #200]	@ (8003308 <main+0x1120>)
 800323e:	74da      	strb	r2, [r3, #19]
							  write_user.beginMonth = buf[15];
 8003240:	4b25      	ldr	r3, [pc, #148]	@ (80032d8 <main+0x10f0>)
 8003242:	7bda      	ldrb	r2, [r3, #15]
 8003244:	4b30      	ldr	r3, [pc, #192]	@ (8003308 <main+0x1120>)
 8003246:	749a      	strb	r2, [r3, #18]
							  write_user.beginYear = buf[16]<<8 | buf[17];
 8003248:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <main+0x10f0>)
 800324a:	7c1b      	ldrb	r3, [r3, #16]
 800324c:	b21b      	sxth	r3, r3
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	b21a      	sxth	r2, r3
 8003252:	4b21      	ldr	r3, [pc, #132]	@ (80032d8 <main+0x10f0>)
 8003254:	7c5b      	ldrb	r3, [r3, #17]
 8003256:	b21b      	sxth	r3, r3
 8003258:	4313      	orrs	r3, r2
 800325a:	b21b      	sxth	r3, r3
 800325c:	b29a      	uxth	r2, r3
 800325e:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <main+0x1120>)
 8003260:	821a      	strh	r2, [r3, #16]
							  write_user.beginHour = buf[18];
 8003262:	4b1d      	ldr	r3, [pc, #116]	@ (80032d8 <main+0x10f0>)
 8003264:	7c9a      	ldrb	r2, [r3, #18]
 8003266:	4b28      	ldr	r3, [pc, #160]	@ (8003308 <main+0x1120>)
 8003268:	751a      	strb	r2, [r3, #20]
							  write_user.beginMinute = buf[19];
 800326a:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <main+0x10f0>)
 800326c:	7cda      	ldrb	r2, [r3, #19]
 800326e:	4b26      	ldr	r3, [pc, #152]	@ (8003308 <main+0x1120>)
 8003270:	755a      	strb	r2, [r3, #21]
							  write_user.endDate = buf[20];
 8003272:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <main+0x10f0>)
 8003274:	7d1a      	ldrb	r2, [r3, #20]
 8003276:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <main+0x1120>)
 8003278:	765a      	strb	r2, [r3, #25]
							  write_user.endMonth = buf[21];
 800327a:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <main+0x10f0>)
 800327c:	7d5a      	ldrb	r2, [r3, #21]
 800327e:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <main+0x1120>)
 8003280:	761a      	strb	r2, [r3, #24]
							  write_user.endYear = buf[22]<<8 | buf[23];
 8003282:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <main+0x10f0>)
 8003284:	7d9b      	ldrb	r3, [r3, #22]
 8003286:	b21b      	sxth	r3, r3
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	b21a      	sxth	r2, r3
 800328c:	4b12      	ldr	r3, [pc, #72]	@ (80032d8 <main+0x10f0>)
 800328e:	7ddb      	ldrb	r3, [r3, #23]
 8003290:	b21b      	sxth	r3, r3
 8003292:	4313      	orrs	r3, r2
 8003294:	b21b      	sxth	r3, r3
 8003296:	b29a      	uxth	r2, r3
 8003298:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <main+0x1120>)
 800329a:	82da      	strh	r2, [r3, #22]
							  write_user.endHour = buf[24];
 800329c:	4b0e      	ldr	r3, [pc, #56]	@ (80032d8 <main+0x10f0>)
 800329e:	7e1a      	ldrb	r2, [r3, #24]
 80032a0:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <main+0x1120>)
 80032a2:	769a      	strb	r2, [r3, #26]
							  write_user.endMinute = buf[25];
 80032a4:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <main+0x10f0>)
 80032a6:	7e5a      	ldrb	r2, [r3, #25]
 80032a8:	4b17      	ldr	r3, [pc, #92]	@ (8003308 <main+0x1120>)
 80032aa:	76da      	strb	r2, [r3, #27]
							  W25Q_Write_Nbytes((add_card-1)*sizeof(user_info_t) + Block63, (uint8_t *)&write_user, sizeof(user_info_t));
 80032ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032b0:	f503 33fb 	add.w	r3, r3, #128512	@ 0x1f600
 80032b4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80032b8:	015b      	lsls	r3, r3, #5
 80032ba:	2220      	movs	r2, #32
 80032bc:	4912      	ldr	r1, [pc, #72]	@ (8003308 <main+0x1120>)
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fce9 	bl	8001c96 <W25Q_Write_Nbytes>
							  sendString("W", "DOK");
 80032c4:	4911      	ldr	r1, [pc, #68]	@ (800330c <main+0x1124>)
 80032c6:	4809      	ldr	r0, [pc, #36]	@ (80032ec <main+0x1104>)
 80032c8:	f000 fd76 	bl	8003db8 <sendString>
							  time_break = HAL_GetTick();
 80032cc:	f001 fde4 	bl	8004e98 <HAL_GetTick>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4a07      	ldr	r2, [pc, #28]	@ (80032f0 <main+0x1108>)
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e16a      	b.n	80035ae <main+0x13c6>
 80032d8:	20000304 	.word	0x20000304
 80032dc:	20000720 	.word	0x20000720
 80032e0:	20000694 	.word	0x20000694
 80032e4:	200007ac 	.word	0x200007ac
 80032e8:	08009900 	.word	0x08009900
 80032ec:	080098f8 	.word	0x080098f8
 80032f0:	2000069c 	.word	0x2000069c
 80032f4:	2000071f 	.word	0x2000071f
 80032f8:	08009904 	.word	0x08009904
 80032fc:	200006d9 	.word	0x200006d9
 8003300:	200006a0 	.word	0x200006a0
 8003304:	20000726 	.word	0x20000726
 8003308:	2000078c 	.word	0x2000078c
 800330c:	080098fc 	.word	0x080098fc
						  } else if (buf[1] == 0x43)
 8003310:	4bb6      	ldr	r3, [pc, #728]	@ (80035ec <main+0x1404>)
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	2b43      	cmp	r3, #67	@ 0x43
 8003316:	f040 814a 	bne.w	80035ae <main+0x13c6>
						  {
							  write_done = true;
 800331a:	4bb5      	ldr	r3, [pc, #724]	@ (80035f0 <main+0x1408>)
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
				  }
			  } else
			  {
				  continue;
			  }
			  while (write_done)
 8003320:	e145      	b.n	80035ae <main+0x13c6>
			  {
				  // ghi các thẻ hiện tại vào bộ nhớ đệm từ Block 33
				  for (uint32_t i = 0; i<number_card; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003328:	e016      	b.n	8003358 <main+0x1170>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&send_user);
 800332a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800332e:	015b      	lsls	r3, r3, #5
 8003330:	4ab0      	ldr	r2, [pc, #704]	@ (80035f4 <main+0x140c>)
 8003332:	2120      	movs	r1, #32
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe fbf1 	bl	8001b1c <W25Q_FastRead_address>
					  W25Q_Write_Nbytes(i*sizeof(user_info_t) + Block32, (uint8_t *)&send_user, sizeof(user_info_t));
 800333a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800333e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003342:	015b      	lsls	r3, r3, #5
 8003344:	2220      	movs	r2, #32
 8003346:	49ab      	ldr	r1, [pc, #684]	@ (80035f4 <main+0x140c>)
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe fca4 	bl	8001c96 <W25Q_Write_Nbytes>
				  for (uint32_t i = 0; i<number_card; i++)
 800334e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003352:	3301      	adds	r3, #1
 8003354:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003358:	4ba7      	ldr	r3, [pc, #668]	@ (80035f8 <main+0x1410>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003360:	429a      	cmp	r2, r3
 8003362:	d3e2      	bcc.n	800332a <main+0x1142>
				  }
				  // xóa bộ nhớ ban đầu
				  for (uint8_t i=0; i<(number_card*sizeof(user_info_t)/Sector+1); i++)
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 800336a:	e00a      	b.n	8003382 <main+0x119a>
				  {
					  W25Q_Erase_Sector(i);
 800336c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8003370:	b29b      	uxth	r3, r3
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fc3e 	bl	8001bf4 <W25Q_Erase_Sector>
				  for (uint8_t i=0; i<(number_card*sizeof(user_info_t)/Sector+1); i++)
 8003378:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800337c:	3301      	adds	r3, #1
 800337e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8003382:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8003386:	4b9c      	ldr	r3, [pc, #624]	@ (80035f8 <main+0x1410>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	015b      	lsls	r3, r3, #5
 800338c:	0b1b      	lsrs	r3, r3, #12
 800338e:	3301      	adds	r3, #1
 8003390:	429a      	cmp	r2, r3
 8003392:	d3eb      	bcc.n	800336c <main+0x1184>
				  }
				  uint32_t i = 0, j = 0, k = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800339a:	2300      	movs	r3, #0
 800339c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  user_info_t old_user, new_user;

				  while (i < number_card && j < add_card)
 80033a6:	e06d      	b.n	8003484 <main+0x129c>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&old_user);
 80033a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ac:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80033b0:	015b      	lsls	r3, r3, #5
 80033b2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80033b6:	2120      	movs	r1, #32
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fbaf 	bl	8001b1c <W25Q_FastRead_address>
					  W25Q_FastRead_address(j*sizeof(user_info_t) + Block63, sizeof(user_info_t), (uint8_t *)&new_user);
 80033be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033c2:	f503 33fc 	add.w	r3, r3, #129024	@ 0x1f800
 80033c6:	015b      	lsls	r3, r3, #5
 80033c8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80033cc:	2120      	movs	r1, #32
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fba4 	bl	8001b1c <W25Q_FastRead_address>
					  if (old_user.cardID < new_user.cardID)
 80033d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033d8:	429a      	cmp	r2, r3
 80033da:	d217      	bcs.n	800340c <main+0x1224>
					  {
						  old_user.STT = k + 1;
 80033dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033e0:	3301      	adds	r3, #1
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&old_user, sizeof(user_info_t));
 80033e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033e8:	015b      	lsls	r3, r3, #5
 80033ea:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80033ee:	2220      	movs	r2, #32
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe fc50 	bl	8001c96 <W25Q_Write_Nbytes>
						  i++; // Dịch chỉ số của mảng đã lấy
 80033f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033fa:	3301      	adds	r3, #1
 80033fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						  k++;
 8003400:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003404:	3301      	adds	r3, #1
 8003406:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800340a:	e03b      	b.n	8003484 <main+0x129c>
					  } else if (old_user.cardID > new_user.cardID)
 800340c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800340e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003410:	429a      	cmp	r2, r3
 8003412:	d917      	bls.n	8003444 <main+0x125c>
					  {
						  new_user.STT = k + 1;
 8003414:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003418:	3301      	adds	r3, #1
 800341a:	647b      	str	r3, [r7, #68]	@ 0x44
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 800341c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003420:	015b      	lsls	r3, r3, #5
 8003422:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003426:	2220      	movs	r2, #32
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fc34 	bl	8001c96 <W25Q_Write_Nbytes>
						  j++; // Dịch chỉ số của mảng đã lấy
 800342e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003432:	3301      	adds	r3, #1
 8003434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						  k++;
 8003438:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800343c:	3301      	adds	r3, #1
 800343e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003442:	e01f      	b.n	8003484 <main+0x129c>
					  } else if (old_user.cardID == new_user.cardID)
 8003444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003448:	429a      	cmp	r2, r3
 800344a:	d11b      	bne.n	8003484 <main+0x129c>
					  {
						  new_user.STT = k + 1;
 800344c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003450:	3301      	adds	r3, #1
 8003452:	647b      	str	r3, [r7, #68]	@ 0x44
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 8003454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003458:	015b      	lsls	r3, r3, #5
 800345a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800345e:	2220      	movs	r2, #32
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe fc18 	bl	8001c96 <W25Q_Write_Nbytes>
						  j++; // Dịch chỉ số của mảng đã lấy
 8003466:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800346a:	3301      	adds	r3, #1
 800346c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						  i++;
 8003470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003474:	3301      	adds	r3, #1
 8003476:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						  k++;
 800347a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800347e:	3301      	adds	r3, #1
 8003480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (i < number_card && j < add_card)
 8003484:	4b5c      	ldr	r3, [pc, #368]	@ (80035f8 <main+0x1410>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800348c:	429a      	cmp	r2, r3
 800348e:	d228      	bcs.n	80034e2 <main+0x12fa>
 8003490:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003494:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003498:	429a      	cmp	r2, r3
 800349a:	d385      	bcc.n	80033a8 <main+0x11c0>
					  }
				  }
				  while (i < number_card)
 800349c:	e021      	b.n	80034e2 <main+0x12fa>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&old_user);
 800349e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034a2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80034a6:	015b      	lsls	r3, r3, #5
 80034a8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80034ac:	2120      	movs	r1, #32
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fb34 	bl	8001b1c <W25Q_FastRead_address>
					  old_user.STT = k + 1;
 80034b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034b8:	3301      	adds	r3, #1
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
					  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&old_user, sizeof(user_info_t));
 80034bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034c0:	015b      	lsls	r3, r3, #5
 80034c2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80034c6:	2220      	movs	r2, #32
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe fbe4 	bl	8001c96 <W25Q_Write_Nbytes>
					  i++;
 80034ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d2:	3301      	adds	r3, #1
 80034d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					  k++;
 80034d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034dc:	3301      	adds	r3, #1
 80034de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (i < number_card)
 80034e2:	4b45      	ldr	r3, [pc, #276]	@ (80035f8 <main+0x1410>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3d7      	bcc.n	800349e <main+0x12b6>
				  }
				  while (j < add_card)
 80034ee:	e021      	b.n	8003534 <main+0x134c>
				  {
					  W25Q_FastRead_address(j*sizeof(user_info_t) + Block63, sizeof(user_info_t), (uint8_t *)&new_user);
 80034f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034f4:	f503 33fc 	add.w	r3, r3, #129024	@ 0x1f800
 80034f8:	015b      	lsls	r3, r3, #5
 80034fa:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80034fe:	2120      	movs	r1, #32
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe fb0b 	bl	8001b1c <W25Q_FastRead_address>
					  new_user.STT = k + 1;
 8003506:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800350a:	3301      	adds	r3, #1
 800350c:	647b      	str	r3, [r7, #68]	@ 0x44
					  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 800350e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003512:	015b      	lsls	r3, r3, #5
 8003514:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003518:	2220      	movs	r2, #32
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fbbb 	bl	8001c96 <W25Q_Write_Nbytes>
					  j++;
 8003520:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003524:	3301      	adds	r3, #1
 8003526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
					  k++;
 800352a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800352e:	3301      	adds	r3, #1
 8003530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (j < add_card)
 8003534:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800353c:	429a      	cmp	r2, r3
 800353e:	d3d7      	bcc.n	80034f0 <main+0x1308>
				  }
				  for (uint32_t i=0; i<((number_card*sizeof(user_info_t)/Sector)+1); i++)
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003546:	e00d      	b.n	8003564 <main+0x137c>
				  {
					  W25Q_Erase_Sector(i + Block32/0x1000);
 8003548:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800354c:	b29b      	uxth	r3, r3
 800354e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003552:	b29b      	uxth	r3, r3
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fb4d 	bl	8001bf4 <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((number_card*sizeof(user_info_t)/Sector)+1); i++)
 800355a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800355e:	3301      	adds	r3, #1
 8003560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003564:	4b24      	ldr	r3, [pc, #144]	@ (80035f8 <main+0x1410>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	015b      	lsls	r3, r3, #5
 800356a:	0b1b      	lsrs	r3, r3, #12
 800356c:	3301      	adds	r3, #1
 800356e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003572:	429a      	cmp	r2, r3
 8003574:	d3e8      	bcc.n	8003548 <main+0x1360>
				  }
				  for (uint32_t i=0; i<((add_card*sizeof(user_info_t)/Sector)+1); i++)
 8003576:	2300      	movs	r3, #0
 8003578:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800357a:	e00a      	b.n	8003592 <main+0x13aa>
				  {
					  W25Q_Erase_Sector(i + Block63/0x1000);
 800357c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800357e:	b29b      	uxth	r3, r3
 8003580:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 8003584:	b29b      	uxth	r3, r3
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fb34 	bl	8001bf4 <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((add_card*sizeof(user_info_t)/Sector)+1); i++)
 800358c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800358e:	3301      	adds	r3, #1
 8003590:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003592:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003596:	015b      	lsls	r3, r3, #5
 8003598:	0b1b      	lsrs	r3, r3, #12
 800359a:	3301      	adds	r3, #1
 800359c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800359e:	429a      	cmp	r2, r3
 80035a0:	d3ec      	bcc.n	800357c <main+0x1394>
				  }
				  sendString("W", "COK");
 80035a2:	4916      	ldr	r1, [pc, #88]	@ (80035fc <main+0x1414>)
 80035a4:	4816      	ldr	r0, [pc, #88]	@ (8003600 <main+0x1418>)
 80035a6:	f000 fc07 	bl	8003db8 <sendString>
				  HAL_NVIC_SystemReset();
 80035aa:	f002 fc90 	bl	8005ece <HAL_NVIC_SystemReset>
			  while (write_done)
 80035ae:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <main+0x1408>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f47f aeb5 	bne.w	8003322 <main+0x113a>
			  }

			  if (abs(HAL_GetTick() - time_break) > Timeout_online)
 80035b8:	f001 fc6e 	bl	8004e98 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <main+0x141c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bfb8      	it	lt
 80035c8:	425b      	neglt	r3, r3
 80035ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f77f adc0 	ble.w	8003154 <main+0xf6c>
			  {
				  HAL_NVIC_SystemReset();
 80035d4:	f002 fc7b 	bl	8005ece <HAL_NVIC_SystemReset>
 80035d8:	e5bc      	b.n	8003154 <main+0xf6c>
				  continue;
 80035da:	bf00      	nop
			  lenData = getSn_RX_RSR(SOCK_NUM);
 80035dc:	e5ba      	b.n	8003154 <main+0xf6c>
	  while (write_mode_somecard)
 80035de:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <main+0x1420>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f47f ada3 	bne.w	800312e <main+0xf46>
			  }
		  }
	  }
	  while (write_card_by_hand)
 80035e8:	e06b      	b.n	80036c2 <main+0x14da>
 80035ea:	bf00      	nop
 80035ec:	20000304 	.word	0x20000304
 80035f0:	20000720 	.word	0x20000720
 80035f4:	200007ac 	.word	0x200007ac
 80035f8:	20000694 	.word	0x20000694
 80035fc:	08009900 	.word	0x08009900
 8003600:	080098f8 	.word	0x080098f8
 8003604:	2000069c 	.word	0x2000069c
 8003608:	2000071e 	.word	0x2000071e
	  {
		  sendString("W", "HOK");
 800360c:	494d      	ldr	r1, [pc, #308]	@ (8003744 <main+0x155c>)
 800360e:	484e      	ldr	r0, [pc, #312]	@ (8003748 <main+0x1560>)
 8003610:	f000 fbd2 	bl	8003db8 <sendString>
		  time_break = HAL_GetTick();
 8003614:	f001 fc40 	bl	8004e98 <HAL_GetTick>
 8003618:	4603      	mov	r3, r0
 800361a:	4a4c      	ldr	r2, [pc, #304]	@ (800374c <main+0x1564>)
 800361c:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 800361e:	4b4c      	ldr	r3, [pc, #304]	@ (8003750 <main+0x1568>)
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003624:	2000      	movs	r0, #0
 8003626:	f7fc ff3c 	bl	80004a2 <getSn_RX_RSR>
 800362a:	4603      	mov	r3, r0
 800362c:	461a      	mov	r2, r3
 800362e:	4b49      	ldr	r3, [pc, #292]	@ (8003754 <main+0x156c>)
 8003630:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 8003632:	2000      	movs	r0, #0
 8003634:	f7fc ff35 	bl	80004a2 <getSn_RX_RSR>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	4b45      	ldr	r3, [pc, #276]	@ (8003754 <main+0x156c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d11c      	bne.n	800367e <main+0x1496>
			  {
				  if (lenData > 512)
 8003644:	4b43      	ldr	r3, [pc, #268]	@ (8003754 <main+0x156c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800364c:	d901      	bls.n	8003652 <main+0x146a>
				  {
					  HAL_NVIC_SystemReset();
 800364e:	f002 fc3e 	bl	8005ece <HAL_NVIC_SystemReset>
				  }
				  if (lenData > 0)
 8003652:	4b40      	ldr	r3, [pc, #256]	@ (8003754 <main+0x156c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d011      	beq.n	800367e <main+0x1496>
				  {
					  recv(SOCK_NUM, buf, lenData);
 800365a:	4b3e      	ldr	r3, [pc, #248]	@ (8003754 <main+0x156c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	493d      	ldr	r1, [pc, #244]	@ (8003758 <main+0x1570>)
 8003664:	2000      	movs	r0, #0
 8003666:	f7fd fc37 	bl	8000ed8 <recv>
					  if (buf[0] == 0x57)
 800366a:	4b3b      	ldr	r3, [pc, #236]	@ (8003758 <main+0x1570>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b57      	cmp	r3, #87	@ 0x57
 8003670:	d105      	bne.n	800367e <main+0x1496>
					  {
						  if (buf[1] == 0x43)
 8003672:	4b39      	ldr	r3, [pc, #228]	@ (8003758 <main+0x1570>)
 8003674:	785b      	ldrb	r3, [r3, #1]
 8003676:	2b43      	cmp	r3, #67	@ 0x43
 8003678:	d101      	bne.n	800367e <main+0x1496>
						  {
							  HAL_NVIC_SystemReset();
 800367a:	f002 fc28 	bl	8005ece <HAL_NVIC_SystemReset>
						  }
					  }
				  }
			  }
			  if (new_wcode)
 800367e:	4b37      	ldr	r3, [pc, #220]	@ (800375c <main+0x1574>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <main+0x14ba>
			  {
				  new_wcode = false;
 8003686:	4b35      	ldr	r3, [pc, #212]	@ (800375c <main+0x1574>)
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
				  sendData_eth("H", wcode);
 800368c:	4b34      	ldr	r3, [pc, #208]	@ (8003760 <main+0x1578>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4619      	mov	r1, r3
 8003692:	4834      	ldr	r0, [pc, #208]	@ (8003764 <main+0x157c>)
 8003694:	f000 fb50 	bl	8003d38 <sendData_eth>
				  time_break = HAL_GetTick();
 8003698:	f001 fbfe 	bl	8004e98 <HAL_GetTick>
 800369c:	4603      	mov	r3, r0
 800369e:	4a2b      	ldr	r2, [pc, #172]	@ (800374c <main+0x1564>)
 80036a0:	6013      	str	r3, [r2, #0]
			  }
			  if (abs(HAL_GetTick() - time_break) > Timeout_online)
 80036a2:	f001 fbf9 	bl	8004e98 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4b28      	ldr	r3, [pc, #160]	@ (800374c <main+0x1564>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bfb8      	it	lt
 80036b2:	425b      	neglt	r3, r3
 80036b4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80036b8:	4293      	cmp	r3, r2
 80036ba:	ddb3      	ble.n	8003624 <main+0x143c>
			  {
				  HAL_NVIC_SystemReset();
 80036bc:	f002 fc07 	bl	8005ece <HAL_NVIC_SystemReset>
			  lenData = getSn_RX_RSR(SOCK_NUM);
 80036c0:	e7b0      	b.n	8003624 <main+0x143c>
	  while (write_card_by_hand)
 80036c2:	4b29      	ldr	r3, [pc, #164]	@ (8003768 <main+0x1580>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1a0      	bne.n	800360c <main+0x1424>
			  }
		  }
	  }
	  if (RST_set)
 80036ca:	4b28      	ldr	r3, [pc, #160]	@ (800376c <main+0x1584>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d030      	beq.n	8003734 <main+0x154c>
	  {
		  if (RST_timer_last > 10000)
 80036d2:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <main+0x1588>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80036da:	4293      	cmp	r3, r2
 80036dc:	d928      	bls.n	8003730 <main+0x1548>
		  {
			  ip1 = 192;
 80036de:	4b25      	ldr	r3, [pc, #148]	@ (8003774 <main+0x158c>)
 80036e0:	22c0      	movs	r2, #192	@ 0xc0
 80036e2:	701a      	strb	r2, [r3, #0]
			  ip2 = 168;
 80036e4:	4b24      	ldr	r3, [pc, #144]	@ (8003778 <main+0x1590>)
 80036e6:	22a8      	movs	r2, #168	@ 0xa8
 80036e8:	701a      	strb	r2, [r3, #0]
			  ip3 = 0;
 80036ea:	4b24      	ldr	r3, [pc, #144]	@ (800377c <main+0x1594>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
			  ip4 = 72;
 80036f0:	4b23      	ldr	r3, [pc, #140]	@ (8003780 <main+0x1598>)
 80036f2:	2248      	movs	r2, #72	@ 0x48
 80036f4:	701a      	strb	r2, [r3, #0]
			  ip_server1 = 192;
 80036f6:	4b23      	ldr	r3, [pc, #140]	@ (8003784 <main+0x159c>)
 80036f8:	22c0      	movs	r2, #192	@ 0xc0
 80036fa:	701a      	strb	r2, [r3, #0]
			  ip_server2 = 168;
 80036fc:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <main+0x15a0>)
 80036fe:	22a8      	movs	r2, #168	@ 0xa8
 8003700:	701a      	strb	r2, [r3, #0]
			  ip_server3 = 0;
 8003702:	4b22      	ldr	r3, [pc, #136]	@ (800378c <main+0x15a4>)
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
			  ip_server4 = 2;
 8003708:	4b21      	ldr	r3, [pc, #132]	@ (8003790 <main+0x15a8>)
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
			  port_server = 6000;
 800370e:	4b21      	ldr	r3, [pc, #132]	@ (8003794 <main+0x15ac>)
 8003710:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003714:	801a      	strh	r2, [r3, #0]
			  port_client = 0;
 8003716:	4b20      	ldr	r3, [pc, #128]	@ (8003798 <main+0x15b0>)
 8003718:	2200      	movs	r2, #0
 800371a:	801a      	strh	r2, [r3, #0]
			  time_delay = 1;
 800371c:	4b1f      	ldr	r3, [pc, #124]	@ (800379c <main+0x15b4>)
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
			  elevator_mode = 0;
 8003722:	4b1f      	ldr	r3, [pc, #124]	@ (80037a0 <main+0x15b8>)
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
			  W25Q_EraseChip();
 8003728:	f7fe fa4b 	bl	8001bc2 <W25Q_EraseChip>
			  save_data();
 800372c:	f000 fcb2 	bl	8004094 <save_data>
		  }
		  HAL_NVIC_SystemReset();
 8003730:	f002 fbcd 	bl	8005ece <HAL_NVIC_SystemReset>
	  }
	  HAL_Delay(10);
 8003734:	200a      	movs	r0, #10
 8003736:	f001 fbb9 	bl	8004eac <HAL_Delay>
 800373a:	f7fe bf87 	b.w	800264c <main+0x464>
		  continue;
 800373e:	bf00      	nop
	  lenData = getSn_RX_RSR(SOCK_NUM);
 8003740:	f7fe bf84 	b.w	800264c <main+0x464>
 8003744:	08009908 	.word	0x08009908
 8003748:	080098f8 	.word	0x080098f8
 800374c:	2000069c 	.word	0x2000069c
 8003750:	200006d9 	.word	0x200006d9
 8003754:	200006a0 	.word	0x200006a0
 8003758:	20000304 	.word	0x20000304
 800375c:	20000723 	.word	0x20000723
 8003760:	2000058c 	.word	0x2000058c
 8003764:	0800990c 	.word	0x0800990c
 8003768:	20000727 	.word	0x20000727
 800376c:	20000729 	.word	0x20000729
 8003770:	200006c8 	.word	0x200006c8
 8003774:	2000051c 	.word	0x2000051c
 8003778:	2000051d 	.word	0x2000051d
 800377c:	2000051e 	.word	0x2000051e
 8003780:	2000051f 	.word	0x2000051f
 8003784:	20000520 	.word	0x20000520
 8003788:	20000521 	.word	0x20000521
 800378c:	20000522 	.word	0x20000522
 8003790:	20000523 	.word	0x20000523
 8003794:	20000582 	.word	0x20000582
 8003798:	20000584 	.word	0x20000584
 800379c:	20000510 	.word	0x20000510
 80037a0:	20000542 	.word	0x20000542

080037a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b090      	sub	sp, #64	@ 0x40
 80037a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037aa:	f107 0318 	add.w	r3, r7, #24
 80037ae:	2228      	movs	r2, #40	@ 0x28
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f006 f83a 	bl	800982c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	60da      	str	r2, [r3, #12]
 80037c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80037c6:	2309      	movs	r3, #9
 80037c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80037d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037d6:	2301      	movs	r3, #1
 80037d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80037da:	2301      	movs	r3, #1
 80037dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037de:	2302      	movs	r3, #2
 80037e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037e8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80037ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ee:	f107 0318 	add.w	r3, r7, #24
 80037f2:	4618      	mov	r0, r3
 80037f4:	f003 fa56 	bl	8006ca4 <HAL_RCC_OscConfig>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80037fe:	f001 f889 	bl	8004914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003802:	230f      	movs	r3, #15
 8003804:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003806:	2302      	movs	r3, #2
 8003808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800380e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003818:	1d3b      	adds	r3, r7, #4
 800381a:	2102      	movs	r1, #2
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fcc3 	bl	80071a8 <HAL_RCC_ClockConfig>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003828:	f001 f874 	bl	8004914 <Error_Handler>
  }
}
 800382c:	bf00      	nop
 800382e:	3740      	adds	r7, #64	@ 0x40
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003838:	4b17      	ldr	r3, [pc, #92]	@ (8003898 <MX_CAN_Init+0x64>)
 800383a:	4a18      	ldr	r2, [pc, #96]	@ (800389c <MX_CAN_Init+0x68>)
 800383c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 60;
 800383e:	4b16      	ldr	r3, [pc, #88]	@ (8003898 <MX_CAN_Init+0x64>)
 8003840:	223c      	movs	r2, #60	@ 0x3c
 8003842:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003844:	4b14      	ldr	r3, [pc, #80]	@ (8003898 <MX_CAN_Init+0x64>)
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800384a:	4b13      	ldr	r3, [pc, #76]	@ (8003898 <MX_CAN_Init+0x64>)
 800384c:	2200      	movs	r2, #0
 800384e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8003850:	4b11      	ldr	r3, [pc, #68]	@ (8003898 <MX_CAN_Init+0x64>)
 8003852:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8003856:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <MX_CAN_Init+0x64>)
 800385a:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800385e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003860:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <MX_CAN_Init+0x64>)
 8003862:	2200      	movs	r2, #0
 8003864:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8003866:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <MX_CAN_Init+0x64>)
 8003868:	2201      	movs	r2, #1
 800386a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800386c:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <MX_CAN_Init+0x64>)
 800386e:	2200      	movs	r2, #0
 8003870:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003872:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <MX_CAN_Init+0x64>)
 8003874:	2200      	movs	r2, #0
 8003876:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003878:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <MX_CAN_Init+0x64>)
 800387a:	2200      	movs	r2, #0
 800387c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800387e:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <MX_CAN_Init+0x64>)
 8003880:	2200      	movs	r2, #0
 8003882:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003884:	4804      	ldr	r0, [pc, #16]	@ (8003898 <MX_CAN_Init+0x64>)
 8003886:	f001 fb53 	bl	8004f30 <HAL_CAN_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003890:	f001 f840 	bl	8004914 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}
 8003898:	2000009c 	.word	0x2000009c
 800389c:	40006400 	.word	0x40006400

080038a0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80038a4:	4b09      	ldr	r3, [pc, #36]	@ (80038cc <MX_IWDG_Init+0x2c>)
 80038a6:	4a0a      	ldr	r2, [pc, #40]	@ (80038d0 <MX_IWDG_Init+0x30>)
 80038a8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80038aa:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <MX_IWDG_Init+0x2c>)
 80038ac:	2204      	movs	r2, #4
 80038ae:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1874;
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <MX_IWDG_Init+0x2c>)
 80038b2:	f240 7252 	movw	r2, #1874	@ 0x752
 80038b6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80038b8:	4804      	ldr	r0, [pc, #16]	@ (80038cc <MX_IWDG_Init+0x2c>)
 80038ba:	f003 f99f 	bl	8006bfc <HAL_IWDG_Init>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80038c4:	f001 f826 	bl	8004914 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200000c4 	.word	0x200000c4
 80038d0:	40003000 	.word	0x40003000

080038d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038d8:	4b17      	ldr	r3, [pc, #92]	@ (8003938 <MX_SPI1_Init+0x64>)
 80038da:	4a18      	ldr	r2, [pc, #96]	@ (800393c <MX_SPI1_Init+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038de:	4b16      	ldr	r3, [pc, #88]	@ (8003938 <MX_SPI1_Init+0x64>)
 80038e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80038e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038e6:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <MX_SPI1_Init+0x64>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038ec:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <MX_SPI1_Init+0x64>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038f2:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <MX_SPI1_Init+0x64>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <MX_SPI1_Init+0x64>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <MX_SPI1_Init+0x64>)
 8003900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003906:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <MX_SPI1_Init+0x64>)
 8003908:	2220      	movs	r2, #32
 800390a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800390c:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <MX_SPI1_Init+0x64>)
 800390e:	2200      	movs	r2, #0
 8003910:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003912:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <MX_SPI1_Init+0x64>)
 8003914:	2200      	movs	r2, #0
 8003916:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003918:	4b07      	ldr	r3, [pc, #28]	@ (8003938 <MX_SPI1_Init+0x64>)
 800391a:	2200      	movs	r2, #0
 800391c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800391e:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <MX_SPI1_Init+0x64>)
 8003920:	220a      	movs	r2, #10
 8003922:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003924:	4804      	ldr	r0, [pc, #16]	@ (8003938 <MX_SPI1_Init+0x64>)
 8003926:	f003 fdcf 	bl	80074c8 <HAL_SPI_Init>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003930:	f000 fff0 	bl	8004914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200000d0 	.word	0x200000d0
 800393c:	40013000 	.word	0x40013000

08003940 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003944:	4b17      	ldr	r3, [pc, #92]	@ (80039a4 <MX_SPI2_Init+0x64>)
 8003946:	4a18      	ldr	r2, [pc, #96]	@ (80039a8 <MX_SPI2_Init+0x68>)
 8003948:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800394a:	4b16      	ldr	r3, [pc, #88]	@ (80039a4 <MX_SPI2_Init+0x64>)
 800394c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003950:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003952:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <MX_SPI2_Init+0x64>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003958:	4b12      	ldr	r3, [pc, #72]	@ (80039a4 <MX_SPI2_Init+0x64>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800395e:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <MX_SPI2_Init+0x64>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003964:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <MX_SPI2_Init+0x64>)
 8003966:	2200      	movs	r2, #0
 8003968:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800396a:	4b0e      	ldr	r3, [pc, #56]	@ (80039a4 <MX_SPI2_Init+0x64>)
 800396c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003970:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003972:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <MX_SPI2_Init+0x64>)
 8003974:	2200      	movs	r2, #0
 8003976:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003978:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <MX_SPI2_Init+0x64>)
 800397a:	2200      	movs	r2, #0
 800397c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800397e:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <MX_SPI2_Init+0x64>)
 8003980:	2200      	movs	r2, #0
 8003982:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003984:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <MX_SPI2_Init+0x64>)
 8003986:	2200      	movs	r2, #0
 8003988:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <MX_SPI2_Init+0x64>)
 800398c:	220a      	movs	r2, #10
 800398e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003990:	4804      	ldr	r0, [pc, #16]	@ (80039a4 <MX_SPI2_Init+0x64>)
 8003992:	f003 fd99 	bl	80074c8 <HAL_SPI_Init>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800399c:	f000 ffba 	bl	8004914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20000128 	.word	0x20000128
 80039a8:	40003800 	.word	0x40003800

080039ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039b2:	f107 0308 	add.w	r3, r7, #8
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c0:	463b      	mov	r3, r7
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a44 <MX_TIM2_Init+0x98>)
 80039ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 80039d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a44 <MX_TIM2_Init+0x98>)
 80039d2:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 80039d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a44 <MX_TIM2_Init+0x98>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80039de:	4b19      	ldr	r3, [pc, #100]	@ (8003a44 <MX_TIM2_Init+0x98>)
 80039e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039e6:	4b17      	ldr	r3, [pc, #92]	@ (8003a44 <MX_TIM2_Init+0x98>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ec:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <MX_TIM2_Init+0x98>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039f2:	4814      	ldr	r0, [pc, #80]	@ (8003a44 <MX_TIM2_Init+0x98>)
 80039f4:	f004 fafd 	bl	8007ff2 <HAL_TIM_Base_Init>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80039fe:	f000 ff89 	bl	8004914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a08:	f107 0308 	add.w	r3, r7, #8
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	480d      	ldr	r0, [pc, #52]	@ (8003a44 <MX_TIM2_Init+0x98>)
 8003a10:	f004 fc80 	bl	8008314 <HAL_TIM_ConfigClockSource>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003a1a:	f000 ff7b 	bl	8004914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a26:	463b      	mov	r3, r7
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4806      	ldr	r0, [pc, #24]	@ (8003a44 <MX_TIM2_Init+0x98>)
 8003a2c:	f004 fe62 	bl	80086f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003a36:	f000 ff6d 	bl	8004914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a3a:	bf00      	nop
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000180 	.word	0x20000180

08003a48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a4e:	f107 0308 	add.w	r3, r7, #8
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a64:	4b1d      	ldr	r3, [pc, #116]	@ (8003adc <MX_TIM3_Init+0x94>)
 8003a66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae0 <MX_TIM3_Init+0x98>)
 8003a68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000;
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <MX_TIM3_Init+0x94>)
 8003a6c:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003a70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a72:	4b1a      	ldr	r3, [pc, #104]	@ (8003adc <MX_TIM3_Init+0x94>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003a78:	4b18      	ldr	r3, [pc, #96]	@ (8003adc <MX_TIM3_Init+0x94>)
 8003a7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a80:	4b16      	ldr	r3, [pc, #88]	@ (8003adc <MX_TIM3_Init+0x94>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a86:	4b15      	ldr	r3, [pc, #84]	@ (8003adc <MX_TIM3_Init+0x94>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a8c:	4813      	ldr	r0, [pc, #76]	@ (8003adc <MX_TIM3_Init+0x94>)
 8003a8e:	f004 fab0 	bl	8007ff2 <HAL_TIM_Base_Init>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003a98:	f000 ff3c 	bl	8004914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	480c      	ldr	r0, [pc, #48]	@ (8003adc <MX_TIM3_Init+0x94>)
 8003aaa:	f004 fc33 	bl	8008314 <HAL_TIM_ConfigClockSource>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003ab4:	f000 ff2e 	bl	8004914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4805      	ldr	r0, [pc, #20]	@ (8003adc <MX_TIM3_Init+0x94>)
 8003ac6:	f004 fe15 	bl	80086f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003ad0:	f000 ff20 	bl	8004914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ad4:	bf00      	nop
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	200001c8 	.word	0x200001c8
 8003ae0:	40000400 	.word	0x40000400

08003ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ae8:	4b11      	ldr	r3, [pc, #68]	@ (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003aea:	4a12      	ldr	r2, [pc, #72]	@ (8003b34 <MX_USART1_UART_Init+0x50>)
 8003aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003aee:	4b10      	ldr	r3, [pc, #64]	@ (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003af0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003af6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003afc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b02:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b08:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003b0a:	220c      	movs	r2, #12
 8003b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b0e:	4b08      	ldr	r3, [pc, #32]	@ (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b14:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b1a:	4805      	ldr	r0, [pc, #20]	@ (8003b30 <MX_USART1_UART_Init+0x4c>)
 8003b1c:	f004 fe5a 	bl	80087d4 <HAL_UART_Init>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b26:	f000 fef5 	bl	8004914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000210 	.word	0x20000210
 8003b34:	40013800 	.word	0x40013800

08003b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <MX_DMA_Init+0x38>)
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4a0b      	ldr	r2, [pc, #44]	@ (8003b70 <MX_DMA_Init+0x38>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6153      	str	r3, [r2, #20]
 8003b4a:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <MX_DMA_Init+0x38>)
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2100      	movs	r1, #0
 8003b5a:	200f      	movs	r0, #15
 8003b5c:	f002 f98d 	bl	8005e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003b60:	200f      	movs	r0, #15
 8003b62:	f002 f9a6 	bl	8005eb2 <HAL_NVIC_EnableIRQ>

}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000

08003b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7a:	f107 0310 	add.w	r3, r7, #16
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b88:	4b66      	ldr	r3, [pc, #408]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	4a65      	ldr	r2, [pc, #404]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003b8e:	f043 0310 	orr.w	r3, r3, #16
 8003b92:	6193      	str	r3, [r2, #24]
 8003b94:	4b63      	ldr	r3, [pc, #396]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ba0:	4b60      	ldr	r3, [pc, #384]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	4a5f      	ldr	r2, [pc, #380]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003ba6:	f043 0320 	orr.w	r3, r3, #32
 8003baa:	6193      	str	r3, [r2, #24]
 8003bac:	4b5d      	ldr	r3, [pc, #372]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	4a59      	ldr	r2, [pc, #356]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003bbe:	f043 0304 	orr.w	r3, r3, #4
 8003bc2:	6193      	str	r3, [r2, #24]
 8003bc4:	4b57      	ldr	r3, [pc, #348]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd0:	4b54      	ldr	r3, [pc, #336]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	4a53      	ldr	r2, [pc, #332]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003bd6:	f043 0308 	orr.w	r3, r3, #8
 8003bda:	6193      	str	r3, [r2, #24]
 8003bdc:	4b51      	ldr	r3, [pc, #324]	@ (8003d24 <MX_GPIO_Init+0x1b0>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_STT_Pin|LED_STT_ETH_Pin|LED_BP_Pin, GPIO_PIN_RESET);
 8003be8:	2200      	movs	r2, #0
 8003bea:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8003bee:	484e      	ldr	r0, [pc, #312]	@ (8003d28 <MX_GPIO_Init+0x1b4>)
 8003bf0:	f002 ffbb 	bl	8006b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	2110      	movs	r1, #16
 8003bf8:	484c      	ldr	r0, [pc, #304]	@ (8003d2c <MX_GPIO_Init+0x1b8>)
 8003bfa:	f002 ffb6 	bl	8006b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|S_OUT2_Pin|S_OUT1_Pin, GPIO_PIN_RESET);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2132      	movs	r1, #50	@ 0x32
 8003c02:	484b      	ldr	r0, [pc, #300]	@ (8003d30 <MX_GPIO_Init+0x1bc>)
 8003c04:	f002 ffb1 	bl	8006b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_SET);
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c0e:	4848      	ldr	r0, [pc, #288]	@ (8003d30 <MX_GPIO_Init+0x1bc>)
 8003c10:	f002 ffab 	bl	8006b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c1a:	4844      	ldr	r0, [pc, #272]	@ (8003d2c <MX_GPIO_Init+0x1b8>)
 8003c1c:	f002 ffa5 	bl	8006b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STT_Pin LED_STT_ETH_Pin LED_BP_Pin */
  GPIO_InitStruct.Pin = LED_STT_Pin|LED_STT_ETH_Pin|LED_BP_Pin;
 8003c20:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c26:	2301      	movs	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c32:	f107 0310 	add.w	r3, r7, #16
 8003c36:	4619      	mov	r1, r3
 8003c38:	483b      	ldr	r0, [pc, #236]	@ (8003d28 <MX_GPIO_Init+0x1b4>)
 8003c3a:	f002 fdfb 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : BYPASS_Pin */
  GPIO_InitStruct.Pin = BYPASS_Pin;
 8003c3e:	2304      	movs	r3, #4
 8003c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BYPASS_GPIO_Port, &GPIO_InitStruct);
 8003c4a:	f107 0310 	add.w	r3, r7, #16
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4836      	ldr	r0, [pc, #216]	@ (8003d2c <MX_GPIO_Init+0x1b8>)
 8003c52:	f002 fdef 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8003c56:	2310      	movs	r3, #16
 8003c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c62:	2303      	movs	r3, #3
 8003c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8003c66:	f107 0310 	add.w	r3, r7, #16
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	482f      	ldr	r0, [pc, #188]	@ (8003d2c <MX_GPIO_Init+0x1b8>)
 8003c6e:	f002 fde1 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c72:	2301      	movs	r3, #1
 8003c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c76:	4b2f      	ldr	r3, [pc, #188]	@ (8003d34 <MX_GPIO_Init+0x1c0>)
 8003c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7e:	f107 0310 	add.w	r3, r7, #16
 8003c82:	4619      	mov	r1, r3
 8003c84:	482a      	ldr	r0, [pc, #168]	@ (8003d30 <MX_GPIO_Init+0x1bc>)
 8003c86:	f002 fdd5 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 S_OUT2_Pin S_OUT1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|S_OUT2_Pin|S_OUT1_Pin;
 8003c8a:	2332      	movs	r3, #50	@ 0x32
 8003c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c96:	2302      	movs	r3, #2
 8003c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c9a:	f107 0310 	add.w	r3, r7, #16
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4823      	ldr	r0, [pc, #140]	@ (8003d30 <MX_GPIO_Init+0x1bc>)
 8003ca2:	f002 fdc7 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_W25_Pin */
  GPIO_InitStruct.Pin = CS_W25_Pin;
 8003ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cac:	2301      	movs	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_W25_GPIO_Port, &GPIO_InitStruct);
 8003cb8:	f107 0310 	add.w	r3, r7, #16
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	481c      	ldr	r0, [pc, #112]	@ (8003d30 <MX_GPIO_Init+0x1bc>)
 8003cc0:	f002 fdb8 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : DE_Pin */
  GPIO_InitStruct.Pin = DE_Pin;
 8003cc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 8003cd6:	f107 0310 	add.w	r3, r7, #16
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4813      	ldr	r0, [pc, #76]	@ (8003d2c <MX_GPIO_Init+0x1b8>)
 8003cde:	f002 fda9 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8003ce2:	2340      	movs	r3, #64	@ 0x40
 8003ce4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ce6:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <MX_GPIO_Init+0x1c0>)
 8003ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cea:	2301      	movs	r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8003cee:	f107 0310 	add.w	r3, r7, #16
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	480e      	ldr	r0, [pc, #56]	@ (8003d30 <MX_GPIO_Init+0x1bc>)
 8003cf6:	f002 fd9d 	bl	8006834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	2006      	movs	r0, #6
 8003d00:	f002 f8bb 	bl	8005e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003d04:	2006      	movs	r0, #6
 8003d06:	f002 f8d4 	bl	8005eb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2107      	movs	r1, #7
 8003d0e:	2017      	movs	r0, #23
 8003d10:	f002 f8b3 	bl	8005e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d14:	2017      	movs	r0, #23
 8003d16:	f002 f8cc 	bl	8005eb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003d1a:	bf00      	nop
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40011000 	.word	0x40011000
 8003d2c:	40010800 	.word	0x40010800
 8003d30:	40010c00 	.word	0x40010c00
 8003d34:	10210000 	.word	0x10210000

08003d38 <sendData_eth>:

/* USER CODE BEGIN 4 */
void sendData_eth (char *CMD, uint32_t data)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
	uint8_t cmd[7];
	cmd[0] = CMD[0];
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	723b      	strb	r3, [r7, #8]
	cmd[1] = data>>24&0xFF;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	0e1b      	lsrs	r3, r3, #24
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	727b      	strb	r3, [r7, #9]
	cmd[2] = data>>16&0xFF;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	0c1b      	lsrs	r3, r3, #16
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	72bb      	strb	r3, [r7, #10]
	cmd[3] = data>>8&0xFF;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	72fb      	strb	r3, [r7, #11]
	cmd[4] = data&0xFF;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	733b      	strb	r3, [r7, #12]
	cmd[5] = 0x0D;
 8003d66:	230d      	movs	r3, #13
 8003d68:	737b      	strb	r3, [r7, #13]
	cmd[6] = 0x0A;
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	73bb      	strb	r3, [r7, #14]
	send(SOCK_NUM,(uint8_t *) cmd, 7);
 8003d6e:	f107 0308 	add.w	r3, r7, #8
 8003d72:	2207      	movs	r2, #7
 8003d74:	4619      	mov	r1, r3
 8003d76:	2000      	movs	r0, #0
 8003d78:	f7fc ffb6 	bl	8000ce8 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <send_u8_eth>:
void send_u8_eth (char *CMD, uint8_t data)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	70fb      	strb	r3, [r7, #3]
//	char buf[10] = {0};
	uint8_t cmd[4];
	cmd[0] = CMD[0];
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	733b      	strb	r3, [r7, #12]
	cmd[1] = data;
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	737b      	strb	r3, [r7, #13]
	cmd[2] = 0x0D;
 8003d9a:	230d      	movs	r3, #13
 8003d9c:	73bb      	strb	r3, [r7, #14]
	cmd[3] = 0x0A;
 8003d9e:	230a      	movs	r3, #10
 8003da0:	73fb      	strb	r3, [r7, #15]
	send(SOCK_NUM,(uint8_t *) cmd, 4);
 8003da2:	f107 030c 	add.w	r3, r7, #12
 8003da6:	2204      	movs	r2, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	2000      	movs	r0, #0
 8003dac:	f7fc ff9c 	bl	8000ce8 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <sendString>:
void sendString (char *CMD, char *data)
{
 8003db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
 8003dc4:	466b      	mov	r3, sp
 8003dc6:	461e      	mov	r6, r3
//	char buf[10] = {0};
	char cmd[strlen(data) + 3];
 8003dc8:	6838      	ldr	r0, [r7, #0]
 8003dca:	f7fc f9bf 	bl	800014c <strlen>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	1cd9      	adds	r1, r3, #3
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	4688      	mov	r8, r1
 8003ddc:	4699      	mov	r9, r3
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df2:	2300      	movs	r3, #0
 8003df4:	460c      	mov	r4, r1
 8003df6:	461d      	mov	r5, r3
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	00eb      	lsls	r3, r5, #3
 8003e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e06:	00e2      	lsls	r2, r4, #3
 8003e08:	1dcb      	adds	r3, r1, #7
 8003e0a:	08db      	lsrs	r3, r3, #3
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	ebad 0d03 	sub.w	sp, sp, r3
 8003e12:	466b      	mov	r3, sp
 8003e14:	3300      	adds	r3, #0
 8003e16:	60bb      	str	r3, [r7, #8]
	strcpy(cmd,CMD);
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	68b8      	ldr	r0, [r7, #8]
 8003e1c:	f005 fd42 	bl	80098a4 <strcpy>
	strcat(cmd, data);
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	68b8      	ldr	r0, [r7, #8]
 8003e24:	f005 fd0a 	bl	800983c <strcat>
	strcat(cmd, "\r\n");
 8003e28:	68b8      	ldr	r0, [r7, #8]
 8003e2a:	f7fc f98f 	bl	800014c <strlen>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	461a      	mov	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4413      	add	r3, r2
 8003e36:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <sendString+0xa8>)
 8003e38:	8811      	ldrh	r1, [r2, #0]
 8003e3a:	7892      	ldrb	r2, [r2, #2]
 8003e3c:	8019      	strh	r1, [r3, #0]
 8003e3e:	709a      	strb	r2, [r3, #2]
//	cmd[1] = (data&0xFF000000)>>24;
//	cmd[2] = (data&0x00FF0000)>>16;
//	cmd[3] = (data&0x0000FF00)>>8;
//	cmd[4] = (data&0x000000FF)>>0;
	send(SOCK_NUM,(uint8_t *) cmd, strlen(cmd));
 8003e40:	68b8      	ldr	r0, [r7, #8]
 8003e42:	f7fc f983 	bl	800014c <strlen>
 8003e46:	4603      	mov	r3, r0
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f7fc ff4a 	bl	8000ce8 <send>
 8003e54:	46b5      	mov	sp, r6
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e60:	0800991c 	.word	0x0800991c

08003e64 <sendData_eth_info>:
void sendData_eth_info (char *CMD, uint8_t *data)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	@ 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
	char cx[29];
//	strcpy(cx,CMD);
//	strcat(cx, data);
	cx[0] = CMD[0];
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	723b      	strb	r3, [r7, #8]
	for (uint8_t i=0; i<26; i++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003e7a:	e010      	b.n	8003e9e <sendData_eth_info+0x3a>
	{
		cx[i+1] = data[i];
 8003e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	441a      	add	r2, r3
 8003e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e88:	3301      	adds	r3, #1
 8003e8a:	7812      	ldrb	r2, [r2, #0]
 8003e8c:	3328      	adds	r3, #40	@ 0x28
 8003e8e:	443b      	add	r3, r7
 8003e90:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (uint8_t i=0; i<26; i++)
 8003e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ea2:	2b19      	cmp	r3, #25
 8003ea4:	d9ea      	bls.n	8003e7c <sendData_eth_info+0x18>
	}
	cx[27] = 0x0D;
 8003ea6:	230d      	movs	r3, #13
 8003ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	cx[28] = 0x0A;
 8003eac:	230a      	movs	r3, #10
 8003eae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	send(SOCK_NUM,(uint8_t *) cx, 29);
 8003eb2:	f107 0308 	add.w	r3, r7, #8
 8003eb6:	221d      	movs	r2, #29
 8003eb8:	4619      	mov	r1, r3
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f7fc ff14 	bl	8000ce8 <send>
}
 8003ec0:	bf00      	nop
 8003ec2:	3728      	adds	r7, #40	@ 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <sendData_eth_CardID>:
void sendData_eth_CardID (char *CMD, user_info_t user)
{
 8003ec8:	b084      	sub	sp, #16
 8003eca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8003ed8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003edc:	466b      	mov	r3, sp
 8003ede:	461e      	mov	r6, r3
	uint8_t size = sizeof(user_info_t);
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	75fb      	strb	r3, [r7, #23]
	uint8_t cx[size];
 8003ee4:	7df9      	ldrb	r1, [r7, #23]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	b2cb      	uxtb	r3, r1
 8003eee:	2200      	movs	r2, #0
 8003ef0:	4698      	mov	r8, r3
 8003ef2:	4691      	mov	r9, r2
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f08:	b2cb      	uxtb	r3, r1
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	461c      	mov	r4, r3
 8003f0e:	4615      	mov	r5, r2
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	00eb      	lsls	r3, r5, #3
 8003f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f1e:	00e2      	lsls	r2, r4, #3
 8003f20:	460b      	mov	r3, r1
 8003f22:	3307      	adds	r3, #7
 8003f24:	08db      	lsrs	r3, r3, #3
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	ebad 0d03 	sub.w	sp, sp, r3
 8003f2c:	466b      	mov	r3, sp
 8003f2e:	3300      	adds	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
	cx[0] = CMD[0];
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	701a      	strb	r2, [r3, #0]
	cx[1] = 2;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	705a      	strb	r2, [r3, #1]
	cx[2] = user.cardID>>24&0xFF;
 8003f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f42:	0e1b      	lsrs	r3, r3, #24
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	709a      	strb	r2, [r3, #2]
	cx[3] = user.cardID>>16&0xFF;
 8003f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	70da      	strb	r2, [r3, #3]
	cx[4] = user.cardID>>8&0xFF;
 8003f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	711a      	strb	r2, [r3, #4]
	cx[5] = user.cardID&0xFF;
 8003f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	715a      	strb	r2, [r3, #5]
	cx[6] = user.permis[0];
 8003f66:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	719a      	strb	r2, [r3, #6]
	cx[7] = user.permis[1];
 8003f6e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	71da      	strb	r2, [r3, #7]
	cx[8] = user.permis[2];
 8003f76:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	721a      	strb	r2, [r3, #8]
	cx[9] = user.permis[3];
 8003f7e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	725a      	strb	r2, [r3, #9]
	cx[10] = user.permis[4];
 8003f86:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	729a      	strb	r2, [r3, #10]
	cx[11] = user.permis[5];
 8003f8e:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	72da      	strb	r2, [r3, #11]
	cx[12] = user.permis[6];
 8003f96:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	731a      	strb	r2, [r3, #12]
	cx[13] = user.permis[7];
 8003f9e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	735a      	strb	r2, [r3, #13]
	cx[14] = user.beginDate;
 8003fa6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	739a      	strb	r2, [r3, #14]
	cx[15] = user.beginMonth;
 8003fae:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	73da      	strb	r2, [r3, #15]
	cx[16] = user.beginYear>>8&0xFF;
 8003fb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	741a      	strb	r2, [r3, #16]
	cx[17] = user.beginYear&0xFF;
 8003fc4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	745a      	strb	r2, [r3, #17]
	cx[18] = user.beginHour;
 8003fce:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	749a      	strb	r2, [r3, #18]
	cx[19] = user.beginMinute;
 8003fd6:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	74da      	strb	r2, [r3, #19]
	cx[20] = user.endDate;
 8003fde:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	751a      	strb	r2, [r3, #20]
	cx[21] = user.endMonth;
 8003fe6:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	755a      	strb	r2, [r3, #21]
	cx[22] = user.endYear>>8&0xFF;
 8003fee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	759a      	strb	r2, [r3, #22]
	cx[23] = user.endYear&0xFF;
 8003ffc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	75da      	strb	r2, [r3, #23]
	cx[24] = user.endHour;
 8004006:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	761a      	strb	r2, [r3, #24]
	cx[25] = user.endMinute;
 800400e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	765a      	strb	r2, [r3, #25]
	cx[26] = 0x0D;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	220d      	movs	r2, #13
 800401a:	769a      	strb	r2, [r3, #26]
	cx[27] = 0x0A;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	220a      	movs	r2, #10
 8004020:	76da      	strb	r2, [r3, #27]
	send(SOCK_NUM,(uint8_t *) cx, 28);
 8004022:	221c      	movs	r2, #28
 8004024:	68f9      	ldr	r1, [r7, #12]
 8004026:	2000      	movs	r0, #0
 8004028:	f7fc fe5e 	bl	8000ce8 <send>
 800402c:	46b5      	mov	sp, r6
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004038:	b004      	add	sp, #16
 800403a:	4770      	bx	lr

0800403c <sendData_uart>:

void sendData_uart (char *CMD, uint8_t data)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
	char cmd[4];
	cmd[0] = CMD[0];
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	733b      	strb	r3, [r7, #12]
	cmd[1] = data;
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	737b      	strb	r3, [r7, #13]
	cmd[2] = 0x0D;
 8004052:	230d      	movs	r3, #13
 8004054:	73bb      	strb	r3, [r7, #14]
	cmd[3] = 0x0A;
 8004056:	230a      	movs	r3, #10
 8004058:	73fb      	strb	r3, [r7, #15]
//	strcpy(cmd,CMD);
//	strcat(cmd,data);
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 800405a:	2201      	movs	r2, #1
 800405c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004060:	480a      	ldr	r0, [pc, #40]	@ (800408c <sendData_uart+0x50>)
 8004062:	f002 fd82 	bl	8006b6a <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,(uint8_t *) cmd, 4, 500);
 8004066:	f107 010c 	add.w	r1, r7, #12
 800406a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800406e:	2204      	movs	r2, #4
 8004070:	4807      	ldr	r0, [pc, #28]	@ (8004090 <sendData_uart+0x54>)
 8004072:	f004 fbff 	bl	8008874 <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8004076:	2200      	movs	r2, #0
 8004078:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800407c:	4803      	ldr	r0, [pc, #12]	@ (800408c <sendData_uart+0x50>)
 800407e:	f002 fd74 	bl	8006b6a <HAL_GPIO_WritePin>
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40010800 	.word	0x40010800
 8004090:	20000210 	.word	0x20000210

08004094 <save_data>:
void save_data()
{
 8004094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004098:	b096      	sub	sp, #88	@ 0x58
 800409a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800409c:	f002 fa3a 	bl	8006514 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 80040a0:	4958      	ldr	r1, [pc, #352]	@ (8004204 <save_data+0x170>)
 80040a2:	4859      	ldr	r0, [pc, #356]	@ (8004208 <save_data+0x174>)
 80040a4:	f002 fb1e 	bl	80066e4 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC00, ip1);
 80040a8:	4b58      	ldr	r3, [pc, #352]	@ (800420c <save_data+0x178>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2200      	movs	r2, #0
 80040b0:	461c      	mov	r4, r3
 80040b2:	4615      	mov	r5, r2
 80040b4:	4622      	mov	r2, r4
 80040b6:	462b      	mov	r3, r5
 80040b8:	4955      	ldr	r1, [pc, #340]	@ (8004210 <save_data+0x17c>)
 80040ba:	2002      	movs	r0, #2
 80040bc:	f002 f9ba 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC04, ip2);
 80040c0:	4b54      	ldr	r3, [pc, #336]	@ (8004214 <save_data+0x180>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2200      	movs	r2, #0
 80040c8:	4698      	mov	r8, r3
 80040ca:	4691      	mov	r9, r2
 80040cc:	4642      	mov	r2, r8
 80040ce:	464b      	mov	r3, r9
 80040d0:	4951      	ldr	r1, [pc, #324]	@ (8004218 <save_data+0x184>)
 80040d2:	2002      	movs	r0, #2
 80040d4:	f002 f9ae 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC08, ip3);
 80040d8:	4b50      	ldr	r3, [pc, #320]	@ (800421c <save_data+0x188>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2200      	movs	r2, #0
 80040e0:	469a      	mov	sl, r3
 80040e2:	4693      	mov	fp, r2
 80040e4:	4652      	mov	r2, sl
 80040e6:	465b      	mov	r3, fp
 80040e8:	494d      	ldr	r1, [pc, #308]	@ (8004220 <save_data+0x18c>)
 80040ea:	2002      	movs	r0, #2
 80040ec:	f002 f9a2 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC0C, ip4);
 80040f0:	4b4c      	ldr	r3, [pc, #304]	@ (8004224 <save_data+0x190>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2200      	movs	r2, #0
 80040f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80040fa:	657a      	str	r2, [r7, #84]	@ 0x54
 80040fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004100:	4949      	ldr	r1, [pc, #292]	@ (8004228 <save_data+0x194>)
 8004102:	2002      	movs	r0, #2
 8004104:	f002 f996 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC10, port_client);
 8004108:	4b48      	ldr	r3, [pc, #288]	@ (800422c <save_data+0x198>)
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	2200      	movs	r2, #0
 8004110:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004112:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004118:	4945      	ldr	r1, [pc, #276]	@ (8004230 <save_data+0x19c>)
 800411a:	2002      	movs	r0, #2
 800411c:	f002 f98a 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC14, ip_server1);
 8004120:	4b44      	ldr	r3, [pc, #272]	@ (8004234 <save_data+0x1a0>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2200      	movs	r2, #0
 8004128:	643b      	str	r3, [r7, #64]	@ 0x40
 800412a:	647a      	str	r2, [r7, #68]	@ 0x44
 800412c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004130:	4941      	ldr	r1, [pc, #260]	@ (8004238 <save_data+0x1a4>)
 8004132:	2002      	movs	r0, #2
 8004134:	f002 f97e 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC18, ip_server2);
 8004138:	4b40      	ldr	r3, [pc, #256]	@ (800423c <save_data+0x1a8>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2200      	movs	r2, #0
 8004140:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004142:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004148:	493d      	ldr	r1, [pc, #244]	@ (8004240 <save_data+0x1ac>)
 800414a:	2002      	movs	r0, #2
 800414c:	f002 f972 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC1C, ip_server3);
 8004150:	4b3c      	ldr	r3, [pc, #240]	@ (8004244 <save_data+0x1b0>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2200      	movs	r2, #0
 8004158:	633b      	str	r3, [r7, #48]	@ 0x30
 800415a:	637a      	str	r2, [r7, #52]	@ 0x34
 800415c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004160:	4939      	ldr	r1, [pc, #228]	@ (8004248 <save_data+0x1b4>)
 8004162:	2002      	movs	r0, #2
 8004164:	f002 f966 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC20, ip_server4);
 8004168:	4b38      	ldr	r3, [pc, #224]	@ (800424c <save_data+0x1b8>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2200      	movs	r2, #0
 8004170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004174:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004178:	4935      	ldr	r1, [pc, #212]	@ (8004250 <save_data+0x1bc>)
 800417a:	2002      	movs	r0, #2
 800417c:	f002 f95a 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC24, port_server);
 8004180:	4b34      	ldr	r3, [pc, #208]	@ (8004254 <save_data+0x1c0>)
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	2200      	movs	r2, #0
 8004188:	623b      	str	r3, [r7, #32]
 800418a:	627a      	str	r2, [r7, #36]	@ 0x24
 800418c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004190:	4931      	ldr	r1, [pc, #196]	@ (8004258 <save_data+0x1c4>)
 8004192:	2002      	movs	r0, #2
 8004194:	f002 f94e 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC28, time_delay);
 8004198:	4b30      	ldr	r3, [pc, #192]	@ (800425c <save_data+0x1c8>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2200      	movs	r2, #0
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	61fa      	str	r2, [r7, #28]
 80041a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041a8:	492d      	ldr	r1, [pc, #180]	@ (8004260 <save_data+0x1cc>)
 80041aa:	2002      	movs	r0, #2
 80041ac:	f002 f942 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC2C, elevator_mode);
 80041b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004264 <save_data+0x1d0>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2200      	movs	r2, #0
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	617a      	str	r2, [r7, #20]
 80041bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041c0:	4929      	ldr	r1, [pc, #164]	@ (8004268 <save_data+0x1d4>)
 80041c2:	2002      	movs	r0, #2
 80041c4:	f002 f936 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC30, lock_default_1);
 80041c8:	4b28      	ldr	r3, [pc, #160]	@ (800426c <save_data+0x1d8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2200      	movs	r2, #0
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	60fa      	str	r2, [r7, #12]
 80041d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041d6:	4926      	ldr	r1, [pc, #152]	@ (8004270 <save_data+0x1dc>)
 80041d8:	2002      	movs	r0, #2
 80041da:	f002 f92b 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC34, lock_default_2);
 80041de:	4b25      	ldr	r3, [pc, #148]	@ (8004274 <save_data+0x1e0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ec:	4922      	ldr	r1, [pc, #136]	@ (8004278 <save_data+0x1e4>)
 80041ee:	2002      	movs	r0, #2
 80041f0:	f002 f920 	bl	8006434 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80041f4:	f002 f9b4 	bl	8006560 <HAL_FLASH_Lock>
}
 80041f8:	bf00      	nop
 80041fa:	3758      	adds	r7, #88	@ 0x58
 80041fc:	46bd      	mov	sp, r7
 80041fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004202:	bf00      	nop
 8004204:	20000588 	.word	0x20000588
 8004208:	2000008c 	.word	0x2000008c
 800420c:	2000051c 	.word	0x2000051c
 8004210:	0800fc00 	.word	0x0800fc00
 8004214:	2000051d 	.word	0x2000051d
 8004218:	0800fc04 	.word	0x0800fc04
 800421c:	2000051e 	.word	0x2000051e
 8004220:	0800fc08 	.word	0x0800fc08
 8004224:	2000051f 	.word	0x2000051f
 8004228:	0800fc0c 	.word	0x0800fc0c
 800422c:	20000584 	.word	0x20000584
 8004230:	0800fc10 	.word	0x0800fc10
 8004234:	20000520 	.word	0x20000520
 8004238:	0800fc14 	.word	0x0800fc14
 800423c:	20000521 	.word	0x20000521
 8004240:	0800fc18 	.word	0x0800fc18
 8004244:	20000522 	.word	0x20000522
 8004248:	0800fc1c 	.word	0x0800fc1c
 800424c:	20000523 	.word	0x20000523
 8004250:	0800fc20 	.word	0x0800fc20
 8004254:	20000582 	.word	0x20000582
 8004258:	0800fc24 	.word	0x0800fc24
 800425c:	20000510 	.word	0x20000510
 8004260:	0800fc28 	.word	0x0800fc28
 8004264:	20000542 	.word	0x20000542
 8004268:	0800fc2c 	.word	0x0800fc2c
 800426c:	200006a8 	.word	0x200006a8
 8004270:	0800fc30 	.word	0x0800fc30
 8004274:	200006ac 	.word	0x200006ac
 8004278:	0800fc34 	.word	0x0800fc34

0800427c <binary_search>:

user_info_t binary_search(uint32_t Number_card, uint32_t code)
{
 800427c:	b5b0      	push	{r4, r5, r7, lr}
 800427e:	b090      	sub	sp, #64	@ 0x40
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
	uint32_t low = 1, high = Number_card;
 8004288:	2301      	movs	r3, #1
 800428a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	63bb      	str	r3, [r7, #56]	@ 0x38
	user_info_t user_compare;

    while (low <= high)
 8004290:	e02e      	b.n	80042f0 <binary_search+0x74>
    {
    	uint32_t mid = (low + high) / 2;
 8004292:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004296:	4413      	add	r3, r2
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	637b      	str	r3, [r7, #52]	@ 0x34
		W25Q_FastRead((mid-1)/16, ((mid-1)%16)*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&user_compare);
 800429c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429e:	3b01      	subs	r3, #1
 80042a0:	0918      	lsrs	r0, r3, #4
 80042a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	015b      	lsls	r3, r3, #5
 80042b0:	b2d9      	uxtb	r1, r3
 80042b2:	f107 0314 	add.w	r3, r7, #20
 80042b6:	2220      	movs	r2, #32
 80042b8:	f7fd fc00 	bl	8001abc <W25Q_FastRead>
        if (user_compare.cardID == code)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d10a      	bne.n	80042da <binary_search+0x5e>
        {
            return user_compare;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	461d      	mov	r5, r3
 80042c8:	f107 0414 	add.w	r4, r7, #20
 80042cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80042d8:	e01a      	b.n	8004310 <binary_search+0x94>
        } else if (user_compare.cardID < code) {
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d903      	bls.n	80042ea <binary_search+0x6e>
            low = mid + 1;
 80042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e4:	3301      	adds	r3, #1
 80042e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e8:	e002      	b.n	80042f0 <binary_search+0x74>
        } else {
            high = mid - 1;
 80042ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ec:	3b01      	subs	r3, #1
 80042ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (low <= high)
 80042f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d9cc      	bls.n	8004292 <binary_search+0x16>
        }
    }
    user_compare.STT = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
    return user_compare;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	461d      	mov	r5, r3
 8004300:	f107 0414 	add.w	r4, r7, #20
 8004304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004308:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800430c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	3740      	adds	r7, #64	@ 0x40
 8004314:	46bd      	mov	sp, r7
 8004316:	bdb0      	pop	{r4, r5, r7, pc}

08004318 <new_card_update>:
void new_card_update(uint8_t *data, bool *input, uint32_t *input_timer)
{
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
	for (uint8_t i=0; i<8; i++)
 8004324:	2300      	movs	r3, #0
 8004326:	75fb      	strb	r3, [r7, #23]
 8004328:	e02b      	b.n	8004382 <new_card_update+0x6a>
	{
		for (uint8_t j=0; j<8; j++)
 800432a:	2300      	movs	r3, #0
 800432c:	75bb      	strb	r3, [r7, #22]
 800432e:	e022      	b.n	8004376 <new_card_update+0x5e>
		{
			if((data[i]>>j)&0x01)//2 + i
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4413      	add	r3, r2
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	7dbb      	ldrb	r3, [r7, #22]
 800433c:	fa42 f303 	asr.w	r3, r2, r3
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d013      	beq.n	8004370 <new_card_update+0x58>
			{
				input[i*8+j] = true;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	00da      	lsls	r2, r3, #3
 800434c:	7dbb      	ldrb	r3, [r7, #22]
 800434e:	4413      	add	r3, r2
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4413      	add	r3, r2
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
				input_timer[i*8+j] = HAL_GetTick();
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	00da      	lsls	r2, r3, #3
 800435e:	7dbb      	ldrb	r3, [r7, #22]
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	18d4      	adds	r4, r2, r3
 8004368:	f000 fd96 	bl	8004e98 <HAL_GetTick>
 800436c:	4603      	mov	r3, r0
 800436e:	6023      	str	r3, [r4, #0]
		for (uint8_t j=0; j<8; j++)
 8004370:	7dbb      	ldrb	r3, [r7, #22]
 8004372:	3301      	adds	r3, #1
 8004374:	75bb      	strb	r3, [r7, #22]
 8004376:	7dbb      	ldrb	r3, [r7, #22]
 8004378:	2b07      	cmp	r3, #7
 800437a:	d9d9      	bls.n	8004330 <new_card_update+0x18>
	for (uint8_t i=0; i<8; i++)
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	3301      	adds	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
 8004382:	7dfb      	ldrb	r3, [r7, #23]
 8004384:	2b07      	cmp	r3, #7
 8004386:	d9d0      	bls.n	800432a <new_card_update+0x12>
			}
		}
	}
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	bd90      	pop	{r4, r7, pc}

08004392 <shift_left_1bit>:
void shift_left_1bit( uint8_t input[8], uint8_t output[8])
{
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
    uint8_t carry = 0;  // Khởi tạo carry ban đầu
 800439c:	2300      	movs	r3, #0
 800439e:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 8; i++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	e01a      	b.n	80043dc <shift_left_1bit+0x4a>
    {
        // Lấy bit MSB của byte hiện tại trước khi dịch
        uint8_t new_carry = (input[i] >> 7) & 0x01;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	4413      	add	r3, r2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	09db      	lsrs	r3, r3, #7
 80043b0:	73fb      	strb	r3, [r7, #15]
        // Dịch trái 1 bit và kết hợp với carry từ byte trước
        output[i] = (input[i] << 1) | carry;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	b25b      	sxtb	r3, r3
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	b25a      	sxtb	r2, r3
 80043c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b259      	sxtb	r1, r3
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	4413      	add	r3, r2
 80043ce:	b2ca      	uxtb	r2, r1
 80043d0:	701a      	strb	r2, [r3, #0]
        // Cập nhật carry cho byte tiếp theo
        carry = new_carry;
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 8; i++)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3301      	adds	r3, #1
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b07      	cmp	r3, #7
 80043e0:	dde1      	ble.n	80043a6 <shift_left_1bit+0x14>
    }
}
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr

080043ee <calculate_data_can>:
void calculate_data_can(bool *input, uint32_t *input_timer, uint8_t *data_can, uint8_t *lock_df, uint8_t delay_time, uint8_t *counter_start)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b088      	sub	sp, #32
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	607a      	str	r2, [r7, #4]
 80043fa:	603b      	str	r3, [r7, #0]
	uint8_t data[8] = {0};
 80043fc:	f107 0310 	add.w	r3, r7, #16
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
	if (*counter_start < delay_time)
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800440e:	429a      	cmp	r2, r3
 8004410:	d948      	bls.n	80044a4 <calculate_data_can+0xb6>
	{
		for (uint8_t i=0; i<8; i++)
 8004412:	2300      	movs	r3, #0
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e040      	b.n	800449a <calculate_data_can+0xac>
		{
			for (uint8_t j=0; j<8; j++)
 8004418:	2300      	movs	r3, #0
 800441a:	77bb      	strb	r3, [r7, #30]
 800441c:	e031      	b.n	8004482 <calculate_data_can+0x94>
			{
				if (input_timer[i*8+j] == 0)
 800441e:	7ffb      	ldrb	r3, [r7, #31]
 8004420:	00da      	lsls	r2, r3, #3
 8004422:	7fbb      	ldrb	r3, [r7, #30]
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	4413      	add	r3, r2
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11f      	bne.n	8004472 <calculate_data_can+0x84>
				{
					if ((lock_df[i]>>j)&0x01)
 8004432:	7ffb      	ldrb	r3, [r7, #31]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	4413      	add	r3, r2
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	7fbb      	ldrb	r3, [r7, #30]
 800443e:	fa42 f303 	asr.w	r3, r2, r3
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <calculate_data_can+0x70>
					{
						input[i*8+j] = true;
 800444a:	7ffb      	ldrb	r3, [r7, #31]
 800444c:	00da      	lsls	r2, r3, #3
 800444e:	7fbb      	ldrb	r3, [r7, #30]
 8004450:	4413      	add	r3, r2
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e00e      	b.n	800447c <calculate_data_can+0x8e>
					} else
					{
						input[i*8+j] = false;
 800445e:	7ffb      	ldrb	r3, [r7, #31]
 8004460:	00da      	lsls	r2, r3, #3
 8004462:	7fbb      	ldrb	r3, [r7, #30]
 8004464:	4413      	add	r3, r2
 8004466:	461a      	mov	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e004      	b.n	800447c <calculate_data_can+0x8e>
					}
				} else
				{
					*counter_start = delay_time;
 8004472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004474:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004478:	701a      	strb	r2, [r3, #0]
					break;
 800447a:	e005      	b.n	8004488 <calculate_data_can+0x9a>
			for (uint8_t j=0; j<8; j++)
 800447c:	7fbb      	ldrb	r3, [r7, #30]
 800447e:	3301      	adds	r3, #1
 8004480:	77bb      	strb	r3, [r7, #30]
 8004482:	7fbb      	ldrb	r3, [r7, #30]
 8004484:	2b07      	cmp	r3, #7
 8004486:	d9ca      	bls.n	800441e <calculate_data_can+0x30>
				}
			}
			if (*counter_start == delay_time) break;
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004490:	429a      	cmp	r2, r3
 8004492:	d006      	beq.n	80044a2 <calculate_data_can+0xb4>
		for (uint8_t i=0; i<8; i++)
 8004494:	7ffb      	ldrb	r3, [r7, #31]
 8004496:	3301      	adds	r3, #1
 8004498:	77fb      	strb	r3, [r7, #31]
 800449a:	7ffb      	ldrb	r3, [r7, #31]
 800449c:	2b07      	cmp	r3, #7
 800449e:	d9bb      	bls.n	8004418 <calculate_data_can+0x2a>
 80044a0:	e000      	b.n	80044a4 <calculate_data_can+0xb6>
			if (*counter_start == delay_time) break;
 80044a2:	bf00      	nop
		}
	}
	if (*counter_start >= delay_time)
 80044a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d848      	bhi.n	8004542 <calculate_data_can+0x154>
	{
		for (uint8_t i=0; i<8; i++)
 80044b0:	2300      	movs	r3, #0
 80044b2:	777b      	strb	r3, [r7, #29]
 80044b4:	e042      	b.n	800453c <calculate_data_can+0x14e>
		{
			for (uint8_t j=0; j<8; j++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	773b      	strb	r3, [r7, #28]
 80044ba:	e039      	b.n	8004530 <calculate_data_can+0x142>
			{
				if (((lock_df[i]>>j)&0x01) && (abs(HAL_GetTick() - input_timer[i*8+j]) > delay_time*1000))
 80044bc:	7f7b      	ldrb	r3, [r7, #29]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	4413      	add	r3, r2
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	7f3b      	ldrb	r3, [r7, #28]
 80044c8:	fa42 f303 	asr.w	r3, r2, r3
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d021      	beq.n	8004518 <calculate_data_can+0x12a>
 80044d4:	f000 fce0 	bl	8004e98 <HAL_GetTick>
 80044d8:	4601      	mov	r1, r0
 80044da:	7f7b      	ldrb	r3, [r7, #29]
 80044dc:	00da      	lsls	r2, r3, #3
 80044de:	7f3b      	ldrb	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4413      	add	r3, r2
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	1acb      	subs	r3, r1, r3
 80044ec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80044f0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80044f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	429a      	cmp	r2, r3
 8004502:	dd09      	ble.n	8004518 <calculate_data_can+0x12a>
				{
					input[i*8+j] = true;
 8004504:	7f7b      	ldrb	r3, [r7, #29]
 8004506:	00da      	lsls	r2, r3, #3
 8004508:	7f3b      	ldrb	r3, [r7, #28]
 800450a:	4413      	add	r3, r2
 800450c:	461a      	mov	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	2201      	movs	r2, #1
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e008      	b.n	800452a <calculate_data_can+0x13c>
				} else
				{
					input[i*8+j] = false;
 8004518:	7f7b      	ldrb	r3, [r7, #29]
 800451a:	00da      	lsls	r2, r3, #3
 800451c:	7f3b      	ldrb	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	461a      	mov	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
			for (uint8_t j=0; j<8; j++)
 800452a:	7f3b      	ldrb	r3, [r7, #28]
 800452c:	3301      	adds	r3, #1
 800452e:	773b      	strb	r3, [r7, #28]
 8004530:	7f3b      	ldrb	r3, [r7, #28]
 8004532:	2b07      	cmp	r3, #7
 8004534:	d9c2      	bls.n	80044bc <calculate_data_can+0xce>
		for (uint8_t i=0; i<8; i++)
 8004536:	7f7b      	ldrb	r3, [r7, #29]
 8004538:	3301      	adds	r3, #1
 800453a:	777b      	strb	r3, [r7, #29]
 800453c:	7f7b      	ldrb	r3, [r7, #29]
 800453e:	2b07      	cmp	r3, #7
 8004540:	d9b9      	bls.n	80044b6 <calculate_data_can+0xc8>
				}
			}
		}
	}
	for (uint8_t i=0; i<8; i++)
 8004542:	2300      	movs	r3, #0
 8004544:	76fb      	strb	r3, [r7, #27]
 8004546:	e026      	b.n	8004596 <calculate_data_can+0x1a8>
	{
		for (uint8_t j=0; j<8; j++)
 8004548:	2300      	movs	r3, #0
 800454a:	76bb      	strb	r3, [r7, #26]
 800454c:	e01d      	b.n	800458a <calculate_data_can+0x19c>
		{
			data[i] |= input[i*8+j]<<j;
 800454e:	7efb      	ldrb	r3, [r7, #27]
 8004550:	3320      	adds	r3, #32
 8004552:	443b      	add	r3, r7
 8004554:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004558:	b25a      	sxtb	r2, r3
 800455a:	7efb      	ldrb	r3, [r7, #27]
 800455c:	00d9      	lsls	r1, r3, #3
 800455e:	7ebb      	ldrb	r3, [r7, #26]
 8004560:	440b      	add	r3, r1
 8004562:	4619      	mov	r1, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	440b      	add	r3, r1
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	4619      	mov	r1, r3
 800456c:	7ebb      	ldrb	r3, [r7, #26]
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	b25b      	sxtb	r3, r3
 8004574:	4313      	orrs	r3, r2
 8004576:	b25a      	sxtb	r2, r3
 8004578:	7efb      	ldrb	r3, [r7, #27]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	3320      	adds	r3, #32
 800457e:	443b      	add	r3, r7
 8004580:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t j=0; j<8; j++)
 8004584:	7ebb      	ldrb	r3, [r7, #26]
 8004586:	3301      	adds	r3, #1
 8004588:	76bb      	strb	r3, [r7, #26]
 800458a:	7ebb      	ldrb	r3, [r7, #26]
 800458c:	2b07      	cmp	r3, #7
 800458e:	d9de      	bls.n	800454e <calculate_data_can+0x160>
	for (uint8_t i=0; i<8; i++)
 8004590:	7efb      	ldrb	r3, [r7, #27]
 8004592:	3301      	adds	r3, #1
 8004594:	76fb      	strb	r3, [r7, #27]
 8004596:	7efb      	ldrb	r3, [r7, #27]
 8004598:	2b07      	cmp	r3, #7
 800459a:	d9d5      	bls.n	8004548 <calculate_data_can+0x15a>
		}
	}
	shift_left_1bit(data, data_can);
 800459c:	f107 0310 	add.w	r3, r7, #16
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff fef5 	bl	8004392 <shift_left_1bit>
}
 80045a8:	bf00      	nop
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <reconect_eth>:
uint8_t reconect_eth(uint8_t sn)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
//	bool linkport = false;
	uint8_t Status_SN;
	Status_SN = getSn_SR(sn);
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	3301      	adds	r3, #1
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fb fdc8 	bl	800015c <WIZCHIP_READ>
 80045cc:	4603      	mov	r3, r0
 80045ce:	73fb      	strb	r3, [r7, #15]
	time_check = HAL_GetTick();
 80045d0:	f000 fc62 	bl	8004e98 <HAL_GetTick>
 80045d4:	4603      	mov	r3, r0
 80045d6:	4a38      	ldr	r2, [pc, #224]	@ (80046b8 <reconect_eth+0x108>)
 80045d8:	6013      	str	r3, [r2, #0]
	if (Status_SN == SOCK_CLOSE_WAIT || wizphy_getphylink() == PHY_LINK_OFF)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b1c      	cmp	r3, #28
 80045de:	d004      	beq.n	80045ea <reconect_eth+0x3a>
 80045e0:	f7fd f853 	bl	800168a <wizphy_getphylink>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <reconect_eth+0x66>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_RESET);
 80045ea:	2200      	movs	r2, #0
 80045ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80045f0:	4832      	ldr	r0, [pc, #200]	@ (80046bc <reconect_eth+0x10c>)
 80045f2:	f002 faba 	bl	8006b6a <HAL_GPIO_WritePin>
		timeBreak = HAL_GetTick();
 80045f6:	f000 fc4f 	bl	8004e98 <HAL_GetTick>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4a30      	ldr	r2, [pc, #192]	@ (80046c0 <reconect_eth+0x110>)
 80045fe:	6013      	str	r3, [r2, #0]
		close(sn);
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc fa0e 	bl	8000a24 <close>
		time_check -= 5000;
 8004608:	4b2b      	ldr	r3, [pc, #172]	@ (80046b8 <reconect_eth+0x108>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 8004610:	3b08      	subs	r3, #8
 8004612:	4a29      	ldr	r2, [pc, #164]	@ (80046b8 <reconect_eth+0x108>)
 8004614:	6013      	str	r3, [r2, #0]
	}
	if (wizphy_getphylink() == PHY_LINK_ON && Status_SN == SOCK_CLOSED)// && (counter_reset < 1))
 8004616:	f7fd f838 	bl	800168a <wizphy_getphylink>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d127      	bne.n	8004670 <reconect_eth+0xc0>
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d124      	bne.n	8004670 <reconect_eth+0xc0>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_RESET);
 8004626:	2200      	movs	r2, #0
 8004628:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800462c:	4823      	ldr	r0, [pc, #140]	@ (80046bc <reconect_eth+0x10c>)
 800462e:	f002 fa9c 	bl	8006b6a <HAL_GPIO_WritePin>
		socket(sn, Sn_MR_TCP, port_client, SF_TCP_NODELAY | Sn_MR_ND);
 8004632:	4b24      	ldr	r3, [pc, #144]	@ (80046c4 <reconect_eth+0x114>)
 8004634:	881a      	ldrh	r2, [r3, #0]
 8004636:	79f8      	ldrb	r0, [r7, #7]
 8004638:	2320      	movs	r3, #32
 800463a:	2101      	movs	r1, #1
 800463c:	f7fc f8de 	bl	80007fc <socket>
		timeBreak = HAL_GetTick();
 8004640:	f000 fc2a 	bl	8004e98 <HAL_GetTick>
 8004644:	4603      	mov	r3, r0
 8004646:	4a1e      	ldr	r2, [pc, #120]	@ (80046c0 <reconect_eth+0x110>)
 8004648:	6013      	str	r3, [r2, #0]
		connect(sn, server_ip, port_server);
 800464a:	4b1f      	ldr	r3, [pc, #124]	@ (80046c8 <reconect_eth+0x118>)
 800464c:	881a      	ldrh	r2, [r3, #0]
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	491e      	ldr	r1, [pc, #120]	@ (80046cc <reconect_eth+0x11c>)
 8004652:	4618      	mov	r0, r3
 8004654:	f7fc fa60 	bl	8000b18 <connect>
		counter_reset++;
 8004658:	4b1d      	ldr	r3, [pc, #116]	@ (80046d0 <reconect_eth+0x120>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	4a1c      	ldr	r2, [pc, #112]	@ (80046d0 <reconect_eth+0x120>)
 8004660:	6013      	str	r3, [r2, #0]
		time_check -= 5000;
 8004662:	4b15      	ldr	r3, [pc, #84]	@ (80046b8 <reconect_eth+0x108>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 800466a:	3b08      	subs	r3, #8
 800466c:	4a12      	ldr	r2, [pc, #72]	@ (80046b8 <reconect_eth+0x108>)
 800466e:	6013      	str	r3, [r2, #0]
	}
	Status_SN = getSn_SR(sn);
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	3301      	adds	r3, #1
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800467c:	4618      	mov	r0, r3
 800467e:	f7fb fd6d 	bl	800015c <WIZCHIP_READ>
 8004682:	4603      	mov	r3, r0
 8004684:	73fb      	strb	r3, [r7, #15]
	if (Status_SN == SOCK_ESTABLISHED)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b17      	cmp	r3, #23
 800468a:	d105      	bne.n	8004698 <reconect_eth+0xe8>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_SET);
 800468c:	2201      	movs	r2, #1
 800468e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004692:	480a      	ldr	r0, [pc, #40]	@ (80046bc <reconect_eth+0x10c>)
 8004694:	f002 fa69 	bl	8006b6a <HAL_GPIO_WritePin>
	}
	Status_SN = getSn_SR(sn);
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	3301      	adds	r3, #1
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fb fd59 	bl	800015c <WIZCHIP_READ>
 80046aa:	4603      	mov	r3, r0
 80046ac:	73fb      	strb	r3, [r7, #15]
	return Status_SN;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200006b0 	.word	0x200006b0
 80046bc:	40011000 	.word	0x40011000
 80046c0:	200006bc 	.word	0x200006bc
 80046c4:	20000584 	.word	0x20000584
 80046c8:	20000582 	.word	0x20000582
 80046cc:	2000050c 	.word	0x2000050c
 80046d0:	200006d0 	.word	0x200006d0

080046d4 <Set_speed_can>:

void Set_speed_can(uint8_t speed)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08c      	sub	sp, #48	@ 0x30
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	71fb      	strb	r3, [r7, #7]
	if (speed == 0)// 100kps
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <Set_speed_can+0x28>
	{
		hcan.Init.Prescaler = 30;
 80046e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004798 <Set_speed_can+0xc4>)
 80046e6:	221e      	movs	r2, #30
 80046e8:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80046ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004798 <Set_speed_can+0xc4>)
 80046ec:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80046f0:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80046f2:	4b29      	ldr	r3, [pc, #164]	@ (8004798 <Set_speed_can+0xc4>)
 80046f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80046f8:	615a      	str	r2, [r3, #20]
 80046fa:	e01c      	b.n	8004736 <Set_speed_can+0x62>
	} else if (speed == 1)// 50kps
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d10b      	bne.n	800471a <Set_speed_can+0x46>
	{
		hcan.Init.Prescaler = 40;
 8004702:	4b25      	ldr	r3, [pc, #148]	@ (8004798 <Set_speed_can+0xc4>)
 8004704:	2228      	movs	r2, #40	@ 0x28
 8004706:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8004708:	4b23      	ldr	r3, [pc, #140]	@ (8004798 <Set_speed_can+0xc4>)
 800470a:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800470e:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8004710:	4b21      	ldr	r3, [pc, #132]	@ (8004798 <Set_speed_can+0xc4>)
 8004712:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004716:	615a      	str	r2, [r3, #20]
 8004718:	e00d      	b.n	8004736 <Set_speed_can+0x62>
	} else if (speed == 2)// 25kps
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d10a      	bne.n	8004736 <Set_speed_can+0x62>
	{
		hcan.Init.Prescaler = 60;
 8004720:	4b1d      	ldr	r3, [pc, #116]	@ (8004798 <Set_speed_can+0xc4>)
 8004722:	223c      	movs	r2, #60	@ 0x3c
 8004724:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8004726:	4b1c      	ldr	r3, [pc, #112]	@ (8004798 <Set_speed_can+0xc4>)
 8004728:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 800472c:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 800472e:	4b1a      	ldr	r3, [pc, #104]	@ (8004798 <Set_speed_can+0xc4>)
 8004730:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8004734:	615a      	str	r2, [r3, #20]
	}
	hcan.Init.AutoRetransmission = ENABLE;
 8004736:	4b18      	ldr	r3, [pc, #96]	@ (8004798 <Set_speed_can+0xc4>)
 8004738:	2201      	movs	r2, #1
 800473a:	76da      	strb	r2, [r3, #27]
	hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 800473c:	4b16      	ldr	r3, [pc, #88]	@ (8004798 <Set_speed_can+0xc4>)
 800473e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004742:	60da      	str	r2, [r3, #12]
	HAL_CAN_Init(&hcan);
 8004744:	4814      	ldr	r0, [pc, #80]	@ (8004798 <Set_speed_can+0xc4>)
 8004746:	f000 fbf3 	bl	8004f30 <HAL_CAN_Init>

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800474a:	2301      	movs	r3, #1
 800474c:	62bb      	str	r3, [r7, #40]	@ 0x28
	canfilterconfig.FilterBank = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterIdHigh = 0x740<<5;
 8004756:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 800475a:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterIdLow = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8004760:	4b0e      	ldr	r3, [pc, #56]	@ (800479c <Set_speed_can+0xc8>)
 8004762:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdLow = 6;
 8004764:	2306      	movs	r3, #6
 8004766:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8004768:	2300      	movs	r3, #0
 800476a:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800476c:	2301      	movs	r3, #1
 800476e:	627b      	str	r3, [r7, #36]	@ 0x24
	canfilterconfig.SlaveStartFilterBank = 13;
 8004770:	230d      	movs	r3, #13
 8004772:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8004774:	f107 0308 	add.w	r3, r7, #8
 8004778:	4619      	mov	r1, r3
 800477a:	4807      	ldr	r0, [pc, #28]	@ (8004798 <Set_speed_can+0xc4>)
 800477c:	f000 fcd3 	bl	8005126 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 8004780:	4805      	ldr	r0, [pc, #20]	@ (8004798 <Set_speed_can+0xc4>)
 8004782:	f000 fd99 	bl	80052b8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004786:	2102      	movs	r1, #2
 8004788:	4803      	ldr	r0, [pc, #12]	@ (8004798 <Set_speed_can+0xc4>)
 800478a:	f001 f841 	bl	8005810 <HAL_CAN_ActivateNotification>
}
 800478e:	bf00      	nop
 8004790:	3730      	adds	r7, #48	@ 0x30
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	2000009c 	.word	0x2000009c
 800479c:	0001ffe0 	.word	0x0001ffe0

080047a0 <is_leap_year>:


// Hàm kiểm tra năm nhuận
static uint8_t is_leap_year(uint16_t year)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	80fb      	strh	r3, [r7, #6]
    if (year % 400 == 0) {
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	4a14      	ldr	r2, [pc, #80]	@ (8004800 <is_leap_year+0x60>)
 80047ae:	fba2 1203 	umull	r1, r2, r2, r3
 80047b2:	09d2      	lsrs	r2, r2, #7
 80047b4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80047b8:	fb01 f202 	mul.w	r2, r1, r2
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <is_leap_year+0x28>
        return 1;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e016      	b.n	80047f6 <is_leap_year+0x56>
    }
    if (year % 100 == 0) {
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004800 <is_leap_year+0x60>)
 80047cc:	fba2 1203 	umull	r1, r2, r2, r3
 80047d0:	0952      	lsrs	r2, r2, #5
 80047d2:	2164      	movs	r1, #100	@ 0x64
 80047d4:	fb01 f202 	mul.w	r2, r1, r2
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <is_leap_year+0x44>
        return 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e008      	b.n	80047f6 <is_leap_year+0x56>
    }
    if (year % 4 == 0) {
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <is_leap_year+0x54>
        return 1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <is_leap_year+0x56>
    }
    return 0;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr
 8004800:	51eb851f 	.word	0x51eb851f

08004804 <mktime>:

// Hàm tùy chỉnh tương tự mktime
uint32_t mktime(uint16_t year, uint8_t month, uint8_t date, uint8_t hour, uint8_t minute)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	461a      	mov	r2, r3
 8004812:	4623      	mov	r3, r4
 8004814:	80fb      	strh	r3, [r7, #6]
 8004816:	4603      	mov	r3, r0
 8004818:	717b      	strb	r3, [r7, #5]
 800481a:	460b      	mov	r3, r1
 800481c:	713b      	strb	r3, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	70fb      	strb	r3, [r7, #3]
	uint32_t time = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
	uint32_t i = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]

    // 1. Cộng dồn số giây từ các năm đã qua
    // Giả sử epoch là 1/1/2000
	if (year >= EPOCH_YEAR)
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	f240 72e3 	movw	r2, #2019	@ 0x7e3
 8004830:	4293      	cmp	r3, r2
 8004832:	d91e      	bls.n	8004872 <mktime+0x6e>
	{
		for (i = EPOCH_YEAR; i < (year - EPOCH_YEAR); i++) {
 8004834:	f240 73e4 	movw	r3, #2020	@ 0x7e4
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	e012      	b.n	8004862 <mktime+0x5e>
			time += (365 + is_leap_year(i)) * 24 * 60;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	b29b      	uxth	r3, r3
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ffad 	bl	80047a0 <is_leap_year>
 8004846:	4603      	mov	r3, r0
 8004848:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 800484c:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8004850:	fb02 f303 	mul.w	r3, r2, r3
 8004854:	461a      	mov	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
		for (i = EPOCH_YEAR; i < (year - EPOCH_YEAR); i++) {
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	3301      	adds	r3, #1
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	f2a3 73e4 	subw	r3, r3, #2020	@ 0x7e4
 8004868:	461a      	mov	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4293      	cmp	r3, r2
 800486e:	d3e5      	bcc.n	800483c <mktime+0x38>
 8004870:	e001      	b.n	8004876 <mktime+0x72>
		}
	} else
	{
		return 0;
 8004872:	2300      	movs	r3, #0
 8004874:	e047      	b.n	8004906 <mktime+0x102>
	}
    // 2. Cộng dồn số giây từ các tháng đã qua trong năm hiện tại
	if (month >= 1 && month <= 12)
 8004876:	797b      	ldrb	r3, [r7, #5]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d029      	beq.n	80048d0 <mktime+0xcc>
 800487c:	797b      	ldrb	r3, [r7, #5]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d826      	bhi.n	80048d0 <mktime+0xcc>
	{
		for (i = 0; i < month; i++) {
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	e01e      	b.n	80048c6 <mktime+0xc2>
			time += days_in_month[i] * 24 * 60;
 8004888:	4a21      	ldr	r2, [pc, #132]	@ (8004910 <mktime+0x10c>)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004890:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8004894:	fb02 f303 	mul.w	r3, r2, r3
 8004898:	461a      	mov	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
			// Cộng thêm một ngày nếu là tháng 2 của năm nhuận
			if (i == 1 && is_leap_year(year)) {
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d10c      	bne.n	80048c0 <mktime+0xbc>
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff ff79 	bl	80047a0 <is_leap_year>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <mktime+0xbc>
				time += 24 * 3600;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80048ba:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80048be:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < month; i++) {
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	3301      	adds	r3, #1
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	797b      	ldrb	r3, [r7, #5]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d3dc      	bcc.n	8004888 <mktime+0x84>
	if (month >= 1 && month <= 12)
 80048ce:	e001      	b.n	80048d4 <mktime+0xd0>
			}
		}
	} else
	{
		return 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e018      	b.n	8004906 <mktime+0x102>
	}

    // 3. Cộng dồn số giây từ các ngày, giờ, phút và giây
    time += (uint32_t)(date - 1) * 24 * 60;
 80048d4:	793b      	ldrb	r3, [r7, #4]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	461a      	mov	r2, r3
 80048da:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
    time += (uint32_t)hour * 60;
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	461a      	mov	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
    time += (uint32_t)minute;
 80048fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4413      	add	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
    return time;
 8004904:	68fb      	ldr	r3, [r7, #12]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bd90      	pop	{r4, r7, pc}
 800490e:	bf00      	nop
 8004910:	08009920 	.word	0x08009920

08004914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004918:	b672      	cpsid	i
}
 800491a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <Error_Handler+0x8>

08004920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004926:	4b15      	ldr	r3, [pc, #84]	@ (800497c <HAL_MspInit+0x5c>)
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	4a14      	ldr	r2, [pc, #80]	@ (800497c <HAL_MspInit+0x5c>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6193      	str	r3, [r2, #24]
 8004932:	4b12      	ldr	r3, [pc, #72]	@ (800497c <HAL_MspInit+0x5c>)
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800493e:	4b0f      	ldr	r3, [pc, #60]	@ (800497c <HAL_MspInit+0x5c>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	4a0e      	ldr	r2, [pc, #56]	@ (800497c <HAL_MspInit+0x5c>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004948:	61d3      	str	r3, [r2, #28]
 800494a:	4b0c      	ldr	r3, [pc, #48]	@ (800497c <HAL_MspInit+0x5c>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004952:	607b      	str	r3, [r7, #4]
 8004954:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004956:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <HAL_MspInit+0x60>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	4a04      	ldr	r2, [pc, #16]	@ (8004980 <HAL_MspInit+0x60>)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	40021000 	.word	0x40021000
 8004980:	40010000 	.word	0x40010000

08004984 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800498c:	f107 0310 	add.w	r3, r7, #16
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a20      	ldr	r2, [pc, #128]	@ (8004a20 <HAL_CAN_MspInit+0x9c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d139      	bne.n	8004a18 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80049a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004a24 <HAL_CAN_MspInit+0xa0>)
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004a24 <HAL_CAN_MspInit+0xa0>)
 80049aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049ae:	61d3      	str	r3, [r2, #28]
 80049b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a24 <HAL_CAN_MspInit+0xa0>)
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049bc:	4b19      	ldr	r3, [pc, #100]	@ (8004a24 <HAL_CAN_MspInit+0xa0>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	4a18      	ldr	r2, [pc, #96]	@ (8004a24 <HAL_CAN_MspInit+0xa0>)
 80049c2:	f043 0304 	orr.w	r3, r3, #4
 80049c6:	6193      	str	r3, [r2, #24]
 80049c8:	4b16      	ldr	r3, [pc, #88]	@ (8004a24 <HAL_CAN_MspInit+0xa0>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80049d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e2:	f107 0310 	add.w	r3, r7, #16
 80049e6:	4619      	mov	r1, r3
 80049e8:	480f      	ldr	r0, [pc, #60]	@ (8004a28 <HAL_CAN_MspInit+0xa4>)
 80049ea:	f001 ff23 	bl	8006834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80049ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f4:	2302      	movs	r3, #2
 80049f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049f8:	2303      	movs	r3, #3
 80049fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049fc:	f107 0310 	add.w	r3, r7, #16
 8004a00:	4619      	mov	r1, r3
 8004a02:	4809      	ldr	r0, [pc, #36]	@ (8004a28 <HAL_CAN_MspInit+0xa4>)
 8004a04:	f001 ff16 	bl	8006834 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2103      	movs	r1, #3
 8004a0c:	2014      	movs	r0, #20
 8004a0e:	f001 fa34 	bl	8005e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004a12:	2014      	movs	r0, #20
 8004a14:	f001 fa4d 	bl	8005eb2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8004a18:	bf00      	nop
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40006400 	.word	0x40006400
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40010800 	.word	0x40010800

08004a2c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	@ 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a34:	f107 0318 	add.w	r3, r7, #24
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a37      	ldr	r2, [pc, #220]	@ (8004b24 <HAL_SPI_MspInit+0xf8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d130      	bne.n	8004aae <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a4c:	4b36      	ldr	r3, [pc, #216]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	4a35      	ldr	r2, [pc, #212]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004a52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a56:	6193      	str	r3, [r2, #24]
 8004a58:	4b33      	ldr	r3, [pc, #204]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a64:	4b30      	ldr	r3, [pc, #192]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	4a2f      	ldr	r2, [pc, #188]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004a6a:	f043 0304 	orr.w	r3, r3, #4
 8004a6e:	6193      	str	r3, [r2, #24]
 8004a70:	4b2d      	ldr	r3, [pc, #180]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004a7c:	23a0      	movs	r3, #160	@ 0xa0
 8004a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a84:	2303      	movs	r3, #3
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a88:	f107 0318 	add.w	r3, r7, #24
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4827      	ldr	r0, [pc, #156]	@ (8004b2c <HAL_SPI_MspInit+0x100>)
 8004a90:	f001 fed0 	bl	8006834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a94:	2340      	movs	r3, #64	@ 0x40
 8004a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa0:	f107 0318 	add.w	r3, r7, #24
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4821      	ldr	r0, [pc, #132]	@ (8004b2c <HAL_SPI_MspInit+0x100>)
 8004aa8:	f001 fec4 	bl	8006834 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004aac:	e036      	b.n	8004b1c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b30 <HAL_SPI_MspInit+0x104>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d131      	bne.n	8004b1c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	4a1a      	ldr	r2, [pc, #104]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004abe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ac2:	61d3      	str	r3, [r2, #28]
 8004ac4:	4b18      	ldr	r3, [pc, #96]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ad0:	4b15      	ldr	r3, [pc, #84]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	4a14      	ldr	r2, [pc, #80]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004ad6:	f043 0308 	orr.w	r3, r3, #8
 8004ada:	6193      	str	r3, [r2, #24]
 8004adc:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <HAL_SPI_MspInit+0xfc>)
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004ae8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8004aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aee:	2302      	movs	r3, #2
 8004af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004af2:	2303      	movs	r3, #3
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af6:	f107 0318 	add.w	r3, r7, #24
 8004afa:	4619      	mov	r1, r3
 8004afc:	480d      	ldr	r0, [pc, #52]	@ (8004b34 <HAL_SPI_MspInit+0x108>)
 8004afe:	f001 fe99 	bl	8006834 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004b02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b10:	f107 0318 	add.w	r3, r7, #24
 8004b14:	4619      	mov	r1, r3
 8004b16:	4807      	ldr	r0, [pc, #28]	@ (8004b34 <HAL_SPI_MspInit+0x108>)
 8004b18:	f001 fe8c 	bl	8006834 <HAL_GPIO_Init>
}
 8004b1c:	bf00      	nop
 8004b1e:	3728      	adds	r7, #40	@ 0x28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40013000 	.word	0x40013000
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40010800 	.word	0x40010800
 8004b30:	40003800 	.word	0x40003800
 8004b34:	40010c00 	.word	0x40010c00

08004b38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b48:	d114      	bne.n	8004b74 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b4a:	4b19      	ldr	r3, [pc, #100]	@ (8004bb0 <HAL_TIM_Base_MspInit+0x78>)
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	@ (8004bb0 <HAL_TIM_Base_MspInit+0x78>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	61d3      	str	r3, [r2, #28]
 8004b56:	4b16      	ldr	r3, [pc, #88]	@ (8004bb0 <HAL_TIM_Base_MspInit+0x78>)
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8004b62:	2200      	movs	r2, #0
 8004b64:	2104      	movs	r1, #4
 8004b66:	201c      	movs	r0, #28
 8004b68:	f001 f987 	bl	8005e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b6c:	201c      	movs	r0, #28
 8004b6e:	f001 f9a0 	bl	8005eb2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004b72:	e018      	b.n	8004ba6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a0e      	ldr	r2, [pc, #56]	@ (8004bb4 <HAL_TIM_Base_MspInit+0x7c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d113      	bne.n	8004ba6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb0 <HAL_TIM_Base_MspInit+0x78>)
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	4a0b      	ldr	r2, [pc, #44]	@ (8004bb0 <HAL_TIM_Base_MspInit+0x78>)
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	61d3      	str	r3, [r2, #28]
 8004b8a:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <HAL_TIM_Base_MspInit+0x78>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004b96:	2200      	movs	r2, #0
 8004b98:	2105      	movs	r1, #5
 8004b9a:	201d      	movs	r0, #29
 8004b9c:	f001 f96d 	bl	8005e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004ba0:	201d      	movs	r0, #29
 8004ba2:	f001 f986 	bl	8005eb2 <HAL_NVIC_EnableIRQ>
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40000400 	.word	0x40000400

08004bb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc0:	f107 0310 	add.w	r3, r7, #16
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a33      	ldr	r2, [pc, #204]	@ (8004ca0 <HAL_UART_MspInit+0xe8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d15f      	bne.n	8004c98 <HAL_UART_MspInit+0xe0>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bd8:	4b32      	ldr	r3, [pc, #200]	@ (8004ca4 <HAL_UART_MspInit+0xec>)
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	4a31      	ldr	r2, [pc, #196]	@ (8004ca4 <HAL_UART_MspInit+0xec>)
 8004bde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004be2:	6193      	str	r3, [r2, #24]
 8004be4:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca4 <HAL_UART_MspInit+0xec>)
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca4 <HAL_UART_MspInit+0xec>)
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca4 <HAL_UART_MspInit+0xec>)
 8004bf6:	f043 0304 	orr.w	r3, r3, #4
 8004bfa:	6193      	str	r3, [r2, #24]
 8004bfc:	4b29      	ldr	r3, [pc, #164]	@ (8004ca4 <HAL_UART_MspInit+0xec>)
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c12:	2303      	movs	r3, #3
 8004c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c16:	f107 0310 	add.w	r3, r7, #16
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4822      	ldr	r0, [pc, #136]	@ (8004ca8 <HAL_UART_MspInit+0xf0>)
 8004c1e:	f001 fe09 	bl	8006834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c30:	f107 0310 	add.w	r3, r7, #16
 8004c34:	4619      	mov	r1, r3
 8004c36:	481c      	ldr	r0, [pc, #112]	@ (8004ca8 <HAL_UART_MspInit+0xf0>)
 8004c38:	f001 fdfc 	bl	8006834 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb0 <HAL_UART_MspInit+0xf8>)
 8004c40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c42:	4b1a      	ldr	r3, [pc, #104]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c48:	4b18      	ldr	r3, [pc, #96]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c4e:	4b17      	ldr	r3, [pc, #92]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c50:	2280      	movs	r2, #128	@ 0x80
 8004c52:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c54:	4b15      	ldr	r3, [pc, #84]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c5a:	4b14      	ldr	r3, [pc, #80]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004c60:	4b12      	ldr	r3, [pc, #72]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c66:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004c6c:	480f      	ldr	r0, [pc, #60]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c6e:	f001 f93f 	bl	8005ef0 <HAL_DMA_Init>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8004c78:	f7ff fe4c 	bl	8004914 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c82:	4a0a      	ldr	r2, [pc, #40]	@ (8004cac <HAL_UART_MspInit+0xf4>)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	2025      	movs	r0, #37	@ 0x25
 8004c8e:	f001 f8f4 	bl	8005e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c92:	2025      	movs	r0, #37	@ 0x25
 8004c94:	f001 f90d 	bl	8005eb2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004c98:	bf00      	nop
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40013800 	.word	0x40013800
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40010800 	.word	0x40010800
 8004cac:	20000258 	.word	0x20000258
 8004cb0:	40020058 	.word	0x40020058

08004cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004cb8:	bf00      	nop
 8004cba:	e7fd      	b.n	8004cb8 <NMI_Handler+0x4>

08004cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <HardFault_Handler+0x4>

08004cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cc8:	bf00      	nop
 8004cca:	e7fd      	b.n	8004cc8 <MemManage_Handler+0x4>

08004ccc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <BusFault_Handler+0x4>

08004cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cd8:	bf00      	nop
 8004cda:	e7fd      	b.n	8004cd8 <UsageFault_Handler+0x4>

08004cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ce0:	bf00      	nop
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d04:	f000 f8b6 	bl	8004e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d08:	bf00      	nop
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004d10:	2001      	movs	r0, #1
 8004d12:	f001 ff5b 	bl	8006bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004d20:	4802      	ldr	r0, [pc, #8]	@ (8004d2c <DMA1_Channel5_IRQHandler+0x10>)
 8004d22:	f001 fa53 	bl	80061cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000258 	.word	0x20000258

08004d30 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004d34:	4802      	ldr	r0, [pc, #8]	@ (8004d40 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004d36:	f000 fd90 	bl	800585a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004d3a:	bf00      	nop
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	2000009c 	.word	0x2000009c

08004d44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RST_Pin);
 8004d48:	2040      	movs	r0, #64	@ 0x40
 8004d4a:	f001 ff3f 	bl	8006bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d58:	4802      	ldr	r0, [pc, #8]	@ (8004d64 <TIM2_IRQHandler+0x10>)
 8004d5a:	f003 f9eb 	bl	8008134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000180 	.word	0x20000180

08004d68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d6c:	4802      	ldr	r0, [pc, #8]	@ (8004d78 <TIM3_IRQHandler+0x10>)
 8004d6e:	f003 f9e1 	bl	8008134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	200001c8 	.word	0x200001c8

08004d7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d80:	4802      	ldr	r0, [pc, #8]	@ (8004d8c <USART1_IRQHandler+0x10>)
 8004d82:	f003 fe5b 	bl	8008a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000210 	.word	0x20000210

08004d90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004d9c:	f7ff fff8 	bl	8004d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004da0:	480b      	ldr	r0, [pc, #44]	@ (8004dd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004da2:	490c      	ldr	r1, [pc, #48]	@ (8004dd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004da4:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004da8:	e002      	b.n	8004db0 <LoopCopyDataInit>

08004daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dae:	3304      	adds	r3, #4

08004db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004db4:	d3f9      	bcc.n	8004daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004db6:	4a09      	ldr	r2, [pc, #36]	@ (8004ddc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004db8:	4c09      	ldr	r4, [pc, #36]	@ (8004de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dbc:	e001      	b.n	8004dc2 <LoopFillZerobss>

08004dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dc0:	3204      	adds	r2, #4

08004dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dc4:	d3fb      	bcc.n	8004dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004dc6:	f004 fd49 	bl	800985c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004dca:	f7fd fa0d 	bl	80021e8 <main>
  bx lr
 8004dce:	4770      	bx	lr
  ldr r0, =_sdata
 8004dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dd4:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8004dd8:	0800998c 	.word	0x0800998c
  ldr r2, =_sbss
 8004ddc:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8004de0:	200007f0 	.word	0x200007f0

08004de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004de4:	e7fe      	b.n	8004de4 <ADC1_2_IRQHandler>
	...

08004de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004dec:	4b08      	ldr	r3, [pc, #32]	@ (8004e10 <HAL_Init+0x28>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a07      	ldr	r2, [pc, #28]	@ (8004e10 <HAL_Init+0x28>)
 8004df2:	f043 0310 	orr.w	r3, r3, #16
 8004df6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004df8:	2003      	movs	r0, #3
 8004dfa:	f001 f833 	bl	8005e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dfe:	2006      	movs	r0, #6
 8004e00:	f000 f808 	bl	8004e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e04:	f7ff fd8c 	bl	8004920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40022000 	.word	0x40022000

08004e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e1c:	4b12      	ldr	r3, [pc, #72]	@ (8004e68 <HAL_InitTick+0x54>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <HAL_InitTick+0x58>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	4619      	mov	r1, r3
 8004e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 f84f 	bl	8005ed6 <HAL_SYSTICK_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e00e      	b.n	8004e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b0f      	cmp	r3, #15
 8004e46:	d80a      	bhi.n	8004e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	f001 f813 	bl	8005e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e54:	4a06      	ldr	r2, [pc, #24]	@ (8004e70 <HAL_InitTick+0x5c>)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e000      	b.n	8004e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000038 	.word	0x20000038
 8004e6c:	20000040 	.word	0x20000040
 8004e70:	2000003c 	.word	0x2000003c

08004e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e78:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <HAL_IncTick+0x1c>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <HAL_IncTick+0x20>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4413      	add	r3, r2
 8004e84:	4a03      	ldr	r2, [pc, #12]	@ (8004e94 <HAL_IncTick+0x20>)
 8004e86:	6013      	str	r3, [r2, #0]
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr
 8004e90:	20000040 	.word	0x20000040
 8004e94:	200007cc 	.word	0x200007cc

08004e98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e9c:	4b02      	ldr	r3, [pc, #8]	@ (8004ea8 <HAL_GetTick+0x10>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr
 8004ea8:	200007cc 	.word	0x200007cc

08004eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004eb4:	f7ff fff0 	bl	8004e98 <HAL_GetTick>
 8004eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d005      	beq.n	8004ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef0 <HAL_Delay+0x44>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ed2:	bf00      	nop
 8004ed4:	f7ff ffe0 	bl	8004e98 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d8f7      	bhi.n	8004ed4 <HAL_Delay+0x28>
  {
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000040 	.word	0x20000040

08004ef4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8004ef8:	4b02      	ldr	r3, [pc, #8]	@ (8004f04 <HAL_GetUIDw0+0x10>)
 8004efa:	681b      	ldr	r3, [r3, #0]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr
 8004f04:	1ffff7e8 	.word	0x1ffff7e8

08004f08 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004f0c:	4b02      	ldr	r3, [pc, #8]	@ (8004f18 <HAL_GetUIDw1+0x10>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr
 8004f18:	1ffff7ec 	.word	0x1ffff7ec

08004f1c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004f20:	4b02      	ldr	r3, [pc, #8]	@ (8004f2c <HAL_GetUIDw2+0x10>)
 8004f22:	681b      	ldr	r3, [r3, #0]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr
 8004f2c:	1ffff7f0 	.word	0x1ffff7f0

08004f30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e0ed      	b.n	800511e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fd18 	bl	8004984 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f64:	f7ff ff98 	bl	8004e98 <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f6a:	e012      	b.n	8004f92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f6c:	f7ff ff94 	bl	8004e98 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b0a      	cmp	r3, #10
 8004f78:	d90b      	bls.n	8004f92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2205      	movs	r2, #5
 8004f8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e0c5      	b.n	800511e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0e5      	beq.n	8004f6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0202 	bic.w	r2, r2, #2
 8004fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fb0:	f7ff ff72 	bl	8004e98 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fb6:	e012      	b.n	8004fde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004fb8:	f7ff ff6e 	bl	8004e98 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b0a      	cmp	r3, #10
 8004fc4:	d90b      	bls.n	8004fde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2205      	movs	r2, #5
 8004fd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e09f      	b.n	800511e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e5      	bne.n	8004fb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	7e1b      	ldrb	r3, [r3, #24]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d108      	bne.n	8005006 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	e007      	b.n	8005016 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005014:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	7e5b      	ldrb	r3, [r3, #25]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d108      	bne.n	8005030 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e007      	b.n	8005040 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800503e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	7e9b      	ldrb	r3, [r3, #26]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d108      	bne.n	800505a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0220 	orr.w	r2, r2, #32
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e007      	b.n	800506a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0220 	bic.w	r2, r2, #32
 8005068:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7edb      	ldrb	r3, [r3, #27]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d108      	bne.n	8005084 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0210 	bic.w	r2, r2, #16
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e007      	b.n	8005094 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0210 	orr.w	r2, r2, #16
 8005092:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	7f1b      	ldrb	r3, [r3, #28]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d108      	bne.n	80050ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0208 	orr.w	r2, r2, #8
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e007      	b.n	80050be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0208 	bic.w	r2, r2, #8
 80050bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	7f5b      	ldrb	r3, [r3, #29]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d108      	bne.n	80050d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0204 	orr.w	r2, r2, #4
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e007      	b.n	80050e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0204 	bic.w	r2, r2, #4
 80050e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	ea42 0103 	orr.w	r1, r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	1e5a      	subs	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005126:	b480      	push	{r7}
 8005128:	b087      	sub	sp, #28
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800513c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800513e:	7cfb      	ldrb	r3, [r7, #19]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d003      	beq.n	800514c <HAL_CAN_ConfigFilter+0x26>
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	2b02      	cmp	r3, #2
 8005148:	f040 80aa 	bne.w	80052a0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005152:	f043 0201 	orr.w	r2, r3, #1
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	2201      	movs	r2, #1
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	43db      	mvns	r3, r3
 8005176:	401a      	ands	r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d123      	bne.n	80051ce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	43db      	mvns	r3, r3
 8005190:	401a      	ands	r2, r3
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3248      	adds	r2, #72	@ 0x48
 80051ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051c4:	6979      	ldr	r1, [r7, #20]
 80051c6:	3348      	adds	r3, #72	@ 0x48
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d122      	bne.n	800521c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	431a      	orrs	r2, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80051f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	3248      	adds	r2, #72	@ 0x48
 80051fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005210:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	3348      	adds	r3, #72	@ 0x48
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	440b      	add	r3, r1
 800521a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	43db      	mvns	r3, r3
 800522e:	401a      	ands	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005236:	e007      	b.n	8005248 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	431a      	orrs	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	43db      	mvns	r3, r3
 800525a:	401a      	ands	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005262:	e007      	b.n	8005274 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	431a      	orrs	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d107      	bne.n	800528c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	431a      	orrs	r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	e006      	b.n	80052ae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d12e      	bne.n	800532a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0201 	bic.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052e4:	f7ff fdd8 	bl	8004e98 <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80052ea:	e012      	b.n	8005312 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052ec:	f7ff fdd4 	bl	8004e98 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b0a      	cmp	r3, #10
 80052f8:	d90b      	bls.n	8005312 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2205      	movs	r2, #5
 800530a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e012      	b.n	8005338 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e5      	bne.n	80052ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	e006      	b.n	8005338 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	@ 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005354:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800535e:	7ffb      	ldrb	r3, [r7, #31]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d003      	beq.n	800536c <HAL_CAN_AddTxMessage+0x2c>
 8005364:	7ffb      	ldrb	r3, [r7, #31]
 8005366:	2b02      	cmp	r3, #2
 8005368:	f040 80ad 	bne.w	80054c6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800537c:	2b00      	cmp	r3, #0
 800537e:	d105      	bne.n	800538c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 8095 	beq.w	80054b6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	0e1b      	lsrs	r3, r3, #24
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005396:	2201      	movs	r2, #1
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	409a      	lsls	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10d      	bne.n	80053c4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	6809      	ldr	r1, [r1, #0]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	3318      	adds	r3, #24
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	440b      	add	r3, r1
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	e00f      	b.n	80053e4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053ce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053d4:	68f9      	ldr	r1, [r7, #12]
 80053d6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80053d8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	3318      	adds	r3, #24
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	440b      	add	r3, r1
 80053e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6819      	ldr	r1, [r3, #0]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3318      	adds	r3, #24
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	440b      	add	r3, r1
 80053f4:	3304      	adds	r3, #4
 80053f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	7d1b      	ldrb	r3, [r3, #20]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d111      	bne.n	8005424 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	3318      	adds	r3, #24
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4413      	add	r3, r2
 800540c:	3304      	adds	r3, #4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	6811      	ldr	r1, [r2, #0]
 8005414:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	3318      	adds	r3, #24
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	440b      	add	r3, r1
 8005420:	3304      	adds	r3, #4
 8005422:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3307      	adds	r3, #7
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	061a      	lsls	r2, r3, #24
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3306      	adds	r3, #6
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	041b      	lsls	r3, r3, #16
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3305      	adds	r3, #5
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	4313      	orrs	r3, r2
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	3204      	adds	r2, #4
 8005444:	7812      	ldrb	r2, [r2, #0]
 8005446:	4610      	mov	r0, r2
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	6811      	ldr	r1, [r2, #0]
 800544c:	ea43 0200 	orr.w	r2, r3, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	440b      	add	r3, r1
 8005456:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800545a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3303      	adds	r3, #3
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	061a      	lsls	r2, r3, #24
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3302      	adds	r3, #2
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	041b      	lsls	r3, r3, #16
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3301      	adds	r3, #1
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	4313      	orrs	r3, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	7812      	ldrb	r2, [r2, #0]
 800547c:	4610      	mov	r0, r2
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	6811      	ldr	r1, [r2, #0]
 8005482:	ea43 0200 	orr.w	r2, r3, r0
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	440b      	add	r3, r1
 800548c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005490:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	3318      	adds	r3, #24
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	4413      	add	r3, r2
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	6811      	ldr	r1, [r2, #0]
 80054a4:	f043 0201 	orr.w	r2, r3, #1
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3318      	adds	r3, #24
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	440b      	add	r3, r1
 80054b0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e00e      	b.n	80054d4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e006      	b.n	80054d4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
  }
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3724      	adds	r7, #36	@ 0x24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d002      	beq.n	80054fc <HAL_CAN_AbortTxRequest+0x1e>
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d128      	bne.n	800554e <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005514:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d007      	beq.n	8005530 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800552e:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005548:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e006      	b.n	800555c <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
  }
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005578:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800557a:	7afb      	ldrb	r3, [r7, #11]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d002      	beq.n	8005586 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005580:	7afb      	ldrb	r3, [r7, #11]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d11d      	bne.n	80055c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3301      	adds	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80055c2:	68fb      	ldr	r3, [r7, #12]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80055ce:	b480      	push	{r7}
 80055d0:	b087      	sub	sp, #28
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055e2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d003      	beq.n	80055f2 <HAL_CAN_GetRxMessage+0x24>
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	f040 8103 	bne.w	80057f8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10e      	bne.n	8005616 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d116      	bne.n	8005634 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0f7      	b.n	8005806 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0e8      	b.n	8005806 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	331b      	adds	r3, #27
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	4413      	add	r3, r2
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0204 	and.w	r2, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10c      	bne.n	800566c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	331b      	adds	r3, #27
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	4413      	add	r3, r2
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	0d5b      	lsrs	r3, r3, #21
 8005662:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	e00b      	b.n	8005684 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	331b      	adds	r3, #27
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	4413      	add	r3, r2
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	08db      	lsrs	r3, r3, #3
 800567c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	331b      	adds	r3, #27
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	4413      	add	r3, r2
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0202 	and.w	r2, r3, #2
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	331b      	adds	r3, #27
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	4413      	add	r3, r2
 80056a6:	3304      	adds	r3, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2208      	movs	r2, #8
 80056b6:	611a      	str	r2, [r3, #16]
 80056b8:	e00b      	b.n	80056d2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	331b      	adds	r3, #27
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	4413      	add	r3, r2
 80056c6:	3304      	adds	r3, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 020f 	and.w	r2, r3, #15
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	331b      	adds	r3, #27
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	4413      	add	r3, r2
 80056de:	3304      	adds	r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	331b      	adds	r3, #27
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	4413      	add	r3, r2
 80056f6:	3304      	adds	r3, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	4413      	add	r3, r2
 800570c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	4413      	add	r3, r2
 8005722:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	0a1a      	lsrs	r2, r3, #8
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	4413      	add	r3, r2
 800573c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	0c1a      	lsrs	r2, r3, #16
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	3302      	adds	r3, #2
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	4413      	add	r3, r2
 8005756:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	0e1a      	lsrs	r2, r3, #24
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	3303      	adds	r3, #3
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	4413      	add	r3, r2
 8005770:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	3304      	adds	r3, #4
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	4413      	add	r3, r2
 8005788:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	0a1a      	lsrs	r2, r3, #8
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	3305      	adds	r3, #5
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	0c1a      	lsrs	r2, r3, #16
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	3306      	adds	r3, #6
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	0e1a      	lsrs	r2, r3, #24
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	3307      	adds	r3, #7
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d108      	bne.n	80057e4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0220 	orr.w	r2, r2, #32
 80057e0:	60da      	str	r2, [r3, #12]
 80057e2:	e007      	b.n	80057f4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0220 	orr.w	r2, r2, #32
 80057f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e006      	b.n	8005806 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005820:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d002      	beq.n	800582e <HAL_CAN_ActivateNotification+0x1e>
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d109      	bne.n	8005842 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6959      	ldr	r1, [r3, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	e006      	b.n	8005850 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
  }
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr

0800585a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b08a      	sub	sp, #40	@ 0x28
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005862:	2300      	movs	r3, #0
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d07c      	beq.n	800599a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d023      	beq.n	80058f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2201      	movs	r2, #1
 80058b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f983 	bl	8005bc8 <HAL_CAN_TxMailbox0CompleteCallback>
 80058c2:	e016      	b.n	80058f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d6:	e00c      	b.n	80058f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ea:	e002      	b.n	80058f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f986 	bl	8005bfe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d024      	beq.n	8005946 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005904:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f962 	bl	8005bda <HAL_CAN_TxMailbox1CompleteCallback>
 8005916:	e016      	b.n	8005946 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
 800592a:	e00c      	b.n	8005946 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800593c:	627b      	str	r3, [r7, #36]	@ 0x24
 800593e:	e002      	b.n	8005946 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f965 	bl	8005c10 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d024      	beq.n	800599a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005958:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f941 	bl	8005bec <HAL_CAN_TxMailbox2CompleteCallback>
 800596a:	e016      	b.n	800599a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24
 800597e:	e00c      	b.n	800599a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
 8005992:	e002      	b.n	800599a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f944 	bl	8005c22 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2210      	movs	r2, #16
 80059bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00b      	beq.n	80059e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2208      	movs	r2, #8
 80059d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f92a 	bl	8005c34 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7fc fbc5 	bl	8002188 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00c      	beq.n	8005a22 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2210      	movs	r2, #16
 8005a20:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d006      	beq.n	8005a44 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f90a 	bl	8005c58 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8f2 	bl	8005c46 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00b      	beq.n	8005a84 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d006      	beq.n	8005a84 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8f3 	bl	8005c6a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d006      	beq.n	8005aa6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f8eb 	bl	8005c7c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d07b      	beq.n	8005ba8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d072      	beq.n	8005ba0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	f043 0304 	orr.w	r3, r3, #4
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d043      	beq.n	8005ba0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d03e      	beq.n	8005ba0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b28:	2b60      	cmp	r3, #96	@ 0x60
 8005b2a:	d02b      	beq.n	8005b84 <HAL_CAN_IRQHandler+0x32a>
 8005b2c:	2b60      	cmp	r3, #96	@ 0x60
 8005b2e:	d82e      	bhi.n	8005b8e <HAL_CAN_IRQHandler+0x334>
 8005b30:	2b50      	cmp	r3, #80	@ 0x50
 8005b32:	d022      	beq.n	8005b7a <HAL_CAN_IRQHandler+0x320>
 8005b34:	2b50      	cmp	r3, #80	@ 0x50
 8005b36:	d82a      	bhi.n	8005b8e <HAL_CAN_IRQHandler+0x334>
 8005b38:	2b40      	cmp	r3, #64	@ 0x40
 8005b3a:	d019      	beq.n	8005b70 <HAL_CAN_IRQHandler+0x316>
 8005b3c:	2b40      	cmp	r3, #64	@ 0x40
 8005b3e:	d826      	bhi.n	8005b8e <HAL_CAN_IRQHandler+0x334>
 8005b40:	2b30      	cmp	r3, #48	@ 0x30
 8005b42:	d010      	beq.n	8005b66 <HAL_CAN_IRQHandler+0x30c>
 8005b44:	2b30      	cmp	r3, #48	@ 0x30
 8005b46:	d822      	bhi.n	8005b8e <HAL_CAN_IRQHandler+0x334>
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d002      	beq.n	8005b52 <HAL_CAN_IRQHandler+0x2f8>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d005      	beq.n	8005b5c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005b50:	e01d      	b.n	8005b8e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	f043 0308 	orr.w	r3, r3, #8
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b5a:	e019      	b.n	8005b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	f043 0310 	orr.w	r3, r3, #16
 8005b62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b64:	e014      	b.n	8005b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	f043 0320 	orr.w	r3, r3, #32
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b6e:	e00f      	b.n	8005b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b78:	e00a      	b.n	8005b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b82:	e005      	b.n	8005b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b8c:	e000      	b.n	8005b90 <HAL_CAN_IRQHandler+0x336>
            break;
 8005b8e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b9e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d008      	beq.n	8005bc0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f867 	bl	8005c8e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	3728      	adds	r7, #40	@ 0x28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr

08005c22 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr

08005c46 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr

08005c58 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr

08005c6a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cd2:	4a04      	ldr	r2, [pc, #16]	@ (8005ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	60d3      	str	r3, [r2, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	e000ed00 	.word	0xe000ed00

08005ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cec:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <__NVIC_GetPriorityGrouping+0x18>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	f003 0307 	and.w	r3, r3, #7
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	e000ed00 	.word	0xe000ed00

08005d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	db0b      	blt.n	8005d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	f003 021f 	and.w	r2, r3, #31
 8005d1c:	4906      	ldr	r1, [pc, #24]	@ (8005d38 <__NVIC_EnableIRQ+0x34>)
 8005d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	2001      	movs	r0, #1
 8005d26:	fa00 f202 	lsl.w	r2, r0, r2
 8005d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr
 8005d38:	e000e100 	.word	0xe000e100

08005d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	6039      	str	r1, [r7, #0]
 8005d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	db0a      	blt.n	8005d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	490c      	ldr	r1, [pc, #48]	@ (8005d88 <__NVIC_SetPriority+0x4c>)
 8005d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5a:	0112      	lsls	r2, r2, #4
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	440b      	add	r3, r1
 8005d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d64:	e00a      	b.n	8005d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	4908      	ldr	r1, [pc, #32]	@ (8005d8c <__NVIC_SetPriority+0x50>)
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	3b04      	subs	r3, #4
 8005d74:	0112      	lsls	r2, r2, #4
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	440b      	add	r3, r1
 8005d7a:	761a      	strb	r2, [r3, #24]
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	e000e100 	.word	0xe000e100
 8005d8c:	e000ed00 	.word	0xe000ed00

08005d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b089      	sub	sp, #36	@ 0x24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f1c3 0307 	rsb	r3, r3, #7
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	bf28      	it	cs
 8005dae:	2304      	movcs	r3, #4
 8005db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	3304      	adds	r3, #4
 8005db6:	2b06      	cmp	r3, #6
 8005db8:	d902      	bls.n	8005dc0 <NVIC_EncodePriority+0x30>
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	3b03      	subs	r3, #3
 8005dbe:	e000      	b.n	8005dc2 <NVIC_EncodePriority+0x32>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43da      	mvns	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	401a      	ands	r2, r3
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	fa01 f303 	lsl.w	r3, r1, r3
 8005de2:	43d9      	mvns	r1, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005de8:	4313      	orrs	r3, r2
         );
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3724      	adds	r7, #36	@ 0x24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005df8:	f3bf 8f4f 	dsb	sy
}
 8005dfc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005dfe:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <__NVIC_SystemReset+0x24>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005e06:	4904      	ldr	r1, [pc, #16]	@ (8005e18 <__NVIC_SystemReset+0x24>)
 8005e08:	4b04      	ldr	r3, [pc, #16]	@ (8005e1c <__NVIC_SystemReset+0x28>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e0e:	f3bf 8f4f 	dsb	sy
}
 8005e12:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <__NVIC_SystemReset+0x20>
 8005e18:	e000ed00 	.word	0xe000ed00
 8005e1c:	05fa0004 	.word	0x05fa0004

08005e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e30:	d301      	bcc.n	8005e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e32:	2301      	movs	r3, #1
 8005e34:	e00f      	b.n	8005e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e36:	4a0a      	ldr	r2, [pc, #40]	@ (8005e60 <SysTick_Config+0x40>)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e3e:	210f      	movs	r1, #15
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	f7ff ff7a 	bl	8005d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e48:	4b05      	ldr	r3, [pc, #20]	@ (8005e60 <SysTick_Config+0x40>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e4e:	4b04      	ldr	r3, [pc, #16]	@ (8005e60 <SysTick_Config+0x40>)
 8005e50:	2207      	movs	r2, #7
 8005e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	e000e010 	.word	0xe000e010

08005e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ff17 	bl	8005ca0 <__NVIC_SetPriorityGrouping>
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	4603      	mov	r3, r0
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e8c:	f7ff ff2c 	bl	8005ce8 <__NVIC_GetPriorityGrouping>
 8005e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	6978      	ldr	r0, [r7, #20]
 8005e98:	f7ff ff7a 	bl	8005d90 <NVIC_EncodePriority>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff ff49 	bl	8005d3c <__NVIC_SetPriority>
}
 8005eaa:	bf00      	nop
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	4603      	mov	r3, r0
 8005eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff ff1f 	bl	8005d04 <__NVIC_EnableIRQ>
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005ed2:	f7ff ff8f 	bl	8005df4 <__NVIC_SystemReset>

08005ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff ff9e 	bl	8005e20 <SysTick_Config>
 8005ee4:	4603      	mov	r3, r0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e043      	b.n	8005f8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4b22      	ldr	r3, [pc, #136]	@ (8005f98 <HAL_DMA_Init+0xa8>)
 8005f0e:	4413      	add	r3, r2
 8005f10:	4a22      	ldr	r2, [pc, #136]	@ (8005f9c <HAL_DMA_Init+0xac>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	091b      	lsrs	r3, r3, #4
 8005f18:	009a      	lsls	r2, r3, #2
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa0 <HAL_DMA_Init+0xb0>)
 8005f22:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f3a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005f3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr
 8005f98:	bffdfff8 	.word	0xbffdfff8
 8005f9c:	cccccccd 	.word	0xcccccccd
 8005fa0:	40020000 	.word	0x40020000

08005fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_DMA_Start_IT+0x20>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e04b      	b.n	800605c <HAL_DMA_Start_IT+0xb8>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d13a      	bne.n	800604e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	68b9      	ldr	r1, [r7, #8]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f9eb 	bl	80063d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d008      	beq.n	800601c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 020e 	orr.w	r2, r2, #14
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e00f      	b.n	800603c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0204 	bic.w	r2, r2, #4
 800602a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 020a 	orr.w	r2, r2, #10
 800603a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e005      	b.n	800605a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006056:	2302      	movs	r3, #2
 8006058:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800605a:	7dfb      	ldrb	r3, [r7, #23]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d008      	beq.n	800608e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2204      	movs	r2, #4
 8006080:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e020      	b.n	80060d0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 020e 	bic.w	r2, r2, #14
 800609c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b6:	2101      	movs	r1, #1
 80060b8:	fa01 f202 	lsl.w	r2, r1, r2
 80060bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr
	...

080060dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d005      	beq.n	8006100 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2204      	movs	r2, #4
 80060f8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
 80060fe:	e051      	b.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 020e 	bic.w	r2, r2, #14
 800610e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a22      	ldr	r2, [pc, #136]	@ (80061b0 <HAL_DMA_Abort_IT+0xd4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d029      	beq.n	800617e <HAL_DMA_Abort_IT+0xa2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a21      	ldr	r2, [pc, #132]	@ (80061b4 <HAL_DMA_Abort_IT+0xd8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d022      	beq.n	800617a <HAL_DMA_Abort_IT+0x9e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1f      	ldr	r2, [pc, #124]	@ (80061b8 <HAL_DMA_Abort_IT+0xdc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01a      	beq.n	8006174 <HAL_DMA_Abort_IT+0x98>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a1e      	ldr	r2, [pc, #120]	@ (80061bc <HAL_DMA_Abort_IT+0xe0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d012      	beq.n	800616e <HAL_DMA_Abort_IT+0x92>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1c      	ldr	r2, [pc, #112]	@ (80061c0 <HAL_DMA_Abort_IT+0xe4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00a      	beq.n	8006168 <HAL_DMA_Abort_IT+0x8c>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1b      	ldr	r2, [pc, #108]	@ (80061c4 <HAL_DMA_Abort_IT+0xe8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d102      	bne.n	8006162 <HAL_DMA_Abort_IT+0x86>
 800615c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006160:	e00e      	b.n	8006180 <HAL_DMA_Abort_IT+0xa4>
 8006162:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006166:	e00b      	b.n	8006180 <HAL_DMA_Abort_IT+0xa4>
 8006168:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800616c:	e008      	b.n	8006180 <HAL_DMA_Abort_IT+0xa4>
 800616e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006172:	e005      	b.n	8006180 <HAL_DMA_Abort_IT+0xa4>
 8006174:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006178:	e002      	b.n	8006180 <HAL_DMA_Abort_IT+0xa4>
 800617a:	2310      	movs	r3, #16
 800617c:	e000      	b.n	8006180 <HAL_DMA_Abort_IT+0xa4>
 800617e:	2301      	movs	r3, #1
 8006180:	4a11      	ldr	r2, [pc, #68]	@ (80061c8 <HAL_DMA_Abort_IT+0xec>)
 8006182:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	4798      	blx	r3
    } 
  }
  return status;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40020008 	.word	0x40020008
 80061b4:	4002001c 	.word	0x4002001c
 80061b8:	40020030 	.word	0x40020030
 80061bc:	40020044 	.word	0x40020044
 80061c0:	40020058 	.word	0x40020058
 80061c4:	4002006c 	.word	0x4002006c
 80061c8:	40020000 	.word	0x40020000

080061cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e8:	2204      	movs	r2, #4
 80061ea:	409a      	lsls	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d04f      	beq.n	8006294 <HAL_DMA_IRQHandler+0xc8>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d04a      	beq.n	8006294 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d107      	bne.n	800621c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0204 	bic.w	r2, r2, #4
 800621a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a66      	ldr	r2, [pc, #408]	@ (80063bc <HAL_DMA_IRQHandler+0x1f0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d029      	beq.n	800627a <HAL_DMA_IRQHandler+0xae>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a65      	ldr	r2, [pc, #404]	@ (80063c0 <HAL_DMA_IRQHandler+0x1f4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d022      	beq.n	8006276 <HAL_DMA_IRQHandler+0xaa>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a63      	ldr	r2, [pc, #396]	@ (80063c4 <HAL_DMA_IRQHandler+0x1f8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01a      	beq.n	8006270 <HAL_DMA_IRQHandler+0xa4>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a62      	ldr	r2, [pc, #392]	@ (80063c8 <HAL_DMA_IRQHandler+0x1fc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d012      	beq.n	800626a <HAL_DMA_IRQHandler+0x9e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a60      	ldr	r2, [pc, #384]	@ (80063cc <HAL_DMA_IRQHandler+0x200>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00a      	beq.n	8006264 <HAL_DMA_IRQHandler+0x98>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a5f      	ldr	r2, [pc, #380]	@ (80063d0 <HAL_DMA_IRQHandler+0x204>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d102      	bne.n	800625e <HAL_DMA_IRQHandler+0x92>
 8006258:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800625c:	e00e      	b.n	800627c <HAL_DMA_IRQHandler+0xb0>
 800625e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006262:	e00b      	b.n	800627c <HAL_DMA_IRQHandler+0xb0>
 8006264:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006268:	e008      	b.n	800627c <HAL_DMA_IRQHandler+0xb0>
 800626a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800626e:	e005      	b.n	800627c <HAL_DMA_IRQHandler+0xb0>
 8006270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006274:	e002      	b.n	800627c <HAL_DMA_IRQHandler+0xb0>
 8006276:	2340      	movs	r3, #64	@ 0x40
 8006278:	e000      	b.n	800627c <HAL_DMA_IRQHandler+0xb0>
 800627a:	2304      	movs	r3, #4
 800627c:	4a55      	ldr	r2, [pc, #340]	@ (80063d4 <HAL_DMA_IRQHandler+0x208>)
 800627e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8094 	beq.w	80063b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006292:	e08e      	b.n	80063b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006298:	2202      	movs	r2, #2
 800629a:	409a      	lsls	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4013      	ands	r3, r2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d056      	beq.n	8006352 <HAL_DMA_IRQHandler+0x186>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d051      	beq.n	8006352 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10b      	bne.n	80062d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 020a 	bic.w	r2, r2, #10
 80062ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a38      	ldr	r2, [pc, #224]	@ (80063bc <HAL_DMA_IRQHandler+0x1f0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d029      	beq.n	8006332 <HAL_DMA_IRQHandler+0x166>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a37      	ldr	r2, [pc, #220]	@ (80063c0 <HAL_DMA_IRQHandler+0x1f4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d022      	beq.n	800632e <HAL_DMA_IRQHandler+0x162>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a35      	ldr	r2, [pc, #212]	@ (80063c4 <HAL_DMA_IRQHandler+0x1f8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01a      	beq.n	8006328 <HAL_DMA_IRQHandler+0x15c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a34      	ldr	r2, [pc, #208]	@ (80063c8 <HAL_DMA_IRQHandler+0x1fc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d012      	beq.n	8006322 <HAL_DMA_IRQHandler+0x156>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a32      	ldr	r2, [pc, #200]	@ (80063cc <HAL_DMA_IRQHandler+0x200>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00a      	beq.n	800631c <HAL_DMA_IRQHandler+0x150>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a31      	ldr	r2, [pc, #196]	@ (80063d0 <HAL_DMA_IRQHandler+0x204>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d102      	bne.n	8006316 <HAL_DMA_IRQHandler+0x14a>
 8006310:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006314:	e00e      	b.n	8006334 <HAL_DMA_IRQHandler+0x168>
 8006316:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800631a:	e00b      	b.n	8006334 <HAL_DMA_IRQHandler+0x168>
 800631c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006320:	e008      	b.n	8006334 <HAL_DMA_IRQHandler+0x168>
 8006322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006326:	e005      	b.n	8006334 <HAL_DMA_IRQHandler+0x168>
 8006328:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800632c:	e002      	b.n	8006334 <HAL_DMA_IRQHandler+0x168>
 800632e:	2320      	movs	r3, #32
 8006330:	e000      	b.n	8006334 <HAL_DMA_IRQHandler+0x168>
 8006332:	2302      	movs	r3, #2
 8006334:	4a27      	ldr	r2, [pc, #156]	@ (80063d4 <HAL_DMA_IRQHandler+0x208>)
 8006336:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d034      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006350:	e02f      	b.n	80063b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006356:	2208      	movs	r2, #8
 8006358:	409a      	lsls	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4013      	ands	r3, r2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d028      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x1e8>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d023      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 020e 	bic.w	r2, r2, #14
 800637a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006384:	2101      	movs	r1, #1
 8006386:	fa01 f202 	lsl.w	r2, r1, r2
 800638a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d004      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
    }
  }
  return;
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
}
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40020008 	.word	0x40020008
 80063c0:	4002001c 	.word	0x4002001c
 80063c4:	40020030 	.word	0x40020030
 80063c8:	40020044 	.word	0x40020044
 80063cc:	40020058 	.word	0x40020058
 80063d0:	4002006c 	.word	0x4002006c
 80063d4:	40020000 	.word	0x40020000

080063d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ee:	2101      	movs	r1, #1
 80063f0:	fa01 f202 	lsl.w	r2, r1, r2
 80063f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b10      	cmp	r3, #16
 8006404:	d108      	bne.n	8006418 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006416:	e007      	b.n	8006428 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	60da      	str	r2, [r3, #12]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr
	...

08006434 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800644e:	4b2f      	ldr	r3, [pc, #188]	@ (800650c <HAL_FLASH_Program+0xd8>)
 8006450:	7e1b      	ldrb	r3, [r3, #24]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_FLASH_Program+0x26>
 8006456:	2302      	movs	r3, #2
 8006458:	e054      	b.n	8006504 <HAL_FLASH_Program+0xd0>
 800645a:	4b2c      	ldr	r3, [pc, #176]	@ (800650c <HAL_FLASH_Program+0xd8>)
 800645c:	2201      	movs	r2, #1
 800645e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006460:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006464:	f000 f8a8 	bl	80065b8 <FLASH_WaitForLastOperation>
 8006468:	4603      	mov	r3, r0
 800646a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d144      	bne.n	80064fc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d102      	bne.n	800647e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8006478:	2301      	movs	r3, #1
 800647a:	757b      	strb	r3, [r7, #21]
 800647c:	e007      	b.n	800648e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d102      	bne.n	800648a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006484:	2302      	movs	r3, #2
 8006486:	757b      	strb	r3, [r7, #21]
 8006488:	e001      	b.n	800648e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800648a:	2304      	movs	r3, #4
 800648c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800648e:	2300      	movs	r3, #0
 8006490:	75bb      	strb	r3, [r7, #22]
 8006492:	e02d      	b.n	80064f0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006494:	7dbb      	ldrb	r3, [r7, #22]
 8006496:	005a      	lsls	r2, r3, #1
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	eb02 0c03 	add.w	ip, r2, r3
 800649e:	7dbb      	ldrb	r3, [r7, #22]
 80064a0:	0119      	lsls	r1, r3, #4
 80064a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a6:	f1c1 0620 	rsb	r6, r1, #32
 80064aa:	f1a1 0020 	sub.w	r0, r1, #32
 80064ae:	fa22 f401 	lsr.w	r4, r2, r1
 80064b2:	fa03 f606 	lsl.w	r6, r3, r6
 80064b6:	4334      	orrs	r4, r6
 80064b8:	fa23 f000 	lsr.w	r0, r3, r0
 80064bc:	4304      	orrs	r4, r0
 80064be:	fa23 f501 	lsr.w	r5, r3, r1
 80064c2:	b2a3      	uxth	r3, r4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4660      	mov	r0, ip
 80064c8:	f000 f85a 	bl	8006580 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80064d0:	f000 f872 	bl	80065b8 <FLASH_WaitForLastOperation>
 80064d4:	4603      	mov	r3, r0
 80064d6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80064d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <HAL_FLASH_Program+0xdc>)
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006510 <HAL_FLASH_Program+0xdc>)
 80064de:	f023 0301 	bic.w	r3, r3, #1
 80064e2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d107      	bne.n	80064fa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80064ea:	7dbb      	ldrb	r3, [r7, #22]
 80064ec:	3301      	adds	r3, #1
 80064ee:	75bb      	strb	r3, [r7, #22]
 80064f0:	7dba      	ldrb	r2, [r7, #22]
 80064f2:	7d7b      	ldrb	r3, [r7, #21]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d3cd      	bcc.n	8006494 <HAL_FLASH_Program+0x60>
 80064f8:	e000      	b.n	80064fc <HAL_FLASH_Program+0xc8>
      {
        break;
 80064fa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80064fc:	4b03      	ldr	r3, [pc, #12]	@ (800650c <HAL_FLASH_Program+0xd8>)
 80064fe:	2200      	movs	r2, #0
 8006500:	761a      	strb	r2, [r3, #24]

  return status;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
}
 8006504:	4618      	mov	r0, r3
 8006506:	371c      	adds	r7, #28
 8006508:	46bd      	mov	sp, r7
 800650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800650c:	200007d0 	.word	0x200007d0
 8006510:	40022000 	.word	0x40022000

08006514 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800651e:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <HAL_FLASH_Unlock+0x40>)
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00d      	beq.n	8006546 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800652a:	4b0a      	ldr	r3, [pc, #40]	@ (8006554 <HAL_FLASH_Unlock+0x40>)
 800652c:	4a0a      	ldr	r2, [pc, #40]	@ (8006558 <HAL_FLASH_Unlock+0x44>)
 800652e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006530:	4b08      	ldr	r3, [pc, #32]	@ (8006554 <HAL_FLASH_Unlock+0x40>)
 8006532:	4a0a      	ldr	r2, [pc, #40]	@ (800655c <HAL_FLASH_Unlock+0x48>)
 8006534:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006536:	4b07      	ldr	r3, [pc, #28]	@ (8006554 <HAL_FLASH_Unlock+0x40>)
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8006546:	79fb      	ldrb	r3, [r7, #7]
}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40022000 	.word	0x40022000
 8006558:	45670123 	.word	0x45670123
 800655c:	cdef89ab 	.word	0xcdef89ab

08006560 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006564:	4b05      	ldr	r3, [pc, #20]	@ (800657c <HAL_FLASH_Lock+0x1c>)
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	4a04      	ldr	r2, [pc, #16]	@ (800657c <HAL_FLASH_Lock+0x1c>)
 800656a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800656e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40022000 	.word	0x40022000

08006580 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800658c:	4b08      	ldr	r3, [pc, #32]	@ (80065b0 <FLASH_Program_HalfWord+0x30>)
 800658e:	2200      	movs	r2, #0
 8006590:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006592:	4b08      	ldr	r3, [pc, #32]	@ (80065b4 <FLASH_Program_HalfWord+0x34>)
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	4a07      	ldr	r2, [pc, #28]	@ (80065b4 <FLASH_Program_HalfWord+0x34>)
 8006598:	f043 0301 	orr.w	r3, r3, #1
 800659c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	887a      	ldrh	r2, [r7, #2]
 80065a2:	801a      	strh	r2, [r3, #0]
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	200007d0 	.word	0x200007d0
 80065b4:	40022000 	.word	0x40022000

080065b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80065c0:	f7fe fc6a 	bl	8004e98 <HAL_GetTick>
 80065c4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80065c6:	e010      	b.n	80065ea <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d00c      	beq.n	80065ea <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <FLASH_WaitForLastOperation+0x2e>
 80065d6:	f7fe fc5f 	bl	8004e98 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d201      	bcs.n	80065ea <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e025      	b.n	8006636 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80065ea:	4b15      	ldr	r3, [pc, #84]	@ (8006640 <FLASH_WaitForLastOperation+0x88>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e8      	bne.n	80065c8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80065f6:	4b12      	ldr	r3, [pc, #72]	@ (8006640 <FLASH_WaitForLastOperation+0x88>)
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006602:	4b0f      	ldr	r3, [pc, #60]	@ (8006640 <FLASH_WaitForLastOperation+0x88>)
 8006604:	2220      	movs	r2, #32
 8006606:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006608:	4b0d      	ldr	r3, [pc, #52]	@ (8006640 <FLASH_WaitForLastOperation+0x88>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10b      	bne.n	800662c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006614:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <FLASH_WaitForLastOperation+0x88>)
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800661c:	2b00      	cmp	r3, #0
 800661e:	d105      	bne.n	800662c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006620:	4b07      	ldr	r3, [pc, #28]	@ (8006640 <FLASH_WaitForLastOperation+0x88>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800662c:	f000 f80a 	bl	8006644 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e000      	b.n	8006636 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40022000 	.word	0x40022000

08006644 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800664e:	4b23      	ldr	r3, [pc, #140]	@ (80066dc <FLASH_SetErrorCode+0x98>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800665a:	4b21      	ldr	r3, [pc, #132]	@ (80066e0 <FLASH_SetErrorCode+0x9c>)
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f043 0302 	orr.w	r3, r3, #2
 8006662:	4a1f      	ldr	r2, [pc, #124]	@ (80066e0 <FLASH_SetErrorCode+0x9c>)
 8006664:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f043 0310 	orr.w	r3, r3, #16
 800666c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800666e:	4b1b      	ldr	r3, [pc, #108]	@ (80066dc <FLASH_SetErrorCode+0x98>)
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800667a:	4b19      	ldr	r3, [pc, #100]	@ (80066e0 <FLASH_SetErrorCode+0x9c>)
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	4a17      	ldr	r2, [pc, #92]	@ (80066e0 <FLASH_SetErrorCode+0x9c>)
 8006684:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f043 0304 	orr.w	r3, r3, #4
 800668c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800668e:	4b13      	ldr	r3, [pc, #76]	@ (80066dc <FLASH_SetErrorCode+0x98>)
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00b      	beq.n	80066b2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800669a:	4b11      	ldr	r3, [pc, #68]	@ (80066e0 <FLASH_SetErrorCode+0x9c>)
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f043 0304 	orr.w	r3, r3, #4
 80066a2:	4a0f      	ldr	r2, [pc, #60]	@ (80066e0 <FLASH_SetErrorCode+0x9c>)
 80066a4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80066a6:	4b0d      	ldr	r3, [pc, #52]	@ (80066dc <FLASH_SetErrorCode+0x98>)
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	4a0c      	ldr	r2, [pc, #48]	@ (80066dc <FLASH_SetErrorCode+0x98>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f240 1201 	movw	r2, #257	@ 0x101
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d106      	bne.n	80066ca <FLASH_SetErrorCode+0x86>
 80066bc:	4b07      	ldr	r3, [pc, #28]	@ (80066dc <FLASH_SetErrorCode+0x98>)
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	4a06      	ldr	r2, [pc, #24]	@ (80066dc <FLASH_SetErrorCode+0x98>)
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	61d3      	str	r3, [r2, #28]
}  
 80066c8:	e002      	b.n	80066d0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80066ca:	4a04      	ldr	r2, [pc, #16]	@ (80066dc <FLASH_SetErrorCode+0x98>)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60d3      	str	r3, [r2, #12]
}  
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	40022000 	.word	0x40022000
 80066e0:	200007d0 	.word	0x200007d0

080066e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80066f6:	4b2f      	ldr	r3, [pc, #188]	@ (80067b4 <HAL_FLASHEx_Erase+0xd0>)
 80066f8:	7e1b      	ldrb	r3, [r3, #24]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d101      	bne.n	8006702 <HAL_FLASHEx_Erase+0x1e>
 80066fe:	2302      	movs	r3, #2
 8006700:	e053      	b.n	80067aa <HAL_FLASHEx_Erase+0xc6>
 8006702:	4b2c      	ldr	r3, [pc, #176]	@ (80067b4 <HAL_FLASHEx_Erase+0xd0>)
 8006704:	2201      	movs	r2, #1
 8006706:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d116      	bne.n	800673e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006710:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006714:	f7ff ff50 	bl	80065b8 <FLASH_WaitForLastOperation>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d141      	bne.n	80067a2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800671e:	2001      	movs	r0, #1
 8006720:	f000 f84c 	bl	80067bc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006724:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006728:	f7ff ff46 	bl	80065b8 <FLASH_WaitForLastOperation>
 800672c:	4603      	mov	r3, r0
 800672e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006730:	4b21      	ldr	r3, [pc, #132]	@ (80067b8 <HAL_FLASHEx_Erase+0xd4>)
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	4a20      	ldr	r2, [pc, #128]	@ (80067b8 <HAL_FLASHEx_Erase+0xd4>)
 8006736:	f023 0304 	bic.w	r3, r3, #4
 800673a:	6113      	str	r3, [r2, #16]
 800673c:	e031      	b.n	80067a2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800673e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006742:	f7ff ff39 	bl	80065b8 <FLASH_WaitForLastOperation>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d12a      	bne.n	80067a2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	f04f 32ff 	mov.w	r2, #4294967295
 8006752:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	e019      	b.n	8006790 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800675c:	68b8      	ldr	r0, [r7, #8]
 800675e:	f000 f849 	bl	80067f4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006762:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006766:	f7ff ff27 	bl	80065b8 <FLASH_WaitForLastOperation>
 800676a:	4603      	mov	r3, r0
 800676c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800676e:	4b12      	ldr	r3, [pc, #72]	@ (80067b8 <HAL_FLASHEx_Erase+0xd4>)
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	4a11      	ldr	r2, [pc, #68]	@ (80067b8 <HAL_FLASHEx_Erase+0xd4>)
 8006774:	f023 0302 	bic.w	r3, r3, #2
 8006778:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	601a      	str	r2, [r3, #0]
            break;
 8006786:	e00c      	b.n	80067a2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800678e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	029a      	lsls	r2, r3, #10
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	4413      	add	r3, r2
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d3dc      	bcc.n	800675c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80067a2:	4b04      	ldr	r3, [pc, #16]	@ (80067b4 <HAL_FLASHEx_Erase+0xd0>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	761a      	strb	r2, [r3, #24]

  return status;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200007d0 	.word	0x200007d0
 80067b8:	40022000 	.word	0x40022000

080067bc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80067c4:	4b09      	ldr	r3, [pc, #36]	@ (80067ec <FLASH_MassErase+0x30>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80067ca:	4b09      	ldr	r3, [pc, #36]	@ (80067f0 <FLASH_MassErase+0x34>)
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	4a08      	ldr	r2, [pc, #32]	@ (80067f0 <FLASH_MassErase+0x34>)
 80067d0:	f043 0304 	orr.w	r3, r3, #4
 80067d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80067d6:	4b06      	ldr	r3, [pc, #24]	@ (80067f0 <FLASH_MassErase+0x34>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	4a05      	ldr	r2, [pc, #20]	@ (80067f0 <FLASH_MassErase+0x34>)
 80067dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067e0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr
 80067ec:	200007d0 	.word	0x200007d0
 80067f0:	40022000 	.word	0x40022000

080067f4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80067fc:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <FLASH_PageErase+0x38>)
 80067fe:	2200      	movs	r2, #0
 8006800:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006802:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <FLASH_PageErase+0x3c>)
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	4a0a      	ldr	r2, [pc, #40]	@ (8006830 <FLASH_PageErase+0x3c>)
 8006808:	f043 0302 	orr.w	r3, r3, #2
 800680c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800680e:	4a08      	ldr	r2, [pc, #32]	@ (8006830 <FLASH_PageErase+0x3c>)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006814:	4b06      	ldr	r3, [pc, #24]	@ (8006830 <FLASH_PageErase+0x3c>)
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	4a05      	ldr	r2, [pc, #20]	@ (8006830 <FLASH_PageErase+0x3c>)
 800681a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800681e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	bc80      	pop	{r7}
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	200007d0 	.word	0x200007d0
 8006830:	40022000 	.word	0x40022000

08006834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006834:	b480      	push	{r7}
 8006836:	b08b      	sub	sp, #44	@ 0x2c
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800683e:	2300      	movs	r3, #0
 8006840:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006842:	2300      	movs	r3, #0
 8006844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006846:	e169      	b.n	8006b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006848:	2201      	movs	r2, #1
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	4013      	ands	r3, r2
 800685a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	429a      	cmp	r2, r3
 8006862:	f040 8158 	bne.w	8006b16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4a9a      	ldr	r2, [pc, #616]	@ (8006ad4 <HAL_GPIO_Init+0x2a0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d05e      	beq.n	800692e <HAL_GPIO_Init+0xfa>
 8006870:	4a98      	ldr	r2, [pc, #608]	@ (8006ad4 <HAL_GPIO_Init+0x2a0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d875      	bhi.n	8006962 <HAL_GPIO_Init+0x12e>
 8006876:	4a98      	ldr	r2, [pc, #608]	@ (8006ad8 <HAL_GPIO_Init+0x2a4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d058      	beq.n	800692e <HAL_GPIO_Init+0xfa>
 800687c:	4a96      	ldr	r2, [pc, #600]	@ (8006ad8 <HAL_GPIO_Init+0x2a4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d86f      	bhi.n	8006962 <HAL_GPIO_Init+0x12e>
 8006882:	4a96      	ldr	r2, [pc, #600]	@ (8006adc <HAL_GPIO_Init+0x2a8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d052      	beq.n	800692e <HAL_GPIO_Init+0xfa>
 8006888:	4a94      	ldr	r2, [pc, #592]	@ (8006adc <HAL_GPIO_Init+0x2a8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d869      	bhi.n	8006962 <HAL_GPIO_Init+0x12e>
 800688e:	4a94      	ldr	r2, [pc, #592]	@ (8006ae0 <HAL_GPIO_Init+0x2ac>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d04c      	beq.n	800692e <HAL_GPIO_Init+0xfa>
 8006894:	4a92      	ldr	r2, [pc, #584]	@ (8006ae0 <HAL_GPIO_Init+0x2ac>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d863      	bhi.n	8006962 <HAL_GPIO_Init+0x12e>
 800689a:	4a92      	ldr	r2, [pc, #584]	@ (8006ae4 <HAL_GPIO_Init+0x2b0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d046      	beq.n	800692e <HAL_GPIO_Init+0xfa>
 80068a0:	4a90      	ldr	r2, [pc, #576]	@ (8006ae4 <HAL_GPIO_Init+0x2b0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d85d      	bhi.n	8006962 <HAL_GPIO_Init+0x12e>
 80068a6:	2b12      	cmp	r3, #18
 80068a8:	d82a      	bhi.n	8006900 <HAL_GPIO_Init+0xcc>
 80068aa:	2b12      	cmp	r3, #18
 80068ac:	d859      	bhi.n	8006962 <HAL_GPIO_Init+0x12e>
 80068ae:	a201      	add	r2, pc, #4	@ (adr r2, 80068b4 <HAL_GPIO_Init+0x80>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	0800692f 	.word	0x0800692f
 80068b8:	08006909 	.word	0x08006909
 80068bc:	0800691b 	.word	0x0800691b
 80068c0:	0800695d 	.word	0x0800695d
 80068c4:	08006963 	.word	0x08006963
 80068c8:	08006963 	.word	0x08006963
 80068cc:	08006963 	.word	0x08006963
 80068d0:	08006963 	.word	0x08006963
 80068d4:	08006963 	.word	0x08006963
 80068d8:	08006963 	.word	0x08006963
 80068dc:	08006963 	.word	0x08006963
 80068e0:	08006963 	.word	0x08006963
 80068e4:	08006963 	.word	0x08006963
 80068e8:	08006963 	.word	0x08006963
 80068ec:	08006963 	.word	0x08006963
 80068f0:	08006963 	.word	0x08006963
 80068f4:	08006963 	.word	0x08006963
 80068f8:	08006911 	.word	0x08006911
 80068fc:	08006925 	.word	0x08006925
 8006900:	4a79      	ldr	r2, [pc, #484]	@ (8006ae8 <HAL_GPIO_Init+0x2b4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d013      	beq.n	800692e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006906:	e02c      	b.n	8006962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	623b      	str	r3, [r7, #32]
          break;
 800690e:	e029      	b.n	8006964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	3304      	adds	r3, #4
 8006916:	623b      	str	r3, [r7, #32]
          break;
 8006918:	e024      	b.n	8006964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	3308      	adds	r3, #8
 8006920:	623b      	str	r3, [r7, #32]
          break;
 8006922:	e01f      	b.n	8006964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	330c      	adds	r3, #12
 800692a:	623b      	str	r3, [r7, #32]
          break;
 800692c:	e01a      	b.n	8006964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d102      	bne.n	800693c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006936:	2304      	movs	r3, #4
 8006938:	623b      	str	r3, [r7, #32]
          break;
 800693a:	e013      	b.n	8006964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d105      	bne.n	8006950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006944:	2308      	movs	r3, #8
 8006946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	611a      	str	r2, [r3, #16]
          break;
 800694e:	e009      	b.n	8006964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006950:	2308      	movs	r3, #8
 8006952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	615a      	str	r2, [r3, #20]
          break;
 800695a:	e003      	b.n	8006964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800695c:	2300      	movs	r3, #0
 800695e:	623b      	str	r3, [r7, #32]
          break;
 8006960:	e000      	b.n	8006964 <HAL_GPIO_Init+0x130>
          break;
 8006962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	2bff      	cmp	r3, #255	@ 0xff
 8006968:	d801      	bhi.n	800696e <HAL_GPIO_Init+0x13a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	e001      	b.n	8006972 <HAL_GPIO_Init+0x13e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3304      	adds	r3, #4
 8006972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2bff      	cmp	r3, #255	@ 0xff
 8006978:	d802      	bhi.n	8006980 <HAL_GPIO_Init+0x14c>
 800697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	e002      	b.n	8006986 <HAL_GPIO_Init+0x152>
 8006980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006982:	3b08      	subs	r3, #8
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	210f      	movs	r1, #15
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	fa01 f303 	lsl.w	r3, r1, r3
 8006994:	43db      	mvns	r3, r3
 8006996:	401a      	ands	r2, r3
 8006998:	6a39      	ldr	r1, [r7, #32]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	fa01 f303 	lsl.w	r3, r1, r3
 80069a0:	431a      	orrs	r2, r3
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 80b1 	beq.w	8006b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80069b4:	4b4d      	ldr	r3, [pc, #308]	@ (8006aec <HAL_GPIO_Init+0x2b8>)
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	4a4c      	ldr	r2, [pc, #304]	@ (8006aec <HAL_GPIO_Init+0x2b8>)
 80069ba:	f043 0301 	orr.w	r3, r3, #1
 80069be:	6193      	str	r3, [r2, #24]
 80069c0:	4b4a      	ldr	r3, [pc, #296]	@ (8006aec <HAL_GPIO_Init+0x2b8>)
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80069cc:	4a48      	ldr	r2, [pc, #288]	@ (8006af0 <HAL_GPIO_Init+0x2bc>)
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	089b      	lsrs	r3, r3, #2
 80069d2:	3302      	adds	r3, #2
 80069d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	f003 0303 	and.w	r3, r3, #3
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	220f      	movs	r2, #15
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	43db      	mvns	r3, r3
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4013      	ands	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a40      	ldr	r2, [pc, #256]	@ (8006af4 <HAL_GPIO_Init+0x2c0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d013      	beq.n	8006a20 <HAL_GPIO_Init+0x1ec>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a3f      	ldr	r2, [pc, #252]	@ (8006af8 <HAL_GPIO_Init+0x2c4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00d      	beq.n	8006a1c <HAL_GPIO_Init+0x1e8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a3e      	ldr	r2, [pc, #248]	@ (8006afc <HAL_GPIO_Init+0x2c8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d007      	beq.n	8006a18 <HAL_GPIO_Init+0x1e4>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a3d      	ldr	r2, [pc, #244]	@ (8006b00 <HAL_GPIO_Init+0x2cc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d101      	bne.n	8006a14 <HAL_GPIO_Init+0x1e0>
 8006a10:	2303      	movs	r3, #3
 8006a12:	e006      	b.n	8006a22 <HAL_GPIO_Init+0x1ee>
 8006a14:	2304      	movs	r3, #4
 8006a16:	e004      	b.n	8006a22 <HAL_GPIO_Init+0x1ee>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e002      	b.n	8006a22 <HAL_GPIO_Init+0x1ee>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <HAL_GPIO_Init+0x1ee>
 8006a20:	2300      	movs	r3, #0
 8006a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a24:	f002 0203 	and.w	r2, r2, #3
 8006a28:	0092      	lsls	r2, r2, #2
 8006a2a:	4093      	lsls	r3, r2
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006a32:	492f      	ldr	r1, [pc, #188]	@ (8006af0 <HAL_GPIO_Init+0x2bc>)
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	089b      	lsrs	r3, r3, #2
 8006a38:	3302      	adds	r3, #2
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d006      	beq.n	8006a5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	492c      	ldr	r1, [pc, #176]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	608b      	str	r3, [r1, #8]
 8006a58:	e006      	b.n	8006a68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	43db      	mvns	r3, r3
 8006a62:	4928      	ldr	r1, [pc, #160]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006a74:	4b23      	ldr	r3, [pc, #140]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	4922      	ldr	r1, [pc, #136]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60cb      	str	r3, [r1, #12]
 8006a80:	e006      	b.n	8006a90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006a82:	4b20      	ldr	r3, [pc, #128]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	491e      	ldr	r1, [pc, #120]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006a9c:	4b19      	ldr	r3, [pc, #100]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	4918      	ldr	r1, [pc, #96]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	604b      	str	r3, [r1, #4]
 8006aa8:	e006      	b.n	8006ab8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006aaa:	4b16      	ldr	r3, [pc, #88]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	4914      	ldr	r1, [pc, #80]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d021      	beq.n	8006b08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	490e      	ldr	r1, [pc, #56]	@ (8006b04 <HAL_GPIO_Init+0x2d0>)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	600b      	str	r3, [r1, #0]
 8006ad0:	e021      	b.n	8006b16 <HAL_GPIO_Init+0x2e2>
 8006ad2:	bf00      	nop
 8006ad4:	10320000 	.word	0x10320000
 8006ad8:	10310000 	.word	0x10310000
 8006adc:	10220000 	.word	0x10220000
 8006ae0:	10210000 	.word	0x10210000
 8006ae4:	10120000 	.word	0x10120000
 8006ae8:	10110000 	.word	0x10110000
 8006aec:	40021000 	.word	0x40021000
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40010800 	.word	0x40010800
 8006af8:	40010c00 	.word	0x40010c00
 8006afc:	40011000 	.word	0x40011000
 8006b00:	40011400 	.word	0x40011400
 8006b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006b08:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <HAL_GPIO_Init+0x304>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	43db      	mvns	r3, r3
 8006b10:	4909      	ldr	r1, [pc, #36]	@ (8006b38 <HAL_GPIO_Init+0x304>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	3301      	adds	r3, #1
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b22:	fa22 f303 	lsr.w	r3, r2, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f47f ae8e 	bne.w	8006848 <HAL_GPIO_Init+0x14>
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	372c      	adds	r7, #44	@ 0x2c
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr
 8006b38:	40010400 	.word	0x40010400

08006b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	887b      	ldrh	r3, [r7, #2]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b54:	2301      	movs	r3, #1
 8006b56:	73fb      	strb	r3, [r7, #15]
 8006b58:	e001      	b.n	8006b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr

08006b6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	807b      	strh	r3, [r7, #2]
 8006b76:	4613      	mov	r3, r2
 8006b78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b7a:	787b      	ldrb	r3, [r7, #1]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b80:	887a      	ldrh	r2, [r7, #2]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006b86:	e003      	b.n	8006b90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006b88:	887b      	ldrh	r3, [r7, #2]
 8006b8a:	041a      	lsls	r2, r3, #16
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	611a      	str	r2, [r3, #16]
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr

08006b9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006bac:	887a      	ldrh	r2, [r7, #2]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	041a      	lsls	r2, r3, #16
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	43d9      	mvns	r1, r3
 8006bb8:	887b      	ldrh	r3, [r7, #2]
 8006bba:	400b      	ands	r3, r1
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	611a      	str	r2, [r3, #16]
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006bd6:	4b08      	ldr	r3, [pc, #32]	@ (8006bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bd8:	695a      	ldr	r2, [r3, #20]
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d006      	beq.n	8006bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006be2:	4a05      	ldr	r2, [pc, #20]	@ (8006bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fb f9a4 	bl	8001f38 <HAL_GPIO_EXTI_Callback>
  }
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40010400 	.word	0x40010400

08006bfc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e036      	b.n	8006c7c <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006c16:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006c20:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6852      	ldr	r2, [r2, #4]
 8006c2a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6892      	ldr	r2, [r2, #8]
 8006c34:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006c36:	f7fe f92f 	bl	8004e98 <HAL_GetTick>
 8006c3a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c3c:	e011      	b.n	8006c62 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006c3e:	f7fe f92b 	bl	8004e98 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	f241 323c 	movw	r2, #4924	@ 0x133c
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d908      	bls.n	8006c62 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e00c      	b.n	8006c7c <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0303 	and.w	r3, r3, #3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e6      	bne.n	8006c3e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006c78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006c94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr
	...

08006ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e272      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 8087 	beq.w	8006dd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cc4:	4b92      	ldr	r3, [pc, #584]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f003 030c 	and.w	r3, r3, #12
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d00c      	beq.n	8006cea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006cd0:	4b8f      	ldr	r3, [pc, #572]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f003 030c 	and.w	r3, r3, #12
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d112      	bne.n	8006d02 <HAL_RCC_OscConfig+0x5e>
 8006cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce8:	d10b      	bne.n	8006d02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cea:	4b89      	ldr	r3, [pc, #548]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d06c      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x12c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d168      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e24c      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d0a:	d106      	bne.n	8006d1a <HAL_RCC_OscConfig+0x76>
 8006d0c:	4b80      	ldr	r3, [pc, #512]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a7f      	ldr	r2, [pc, #508]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	e02e      	b.n	8006d78 <HAL_RCC_OscConfig+0xd4>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10c      	bne.n	8006d3c <HAL_RCC_OscConfig+0x98>
 8006d22:	4b7b      	ldr	r3, [pc, #492]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a7a      	ldr	r2, [pc, #488]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	4b78      	ldr	r3, [pc, #480]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a77      	ldr	r2, [pc, #476]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	e01d      	b.n	8006d78 <HAL_RCC_OscConfig+0xd4>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d44:	d10c      	bne.n	8006d60 <HAL_RCC_OscConfig+0xbc>
 8006d46:	4b72      	ldr	r3, [pc, #456]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a71      	ldr	r2, [pc, #452]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	4b6f      	ldr	r3, [pc, #444]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a6e      	ldr	r2, [pc, #440]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e00b      	b.n	8006d78 <HAL_RCC_OscConfig+0xd4>
 8006d60:	4b6b      	ldr	r3, [pc, #428]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a6a      	ldr	r2, [pc, #424]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	4b68      	ldr	r3, [pc, #416]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a67      	ldr	r2, [pc, #412]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d013      	beq.n	8006da8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d80:	f7fe f88a 	bl	8004e98 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d88:	f7fe f886 	bl	8004e98 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b64      	cmp	r3, #100	@ 0x64
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e200      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f0      	beq.n	8006d88 <HAL_RCC_OscConfig+0xe4>
 8006da6:	e014      	b.n	8006dd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da8:	f7fe f876 	bl	8004e98 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006db0:	f7fe f872 	bl	8004e98 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b64      	cmp	r3, #100	@ 0x64
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e1ec      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc2:	4b53      	ldr	r3, [pc, #332]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x10c>
 8006dce:	e000      	b.n	8006dd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d063      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dde:	4b4c      	ldr	r3, [pc, #304]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f003 030c 	and.w	r3, r3, #12
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006dea:	4b49      	ldr	r3, [pc, #292]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f003 030c 	and.w	r3, r3, #12
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d11c      	bne.n	8006e30 <HAL_RCC_OscConfig+0x18c>
 8006df6:	4b46      	ldr	r3, [pc, #280]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d116      	bne.n	8006e30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e02:	4b43      	ldr	r3, [pc, #268]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <HAL_RCC_OscConfig+0x176>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d001      	beq.n	8006e1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e1c0      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	4939      	ldr	r1, [pc, #228]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e2e:	e03a      	b.n	8006ea6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d020      	beq.n	8006e7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e38:	4b36      	ldr	r3, [pc, #216]	@ (8006f14 <HAL_RCC_OscConfig+0x270>)
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3e:	f7fe f82b 	bl	8004e98 <HAL_GetTick>
 8006e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e46:	f7fe f827 	bl	8004e98 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e1a1      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e58:	4b2d      	ldr	r3, [pc, #180]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0f0      	beq.n	8006e46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e64:	4b2a      	ldr	r3, [pc, #168]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	4927      	ldr	r1, [pc, #156]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	600b      	str	r3, [r1, #0]
 8006e78:	e015      	b.n	8006ea6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e7a:	4b26      	ldr	r3, [pc, #152]	@ (8006f14 <HAL_RCC_OscConfig+0x270>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e80:	f7fe f80a 	bl	8004e98 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e88:	f7fe f806 	bl	8004e98 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e180      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d03a      	beq.n	8006f28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d019      	beq.n	8006eee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eba:	4b17      	ldr	r3, [pc, #92]	@ (8006f18 <HAL_RCC_OscConfig+0x274>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ec0:	f7fd ffea 	bl	8004e98 <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ec8:	f7fd ffe6 	bl	8004e98 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e160      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eda:	4b0d      	ldr	r3, [pc, #52]	@ (8006f10 <HAL_RCC_OscConfig+0x26c>)
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0f0      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	f000 fad0 	bl	800748c <RCC_Delay>
 8006eec:	e01c      	b.n	8006f28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006eee:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <HAL_RCC_OscConfig+0x274>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef4:	f7fd ffd0 	bl	8004e98 <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006efa:	e00f      	b.n	8006f1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006efc:	f7fd ffcc 	bl	8004e98 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d908      	bls.n	8006f1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e146      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
 8006f0e:	bf00      	nop
 8006f10:	40021000 	.word	0x40021000
 8006f14:	42420000 	.word	0x42420000
 8006f18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f1c:	4b92      	ldr	r3, [pc, #584]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e9      	bne.n	8006efc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80a6 	beq.w	8007082 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f36:	2300      	movs	r3, #0
 8006f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f3a:	4b8b      	ldr	r3, [pc, #556]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10d      	bne.n	8006f62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f46:	4b88      	ldr	r3, [pc, #544]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	4a87      	ldr	r2, [pc, #540]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f50:	61d3      	str	r3, [r2, #28]
 8006f52:	4b85      	ldr	r3, [pc, #532]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f5a:	60bb      	str	r3, [r7, #8]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f62:	4b82      	ldr	r3, [pc, #520]	@ (800716c <HAL_RCC_OscConfig+0x4c8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d118      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800716c <HAL_RCC_OscConfig+0x4c8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a7e      	ldr	r2, [pc, #504]	@ (800716c <HAL_RCC_OscConfig+0x4c8>)
 8006f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f7a:	f7fd ff8d 	bl	8004e98 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f82:	f7fd ff89 	bl	8004e98 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b64      	cmp	r3, #100	@ 0x64
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e103      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f94:	4b75      	ldr	r3, [pc, #468]	@ (800716c <HAL_RCC_OscConfig+0x4c8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0f0      	beq.n	8006f82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d106      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x312>
 8006fa8:	4b6f      	ldr	r3, [pc, #444]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	4a6e      	ldr	r2, [pc, #440]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006fae:	f043 0301 	orr.w	r3, r3, #1
 8006fb2:	6213      	str	r3, [r2, #32]
 8006fb4:	e02d      	b.n	8007012 <HAL_RCC_OscConfig+0x36e>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10c      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x334>
 8006fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	4a69      	ldr	r2, [pc, #420]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006fc4:	f023 0301 	bic.w	r3, r3, #1
 8006fc8:	6213      	str	r3, [r2, #32]
 8006fca:	4b67      	ldr	r3, [pc, #412]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	4a66      	ldr	r2, [pc, #408]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006fd0:	f023 0304 	bic.w	r3, r3, #4
 8006fd4:	6213      	str	r3, [r2, #32]
 8006fd6:	e01c      	b.n	8007012 <HAL_RCC_OscConfig+0x36e>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	2b05      	cmp	r3, #5
 8006fde:	d10c      	bne.n	8006ffa <HAL_RCC_OscConfig+0x356>
 8006fe0:	4b61      	ldr	r3, [pc, #388]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	4a60      	ldr	r2, [pc, #384]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006fe6:	f043 0304 	orr.w	r3, r3, #4
 8006fea:	6213      	str	r3, [r2, #32]
 8006fec:	4b5e      	ldr	r3, [pc, #376]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	4a5d      	ldr	r2, [pc, #372]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006ff2:	f043 0301 	orr.w	r3, r3, #1
 8006ff6:	6213      	str	r3, [r2, #32]
 8006ff8:	e00b      	b.n	8007012 <HAL_RCC_OscConfig+0x36e>
 8006ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	4a5a      	ldr	r2, [pc, #360]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8007000:	f023 0301 	bic.w	r3, r3, #1
 8007004:	6213      	str	r3, [r2, #32]
 8007006:	4b58      	ldr	r3, [pc, #352]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	4a57      	ldr	r2, [pc, #348]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 800700c:	f023 0304 	bic.w	r3, r3, #4
 8007010:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d015      	beq.n	8007046 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800701a:	f7fd ff3d 	bl	8004e98 <HAL_GetTick>
 800701e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007020:	e00a      	b.n	8007038 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007022:	f7fd ff39 	bl	8004e98 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007030:	4293      	cmp	r3, r2
 8007032:	d901      	bls.n	8007038 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e0b1      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007038:	4b4b      	ldr	r3, [pc, #300]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0ee      	beq.n	8007022 <HAL_RCC_OscConfig+0x37e>
 8007044:	e014      	b.n	8007070 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007046:	f7fd ff27 	bl	8004e98 <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800704c:	e00a      	b.n	8007064 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800704e:	f7fd ff23 	bl	8004e98 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800705c:	4293      	cmp	r3, r2
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e09b      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007064:	4b40      	ldr	r3, [pc, #256]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1ee      	bne.n	800704e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d105      	bne.n	8007082 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007076:	4b3c      	ldr	r3, [pc, #240]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	4a3b      	ldr	r2, [pc, #236]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 800707c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007080:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 8087 	beq.w	800719a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800708c:	4b36      	ldr	r3, [pc, #216]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f003 030c 	and.w	r3, r3, #12
 8007094:	2b08      	cmp	r3, #8
 8007096:	d061      	beq.n	800715c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d146      	bne.n	800712e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070a0:	4b33      	ldr	r3, [pc, #204]	@ (8007170 <HAL_RCC_OscConfig+0x4cc>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a6:	f7fd fef7 	bl	8004e98 <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ae:	f7fd fef3 	bl	8004e98 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e06d      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070c0:	4b29      	ldr	r3, [pc, #164]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f0      	bne.n	80070ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d4:	d108      	bne.n	80070e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80070d6:	4b24      	ldr	r3, [pc, #144]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	4921      	ldr	r1, [pc, #132]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a19      	ldr	r1, [r3, #32]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	430b      	orrs	r3, r1
 80070fa:	491b      	ldr	r1, [pc, #108]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007100:	4b1b      	ldr	r3, [pc, #108]	@ (8007170 <HAL_RCC_OscConfig+0x4cc>)
 8007102:	2201      	movs	r2, #1
 8007104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007106:	f7fd fec7 	bl	8004e98 <HAL_GetTick>
 800710a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800710e:	f7fd fec3 	bl	8004e98 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e03d      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007120:	4b11      	ldr	r3, [pc, #68]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0f0      	beq.n	800710e <HAL_RCC_OscConfig+0x46a>
 800712c:	e035      	b.n	800719a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800712e:	4b10      	ldr	r3, [pc, #64]	@ (8007170 <HAL_RCC_OscConfig+0x4cc>)
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007134:	f7fd feb0 	bl	8004e98 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800713c:	f7fd feac 	bl	8004e98 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e026      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800714e:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <HAL_RCC_OscConfig+0x4c4>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f0      	bne.n	800713c <HAL_RCC_OscConfig+0x498>
 800715a:	e01e      	b.n	800719a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d107      	bne.n	8007174 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e019      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
 8007168:	40021000 	.word	0x40021000
 800716c:	40007000 	.word	0x40007000
 8007170:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007174:	4b0b      	ldr	r3, [pc, #44]	@ (80071a4 <HAL_RCC_OscConfig+0x500>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	429a      	cmp	r2, r3
 8007186:	d106      	bne.n	8007196 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007192:	429a      	cmp	r2, r3
 8007194:	d001      	beq.n	800719a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e000      	b.n	800719c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40021000 	.word	0x40021000

080071a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0d0      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d910      	bls.n	80071ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ca:	4b67      	ldr	r3, [pc, #412]	@ (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f023 0207 	bic.w	r2, r3, #7
 80071d2:	4965      	ldr	r1, [pc, #404]	@ (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071da:	4b63      	ldr	r3, [pc, #396]	@ (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d001      	beq.n	80071ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0b8      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d020      	beq.n	800723a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007204:	4b59      	ldr	r3, [pc, #356]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4a58      	ldr	r2, [pc, #352]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 800720a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800720e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800721c:	4b53      	ldr	r3, [pc, #332]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	4a52      	ldr	r2, [pc, #328]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007222:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007226:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007228:	4b50      	ldr	r3, [pc, #320]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	494d      	ldr	r1, [pc, #308]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007236:	4313      	orrs	r3, r2
 8007238:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d040      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d107      	bne.n	800725e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800724e:	4b47      	ldr	r3, [pc, #284]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d115      	bne.n	8007286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e07f      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d107      	bne.n	8007276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007266:	4b41      	ldr	r3, [pc, #260]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e073      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007276:	4b3d      	ldr	r3, [pc, #244]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e06b      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007286:	4b39      	ldr	r3, [pc, #228]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f023 0203 	bic.w	r2, r3, #3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	4936      	ldr	r1, [pc, #216]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007294:	4313      	orrs	r3, r2
 8007296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007298:	f7fd fdfe 	bl	8004e98 <HAL_GetTick>
 800729c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800729e:	e00a      	b.n	80072b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a0:	f7fd fdfa 	bl	8004e98 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e053      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b6:	4b2d      	ldr	r3, [pc, #180]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f003 020c 	and.w	r2, r3, #12
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d1eb      	bne.n	80072a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072c8:	4b27      	ldr	r3, [pc, #156]	@ (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d210      	bcs.n	80072f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072d6:	4b24      	ldr	r3, [pc, #144]	@ (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f023 0207 	bic.w	r2, r3, #7
 80072de:	4922      	ldr	r1, [pc, #136]	@ (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e6:	4b20      	ldr	r3, [pc, #128]	@ (8007368 <HAL_RCC_ClockConfig+0x1c0>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e032      	b.n	800735e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d008      	beq.n	8007316 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007304:	4b19      	ldr	r3, [pc, #100]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4916      	ldr	r1, [pc, #88]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007312:	4313      	orrs	r3, r2
 8007314:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007322:	4b12      	ldr	r3, [pc, #72]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	490e      	ldr	r1, [pc, #56]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 8007332:	4313      	orrs	r3, r2
 8007334:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007336:	f000 f821 	bl	800737c <HAL_RCC_GetSysClockFreq>
 800733a:	4602      	mov	r2, r0
 800733c:	4b0b      	ldr	r3, [pc, #44]	@ (800736c <HAL_RCC_ClockConfig+0x1c4>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	091b      	lsrs	r3, r3, #4
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	490a      	ldr	r1, [pc, #40]	@ (8007370 <HAL_RCC_ClockConfig+0x1c8>)
 8007348:	5ccb      	ldrb	r3, [r1, r3]
 800734a:	fa22 f303 	lsr.w	r3, r2, r3
 800734e:	4a09      	ldr	r2, [pc, #36]	@ (8007374 <HAL_RCC_ClockConfig+0x1cc>)
 8007350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007352:	4b09      	ldr	r3, [pc, #36]	@ (8007378 <HAL_RCC_ClockConfig+0x1d0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4618      	mov	r0, r3
 8007358:	f7fd fd5c 	bl	8004e14 <HAL_InitTick>

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	40022000 	.word	0x40022000
 800736c:	40021000 	.word	0x40021000
 8007370:	08009950 	.word	0x08009950
 8007374:	20000038 	.word	0x20000038
 8007378:	2000003c 	.word	0x2000003c

0800737c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	2300      	movs	r3, #0
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	2300      	movs	r3, #0
 8007390:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007396:	4b1e      	ldr	r3, [pc, #120]	@ (8007410 <HAL_RCC_GetSysClockFreq+0x94>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f003 030c 	and.w	r3, r3, #12
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d002      	beq.n	80073ac <HAL_RCC_GetSysClockFreq+0x30>
 80073a6:	2b08      	cmp	r3, #8
 80073a8:	d003      	beq.n	80073b2 <HAL_RCC_GetSysClockFreq+0x36>
 80073aa:	e027      	b.n	80073fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073ac:	4b19      	ldr	r3, [pc, #100]	@ (8007414 <HAL_RCC_GetSysClockFreq+0x98>)
 80073ae:	613b      	str	r3, [r7, #16]
      break;
 80073b0:	e027      	b.n	8007402 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	0c9b      	lsrs	r3, r3, #18
 80073b6:	f003 030f 	and.w	r3, r3, #15
 80073ba:	4a17      	ldr	r2, [pc, #92]	@ (8007418 <HAL_RCC_GetSysClockFreq+0x9c>)
 80073bc:	5cd3      	ldrb	r3, [r2, r3]
 80073be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d010      	beq.n	80073ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80073ca:	4b11      	ldr	r3, [pc, #68]	@ (8007410 <HAL_RCC_GetSysClockFreq+0x94>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	0c5b      	lsrs	r3, r3, #17
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	4a11      	ldr	r2, [pc, #68]	@ (800741c <HAL_RCC_GetSysClockFreq+0xa0>)
 80073d6:	5cd3      	ldrb	r3, [r2, r3]
 80073d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007414 <HAL_RCC_GetSysClockFreq+0x98>)
 80073de:	fb03 f202 	mul.w	r2, r3, r2
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	e004      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007420 <HAL_RCC_GetSysClockFreq+0xa4>)
 80073f0:	fb02 f303 	mul.w	r3, r2, r3
 80073f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	613b      	str	r3, [r7, #16]
      break;
 80073fa:	e002      	b.n	8007402 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073fc:	4b09      	ldr	r3, [pc, #36]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xa8>)
 80073fe:	613b      	str	r3, [r7, #16]
      break;
 8007400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007402:	693b      	ldr	r3, [r7, #16]
}
 8007404:	4618      	mov	r0, r3
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	bc80      	pop	{r7}
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40021000 	.word	0x40021000
 8007414:	00f42400 	.word	0x00f42400
 8007418:	08009968 	.word	0x08009968
 800741c:	08009978 	.word	0x08009978
 8007420:	003d0900 	.word	0x003d0900
 8007424:	007a1200 	.word	0x007a1200

08007428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800742c:	4b02      	ldr	r3, [pc, #8]	@ (8007438 <HAL_RCC_GetHCLKFreq+0x10>)
 800742e:	681b      	ldr	r3, [r3, #0]
}
 8007430:	4618      	mov	r0, r3
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr
 8007438:	20000038 	.word	0x20000038

0800743c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007440:	f7ff fff2 	bl	8007428 <HAL_RCC_GetHCLKFreq>
 8007444:	4602      	mov	r2, r0
 8007446:	4b05      	ldr	r3, [pc, #20]	@ (800745c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	f003 0307 	and.w	r3, r3, #7
 8007450:	4903      	ldr	r1, [pc, #12]	@ (8007460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007452:	5ccb      	ldrb	r3, [r1, r3]
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40021000 	.word	0x40021000
 8007460:	08009960 	.word	0x08009960

08007464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007468:	f7ff ffde 	bl	8007428 <HAL_RCC_GetHCLKFreq>
 800746c:	4602      	mov	r2, r0
 800746e:	4b05      	ldr	r3, [pc, #20]	@ (8007484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	0adb      	lsrs	r3, r3, #11
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	4903      	ldr	r1, [pc, #12]	@ (8007488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800747a:	5ccb      	ldrb	r3, [r1, r3]
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007480:	4618      	mov	r0, r3
 8007482:	bd80      	pop	{r7, pc}
 8007484:	40021000 	.word	0x40021000
 8007488:	08009960 	.word	0x08009960

0800748c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007494:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <RCC_Delay+0x34>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a0a      	ldr	r2, [pc, #40]	@ (80074c4 <RCC_Delay+0x38>)
 800749a:	fba2 2303 	umull	r2, r3, r2, r3
 800749e:	0a5b      	lsrs	r3, r3, #9
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	fb02 f303 	mul.w	r3, r2, r3
 80074a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80074a8:	bf00      	nop
  }
  while (Delay --);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1e5a      	subs	r2, r3, #1
 80074ae:	60fa      	str	r2, [r7, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1f9      	bne.n	80074a8 <RCC_Delay+0x1c>
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr
 80074c0:	20000038 	.word	0x20000038
 80074c4:	10624dd3 	.word	0x10624dd3

080074c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e076      	b.n	80075c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d108      	bne.n	80074f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074ea:	d009      	beq.n	8007500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	61da      	str	r2, [r3, #28]
 80074f2:	e005      	b.n	8007500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fd fa86 	bl	8004a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007584:	ea42 0103 	orr.w	r1, r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	0c1a      	lsrs	r2, r3, #16
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f002 0204 	and.w	r2, r2, #4
 80075a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69da      	ldr	r2, [r3, #28]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075e0:	f7fd fc5a 	bl	8004e98 <HAL_GetTick>
 80075e4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d001      	beq.n	80075fa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80075f6:	2302      	movs	r3, #2
 80075f8:	e12a      	b.n	8007850 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <HAL_SPI_Transmit+0x36>
 8007600:	88fb      	ldrh	r3, [r7, #6]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e122      	b.n	8007850 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_SPI_Transmit+0x48>
 8007614:	2302      	movs	r3, #2
 8007616:	e11b      	b.n	8007850 <HAL_SPI_Transmit+0x280>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2203      	movs	r2, #3
 8007624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	88fa      	ldrh	r2, [r7, #6]
 8007638:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	88fa      	ldrh	r2, [r7, #6]
 800763e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007666:	d10f      	bne.n	8007688 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007676:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007686:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007692:	2b40      	cmp	r3, #64	@ 0x40
 8007694:	d007      	beq.n	80076a6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076ae:	d152      	bne.n	8007756 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SPI_Transmit+0xee>
 80076b8:	8b7b      	ldrh	r3, [r7, #26]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d145      	bne.n	800774a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	881a      	ldrh	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ce:	1c9a      	adds	r2, r3, #2
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076e2:	e032      	b.n	800774a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d112      	bne.n	8007718 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f6:	881a      	ldrh	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007702:	1c9a      	adds	r2, r3, #2
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007716:	e018      	b.n	800774a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007718:	f7fd fbbe 	bl	8004e98 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d803      	bhi.n	8007730 <HAL_SPI_Transmit+0x160>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772e:	d102      	bne.n	8007736 <HAL_SPI_Transmit+0x166>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d109      	bne.n	800774a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e082      	b.n	8007850 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1c7      	bne.n	80076e4 <HAL_SPI_Transmit+0x114>
 8007754:	e053      	b.n	80077fe <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_SPI_Transmit+0x194>
 800775e:	8b7b      	ldrh	r3, [r7, #26]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d147      	bne.n	80077f4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	330c      	adds	r3, #12
 800776e:	7812      	ldrb	r2, [r2, #0]
 8007770:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007780:	b29b      	uxth	r3, r3
 8007782:	3b01      	subs	r3, #1
 8007784:	b29a      	uxth	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800778a:	e033      	b.n	80077f4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b02      	cmp	r3, #2
 8007798:	d113      	bne.n	80077c2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	330c      	adds	r3, #12
 80077a4:	7812      	ldrb	r2, [r2, #0]
 80077a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80077c0:	e018      	b.n	80077f4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077c2:	f7fd fb69 	bl	8004e98 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d803      	bhi.n	80077da <HAL_SPI_Transmit+0x20a>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d102      	bne.n	80077e0 <HAL_SPI_Transmit+0x210>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d109      	bne.n	80077f4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e02d      	b.n	8007850 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1c6      	bne.n	800778c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 fbc4 	bl	8007f90 <SPI_EndRxTxTransaction>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2220      	movs	r2, #32
 8007812:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800784e:	2300      	movs	r3, #0
  }
}
 8007850:	4618      	mov	r0, r3
 8007852:	3720      	adds	r7, #32
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af02      	add	r7, sp, #8
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	4613      	mov	r3, r2
 8007866:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	d001      	beq.n	8007878 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
 8007876:	e104      	b.n	8007a82 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007880:	d112      	bne.n	80078a8 <HAL_SPI_Receive+0x50>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10e      	bne.n	80078a8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2204      	movs	r2, #4
 800788e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007892:	88fa      	ldrh	r2, [r7, #6]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	4613      	mov	r3, r2
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f8f3 	bl	8007a8a <HAL_SPI_TransmitReceive>
 80078a4:	4603      	mov	r3, r0
 80078a6:	e0ec      	b.n	8007a82 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078a8:	f7fd faf6 	bl	8004e98 <HAL_GetTick>
 80078ac:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <HAL_SPI_Receive+0x62>
 80078b4:	88fb      	ldrh	r3, [r7, #6]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e0e1      	b.n	8007a82 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d101      	bne.n	80078cc <HAL_SPI_Receive+0x74>
 80078c8:	2302      	movs	r3, #2
 80078ca:	e0da      	b.n	8007a82 <HAL_SPI_Receive+0x22a>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2204      	movs	r2, #4
 80078d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	88fa      	ldrh	r2, [r7, #6]
 80078ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	88fa      	ldrh	r2, [r7, #6]
 80078f2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800791a:	d10f      	bne.n	800793c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800792a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800793a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007946:	2b40      	cmp	r3, #64	@ 0x40
 8007948:	d007      	beq.n	800795a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007958:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d170      	bne.n	8007a44 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007962:	e035      	b.n	80079d0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b01      	cmp	r3, #1
 8007970:	d115      	bne.n	800799e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f103 020c 	add.w	r2, r3, #12
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797e:	7812      	ldrb	r2, [r2, #0]
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800799c:	e018      	b.n	80079d0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800799e:	f7fd fa7b 	bl	8004e98 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d803      	bhi.n	80079b6 <HAL_SPI_Receive+0x15e>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b4:	d102      	bne.n	80079bc <HAL_SPI_Receive+0x164>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e058      	b.n	8007a82 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1c4      	bne.n	8007964 <HAL_SPI_Receive+0x10c>
 80079da:	e038      	b.n	8007a4e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d113      	bne.n	8007a12 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f4:	b292      	uxth	r2, r2
 80079f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fc:	1c9a      	adds	r2, r3, #2
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a10:	e018      	b.n	8007a44 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a12:	f7fd fa41 	bl	8004e98 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d803      	bhi.n	8007a2a <HAL_SPI_Receive+0x1d2>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d102      	bne.n	8007a30 <HAL_SPI_Receive+0x1d8>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d109      	bne.n	8007a44 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e01e      	b.n	8007a82 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1c6      	bne.n	80079dc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fa4a 	bl	8007eec <SPI_EndRxTransaction>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2220      	movs	r2, #32
 8007a62:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007a80:	2300      	movs	r3, #0
  }
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b08a      	sub	sp, #40	@ 0x28
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	607a      	str	r2, [r7, #4]
 8007a96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a9c:	f7fd f9fc 	bl	8004e98 <HAL_GetTick>
 8007aa0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007aa8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007ab0:	887b      	ldrh	r3, [r7, #2]
 8007ab2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ab4:	7ffb      	ldrb	r3, [r7, #31]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d00c      	beq.n	8007ad4 <HAL_SPI_TransmitReceive+0x4a>
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ac0:	d106      	bne.n	8007ad0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d102      	bne.n	8007ad0 <HAL_SPI_TransmitReceive+0x46>
 8007aca:	7ffb      	ldrb	r3, [r7, #31]
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d001      	beq.n	8007ad4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e17f      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <HAL_SPI_TransmitReceive+0x5c>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <HAL_SPI_TransmitReceive+0x5c>
 8007ae0:	887b      	ldrh	r3, [r7, #2]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e174      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_SPI_TransmitReceive+0x6e>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e16d      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x34a>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b04      	cmp	r3, #4
 8007b0a:	d003      	beq.n	8007b14 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2205      	movs	r2, #5
 8007b10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	887a      	ldrh	r2, [r7, #2]
 8007b24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	887a      	ldrh	r2, [r7, #2]
 8007b2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	887a      	ldrh	r2, [r7, #2]
 8007b36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	887a      	ldrh	r2, [r7, #2]
 8007b3c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b54:	2b40      	cmp	r3, #64	@ 0x40
 8007b56:	d007      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b70:	d17e      	bne.n	8007c70 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0xf6>
 8007b7a:	8afb      	ldrh	r3, [r7, #22]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d16c      	bne.n	8007c5a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b84:	881a      	ldrh	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b90:	1c9a      	adds	r2, r3, #2
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ba4:	e059      	b.n	8007c5a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d11b      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x162>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d016      	beq.n	8007bec <HAL_SPI_TransmitReceive+0x162>
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d113      	bne.n	8007bec <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc8:	881a      	ldrh	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd4:	1c9a      	adds	r2, r3, #2
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d119      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0x1a4>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d014      	beq.n	8007c2e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c16:	1c9a      	adds	r2, r3, #2
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c2e:	f7fd f933 	bl	8004e98 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d80d      	bhi.n	8007c5a <HAL_SPI_TransmitReceive+0x1d0>
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d009      	beq.n	8007c5a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e0bc      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1a0      	bne.n	8007ba6 <HAL_SPI_TransmitReceive+0x11c>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d19b      	bne.n	8007ba6 <HAL_SPI_TransmitReceive+0x11c>
 8007c6e:	e082      	b.n	8007d76 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <HAL_SPI_TransmitReceive+0x1f4>
 8007c78:	8afb      	ldrh	r3, [r7, #22]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d171      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	330c      	adds	r3, #12
 8007c88:	7812      	ldrb	r2, [r2, #0]
 8007c8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ca4:	e05d      	b.n	8007d62 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d11c      	bne.n	8007cee <HAL_SPI_TransmitReceive+0x264>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d017      	beq.n	8007cee <HAL_SPI_TransmitReceive+0x264>
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d114      	bne.n	8007cee <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	7812      	ldrb	r2, [r2, #0]
 8007cd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d119      	bne.n	8007d30 <HAL_SPI_TransmitReceive+0x2a6>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d014      	beq.n	8007d30 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d10:	b2d2      	uxtb	r2, r2
 8007d12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d30:	f7fd f8b2 	bl	8004e98 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d803      	bhi.n	8007d48 <HAL_SPI_TransmitReceive+0x2be>
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d102      	bne.n	8007d4e <HAL_SPI_TransmitReceive+0x2c4>
 8007d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e038      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d19c      	bne.n	8007ca6 <HAL_SPI_TransmitReceive+0x21c>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d197      	bne.n	8007ca6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d76:	6a3a      	ldr	r2, [r7, #32]
 8007d78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 f908 	bl	8007f90 <SPI_EndRxTxTransaction>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d008      	beq.n	8007d98 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e01d      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007da0:	2300      	movs	r3, #0
 8007da2:	613b      	str	r3, [r7, #16]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	613b      	str	r3, [r7, #16]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e000      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
  }
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3728      	adds	r7, #40	@ 0x28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	603b      	str	r3, [r7, #0]
 8007de8:	4613      	mov	r3, r2
 8007dea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007dec:	f7fd f854 	bl	8004e98 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df4:	1a9b      	subs	r3, r3, r2
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	4413      	add	r3, r2
 8007dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007dfc:	f7fd f84c 	bl	8004e98 <HAL_GetTick>
 8007e00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e02:	4b39      	ldr	r3, [pc, #228]	@ (8007ee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	015b      	lsls	r3, r3, #5
 8007e08:	0d1b      	lsrs	r3, r3, #20
 8007e0a:	69fa      	ldr	r2, [r7, #28]
 8007e0c:	fb02 f303 	mul.w	r3, r2, r3
 8007e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e12:	e054      	b.n	8007ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1a:	d050      	beq.n	8007ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e1c:	f7fd f83c 	bl	8004e98 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d902      	bls.n	8007e32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d13d      	bne.n	8007eae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e4a:	d111      	bne.n	8007e70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e54:	d004      	beq.n	8007e60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e5e:	d107      	bne.n	8007e70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e78:	d10f      	bne.n	8007e9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e017      	b.n	8007ede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	bf0c      	ite	eq
 8007ece:	2301      	moveq	r3, #1
 8007ed0:	2300      	movne	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d19b      	bne.n	8007e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000038 	.word	0x20000038

08007eec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f00:	d111      	bne.n	8007f26 <SPI_EndRxTransaction+0x3a>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f0a:	d004      	beq.n	8007f16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f14:	d107      	bne.n	8007f26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f24:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f2e:	d117      	bne.n	8007f60 <SPI_EndRxTransaction+0x74>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f38:	d112      	bne.n	8007f60 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2200      	movs	r2, #0
 8007f42:	2101      	movs	r1, #1
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7ff ff49 	bl	8007ddc <SPI_WaitFlagStateUntilTimeout>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01a      	beq.n	8007f86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f54:	f043 0220 	orr.w	r2, r3, #32
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e013      	b.n	8007f88 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2200      	movs	r2, #0
 8007f68:	2180      	movs	r1, #128	@ 0x80
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff ff36 	bl	8007ddc <SPI_WaitFlagStateUntilTimeout>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d007      	beq.n	8007f86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7a:	f043 0220 	orr.w	r2, r3, #32
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e000      	b.n	8007f88 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	2102      	movs	r1, #2
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7ff ff18 	bl	8007ddc <SPI_WaitFlagStateUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb6:	f043 0220 	orr.w	r2, r3, #32
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e013      	b.n	8007fea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2180      	movs	r1, #128	@ 0x80
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff ff05 	bl	8007ddc <SPI_WaitFlagStateUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fdc:	f043 0220 	orr.w	r2, r3, #32
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e000      	b.n	8007fea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e041      	b.n	8008088 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d106      	bne.n	800801e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7fc fd8d 	bl	8004b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3304      	adds	r3, #4
 800802e:	4619      	mov	r1, r3
 8008030:	4610      	mov	r0, r2
 8008032:	f000 fa5b 	bl	80084ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d001      	beq.n	80080a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e03a      	b.n	800811e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a18      	ldr	r2, [pc, #96]	@ (8008128 <HAL_TIM_Base_Start_IT+0x98>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d00e      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x58>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d2:	d009      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x58>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a14      	ldr	r2, [pc, #80]	@ (800812c <HAL_TIM_Base_Start_IT+0x9c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d004      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x58>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a13      	ldr	r2, [pc, #76]	@ (8008130 <HAL_TIM_Base_Start_IT+0xa0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d111      	bne.n	800810c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b06      	cmp	r3, #6
 80080f8:	d010      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f042 0201 	orr.w	r2, r2, #1
 8008108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810a:	e007      	b.n	800811c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	bc80      	pop	{r7}
 8008126:	4770      	bx	lr
 8008128:	40012c00 	.word	0x40012c00
 800812c:	40000400 	.word	0x40000400
 8008130:	40000800 	.word	0x40000800

08008134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d020      	beq.n	8008198 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01b      	beq.n	8008198 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0202 	mvn.w	r2, #2
 8008168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f998 	bl	80084b4 <HAL_TIM_IC_CaptureCallback>
 8008184:	e005      	b.n	8008192 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f98b 	bl	80084a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f99a 	bl	80084c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 0304 	and.w	r3, r3, #4
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d020      	beq.n	80081e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01b      	beq.n	80081e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f06f 0204 	mvn.w	r2, #4
 80081b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2202      	movs	r2, #2
 80081ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f972 	bl	80084b4 <HAL_TIM_IC_CaptureCallback>
 80081d0:	e005      	b.n	80081de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f965 	bl	80084a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f974 	bl	80084c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f003 0308 	and.w	r3, r3, #8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d020      	beq.n	8008230 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01b      	beq.n	8008230 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0208 	mvn.w	r2, #8
 8008200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2204      	movs	r2, #4
 8008206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f94c 	bl	80084b4 <HAL_TIM_IC_CaptureCallback>
 800821c:	e005      	b.n	800822a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f93f 	bl	80084a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f94e 	bl	80084c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 0310 	and.w	r3, r3, #16
 8008236:	2b00      	cmp	r3, #0
 8008238:	d020      	beq.n	800827c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f003 0310 	and.w	r3, r3, #16
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01b      	beq.n	800827c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f06f 0210 	mvn.w	r2, #16
 800824c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2208      	movs	r2, #8
 8008252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f926 	bl	80084b4 <HAL_TIM_IC_CaptureCallback>
 8008268:	e005      	b.n	8008276 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f919 	bl	80084a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f928 	bl	80084c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00c      	beq.n	80082a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0201 	mvn.w	r2, #1
 8008298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7f9 feac 	bl	8001ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00c      	beq.n	80082c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d007      	beq.n	80082c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80082bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa7f 	bl	80087c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00c      	beq.n	80082e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d007      	beq.n	80082e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f8f8 	bl	80084d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00c      	beq.n	800830c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f003 0320 	and.w	r3, r3, #32
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d007      	beq.n	800830c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f06f 0220 	mvn.w	r2, #32
 8008304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa52 	bl	80087b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800830c:	bf00      	nop
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_TIM_ConfigClockSource+0x1c>
 800832c:	2302      	movs	r3, #2
 800832e:	e0b4      	b.n	800849a <HAL_TIM_ConfigClockSource+0x186>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800834e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008368:	d03e      	beq.n	80083e8 <HAL_TIM_ConfigClockSource+0xd4>
 800836a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800836e:	f200 8087 	bhi.w	8008480 <HAL_TIM_ConfigClockSource+0x16c>
 8008372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008376:	f000 8086 	beq.w	8008486 <HAL_TIM_ConfigClockSource+0x172>
 800837a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800837e:	d87f      	bhi.n	8008480 <HAL_TIM_ConfigClockSource+0x16c>
 8008380:	2b70      	cmp	r3, #112	@ 0x70
 8008382:	d01a      	beq.n	80083ba <HAL_TIM_ConfigClockSource+0xa6>
 8008384:	2b70      	cmp	r3, #112	@ 0x70
 8008386:	d87b      	bhi.n	8008480 <HAL_TIM_ConfigClockSource+0x16c>
 8008388:	2b60      	cmp	r3, #96	@ 0x60
 800838a:	d050      	beq.n	800842e <HAL_TIM_ConfigClockSource+0x11a>
 800838c:	2b60      	cmp	r3, #96	@ 0x60
 800838e:	d877      	bhi.n	8008480 <HAL_TIM_ConfigClockSource+0x16c>
 8008390:	2b50      	cmp	r3, #80	@ 0x50
 8008392:	d03c      	beq.n	800840e <HAL_TIM_ConfigClockSource+0xfa>
 8008394:	2b50      	cmp	r3, #80	@ 0x50
 8008396:	d873      	bhi.n	8008480 <HAL_TIM_ConfigClockSource+0x16c>
 8008398:	2b40      	cmp	r3, #64	@ 0x40
 800839a:	d058      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x13a>
 800839c:	2b40      	cmp	r3, #64	@ 0x40
 800839e:	d86f      	bhi.n	8008480 <HAL_TIM_ConfigClockSource+0x16c>
 80083a0:	2b30      	cmp	r3, #48	@ 0x30
 80083a2:	d064      	beq.n	800846e <HAL_TIM_ConfigClockSource+0x15a>
 80083a4:	2b30      	cmp	r3, #48	@ 0x30
 80083a6:	d86b      	bhi.n	8008480 <HAL_TIM_ConfigClockSource+0x16c>
 80083a8:	2b20      	cmp	r3, #32
 80083aa:	d060      	beq.n	800846e <HAL_TIM_ConfigClockSource+0x15a>
 80083ac:	2b20      	cmp	r3, #32
 80083ae:	d867      	bhi.n	8008480 <HAL_TIM_ConfigClockSource+0x16c>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d05c      	beq.n	800846e <HAL_TIM_ConfigClockSource+0x15a>
 80083b4:	2b10      	cmp	r3, #16
 80083b6:	d05a      	beq.n	800846e <HAL_TIM_ConfigClockSource+0x15a>
 80083b8:	e062      	b.n	8008480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083ca:	f000 f974 	bl	80086b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	609a      	str	r2, [r3, #8]
      break;
 80083e6:	e04f      	b.n	8008488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083f8:	f000 f95d 	bl	80086b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689a      	ldr	r2, [r3, #8]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800840a:	609a      	str	r2, [r3, #8]
      break;
 800840c:	e03c      	b.n	8008488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800841a:	461a      	mov	r2, r3
 800841c:	f000 f8d4 	bl	80085c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2150      	movs	r1, #80	@ 0x50
 8008426:	4618      	mov	r0, r3
 8008428:	f000 f92b 	bl	8008682 <TIM_ITRx_SetConfig>
      break;
 800842c:	e02c      	b.n	8008488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800843a:	461a      	mov	r2, r3
 800843c:	f000 f8f2 	bl	8008624 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2160      	movs	r1, #96	@ 0x60
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f91b 	bl	8008682 <TIM_ITRx_SetConfig>
      break;
 800844c:	e01c      	b.n	8008488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800845a:	461a      	mov	r2, r3
 800845c:	f000 f8b4 	bl	80085c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2140      	movs	r1, #64	@ 0x40
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f90b 	bl	8008682 <TIM_ITRx_SetConfig>
      break;
 800846c:	e00c      	b.n	8008488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4619      	mov	r1, r3
 8008478:	4610      	mov	r0, r2
 800847a:	f000 f902 	bl	8008682 <TIM_ITRx_SetConfig>
      break;
 800847e:	e003      	b.n	8008488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	73fb      	strb	r3, [r7, #15]
      break;
 8008484:	e000      	b.n	8008488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008498:	7bfb      	ldrb	r3, [r7, #15]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bc80      	pop	{r7}
 80084b2:	4770      	bx	lr

080084b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc80      	pop	{r7}
 80084c4:	4770      	bx	lr

080084c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bc80      	pop	{r7}
 80084d6:	4770      	bx	lr

080084d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bc80      	pop	{r7}
 80084e8:	4770      	bx	lr
	...

080084ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a2f      	ldr	r2, [pc, #188]	@ (80085bc <TIM_Base_SetConfig+0xd0>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d00b      	beq.n	800851c <TIM_Base_SetConfig+0x30>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800850a:	d007      	beq.n	800851c <TIM_Base_SetConfig+0x30>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a2c      	ldr	r2, [pc, #176]	@ (80085c0 <TIM_Base_SetConfig+0xd4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d003      	beq.n	800851c <TIM_Base_SetConfig+0x30>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a2b      	ldr	r2, [pc, #172]	@ (80085c4 <TIM_Base_SetConfig+0xd8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d108      	bne.n	800852e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a22      	ldr	r2, [pc, #136]	@ (80085bc <TIM_Base_SetConfig+0xd0>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00b      	beq.n	800854e <TIM_Base_SetConfig+0x62>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853c:	d007      	beq.n	800854e <TIM_Base_SetConfig+0x62>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a1f      	ldr	r2, [pc, #124]	@ (80085c0 <TIM_Base_SetConfig+0xd4>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d003      	beq.n	800854e <TIM_Base_SetConfig+0x62>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a1e      	ldr	r2, [pc, #120]	@ (80085c4 <TIM_Base_SetConfig+0xd8>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d108      	bne.n	8008560 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a0d      	ldr	r2, [pc, #52]	@ (80085bc <TIM_Base_SetConfig+0xd0>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d103      	bne.n	8008594 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	691a      	ldr	r2, [r3, #16]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d005      	beq.n	80085b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	f023 0201 	bic.w	r2, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	611a      	str	r2, [r3, #16]
  }
}
 80085b2:	bf00      	nop
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr
 80085bc:	40012c00 	.word	0x40012c00
 80085c0:	40000400 	.word	0x40000400
 80085c4:	40000800 	.word	0x40000800

080085c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f023 0201 	bic.w	r2, r3, #1
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f023 030a 	bic.w	r3, r3, #10
 8008604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	621a      	str	r2, [r3, #32]
}
 800861a:	bf00      	nop
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr

08008624 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	f023 0210 	bic.w	r2, r3, #16
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800864e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	031b      	lsls	r3, r3, #12
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	4313      	orrs	r3, r2
 8008658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008660:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	011b      	lsls	r3, r3, #4
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	4313      	orrs	r3, r2
 800866a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	621a      	str	r2, [r3, #32]
}
 8008678:	bf00      	nop
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	bc80      	pop	{r7}
 8008680:	4770      	bx	lr

08008682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008682:	b480      	push	{r7}
 8008684:	b085      	sub	sp, #20
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4313      	orrs	r3, r2
 80086a0:	f043 0307 	orr.w	r3, r3, #7
 80086a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	609a      	str	r2, [r3, #8]
}
 80086ac:	bf00      	nop
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr

080086b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b087      	sub	sp, #28
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
 80086c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	021a      	lsls	r2, r3, #8
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	431a      	orrs	r2, r3
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	4313      	orrs	r3, r2
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	609a      	str	r2, [r3, #8]
}
 80086ea:	bf00      	nop
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr

080086f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008708:	2302      	movs	r3, #2
 800870a:	e046      	b.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a16      	ldr	r2, [pc, #88]	@ (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00e      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008758:	d009      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a12      	ldr	r2, [pc, #72]	@ (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d004      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a10      	ldr	r2, [pc, #64]	@ (80087ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d10c      	bne.n	8008788 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4313      	orrs	r3, r2
 800877e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr
 80087a4:	40012c00 	.word	0x40012c00
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800

080087b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr

080087c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e042      	b.n	800886c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fc f9dc 	bl	8004bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2224      	movs	r2, #36	@ 0x24
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 ff79 	bl	8009710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800882c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	695a      	ldr	r2, [r3, #20]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800883c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800884c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2220      	movs	r2, #32
 8008860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08a      	sub	sp, #40	@ 0x28
 8008878:	af02      	add	r7, sp, #8
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	4613      	mov	r3, r2
 8008882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b20      	cmp	r3, #32
 8008892:	d175      	bne.n	8008980 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <HAL_UART_Transmit+0x2c>
 800889a:	88fb      	ldrh	r3, [r7, #6]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e06e      	b.n	8008982 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2221      	movs	r2, #33	@ 0x21
 80088ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088b2:	f7fc faf1 	bl	8004e98 <HAL_GetTick>
 80088b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	88fa      	ldrh	r2, [r7, #6]
 80088bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	88fa      	ldrh	r2, [r7, #6]
 80088c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088cc:	d108      	bne.n	80088e0 <HAL_UART_Transmit+0x6c>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d104      	bne.n	80088e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	61bb      	str	r3, [r7, #24]
 80088de:	e003      	b.n	80088e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088e8:	e02e      	b.n	8008948 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2200      	movs	r2, #0
 80088f2:	2180      	movs	r1, #128	@ 0x80
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 fc55 	bl	80091a4 <UART_WaitOnFlagUntilTimeout>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e03a      	b.n	8008982 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10b      	bne.n	800892a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	3302      	adds	r3, #2
 8008926:	61bb      	str	r3, [r7, #24]
 8008928:	e007      	b.n	800893a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	781a      	ldrb	r2, [r3, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	3301      	adds	r3, #1
 8008938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800893e:	b29b      	uxth	r3, r3
 8008940:	3b01      	subs	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800894c:	b29b      	uxth	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1cb      	bne.n	80088ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2200      	movs	r2, #0
 800895a:	2140      	movs	r1, #64	@ 0x40
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 fc21 	bl	80091a4 <UART_WaitOnFlagUntilTimeout>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d005      	beq.n	8008974 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2220      	movs	r2, #32
 800896c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e006      	b.n	8008982 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2220      	movs	r2, #32
 8008978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	e000      	b.n	8008982 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008980:	2302      	movs	r3, #2
  }
}
 8008982:	4618      	mov	r0, r3
 8008984:	3720      	adds	r7, #32
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b08c      	sub	sp, #48	@ 0x30
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	4613      	mov	r3, r2
 8008996:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b20      	cmp	r3, #32
 80089a2:	d146      	bne.n	8008a32 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80089aa:	88fb      	ldrh	r3, [r7, #6]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e03f      	b.n	8008a34 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2201      	movs	r2, #1
 80089b8:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80089c0:	88fb      	ldrh	r3, [r7, #6]
 80089c2:	461a      	mov	r2, r3
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fc46 	bl	8009258 <UART_Start_Receive_DMA>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d125      	bne.n	8008a26 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089da:	2300      	movs	r3, #0
 80089dc:	613b      	str	r3, [r7, #16]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	613b      	str	r3, [r7, #16]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	330c      	adds	r3, #12
 80089f6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	e853 3f00 	ldrex	r3, [r3]
 80089fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f043 0310 	orr.w	r3, r3, #16
 8008a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a10:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a12:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6a39      	ldr	r1, [r7, #32]
 8008a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e5      	bne.n	80089f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8008a24:	e002      	b.n	8008a2c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8008a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a30:	e000      	b.n	8008a34 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8008a32:	2302      	movs	r3, #2
  }
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3730      	adds	r7, #48	@ 0x30
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b0ba      	sub	sp, #232	@ 0xe8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10f      	bne.n	8008aa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d009      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x66>
 8008a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fd7a 	bl	8009594 <UART_Receive_IT>
      return;
 8008aa0:	e25b      	b.n	8008f5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 80de 	beq.w	8008c68 <HAL_UART_IRQHandler+0x22c>
 8008aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d106      	bne.n	8008ac6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008abc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 80d1 	beq.w	8008c68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00b      	beq.n	8008aea <HAL_UART_IRQHandler+0xae>
 8008ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d005      	beq.n	8008aea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae2:	f043 0201 	orr.w	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <HAL_UART_IRQHandler+0xd2>
 8008af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d005      	beq.n	8008b0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b06:	f043 0202 	orr.w	r2, r3, #2
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00b      	beq.n	8008b32 <HAL_UART_IRQHandler+0xf6>
 8008b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d005      	beq.n	8008b32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b2a:	f043 0204 	orr.w	r2, r3, #4
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b36:	f003 0308 	and.w	r3, r3, #8
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d011      	beq.n	8008b62 <HAL_UART_IRQHandler+0x126>
 8008b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b42:	f003 0320 	and.w	r3, r3, #32
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d105      	bne.n	8008b56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d005      	beq.n	8008b62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b5a:	f043 0208 	orr.w	r2, r3, #8
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 81f2 	beq.w	8008f50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b70:	f003 0320 	and.w	r3, r3, #32
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d008      	beq.n	8008b8a <HAL_UART_IRQHandler+0x14e>
 8008b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fd05 	bl	8009594 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bf14      	ite	ne
 8008b98:	2301      	movne	r3, #1
 8008b9a:	2300      	moveq	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba6:	f003 0308 	and.w	r3, r3, #8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d103      	bne.n	8008bb6 <HAL_UART_IRQHandler+0x17a>
 8008bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d04f      	beq.n	8008c56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fc0f 	bl	80093da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d041      	beq.n	8008c4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3314      	adds	r3, #20
 8008bd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008be4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3314      	adds	r3, #20
 8008bf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008bf6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1d9      	bne.n	8008bca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d013      	beq.n	8008c46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c22:	4a7e      	ldr	r2, [pc, #504]	@ (8008e1c <HAL_UART_IRQHandler+0x3e0>)
 8008c24:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fd fa56 	bl	80060dc <HAL_DMA_Abort_IT>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d016      	beq.n	8008c64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c40:	4610      	mov	r0, r2
 8008c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c44:	e00e      	b.n	8008c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f9a5 	bl	8008f96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c4c:	e00a      	b.n	8008c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f9a1 	bl	8008f96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c54:	e006      	b.n	8008c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f99d 	bl	8008f96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008c62:	e175      	b.n	8008f50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c64:	bf00      	nop
    return;
 8008c66:	e173      	b.n	8008f50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	f040 814f 	bne.w	8008f10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c76:	f003 0310 	and.w	r3, r3, #16
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8148 	beq.w	8008f10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c84:	f003 0310 	and.w	r3, r3, #16
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 8141 	beq.w	8008f10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60bb      	str	r3, [r7, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	60bb      	str	r3, [r7, #8]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	60bb      	str	r3, [r7, #8]
 8008ca2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 80b6 	beq.w	8008e20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 8145 	beq.w	8008f54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	f080 813e 	bcs.w	8008f54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cde:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	2b20      	cmp	r3, #32
 8008ce8:	f000 8088 	beq.w	8008dfc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cfa:	e853 3f00 	ldrex	r3, [r3]
 8008cfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	330c      	adds	r3, #12
 8008d14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008d18:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1d9      	bne.n	8008cec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3314      	adds	r3, #20
 8008d3e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d4a:	f023 0301 	bic.w	r3, r3, #1
 8008d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3314      	adds	r3, #20
 8008d58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d5c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d60:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d64:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d68:	e841 2300 	strex	r3, r2, [r1]
 8008d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e1      	bne.n	8008d38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3314      	adds	r3, #20
 8008d7a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d7e:	e853 3f00 	ldrex	r3, [r3]
 8008d82:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3314      	adds	r3, #20
 8008d94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d98:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d9e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008da6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e3      	bne.n	8008d74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dcc:	f023 0310 	bic.w	r3, r3, #16
 8008dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008dde:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008de0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008de4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e3      	bne.n	8008dba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fd f934 	bl	8006064 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7f8 ffea 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e18:	e09c      	b.n	8008f54 <HAL_UART_IRQHandler+0x518>
 8008e1a:	bf00      	nop
 8008e1c:	0800949f 	.word	0x0800949f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 808e 	beq.w	8008f58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008e3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8089 	beq.w	8008f58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	330c      	adds	r3, #12
 8008e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	330c      	adds	r3, #12
 8008e66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008e6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e3      	bne.n	8008e46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3314      	adds	r3, #20
 8008e84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3314      	adds	r3, #20
 8008e9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ea2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e3      	bne.n	8008e7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	330c      	adds	r3, #12
 8008eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f023 0310 	bic.w	r3, r3, #16
 8008eda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	330c      	adds	r3, #12
 8008ee4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008ee8:	61fa      	str	r2, [r7, #28]
 8008eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	69b9      	ldr	r1, [r7, #24]
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e3      	bne.n	8008ec4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2202      	movs	r2, #2
 8008f00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7f8 ff6f 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f0e:	e023      	b.n	8008f58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d009      	beq.n	8008f30 <HAL_UART_IRQHandler+0x4f4>
 8008f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 facc 	bl	80094c6 <UART_Transmit_IT>
    return;
 8008f2e:	e014      	b.n	8008f5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00e      	beq.n	8008f5a <HAL_UART_IRQHandler+0x51e>
 8008f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d008      	beq.n	8008f5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fb0b 	bl	8009564 <UART_EndTransmit_IT>
    return;
 8008f4e:	e004      	b.n	8008f5a <HAL_UART_IRQHandler+0x51e>
    return;
 8008f50:	bf00      	nop
 8008f52:	e002      	b.n	8008f5a <HAL_UART_IRQHandler+0x51e>
      return;
 8008f54:	bf00      	nop
 8008f56:	e000      	b.n	8008f5a <HAL_UART_IRQHandler+0x51e>
      return;
 8008f58:	bf00      	nop
  }
}
 8008f5a:	37e8      	adds	r7, #232	@ 0xe8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bc80      	pop	{r7}
 8008f70:	4770      	bx	lr

08008f72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bc80      	pop	{r7}
 8008f82:	4770      	bx	lr

08008f84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr

08008f96 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f9e:	bf00      	nop
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr

08008fa8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b09c      	sub	sp, #112	@ 0x70
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0320 	and.w	r3, r3, #32
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d172      	bne.n	80090aa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	330c      	adds	r3, #12
 8008fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	330c      	adds	r3, #12
 8008fe8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008fea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008fec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ff0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e5      	bne.n	8008fca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3314      	adds	r3, #20
 8009004:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800900e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009010:	f023 0301 	bic.w	r3, r3, #1
 8009014:	667b      	str	r3, [r7, #100]	@ 0x64
 8009016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3314      	adds	r3, #20
 800901c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800901e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009020:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009024:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800902c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e5      	bne.n	8008ffe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3314      	adds	r3, #20
 8009038:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	623b      	str	r3, [r7, #32]
   return(result);
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009048:	663b      	str	r3, [r7, #96]	@ 0x60
 800904a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3314      	adds	r3, #20
 8009050:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009052:	633a      	str	r2, [r7, #48]	@ 0x30
 8009054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e5      	bne.n	8009032 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009068:	2220      	movs	r2, #32
 800906a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800906e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009072:	2b01      	cmp	r3, #1
 8009074:	d119      	bne.n	80090aa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	330c      	adds	r3, #12
 800907c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	60fb      	str	r3, [r7, #12]
   return(result);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f023 0310 	bic.w	r3, r3, #16
 800908c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800908e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	330c      	adds	r3, #12
 8009094:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009096:	61fa      	str	r2, [r7, #28]
 8009098:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	69b9      	ldr	r1, [r7, #24]
 800909c:	69fa      	ldr	r2, [r7, #28]
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	617b      	str	r3, [r7, #20]
   return(result);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e5      	bne.n	8009076 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090ac:	2200      	movs	r2, #0
 80090ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d106      	bne.n	80090c6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090bc:	4619      	mov	r1, r3
 80090be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80090c0:	f7f8 fe94 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090c4:	e002      	b.n	80090cc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80090c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80090c8:	f7ff ff53 	bl	8008f72 <HAL_UART_RxCpltCallback>
}
 80090cc:	bf00      	nop
 80090ce:	3770      	adds	r7, #112	@ 0x70
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d108      	bne.n	8009102 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090f4:	085b      	lsrs	r3, r3, #1
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	4619      	mov	r1, r3
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7f8 fe76 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009100:	e002      	b.n	8009108 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f7ff ff3e 	bl	8008f84 <HAL_UART_RxHalfCpltCallback>
}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009120:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800912c:	2b00      	cmp	r3, #0
 800912e:	bf14      	ite	ne
 8009130:	2301      	movne	r3, #1
 8009132:	2300      	moveq	r3, #0
 8009134:	b2db      	uxtb	r3, r3
 8009136:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b21      	cmp	r3, #33	@ 0x21
 8009142:	d108      	bne.n	8009156 <UART_DMAError+0x46>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d005      	beq.n	8009156 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2200      	movs	r2, #0
 800914e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009150:	68b8      	ldr	r0, [r7, #8]
 8009152:	f000 f91b 	bl	800938c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009160:	2b00      	cmp	r3, #0
 8009162:	bf14      	ite	ne
 8009164:	2301      	movne	r3, #1
 8009166:	2300      	moveq	r3, #0
 8009168:	b2db      	uxtb	r3, r3
 800916a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b22      	cmp	r3, #34	@ 0x22
 8009176:	d108      	bne.n	800918a <UART_DMAError+0x7a>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d005      	beq.n	800918a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2200      	movs	r2, #0
 8009182:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009184:	68b8      	ldr	r0, [r7, #8]
 8009186:	f000 f928 	bl	80093da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918e:	f043 0210 	orr.w	r2, r3, #16
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009196:	68b8      	ldr	r0, [r7, #8]
 8009198:	f7ff fefd 	bl	8008f96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b4:	e03b      	b.n	800922e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091bc:	d037      	beq.n	800922e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091be:	f7fb fe6b 	bl	8004e98 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	6a3a      	ldr	r2, [r7, #32]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d302      	bcc.n	80091d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e03a      	b.n	800924e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f003 0304 	and.w	r3, r3, #4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d023      	beq.n	800922e <UART_WaitOnFlagUntilTimeout+0x8a>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b80      	cmp	r3, #128	@ 0x80
 80091ea:	d020      	beq.n	800922e <UART_WaitOnFlagUntilTimeout+0x8a>
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b40      	cmp	r3, #64	@ 0x40
 80091f0:	d01d      	beq.n	800922e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0308 	and.w	r3, r3, #8
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	d116      	bne.n	800922e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009200:	2300      	movs	r3, #0
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 f8df 	bl	80093da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2208      	movs	r2, #8
 8009220:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e00f      	b.n	800924e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4013      	ands	r3, r2
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	429a      	cmp	r2, r3
 800923c:	bf0c      	ite	eq
 800923e:	2301      	moveq	r3, #1
 8009240:	2300      	movne	r3, #0
 8009242:	b2db      	uxtb	r3, r3
 8009244:	461a      	mov	r2, r3
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	429a      	cmp	r2, r3
 800924a:	d0b4      	beq.n	80091b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b098      	sub	sp, #96	@ 0x60
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	88fa      	ldrh	r2, [r7, #6]
 8009270:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2222      	movs	r2, #34	@ 0x22
 800927c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009284:	4a3e      	ldr	r2, [pc, #248]	@ (8009380 <UART_Start_Receive_DMA+0x128>)
 8009286:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800928c:	4a3d      	ldr	r2, [pc, #244]	@ (8009384 <UART_Start_Receive_DMA+0x12c>)
 800928e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009294:	4a3c      	ldr	r2, [pc, #240]	@ (8009388 <UART_Start_Receive_DMA+0x130>)
 8009296:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929c:	2200      	movs	r2, #0
 800929e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80092a0:	f107 0308 	add.w	r3, r7, #8
 80092a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3304      	adds	r3, #4
 80092b0:	4619      	mov	r1, r3
 80092b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	88fb      	ldrh	r3, [r7, #6]
 80092b8:	f7fc fe74 	bl	8005fa4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	613b      	str	r3, [r7, #16]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	613b      	str	r3, [r7, #16]
 80092d0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d019      	beq.n	800930e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	330c      	adds	r3, #12
 80092e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092fa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80092fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009300:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e5      	bne.n	80092da <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3314      	adds	r3, #20
 8009314:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800931e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	657b      	str	r3, [r7, #84]	@ 0x54
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3314      	adds	r3, #20
 800932c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800932e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009330:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800933c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e5      	bne.n	800930e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3314      	adds	r3, #20
 8009348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	617b      	str	r3, [r7, #20]
   return(result);
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009358:	653b      	str	r3, [r7, #80]	@ 0x50
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3314      	adds	r3, #20
 8009360:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009362:	627a      	str	r2, [r7, #36]	@ 0x24
 8009364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6a39      	ldr	r1, [r7, #32]
 8009368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e5      	bne.n	8009342 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3760      	adds	r7, #96	@ 0x60
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	08008fa9 	.word	0x08008fa9
 8009384:	080090d5 	.word	0x080090d5
 8009388:	08009111 	.word	0x08009111

0800938c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800938c:	b480      	push	{r7}
 800938e:	b089      	sub	sp, #36	@ 0x24
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	330c      	adds	r3, #12
 800939a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80093aa:	61fb      	str	r3, [r7, #28]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	330c      	adds	r3, #12
 80093b2:	69fa      	ldr	r2, [r7, #28]
 80093b4:	61ba      	str	r2, [r7, #24]
 80093b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6979      	ldr	r1, [r7, #20]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	613b      	str	r3, [r7, #16]
   return(result);
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e5      	bne.n	8009394 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2220      	movs	r2, #32
 80093cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80093d0:	bf00      	nop
 80093d2:	3724      	adds	r7, #36	@ 0x24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr

080093da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093da:	b480      	push	{r7}
 80093dc:	b095      	sub	sp, #84	@ 0x54
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	330c      	adds	r3, #12
 80093e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	330c      	adds	r3, #12
 8009400:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009402:	643a      	str	r2, [r7, #64]	@ 0x40
 8009404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009408:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e5      	bne.n	80093e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3314      	adds	r3, #20
 800941c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	61fb      	str	r3, [r7, #28]
   return(result);
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	f023 0301 	bic.w	r3, r3, #1
 800942c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3314      	adds	r3, #20
 8009434:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009436:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009438:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800943c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800943e:	e841 2300 	strex	r3, r2, [r1]
 8009442:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1e5      	bne.n	8009416 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800944e:	2b01      	cmp	r3, #1
 8009450:	d119      	bne.n	8009486 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	330c      	adds	r3, #12
 8009458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	60bb      	str	r3, [r7, #8]
   return(result);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f023 0310 	bic.w	r3, r3, #16
 8009468:	647b      	str	r3, [r7, #68]	@ 0x44
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	330c      	adds	r3, #12
 8009470:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009472:	61ba      	str	r2, [r7, #24]
 8009474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6979      	ldr	r1, [r7, #20]
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	613b      	str	r3, [r7, #16]
   return(result);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e5      	bne.n	8009452 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2220      	movs	r2, #32
 800948a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009494:	bf00      	nop
 8009496:	3754      	adds	r7, #84	@ 0x54
 8009498:	46bd      	mov	sp, r7
 800949a:	bc80      	pop	{r7}
 800949c:	4770      	bx	lr

0800949e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7ff fd6c 	bl	8008f96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b085      	sub	sp, #20
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b21      	cmp	r3, #33	@ 0x21
 80094d8:	d13e      	bne.n	8009558 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094e2:	d114      	bne.n	800950e <UART_Transmit_IT+0x48>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d110      	bne.n	800950e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009500:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	1c9a      	adds	r2, r3, #2
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	621a      	str	r2, [r3, #32]
 800950c:	e008      	b.n	8009520 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	1c59      	adds	r1, r3, #1
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	6211      	str	r1, [r2, #32]
 8009518:	781a      	ldrb	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	b29b      	uxth	r3, r3
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	4619      	mov	r1, r3
 800952e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10f      	bne.n	8009554 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009542:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009552:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	e000      	b.n	800955a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009558:	2302      	movs	r3, #2
  }
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	bc80      	pop	{r7}
 8009562:	4770      	bx	lr

08009564 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800957a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2220      	movs	r2, #32
 8009580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff fceb 	bl	8008f60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08c      	sub	sp, #48	@ 0x30
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b22      	cmp	r3, #34	@ 0x22
 80095a6:	f040 80ae 	bne.w	8009706 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095b2:	d117      	bne.n	80095e4 <UART_Receive_IT+0x50>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d113      	bne.n	80095e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80095bc:	2300      	movs	r3, #0
 80095be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095dc:	1c9a      	adds	r2, r3, #2
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80095e2:	e026      	b.n	8009632 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095f6:	d007      	beq.n	8009608 <UART_Receive_IT+0x74>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <UART_Receive_IT+0x82>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d106      	bne.n	8009616 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	b2da      	uxtb	r2, r3
 8009610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009612:	701a      	strb	r2, [r3, #0]
 8009614:	e008      	b.n	8009628 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009622:	b2da      	uxtb	r2, r3
 8009624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009626:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009636:	b29b      	uxth	r3, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	b29b      	uxth	r3, r3
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	4619      	mov	r1, r3
 8009640:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009642:	2b00      	cmp	r3, #0
 8009644:	d15d      	bne.n	8009702 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0220 	bic.w	r2, r2, #32
 8009654:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009664:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	695a      	ldr	r2, [r3, #20]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f022 0201 	bic.w	r2, r2, #1
 8009674:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2220      	movs	r2, #32
 800967a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009688:	2b01      	cmp	r3, #1
 800968a:	d135      	bne.n	80096f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	330c      	adds	r3, #12
 8009698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	613b      	str	r3, [r7, #16]
   return(result);
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f023 0310 	bic.w	r3, r3, #16
 80096a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	330c      	adds	r3, #12
 80096b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b2:	623a      	str	r2, [r7, #32]
 80096b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	69f9      	ldr	r1, [r7, #28]
 80096b8:	6a3a      	ldr	r2, [r7, #32]
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	61bb      	str	r3, [r7, #24]
   return(result);
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e5      	bne.n	8009692 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0310 	and.w	r3, r3, #16
 80096d0:	2b10      	cmp	r3, #16
 80096d2:	d10a      	bne.n	80096ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7f8 fb7b 	bl	8001dec <HAL_UARTEx_RxEventCallback>
 80096f6:	e002      	b.n	80096fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff fc3a 	bl	8008f72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	e002      	b.n	8009708 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	e000      	b.n	8009708 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009706:	2302      	movs	r3, #2
  }
}
 8009708:	4618      	mov	r0, r3
 800970a:	3730      	adds	r7, #48	@ 0x30
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	689a      	ldr	r2, [r3, #8]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	431a      	orrs	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800974a:	f023 030c 	bic.w	r3, r3, #12
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	6812      	ldr	r2, [r2, #0]
 8009752:	68b9      	ldr	r1, [r7, #8]
 8009754:	430b      	orrs	r3, r1
 8009756:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	699a      	ldr	r2, [r3, #24]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	430a      	orrs	r2, r1
 800976c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a2c      	ldr	r2, [pc, #176]	@ (8009824 <UART_SetConfig+0x114>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d103      	bne.n	8009780 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009778:	f7fd fe74 	bl	8007464 <HAL_RCC_GetPCLK2Freq>
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	e002      	b.n	8009786 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009780:	f7fd fe5c 	bl	800743c <HAL_RCC_GetPCLK1Freq>
 8009784:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	4613      	mov	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	009a      	lsls	r2, r3, #2
 8009790:	441a      	add	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	fbb2 f3f3 	udiv	r3, r2, r3
 800979c:	4a22      	ldr	r2, [pc, #136]	@ (8009828 <UART_SetConfig+0x118>)
 800979e:	fba2 2303 	umull	r2, r3, r2, r3
 80097a2:	095b      	lsrs	r3, r3, #5
 80097a4:	0119      	lsls	r1, r3, #4
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	009a      	lsls	r2, r3, #2
 80097b0:	441a      	add	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80097bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009828 <UART_SetConfig+0x118>)
 80097be:	fba3 0302 	umull	r0, r3, r3, r2
 80097c2:	095b      	lsrs	r3, r3, #5
 80097c4:	2064      	movs	r0, #100	@ 0x64
 80097c6:	fb00 f303 	mul.w	r3, r0, r3
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	3332      	adds	r3, #50	@ 0x32
 80097d0:	4a15      	ldr	r2, [pc, #84]	@ (8009828 <UART_SetConfig+0x118>)
 80097d2:	fba2 2303 	umull	r2, r3, r2, r3
 80097d6:	095b      	lsrs	r3, r3, #5
 80097d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80097dc:	4419      	add	r1, r3
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009a      	lsls	r2, r3, #2
 80097e8:	441a      	add	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80097f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009828 <UART_SetConfig+0x118>)
 80097f6:	fba3 0302 	umull	r0, r3, r3, r2
 80097fa:	095b      	lsrs	r3, r3, #5
 80097fc:	2064      	movs	r0, #100	@ 0x64
 80097fe:	fb00 f303 	mul.w	r3, r0, r3
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	011b      	lsls	r3, r3, #4
 8009806:	3332      	adds	r3, #50	@ 0x32
 8009808:	4a07      	ldr	r2, [pc, #28]	@ (8009828 <UART_SetConfig+0x118>)
 800980a:	fba2 2303 	umull	r2, r3, r2, r3
 800980e:	095b      	lsrs	r3, r3, #5
 8009810:	f003 020f 	and.w	r2, r3, #15
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	440a      	add	r2, r1
 800981a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800981c:	bf00      	nop
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	40013800 	.word	0x40013800
 8009828:	51eb851f 	.word	0x51eb851f

0800982c <memset>:
 800982c:	4603      	mov	r3, r0
 800982e:	4402      	add	r2, r0
 8009830:	4293      	cmp	r3, r2
 8009832:	d100      	bne.n	8009836 <memset+0xa>
 8009834:	4770      	bx	lr
 8009836:	f803 1b01 	strb.w	r1, [r3], #1
 800983a:	e7f9      	b.n	8009830 <memset+0x4>

0800983c <strcat>:
 800983c:	4602      	mov	r2, r0
 800983e:	b510      	push	{r4, lr}
 8009840:	7814      	ldrb	r4, [r2, #0]
 8009842:	4613      	mov	r3, r2
 8009844:	3201      	adds	r2, #1
 8009846:	2c00      	cmp	r4, #0
 8009848:	d1fa      	bne.n	8009840 <strcat+0x4>
 800984a:	3b01      	subs	r3, #1
 800984c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009850:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009854:	2a00      	cmp	r2, #0
 8009856:	d1f9      	bne.n	800984c <strcat+0x10>
 8009858:	bd10      	pop	{r4, pc}
	...

0800985c <__libc_init_array>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	2600      	movs	r6, #0
 8009860:	4d0c      	ldr	r5, [pc, #48]	@ (8009894 <__libc_init_array+0x38>)
 8009862:	4c0d      	ldr	r4, [pc, #52]	@ (8009898 <__libc_init_array+0x3c>)
 8009864:	1b64      	subs	r4, r4, r5
 8009866:	10a4      	asrs	r4, r4, #2
 8009868:	42a6      	cmp	r6, r4
 800986a:	d109      	bne.n	8009880 <__libc_init_array+0x24>
 800986c:	f000 f822 	bl	80098b4 <_init>
 8009870:	2600      	movs	r6, #0
 8009872:	4d0a      	ldr	r5, [pc, #40]	@ (800989c <__libc_init_array+0x40>)
 8009874:	4c0a      	ldr	r4, [pc, #40]	@ (80098a0 <__libc_init_array+0x44>)
 8009876:	1b64      	subs	r4, r4, r5
 8009878:	10a4      	asrs	r4, r4, #2
 800987a:	42a6      	cmp	r6, r4
 800987c:	d105      	bne.n	800988a <__libc_init_array+0x2e>
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	f855 3b04 	ldr.w	r3, [r5], #4
 8009884:	4798      	blx	r3
 8009886:	3601      	adds	r6, #1
 8009888:	e7ee      	b.n	8009868 <__libc_init_array+0xc>
 800988a:	f855 3b04 	ldr.w	r3, [r5], #4
 800988e:	4798      	blx	r3
 8009890:	3601      	adds	r6, #1
 8009892:	e7f2      	b.n	800987a <__libc_init_array+0x1e>
 8009894:	08009984 	.word	0x08009984
 8009898:	08009984 	.word	0x08009984
 800989c:	08009984 	.word	0x08009984
 80098a0:	08009988 	.word	0x08009988

080098a4 <strcpy>:
 80098a4:	4603      	mov	r3, r0
 80098a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098aa:	f803 2b01 	strb.w	r2, [r3], #1
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	d1f9      	bne.n	80098a6 <strcpy+0x2>
 80098b2:	4770      	bx	lr

080098b4 <_init>:
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	bf00      	nop
 80098b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ba:	bc08      	pop	{r3}
 80098bc:	469e      	mov	lr, r3
 80098be:	4770      	bx	lr

080098c0 <_fini>:
 80098c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c2:	bf00      	nop
 80098c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098c6:	bc08      	pop	{r3}
 80098c8:	469e      	mov	lr, r3
 80098ca:	4770      	bx	lr
