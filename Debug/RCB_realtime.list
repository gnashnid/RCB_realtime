
RCB_realtime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ba8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08009cb4  08009cb4  0000acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d84  08009d84  0000b044  2**0
                  CONTENTS
  4 .ARM          00000008  08009d84  08009d84  0000ad84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d8c  08009d8c  0000b044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d8c  08009d8c  0000ad8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d90  08009d90  0000ad90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08009d94  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  20000048  08009dd8  0000b048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  08009dd8  0000b7f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a4c  00000000  00000000  0000b06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d7  00000000  00000000  0001fab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00022f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001017  00000000  00000000  00024428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019728  00000000  00000000  0002543f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017413  00000000  00000000  0003eb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093870  00000000  00000000  00055f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e97ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f0  00000000  00000000  000e9830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000eef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08009c9c 	.word	0x08009c9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08009c9c 	.word	0x08009c9c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000164:	4b22      	ldr	r3, [pc, #136]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000166:	68db      	ldr	r3, [r3, #12]
 8000168:	4798      	blx	r3
   WIZCHIP.CS._select();
 800016a:	4b21      	ldr	r3, [pc, #132]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800016c:	695b      	ldr	r3, [r3, #20]
 800016e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000170:	4b1f      	ldr	r3, [pc, #124]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000174:	2b00      	cmp	r3, #0
 8000176:	d003      	beq.n	8000180 <WIZCHIP_READ+0x24>
 8000178:	4b1d      	ldr	r3, [pc, #116]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800017a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800017c:	2b00      	cmp	r3, #0
 800017e:	d114      	bne.n	80001aa <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000180:	4b1b      	ldr	r3, [pc, #108]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000182:	6a1b      	ldr	r3, [r3, #32]
 8000184:	687a      	ldr	r2, [r7, #4]
 8000186:	0c12      	lsrs	r2, r2, #16
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	4610      	mov	r0, r2
 800018c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800018e:	4b18      	ldr	r3, [pc, #96]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000190:	6a1b      	ldr	r3, [r3, #32]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	0a12      	lsrs	r2, r2, #8
 8000196:	b2d2      	uxtb	r2, r2
 8000198:	4610      	mov	r0, r2
 800019a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800019c:	4b14      	ldr	r3, [pc, #80]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800019e:	6a1b      	ldr	r3, [r3, #32]
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	b2d2      	uxtb	r2, r2
 80001a4:	4610      	mov	r0, r2
 80001a6:	4798      	blx	r3
 80001a8:	e011      	b.n	80001ce <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	0c1b      	lsrs	r3, r3, #16
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	0a1b      	lsrs	r3, r3, #8
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80001c0:	4b0b      	ldr	r3, [pc, #44]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80001c4:	f107 020c 	add.w	r2, r7, #12
 80001c8:	2103      	movs	r1, #3
 80001ca:	4610      	mov	r0, r2
 80001cc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80001ce:	4b08      	ldr	r3, [pc, #32]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001d0:	69db      	ldr	r3, [r3, #28]
 80001d2:	4798      	blx	r3
 80001d4:	4603      	mov	r3, r0
 80001d6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80001de:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	4798      	blx	r3
   return ret;
 80001e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000004 	.word	0x20000004

080001f4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	460b      	mov	r3, r1
 80001fe:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000200:	4b22      	ldr	r3, [pc, #136]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000206:	4b21      	ldr	r3, [pc, #132]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000214:	4b1d      	ldr	r3, [pc, #116]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000218:	2b00      	cmp	r3, #0
 800021a:	d119      	bne.n	8000250 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800021c:	4b1b      	ldr	r3, [pc, #108]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	0c12      	lsrs	r2, r2, #16
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800022a:	4b18      	ldr	r3, [pc, #96]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800022c:	6a1b      	ldr	r3, [r3, #32]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	0a12      	lsrs	r2, r2, #8
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	4610      	mov	r0, r2
 8000236:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000238:	4b14      	ldr	r3, [pc, #80]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	4610      	mov	r0, r2
 8000242:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000244:	4b11      	ldr	r3, [pc, #68]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	78fa      	ldrb	r2, [r7, #3]
 800024a:	4610      	mov	r0, r2
 800024c:	4798      	blx	r3
 800024e:	e013      	b.n	8000278 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	0c1b      	lsrs	r3, r3, #16
 8000254:	b2db      	uxtb	r3, r3
 8000256:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	0a1b      	lsrs	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000266:	78fb      	ldrb	r3, [r7, #3]
 8000268:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800026a:	4b08      	ldr	r3, [pc, #32]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800026c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800026e:	f107 020c 	add.w	r2, r7, #12
 8000272:	2104      	movs	r1, #4
 8000274:	4610      	mov	r0, r2
 8000276:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000278:	4b04      	ldr	r3, [pc, #16]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	4798      	blx	r3
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000004 	.word	0x20000004

08000290 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800029e:	4b2b      	ldr	r3, [pc, #172]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80002a4:	4b29      	ldr	r3, [pc, #164]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80002aa:	4b28      	ldr	r3, [pc, #160]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d003      	beq.n	80002ba <WIZCHIP_READ_BUF+0x2a>
 80002b2:	4b26      	ldr	r3, [pc, #152]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d126      	bne.n	8000308 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80002ba:	4b24      	ldr	r3, [pc, #144]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002bc:	6a1b      	ldr	r3, [r3, #32]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	0c12      	lsrs	r2, r2, #16
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	4610      	mov	r0, r2
 80002c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80002c8:	4b20      	ldr	r3, [pc, #128]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	0a12      	lsrs	r2, r2, #8
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	4610      	mov	r0, r2
 80002d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80002d6:	4b1d      	ldr	r3, [pc, #116]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002d8:	6a1b      	ldr	r3, [r3, #32]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80002e2:	2300      	movs	r3, #0
 80002e4:	82fb      	strh	r3, [r7, #22]
 80002e6:	e00a      	b.n	80002fe <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	8afa      	ldrh	r2, [r7, #22]
 80002ee:	68b9      	ldr	r1, [r7, #8]
 80002f0:	188c      	adds	r4, r1, r2
 80002f2:	4798      	blx	r3
 80002f4:	4603      	mov	r3, r0
 80002f6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80002f8:	8afb      	ldrh	r3, [r7, #22]
 80002fa:	3301      	adds	r3, #1
 80002fc:	82fb      	strh	r3, [r7, #22]
 80002fe:	8afa      	ldrh	r2, [r7, #22]
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	429a      	cmp	r2, r3
 8000304:	d3f0      	bcc.n	80002e8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000306:	e017      	b.n	8000338 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	b2db      	uxtb	r3, r3
 800030e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	0a1b      	lsrs	r3, r3, #8
 8000314:	b2db      	uxtb	r3, r3
 8000316:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800031e:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 8000320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000322:	f107 0210 	add.w	r2, r7, #16
 8000326:	2103      	movs	r1, #3
 8000328:	4610      	mov	r0, r2
 800032a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 800032e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000330:	88fa      	ldrh	r2, [r7, #6]
 8000332:	4611      	mov	r1, r2
 8000334:	68b8      	ldr	r0, [r7, #8]
 8000336:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000338:	4b04      	ldr	r3, [pc, #16]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800033e:	4b03      	ldr	r3, [pc, #12]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 8000340:	691b      	ldr	r3, [r3, #16]
 8000342:	4798      	blx	r3
}
 8000344:	bf00      	nop
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	bd90      	pop	{r4, r7, pc}
 800034c:	20000004 	.word	0x20000004

08000350 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	4613      	mov	r3, r2
 800035c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800035e:	4b2b      	ldr	r3, [pc, #172]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000364:	4b29      	ldr	r3, [pc, #164]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000376:	2b00      	cmp	r3, #0
 8000378:	d126      	bne.n	80003c8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800037a:	4b24      	ldr	r3, [pc, #144]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 800037c:	6a1b      	ldr	r3, [r3, #32]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	0c12      	lsrs	r2, r2, #16
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	4610      	mov	r0, r2
 8000386:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000388:	4b20      	ldr	r3, [pc, #128]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	68fa      	ldr	r2, [r7, #12]
 800038e:	0a12      	lsrs	r2, r2, #8
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	4610      	mov	r0, r2
 8000394:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000398:	6a1b      	ldr	r3, [r3, #32]
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	4610      	mov	r0, r2
 80003a0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	82fb      	strh	r3, [r7, #22]
 80003a6:	e00a      	b.n	80003be <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80003a8:	4b18      	ldr	r3, [pc, #96]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003aa:	6a1b      	ldr	r3, [r3, #32]
 80003ac:	8afa      	ldrh	r2, [r7, #22]
 80003ae:	68b9      	ldr	r1, [r7, #8]
 80003b0:	440a      	add	r2, r1
 80003b2:	7812      	ldrb	r2, [r2, #0]
 80003b4:	4610      	mov	r0, r2
 80003b6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	3301      	adds	r3, #1
 80003bc:	82fb      	strh	r3, [r7, #22]
 80003be:	8afa      	ldrh	r2, [r7, #22]
 80003c0:	88fb      	ldrh	r3, [r7, #6]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3f0      	bcc.n	80003a8 <WIZCHIP_WRITE_BUF+0x58>
 80003c6:	e017      	b.n	80003f8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	0a1b      	lsrs	r3, r3, #8
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003e2:	f107 0210 	add.w	r2, r7, #16
 80003e6:	2103      	movs	r1, #3
 80003e8:	4610      	mov	r0, r2
 80003ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80003ec:	4b07      	ldr	r3, [pc, #28]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003f0:	88fa      	ldrh	r2, [r7, #6]
 80003f2:	4611      	mov	r1, r2
 80003f4:	68b8      	ldr	r0, [r7, #8]
 80003f6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80003f8:	4b04      	ldr	r3, [pc, #16]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80003fe:	4b03      	ldr	r3, [pc, #12]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	4798      	blx	r3
}
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000004 	.word	0x20000004

08000410 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800041a:	2300      	movs	r3, #0
 800041c:	81fb      	strh	r3, [r7, #14]
 800041e:	2300      	movs	r3, #0
 8000420:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	3301      	adds	r3, #1
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fe94 	bl	800015c <WIZCHIP_READ>
 8000434:	4603      	mov	r3, r0
 8000436:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000438:	89bb      	ldrh	r3, [r7, #12]
 800043a:	021b      	lsls	r3, r3, #8
 800043c:	b29c      	uxth	r4, r3
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	3301      	adds	r3, #1
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fe86 	bl	800015c <WIZCHIP_READ>
 8000450:	4603      	mov	r3, r0
 8000452:	4423      	add	r3, r4
 8000454:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000456:	89bb      	ldrh	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d019      	beq.n	8000490 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	3301      	adds	r3, #1
 8000462:	00db      	lsls	r3, r3, #3
 8000464:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fe77 	bl	800015c <WIZCHIP_READ>
 800046e:	4603      	mov	r3, r0
 8000470:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000472:	89fb      	ldrh	r3, [r7, #14]
 8000474:	021b      	lsls	r3, r3, #8
 8000476:	b29c      	uxth	r4, r3
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	3301      	adds	r3, #1
 800047e:	00db      	lsls	r3, r3, #3
 8000480:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe69 	bl	800015c <WIZCHIP_READ>
 800048a:	4603      	mov	r3, r0
 800048c:	4423      	add	r3, r4
 800048e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000490:	89fa      	ldrh	r2, [r7, #14]
 8000492:	89bb      	ldrh	r3, [r7, #12]
 8000494:	429a      	cmp	r2, r3
 8000496:	d1c4      	bne.n	8000422 <getSn_TX_FSR+0x12>
   return val;
 8000498:	89fb      	ldrh	r3, [r7, #14]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd90      	pop	{r4, r7, pc}

080004a2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80004a2:	b590      	push	{r4, r7, lr}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	81fb      	strh	r3, [r7, #14]
 80004b0:	2300      	movs	r3, #0
 80004b2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	3301      	adds	r3, #1
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fe4b 	bl	800015c <WIZCHIP_READ>
 80004c6:	4603      	mov	r3, r0
 80004c8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80004ca:	89bb      	ldrh	r3, [r7, #12]
 80004cc:	021b      	lsls	r3, r3, #8
 80004ce:	b29c      	uxth	r4, r3
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	3301      	adds	r3, #1
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fe3d 	bl	800015c <WIZCHIP_READ>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4423      	add	r3, r4
 80004e6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80004e8:	89bb      	ldrh	r3, [r7, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d019      	beq.n	8000522 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	3301      	adds	r3, #1
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe2e 	bl	800015c <WIZCHIP_READ>
 8000500:	4603      	mov	r3, r0
 8000502:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	b29c      	uxth	r4, r3
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	3301      	adds	r3, #1
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe20 	bl	800015c <WIZCHIP_READ>
 800051c:	4603      	mov	r3, r0
 800051e:	4423      	add	r3, r4
 8000520:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000522:	89fa      	ldrh	r2, [r7, #14]
 8000524:	89bb      	ldrh	r3, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d1c4      	bne.n	80004b4 <getSn_RX_RSR+0x12>
   return val;
 800052a:	89fb      	ldrh	r3, [r7, #14]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bd90      	pop	{r4, r7, pc}

08000534 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d046      	beq.n	80005e0 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	3301      	adds	r3, #1
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fdfc 	bl	800015c <WIZCHIP_READ>
 8000564:	4603      	mov	r3, r0
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	b29c      	uxth	r4, r3
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	3301      	adds	r3, #1
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fdf0 	bl	800015c <WIZCHIP_READ>
 800057c:	4603      	mov	r3, r0
 800057e:	4423      	add	r3, r4
 8000580:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000582:	89fb      	ldrh	r3, [r7, #14]
 8000584:	021a      	lsls	r2, r3, #8
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	3302      	adds	r3, #2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4413      	add	r3, r2
 8000590:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	461a      	mov	r2, r3
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	68b8      	ldr	r0, [r7, #8]
 800059a:	f7ff fed9 	bl	8000350 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800059e:	89fa      	ldrh	r2, [r7, #14]
 80005a0:	88bb      	ldrh	r3, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	3301      	adds	r3, #1
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80005b2:	461a      	mov	r2, r3
 80005b4:	89fb      	ldrh	r3, [r7, #14]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	4610      	mov	r0, r2
 80005c0:	f7ff fe18 	bl	80001f4 <WIZCHIP_WRITE>
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	3301      	adds	r3, #1
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80005d0:	461a      	mov	r2, r3
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	4610      	mov	r0, r2
 80005da:	f7ff fe0b 	bl	80001f4 <WIZCHIP_WRITE>
 80005de:	e000      	b.n	80005e2 <wiz_send_data+0xae>
   if(len == 0)  return;
 80005e0:	bf00      	nop
}
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd90      	pop	{r4, r7, pc}

080005e8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d046      	beq.n	8000694 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	3301      	adds	r3, #1
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fda2 	bl	800015c <WIZCHIP_READ>
 8000618:	4603      	mov	r3, r0
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	b29c      	uxth	r4, r3
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	3301      	adds	r3, #1
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fd96 	bl	800015c <WIZCHIP_READ>
 8000630:	4603      	mov	r3, r0
 8000632:	4423      	add	r3, r4
 8000634:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	021a      	lsls	r2, r3, #8
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3303      	adds	r3, #3
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	4413      	add	r3, r2
 8000644:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	461a      	mov	r2, r3
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	68b8      	ldr	r0, [r7, #8]
 800064e:	f7ff fe1f 	bl	8000290 <WIZCHIP_READ_BUF>
   ptr += len;
 8000652:	89fa      	ldrh	r2, [r7, #14]
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	3301      	adds	r3, #1
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000666:	461a      	mov	r2, r3
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	b29b      	uxth	r3, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff fdbe 	bl	80001f4 <WIZCHIP_WRITE>
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3301      	adds	r3, #1
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8000684:	461a      	mov	r2, r3
 8000686:	89fb      	ldrh	r3, [r7, #14]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	4610      	mov	r0, r2
 800068e:	f7ff fdb1 	bl	80001f4 <WIZCHIP_WRITE>
 8000692:	e000      	b.n	8000696 <wiz_recv_data+0xae>
   if(len == 0) return;
 8000694:	bf00      	nop
}
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <wizchip_select>:
#include "../Ethernet/wizchip_conf.h"

extern SPI_HandleTypeDef hspi1;

void wizchip_select(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2110      	movs	r1, #16
 80006a4:	4802      	ldr	r0, [pc, #8]	@ (80006b0 <wizchip_select+0x14>)
 80006a6:	f006 fc54 	bl	8006f52 <HAL_GPIO_WritePin>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40010800 	.word	0x40010800

080006b4 <wizchip_deselect>:

void wizchip_deselect(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4802      	ldr	r0, [pc, #8]	@ (80006c8 <wizchip_deselect+0x14>)
 80006be:	f006 fc48 	bl	8006f52 <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010800 	.word	0x40010800

080006cc <wizchip_read>:

uint8_t wizchip_read(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80006d2:	1df9      	adds	r1, r7, #7
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2201      	movs	r2, #1
 80006da:	4804      	ldr	r0, [pc, #16]	@ (80006ec <wizchip_read+0x20>)
 80006dc:	f007 fab0 	bl	8007c40 <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&hspi1, &rbuf, 1);
	return rbuf;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000d0 	.word	0x200000d0

080006f0 <wizchip_write>:

void wizchip_write(uint8_t b) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80006fa:	1df9      	adds	r1, r7, #7
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2201      	movs	r2, #1
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <wizchip_write+0x20>)
 8000704:	f007 f958 	bl	80079b8 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, &b, 1);
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000d0 	.word	0x200000d0

08000714 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, pBuf, len, 0xFFFFFFFF);
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4803      	ldr	r0, [pc, #12]	@ (8000738 <wizchip_readburst+0x24>)
 800072a:	f007 fa89 	bl	8007c40 <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&hspi1, pBuf, len);
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000d0 	.word	0x200000d0

0800073c <wizchip_writeburst>:

void wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, pBuf, len, 0xFFFFFFFF);
 8000748:	887a      	ldrh	r2, [r7, #2]
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <wizchip_writeburst+0x24>)
 8000752:	f007 f931 	bl	80079b8 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, pBuf, len);
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000d0 	.word	0x200000d0

08000764 <W5500Init>:

void W5500Init()
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 800076a:	23ff      	movs	r3, #255	@ 0xff
 800076c:	75fb      	strb	r3, [r7, #23]
	uint8_t memsize[2][8] = {{16,0,0,0,0,0,0,0},{16,0,0,0,0,0,0,0}};
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <W5500Init+0x74>)
 8000770:	1d3c      	adds	r4, r7, #4
 8000772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	4817      	ldr	r0, [pc, #92]	@ (80007dc <W5500Init+0x78>)
 800077e:	f006 fbe8 	bl	8006f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2102      	movs	r1, #2
 8000786:	4816      	ldr	r0, [pc, #88]	@ (80007e0 <W5500Init+0x7c>)
 8000788:	f006 fbe3 	bl	8006f52 <HAL_GPIO_WritePin>
	while (tmp--);
 800078c:	bf00      	nop
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	75fa      	strb	r2, [r7, #23]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1fa      	bne.n	800078e <W5500Init+0x2a>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2102      	movs	r1, #2
 800079c:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <W5500Init+0x7c>)
 800079e:	f006 fbd8 	bl	8006f52 <HAL_GPIO_WritePin>
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80007a2:	4910      	ldr	r1, [pc, #64]	@ (80007e4 <W5500Init+0x80>)
 80007a4:	4810      	ldr	r0, [pc, #64]	@ (80007e8 <W5500Init+0x84>)
 80007a6:	f000 fca5 	bl	80010f4 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 80007aa:	4910      	ldr	r1, [pc, #64]	@ (80007ec <W5500Init+0x88>)
 80007ac:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <W5500Init+0x8c>)
 80007ae:	f000 fcc5 	bl	800113c <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 80007b2:	4910      	ldr	r1, [pc, #64]	@ (80007f4 <W5500Init+0x90>)
 80007b4:	4810      	ldr	r0, [pc, #64]	@ (80007f8 <W5500Init+0x94>)
 80007b6:	f000 fced 	bl	8001194 <reg_wizchip_spiburst_cbfunc>
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fd14 	bl	80011ec <ctlwizchip>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ca:	d101      	bne.n	80007d0 <W5500Init+0x6c>
	{
		while (1);
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <W5500Init+0x68>
	}
}
 80007d0:	bf00      	nop
 80007d2:	371c      	adds	r7, #28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	08009cb4 	.word	0x08009cb4
 80007dc:	40010800 	.word	0x40010800
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	080006b5 	.word	0x080006b5
 80007e8:	0800069d 	.word	0x0800069d
 80007ec:	080006f1 	.word	0x080006f1
 80007f0:	080006cd 	.word	0x080006cd
 80007f4:	0800073d 	.word	0x0800073d
 80007f8:	08000715 	.word	0x08000715

080007fc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	4604      	mov	r4, r0
 8000804:	4608      	mov	r0, r1
 8000806:	4611      	mov	r1, r2
 8000808:	461a      	mov	r2, r3
 800080a:	4623      	mov	r3, r4
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	460b      	mov	r3, r1
 8000814:	80bb      	strh	r3, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b08      	cmp	r3, #8
 800081e:	d902      	bls.n	8000826 <socket+0x2a>
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	e0ef      	b.n	8000a06 <socket+0x20a>
	switch(protocol)
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d005      	beq.n	8000838 <socket+0x3c>
 800082c:	2b00      	cmp	r3, #0
 800082e:	dd11      	ble.n	8000854 <socket+0x58>
 8000830:	3b02      	subs	r3, #2
 8000832:	2b02      	cmp	r3, #2
 8000834:	d80e      	bhi.n	8000854 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000836:	e011      	b.n	800085c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2204      	movs	r2, #4
 800083e:	4619      	mov	r1, r3
 8000840:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000844:	f7ff fd24 	bl	8000290 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <socket+0x5e>
 800084e:	f06f 0302 	mvn.w	r3, #2
 8000852:	e0d8      	b.n	8000a06 <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000854:	f06f 0304 	mvn.w	r3, #4
 8000858:	e0d5      	b.n	8000a06 <socket+0x20a>
	    break;
 800085a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <socket+0x70>
 8000866:	f06f 0305 	mvn.w	r3, #5
 800086a:	e0cc      	b.n	8000a06 <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d028      	beq.n	80008c4 <socket+0xc8>
	{
   	switch(protocol)
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d002      	beq.n	800087e <socket+0x82>
 8000878:	2b02      	cmp	r3, #2
 800087a:	d008      	beq.n	800088e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800087c:	e022      	b.n	80008c4 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11a      	bne.n	80008be <socket+0xc2>
 8000888:	f06f 0305 	mvn.w	r3, #5
 800088c:	e0bb      	b.n	8000a06 <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	f003 0320 	and.w	r3, r3, #32
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db02      	blt.n	80008a6 <socket+0xaa>
 80008a0:	f06f 0305 	mvn.w	r3, #5
 80008a4:	e0af      	b.n	8000a06 <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d008      	beq.n	80008c2 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80008b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db04      	blt.n	80008c2 <socket+0xc6>
 80008b8:	f06f 0305 	mvn.w	r3, #5
 80008bc:	e0a3      	b.n	8000a06 <socket+0x20a>
   	      break;
 80008be:	bf00      	nop
 80008c0:	e000      	b.n	80008c4 <socket+0xc8>
   	      break;
 80008c2:	bf00      	nop
   	}
   }
	close(sn);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f8ac 	bl	8000a24 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	3301      	adds	r3, #1
 80008d2:	00d8      	lsls	r0, r3, #3
 80008d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008d8:	f023 030f 	bic.w	r3, r3, #15
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	f7ff fc83 	bl	80001f4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d110      	bne.n	8000916 <socket+0x11a>
	{
	   port = sock_any_port++;
 80008f4:	4b46      	ldr	r3, [pc, #280]	@ (8000a10 <socket+0x214>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	b291      	uxth	r1, r2
 80008fc:	4a44      	ldr	r2, [pc, #272]	@ (8000a10 <socket+0x214>)
 80008fe:	8011      	strh	r1, [r2, #0]
 8000900:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000902:	4b43      	ldr	r3, [pc, #268]	@ (8000a10 <socket+0x214>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800090a:	4293      	cmp	r3, r2
 800090c:	d103      	bne.n	8000916 <socket+0x11a>
 800090e:	4b40      	ldr	r3, [pc, #256]	@ (8000a10 <socket+0x214>)
 8000910:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000914:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	3301      	adds	r3, #1
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000922:	461a      	mov	r2, r3
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	0a1b      	lsrs	r3, r3, #8
 8000928:	b29b      	uxth	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4619      	mov	r1, r3
 800092e:	4610      	mov	r0, r2
 8000930:	f7ff fc60 	bl	80001f4 <WIZCHIP_WRITE>
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	3301      	adds	r3, #1
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000940:	461a      	mov	r2, r3
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f7ff fc53 	bl	80001f4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	3301      	adds	r3, #1
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc49 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000962:	bf00      	nop
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	3301      	adds	r3, #1
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fbf3 	bl	800015c <WIZCHIP_READ>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f3      	bne.n	8000964 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2201      	movs	r2, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	b21b      	sxth	r3, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	b21a      	sxth	r2, r3
 800098a:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <socket+0x218>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b21b      	sxth	r3, r3
 8000990:	4013      	ands	r3, r2
 8000992:	b21b      	sxth	r3, r3
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <socket+0x218>)
 8000998:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	f003 0201 	and.w	r2, r3, #1
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <socket+0x218>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <socket+0x218>)
 80009b6:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <socket+0x21c>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <socket+0x21c>)
 80009d4:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <socket+0x220>)
 80009da:	2100      	movs	r1, #0
 80009dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <socket+0x224>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80009e8:	bf00      	nop
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	3301      	adds	r3, #1
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fbb0 	bl	800015c <WIZCHIP_READ>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f3      	beq.n	80009ea <socket+0x1ee>
   return (int8_t)sn;
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000064 	.word	0x20000064
 8000a18:	20000066 	.word	0x20000066
 8000a1c:	20000068 	.word	0x20000068
 8000a20:	2000007c 	.word	0x2000007c

08000a24 <close>:

int8_t close(uint8_t sn)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b08      	cmp	r3, #8
 8000a32:	d902      	bls.n	8000a3a <close+0x16>
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	e060      	b.n	8000afc <close+0xd8>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	3301      	adds	r3, #1
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a46:	2110      	movs	r1, #16
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbd3 	bl	80001f4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000a4e:	bf00      	nop
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	3301      	adds	r3, #1
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fb7d 	bl	800015c <WIZCHIP_READ>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f3      	bne.n	8000a50 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000a74:	211f      	movs	r1, #31
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fbbc 	bl	80001f4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <close+0xe0>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <close+0xe0>)
 8000a98:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <close+0xe4>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4013      	ands	r3, r2
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <close+0xe4>)
 8000ab6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <close+0xe8>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <close+0xec>)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000aca:	e00a      	b.n	8000ae2 <close+0xbe>
	{
		if (g_uart_request_exit == 1)
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <close+0xf0>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d105      	bne.n	8000ae2 <close+0xbe>
		{
			g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <close+0xf0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
			return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000adc:	f06f 030c 	mvn.w	r3, #12
 8000ae0:	e00c      	b.n	8000afc <close+0xd8>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb34 	bl	800015c <WIZCHIP_READ>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1e8      	bne.n	8000acc <close+0xa8>
		}
	}
	return SOCK_OK;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000064 	.word	0x20000064
 8000b08:	20000066 	.word	0x20000066
 8000b0c:	20000068 	.word	0x20000068
 8000b10:	2000007c 	.word	0x2000007c
 8000b14:	20000078 	.word	0x20000078

08000b18 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d902      	bls.n	8000b34 <connect+0x1c>
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e0d1      	b.n	8000cd8 <connect+0x1c0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	3301      	adds	r3, #1
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fb0d 	bl	800015c <WIZCHIP_READ>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f003 030f 	and.w	r3, r3, #15
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d002      	beq.n	8000b52 <connect+0x3a>
 8000b4c:	f06f 0304 	mvn.w	r3, #4
 8000b50:	e0c2      	b.n	8000cd8 <connect+0x1c0>
   CHECK_SOCKINIT();
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	3301      	adds	r3, #1
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fafc 	bl	800015c <WIZCHIP_READ>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b13      	cmp	r3, #19
 8000b68:	d002      	beq.n	8000b70 <connect+0x58>
 8000b6a:	f06f 0302 	mvn.w	r3, #2
 8000b6e:	e0b3      	b.n	8000cd8 <connect+0x1c0>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	021b      	lsls	r3, r3, #8
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	3201      	adds	r2, #1
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021b      	lsls	r3, r3, #8
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	3202      	adds	r2, #2
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	3203      	adds	r2, #3
 8000b9a:	7812      	ldrb	r2, [r2, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba6:	d002      	beq.n	8000bae <connect+0x96>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <connect+0x9c>
 8000bae:	f06f 030b 	mvn.w	r3, #11
 8000bb2:	e091      	b.n	8000cd8 <connect+0x1c0>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8000bb4:	88bb      	ldrh	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <connect+0xa8>
 8000bba:	f06f 030a 	mvn.w	r3, #10
 8000bbe:	e08b      	b.n	8000cd8 <connect+0x1c0>
	setSn_DIPR(sn,addr);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8000bcc:	2204      	movs	r2, #4
 8000bce:	6839      	ldr	r1, [r7, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fbbd 	bl	8000350 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	3301      	adds	r3, #1
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000be2:	461a      	mov	r2, r3
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4619      	mov	r1, r3
 8000bee:	4610      	mov	r0, r2
 8000bf0:	f7ff fb00 	bl	80001f4 <WIZCHIP_WRITE>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8000c00:	461a      	mov	r2, r3
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4619      	mov	r1, r3
 8000c08:	4610      	mov	r0, r2
 8000c0a:	f7ff faf3 	bl	80001f4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	3301      	adds	r3, #1
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fae9 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000c22:	bf00      	nop
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	3301      	adds	r3, #1
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fa93 	bl	800015c <WIZCHIP_READ>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f3      	bne.n	8000c24 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000c3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <connect+0x1c8>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	fa42 f303 	asr.w	r3, r2, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d036      	beq.n	8000cbe <connect+0x1a6>
 8000c50:	2300      	movs	r3, #0
 8000c52:	e041      	b.n	8000cd8 <connect+0x1c0>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	3301      	adds	r3, #1
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fa7b 	bl	800015c <WIZCHIP_READ>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00c      	beq.n	8000c8a <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	3301      	adds	r3, #1
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fab8 	bl	80001f4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8000c84:	f06f 030c 	mvn.w	r3, #12
 8000c88:	e026      	b.n	8000cd8 <connect+0x1c0>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3301      	adds	r3, #1
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fa60 	bl	800015c <WIZCHIP_READ>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8000ca2:	f06f 0303 	mvn.w	r3, #3
 8000ca6:	e017      	b.n	8000cd8 <connect+0x1c0>
		}
		if (g_uart_request_exit == 1)
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <connect+0x1cc>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d105      	bne.n	8000cbe <connect+0x1a6>
		{
			g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <connect+0x1cc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000cb8:	f06f 030c 	mvn.w	r3, #12
 8000cbc:	e00c      	b.n	8000cd8 <connect+0x1c0>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fa46 	bl	800015c <WIZCHIP_READ>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b17      	cmp	r3, #23
 8000cd4:	d1be      	bne.n	8000c54 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000064 	.word	0x20000064
 8000ce4:	20000078 	.word	0x20000078

08000ce8 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d902      	bls.n	8000d0c <send+0x24>
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e0dd      	b.n	8000ec8 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	3301      	adds	r3, #1
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fa21 	bl	800015c <WIZCHIP_READ>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f003 030f 	and.w	r3, r3, #15
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d002      	beq.n	8000d2a <send+0x42>
 8000d24:	f06f 0304 	mvn.w	r3, #4
 8000d28:	e0ce      	b.n	8000ec8 <send+0x1e0>
   CHECK_SOCKDATA();
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <send+0x4e>
 8000d30:	f06f 030d 	mvn.w	r3, #13
 8000d34:	e0c8      	b.n	8000ec8 <send+0x1e0>
   tmp = getSn_SR(sn);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fa0a 	bl	800015c <WIZCHIP_READ>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b17      	cmp	r3, #23
 8000d50:	d005      	beq.n	8000d5e <send+0x76>
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b1c      	cmp	r3, #28
 8000d56:	d002      	beq.n	8000d5e <send+0x76>
 8000d58:	f06f 0306 	mvn.w	r3, #6
 8000d5c:	e0b4      	b.n	8000ec8 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ed0 <send+0x1e8>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	fa42 f303 	asr.w	r3, r2, r3
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d039      	beq.n	8000de6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	3301      	adds	r3, #1
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff f9ec 	bl	800015c <WIZCHIP_READ>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f003 031f 	and.w	r3, r3, #31
 8000d8a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d019      	beq.n	8000dca <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000da2:	2110      	movs	r1, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa25 	bl	80001f4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2201      	movs	r2, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	4b45      	ldr	r3, [pc, #276]	@ (8000ed0 <send+0x1e8>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b42      	ldr	r3, [pc, #264]	@ (8000ed0 <send+0x1e8>)
 8000dc6:	801a      	strh	r2, [r3, #0]
 8000dc8:	e00d      	b.n	8000de6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <send+0xfa>
      {
         close(sn);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fe24 	bl	8000a24 <close>
         return SOCKERR_TIMEOUT;
 8000ddc:	f06f 030c 	mvn.w	r3, #12
 8000de0:	e072      	b.n	8000ec8 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e070      	b.n	8000ec8 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	3301      	adds	r3, #1
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff f9b2 	bl	800015c <WIZCHIP_READ>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	029b      	lsls	r3, r3, #10
 8000dfc:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000dfe:	88ba      	ldrh	r2, [r7, #4]
 8000e00:	89bb      	ldrh	r3, [r7, #12]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d901      	bls.n	8000e0a <send+0x122>
 8000e06:	89bb      	ldrh	r3, [r7, #12]
 8000e08:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff faff 	bl	8000410 <getSn_TX_FSR>
 8000e12:	4603      	mov	r3, r0
 8000e14:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f99a 	bl	800015c <WIZCHIP_READ>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b17      	cmp	r3, #23
 8000e30:	d009      	beq.n	8000e46 <send+0x15e>
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b1c      	cmp	r3, #28
 8000e36:	d006      	beq.n	8000e46 <send+0x15e>
      {
         close(sn);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fdf2 	bl	8000a24 <close>
         return SOCKERR_SOCKSTATUS;
 8000e40:	f06f 0306 	mvn.w	r3, #6
 8000e44:	e040      	b.n	8000ec8 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000e46:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <send+0x1ec>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	fa42 f303 	asr.w	r3, r2, r3
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d005      	beq.n	8000e66 <send+0x17e>
 8000e5a:	88ba      	ldrh	r2, [r7, #4]
 8000e5c:	89bb      	ldrh	r3, [r7, #12]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d901      	bls.n	8000e66 <send+0x17e>
 8000e62:	2300      	movs	r3, #0
 8000e64:	e030      	b.n	8000ec8 <send+0x1e0>
      if(len <= freesize) break;
 8000e66:	88ba      	ldrh	r2, [r7, #4]
 8000e68:	89bb      	ldrh	r3, [r7, #12]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d900      	bls.n	8000e70 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8000e6e:	e7cc      	b.n	8000e0a <send+0x122>
      if(len <= freesize) break;
 8000e70:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000e72:	88ba      	ldrh	r2, [r7, #4]
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	6839      	ldr	r1, [r7, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fb5b 	bl	8000534 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	3301      	adds	r3, #1
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff f9b1 	bl	80001f4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000e92:	bf00      	nop
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3301      	adds	r3, #1
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f95b 	bl	800015c <WIZCHIP_READ>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f3      	bne.n	8000e94 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <send+0x1e8>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <send+0x1e8>)
 8000ec4:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000066 	.word	0x20000066
 8000ed4:	20000064 	.word	0x20000064

08000ed8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	d902      	bls.n	8000efc <recv+0x24>
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e09b      	b.n	8001034 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	3301      	adds	r3, #1
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff f929 	bl	800015c <WIZCHIP_READ>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f003 030f 	and.w	r3, r3, #15
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d002      	beq.n	8000f1a <recv+0x42>
 8000f14:	f06f 0304 	mvn.w	r3, #4
 8000f18:	e08c      	b.n	8001034 <recv+0x15c>
   CHECK_SOCKDATA();
 8000f1a:	88bb      	ldrh	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <recv+0x4e>
 8000f20:	f06f 030d 	mvn.w	r3, #13
 8000f24:	e086      	b.n	8001034 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f912 	bl	800015c <WIZCHIP_READ>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	029b      	lsls	r3, r3, #10
 8000f3c:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8000f3e:	89ba      	ldrh	r2, [r7, #12]
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d201      	bcs.n	8000f4a <recv+0x72>
 8000f46:	89bb      	ldrh	r3, [r7, #12]
 8000f48:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff faa8 	bl	80004a2 <getSn_RX_RSR>
 8000f52:	4603      	mov	r3, r0
 8000f54:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f8fa 	bl	800015c <WIZCHIP_READ>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b17      	cmp	r3, #23
 8000f70:	d026      	beq.n	8000fc0 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b1c      	cmp	r3, #28
 8000f76:	d11c      	bne.n	8000fb2 <recv+0xda>
            {
               if(recvsize != 0) break;
 8000f78:	89bb      	ldrh	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d133      	bne.n	8000fe6 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa45 	bl	8000410 <getSn_TX_FSR>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461c      	mov	r4, r3
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	3301      	adds	r3, #1
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f8e0 	bl	800015c <WIZCHIP_READ>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	029b      	lsls	r3, r3, #10
 8000fa0:	429c      	cmp	r4, r3
 8000fa2:	d10d      	bne.n	8000fc0 <recv+0xe8>
               {
                  close(sn);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fd3c 	bl	8000a24 <close>
                  return SOCKERR_SOCKSTATUS;
 8000fac:	f06f 0306 	mvn.w	r3, #6
 8000fb0:	e040      	b.n	8001034 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fd35 	bl	8000a24 <close>
               return SOCKERR_SOCKSTATUS;
 8000fba:	f06f 0306 	mvn.w	r3, #6
 8000fbe:	e039      	b.n	8001034 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <recv+0x164>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	fa42 f303 	asr.w	r3, r2, r3
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <recv+0x106>
 8000fd4:	89bb      	ldrh	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <recv+0x106>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e02a      	b.n	8001034 <recv+0x15c>
         if(recvsize != 0) break;
 8000fde:	89bb      	ldrh	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8000fe4:	e7b1      	b.n	8000f4a <recv+0x72>
               if(recvsize != 0) break;
 8000fe6:	bf00      	nop
 8000fe8:	e000      	b.n	8000fec <recv+0x114>
         if(recvsize != 0) break;
 8000fea:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8000fec:	89ba      	ldrh	r2, [r7, #12]
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d201      	bcs.n	8000ff8 <recv+0x120>
 8000ff4:	89bb      	ldrh	r3, [r7, #12]
 8000ff6:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8000ff8:	88ba      	ldrh	r2, [r7, #4]
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff faf2 	bl	80005e8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	3301      	adds	r3, #1
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001010:	2140      	movs	r1, #64	@ 0x40
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f8ee 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001018:	bf00      	nop
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	3301      	adds	r3, #1
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f898 	bl	800015c <WIZCHIP_READ>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f3      	bne.n	800101a <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001032:	88bb      	ldrh	r3, [r7, #4]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}
 800103c:	20000064 	.word	0x20000064

08001040 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	78fa      	ldrb	r2, [r7, #3]
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	2300      	movs	r3, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	460b      	mov	r3, r1
 80010d0:	807b      	strh	r3, [r7, #2]
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
	...

080010f4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <reg_wizchip_cs_cbfunc+0x16>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <reg_wizchip_cs_cbfunc+0x3c>)
 800110c:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <reg_wizchip_cs_cbfunc+0x40>)
 800110e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <reg_wizchip_cs_cbfunc+0x3c>)
 8001112:	4a09      	ldr	r2, [pc, #36]	@ (8001138 <reg_wizchip_cs_cbfunc+0x44>)
 8001114:	619a      	str	r2, [r3, #24]
 8001116:	e006      	b.n	8001126 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001118:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <reg_wizchip_cs_cbfunc+0x3c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <reg_wizchip_cs_cbfunc+0x3c>)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	6193      	str	r3, [r2, #24]
   }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000004 	.word	0x20000004
 8001134:	08001059 	.word	0x08001059
 8001138:	08001065 	.word	0x08001065

0800113c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001146:	bf00      	nop
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <reg_wizchip_spi_cbfunc+0x4c>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f9      	beq.n	8001148 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <reg_wizchip_spi_cbfunc+0x24>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d106      	bne.n	800116e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <reg_wizchip_spi_cbfunc+0x4c>)
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <reg_wizchip_spi_cbfunc+0x50>)
 8001164:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <reg_wizchip_spi_cbfunc+0x4c>)
 8001168:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <reg_wizchip_spi_cbfunc+0x54>)
 800116a:	621a      	str	r2, [r3, #32]
 800116c:	e006      	b.n	800117c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800116e:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <reg_wizchip_spi_cbfunc+0x4c>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <reg_wizchip_spi_cbfunc+0x4c>)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	6213      	str	r3, [r2, #32]
   }
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000004 	.word	0x20000004
 800118c:	080010a5 	.word	0x080010a5
 8001190:	080010b3 	.word	0x080010b3

08001194 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800119e:	bf00      	nop
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f9      	beq.n	80011a0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <reg_wizchip_spiburst_cbfunc+0x24>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <reg_wizchip_spiburst_cbfunc+0x50>)
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011c0:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <reg_wizchip_spiburst_cbfunc+0x54>)
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80011c4:	e006      	b.n	80011d4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80011c6:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80011cc:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000004 	.word	0x20000004
 80011e4:	080010c7 	.word	0x080010c7
 80011e8:	080010dd 	.word	0x080010dd

080011ec <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f200 80c5 	bhi.w	8001396 <ctlwizchip+0x1aa>
 800120c:	a201      	add	r2, pc, #4	@ (adr r2, 8001214 <ctlwizchip+0x28>)
 800120e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001212:	bf00      	nop
 8001214:	08001255 	.word	0x08001255
 8001218:	0800125b 	.word	0x0800125b
 800121c:	08001287 	.word	0x08001287
 8001220:	0800127b 	.word	0x0800127b
 8001224:	08001295 	.word	0x08001295
 8001228:	080012a1 	.word	0x080012a1
 800122c:	080012af 	.word	0x080012af
 8001230:	080012d5 	.word	0x080012d5
 8001234:	080012f7 	.word	0x080012f7
 8001238:	0800133b 	.word	0x0800133b
 800123c:	08001341 	.word	0x08001341
 8001240:	08001349 	.word	0x08001349
 8001244:	0800139d 	.word	0x0800139d
 8001248:	08001351 	.word	0x08001351
 800124c:	0800135f 	.word	0x0800135f
 8001250:	0800137b 	.word	0x0800137b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001254:	f000 f8aa 	bl	80013ac <wizchip_sw_reset>
         break;
 8001258:	e0a1      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3308      	adds	r3, #8
 8001268:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f8e7 	bl	8001444 <wizchip_init>
 8001276:	4603      	mov	r3, r0
 8001278:	e092      	b.n	80013a0 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f96c 	bl	800155c <wizchip_clrinterrupt>
         break;
 8001284:	e08b      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8001286:	f000 f99d 	bl	80015c4 <wizchip_getinterrupt>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	801a      	strh	r2, [r3, #0]
         break;
 8001292:	e084      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f9b8 	bl	800160e <wizchip_setinterruptmask>
         break;         
 800129e:	e07e      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80012a0:	f000 f9d0 	bl	8001644 <wizchip_getinterruptmask>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	801a      	strh	r2, [r3, #0]
         break;
 80012ac:	e077      	b.n	800139e <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80012be:	f7fe ff99 	bl	80001f4 <WIZCHIP_WRITE>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80012ce:	f7fe ff91 	bl	80001f4 <WIZCHIP_WRITE>
         break;
 80012d2:	e064      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80012d4:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80012d8:	f7fe ff40 	bl	800015c <WIZCHIP_READ>
 80012dc:	4603      	mov	r3, r0
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b29c      	uxth	r4, r3
 80012e2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80012e6:	f7fe ff39 	bl	800015c <WIZCHIP_READ>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4423      	add	r3, r4
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	801a      	strh	r2, [r3, #0]
         break;
 80012f4:	e053      	b.n	800139e <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80012f6:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <ctlwizchip+0x1bc>)
 80012f8:	789a      	ldrb	r2, [r3, #2]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a29      	ldr	r2, [pc, #164]	@ (80013a8 <ctlwizchip+0x1bc>)
 8001304:	78d2      	ldrb	r2, [r2, #3]
 8001306:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	3302      	adds	r3, #2
 800130c:	4a26      	ldr	r2, [pc, #152]	@ (80013a8 <ctlwizchip+0x1bc>)
 800130e:	7912      	ldrb	r2, [r2, #4]
 8001310:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	3303      	adds	r3, #3
 8001316:	4a24      	ldr	r2, [pc, #144]	@ (80013a8 <ctlwizchip+0x1bc>)
 8001318:	7952      	ldrb	r2, [r2, #5]
 800131a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3304      	adds	r3, #4
 8001320:	4a21      	ldr	r2, [pc, #132]	@ (80013a8 <ctlwizchip+0x1bc>)
 8001322:	7992      	ldrb	r2, [r2, #6]
 8001324:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	3305      	adds	r3, #5
 800132a:	4a1f      	ldr	r2, [pc, #124]	@ (80013a8 <ctlwizchip+0x1bc>)
 800132c:	79d2      	ldrb	r2, [r2, #7]
 800132e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3306      	adds	r3, #6
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
         break;
 8001338:	e031      	b.n	800139e <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800133a:	f000 f9d5 	bl	80016e8 <wizphy_reset>
         break;
 800133e:	e02e      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f000 f9f8 	bl	8001736 <wizphy_setphyconf>
         break;
 8001346:	e02a      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8001348:	6838      	ldr	r0, [r7, #0]
 800134a:	f000 fa37 	bl	80017bc <wizphy_getphyconf>
         break;
 800134e:	e026      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fa9b 	bl	8001890 <wizphy_setphypmode>
 800135a:	4603      	mov	r3, r0
 800135c:	e020      	b.n	80013a0 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800135e:	f000 f9aa 	bl	80016b6 <wizphy_getphypmode>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	2bff      	cmp	r3, #255	@ 0xff
 800136a:	d102      	bne.n	8001372 <ctlwizchip+0x186>
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	e016      	b.n	80013a0 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	7dfa      	ldrb	r2, [r7, #23]
 8001376:	701a      	strb	r2, [r3, #0]
         break;
 8001378:	e011      	b.n	800139e <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800137a:	f000 f986 	bl	800168a <wizphy_getphylink>
 800137e:	4603      	mov	r3, r0
 8001380:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	2bff      	cmp	r3, #255	@ 0xff
 8001386:	d102      	bne.n	800138e <ctlwizchip+0x1a2>
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	e008      	b.n	80013a0 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	7dfa      	ldrb	r2, [r7, #23]
 8001392:	701a      	strb	r2, [r3, #0]
         break;
 8001394:	e003      	b.n	800139e <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e001      	b.n	80013a0 <ctlwizchip+0x1b4>
         break;
 800139c:	bf00      	nop
   }
   return 0;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	20000004 	.word	0x20000004

080013ac <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2206      	movs	r2, #6
 80013b6:	4619      	mov	r1, r3
 80013b8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80013bc:	f7fe ff68 	bl	8000290 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2204      	movs	r2, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013cc:	f7fe ff60 	bl	8000290 <WIZCHIP_READ_BUF>
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	2204      	movs	r2, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80013dc:	f7fe ff58 	bl	8000290 <WIZCHIP_READ_BUF>
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2204      	movs	r2, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80013ec:	f7fe ff50 	bl	8000290 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7fe fefe 	bl	80001f4 <WIZCHIP_WRITE>
   getMR(); // for delay
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7fe feaf 	bl	800015c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2206      	movs	r2, #6
 8001402:	4619      	mov	r1, r3
 8001404:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001408:	f7fe ffa2 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2204      	movs	r2, #4
 8001412:	4619      	mov	r1, r3
 8001414:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001418:	f7fe ff9a 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	2204      	movs	r2, #4
 8001422:	4619      	mov	r1, r3
 8001424:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001428:	f7fe ff92 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2204      	movs	r2, #4
 8001432:	4619      	mov	r1, r3
 8001434:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001438:	f7fe ff8a 	bl	8000350 <WIZCHIP_WRITE_BUF>
}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001452:	f7ff ffab 	bl	80013ac <wizchip_sw_reset>
   if(txsize)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d03b      	beq.n	80014d4 <wizchip_init+0x90>
   {
      tmp = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e015      	b.n	8001492 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	4413      	add	r3, r2
 8001474:	b2db      	uxtb	r3, r3
 8001476:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800147c:	2b10      	cmp	r3, #16
 800147e:	dd02      	ble.n	8001486 <wizchip_init+0x42>
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	e066      	b.n	8001554 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	3301      	adds	r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	2b07      	cmp	r3, #7
 8001498:	dde5      	ble.n	8001466 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e015      	b.n	80014cc <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80014a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	3301      	adds	r3, #1
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80014ae:	4618      	mov	r0, r3
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7fe fe9a 	bl	80001f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	dde5      	ble.n	80014a0 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d03b      	beq.n	8001552 <wizchip_init+0x10e>
   {
      tmp = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	e015      	b.n	8001510 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	4413      	add	r3, r2
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80014f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	dd02      	ble.n	8001504 <wizchip_init+0xc0>
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e027      	b.n	8001554 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	3301      	adds	r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001514:	2b07      	cmp	r3, #7
 8001516:	dde5      	ble.n	80014e4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e015      	b.n	800154a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	3301      	adds	r3, #1
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800152c:	4618      	mov	r0, r3
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f7fe fe5b 	bl	80001f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	3301      	adds	r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	2b07      	cmp	r3, #7
 8001550:	dde5      	ble.n	800151e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b29b      	uxth	r3, r3
 8001570:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	f023 030f 	bic.w	r3, r3, #15
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4619      	mov	r1, r3
 800157c:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8001580:	f7fe fe38 	bl	80001f4 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e014      	b.n	80015b4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800158a:	7bba      	ldrb	r2, [r7, #14]
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	fa42 f303 	asr.w	r3, r2, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d009      	beq.n	80015ae <wizchip_clrinterrupt+0x52>
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	3301      	adds	r3, #1
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015a6:	211f      	movs	r1, #31
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe fe23 	bl	80001f4 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	3301      	adds	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	d9e7      	bls.n	800158a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80015ba:	bf00      	nop
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80015d6:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80015da:	f7fe fdbf 	bl	800015c <WIZCHIP_READ>
 80015de:	4603      	mov	r3, r0
 80015e0:	f023 030f 	bic.w	r3, r3, #15
 80015e4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80015e6:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80015ea:	f7fe fdb7 	bl	800015c <WIZCHIP_READ>
 80015ee:	4603      	mov	r3, r0
 80015f0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001604:	88bb      	ldrh	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	b29b      	uxth	r3, r3
 8001622:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	4619      	mov	r1, r3
 8001628:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800162c:	f7fe fde2 	bl	80001f4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001630:	7bbb      	ldrb	r3, [r7, #14]
 8001632:	4619      	mov	r1, r3
 8001634:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001638:	f7fe fddc 	bl	80001f4 <WIZCHIP_WRITE>
#endif   
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8001656:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800165a:	f7fe fd7f 	bl	800015c <WIZCHIP_READ>
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8001662:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001666:	f7fe fd79 	bl	800015c <WIZCHIP_READ>
 800166a:	4603      	mov	r3, r0
 800166c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8001672:	88bb      	ldrh	r3, [r7, #4]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b29a      	uxth	r2, r3
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4413      	add	r3, r2
 800167e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001680:	88bb      	ldrh	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8001690:	2300      	movs	r3, #0
 8001692:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001694:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001698:	f7fe fd60 	bl	800015c <WIZCHIP_READ>
 800169c:	4603      	mov	r3, r0
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80016a6:	2301      	movs	r3, #1
 80016a8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80016c0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016c4:	f7fe fd4a 	bl	800015c <WIZCHIP_READ>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016ce:	2b30      	cmp	r3, #48	@ 0x30
 80016d0:	d102      	bne.n	80016d8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80016d2:	2301      	movs	r3, #1
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	e001      	b.n	80016dc <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80016d8:	2300      	movs	r3, #0
 80016da:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80016ee:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016f2:	f7fe fd33 	bl	800015c <WIZCHIP_READ>
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001700:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800170a:	f7fe fd73 	bl	80001f4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800170e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001712:	f7fe fd23 	bl	800015c <WIZCHIP_READ>
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001720:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800172a:	f7fe fd63 	bl	80001f4 <WIZCHIP_WRITE>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d104      	bne.n	8001754 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e003      	b.n	800175c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800175a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	785b      	ldrb	r3, [r3, #1]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d104      	bne.n	800176e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e019      	b.n	80017a2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	78db      	ldrb	r3, [r3, #3]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10d      	bne.n	8001792 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	789b      	ldrb	r3, [r3, #2]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d104      	bne.n	8001788 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	f043 0318 	orr.w	r3, r3, #24
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e00c      	b.n	80017a2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e007      	b.n	80017a2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	789b      	ldrb	r3, [r3, #2]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d103      	bne.n	80017a2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017aa:	f7fe fd23 	bl	80001f4 <WIZCHIP_WRITE>
   wizphy_reset();
 80017ae:	f7ff ff9b 	bl	80016e8 <wizphy_reset>
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80017c8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017cc:	f7fe fcc6 	bl	800015c <WIZCHIP_READ>
 80017d0:	4603      	mov	r3, r0
 80017d2:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	119b      	asrs	r3, r3, #6
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	d001      	beq.n	80017f2 <wizphy_getphyconf+0x36>
 80017ee:	2b38      	cmp	r3, #56	@ 0x38
 80017f0:	d103      	bne.n	80017fa <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	705a      	strb	r2, [r3, #1]
         break;
 80017f8:	e003      	b.n	8001802 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	705a      	strb	r2, [r3, #1]
         break;
 8001800:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001808:	3b10      	subs	r3, #16
 800180a:	2b10      	cmp	r3, #16
 800180c:	bf8c      	ite	hi
 800180e:	2201      	movhi	r2, #1
 8001810:	2200      	movls	r2, #0
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	2a00      	cmp	r2, #0
 8001816:	d10f      	bne.n	8001838 <wizphy_getphyconf+0x7c>
 8001818:	4a1b      	ldr	r2, [pc, #108]	@ (8001888 <wizphy_getphyconf+0xcc>)
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	bf14      	ite	ne
 8001826:	2301      	movne	r3, #1
 8001828:	2300      	moveq	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	709a      	strb	r2, [r3, #2]
         break;
 8001836:	e003      	b.n	8001840 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	709a      	strb	r2, [r3, #2]
         break;
 800183e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001846:	3b08      	subs	r3, #8
 8001848:	2b18      	cmp	r3, #24
 800184a:	bf8c      	ite	hi
 800184c:	2201      	movhi	r2, #1
 800184e:	2200      	movls	r2, #0
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	2a00      	cmp	r2, #0
 8001854:	d10f      	bne.n	8001876 <wizphy_getphyconf+0xba>
 8001856:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <wizphy_getphyconf+0xd0>)
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	70da      	strb	r2, [r3, #3]
         break;
 8001874:	e003      	b.n	800187e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	70da      	strb	r2, [r3, #3]
         break;
 800187c:	bf00      	nop
   }
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	00010101 	.word	0x00010101
 800188c:	01010001 	.word	0x01010001

08001890 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800189e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018a2:	f7fe fc5b 	bl	800015c <WIZCHIP_READ>
 80018a6:	4603      	mov	r3, r0
 80018a8:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <wizphy_setphypmode+0x2a>
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	e030      	b.n	800191c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80018c0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d104      	bne.n	80018d2 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e003      	b.n	80018da <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80018d8:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018e2:	f7fe fc87 	bl	80001f4 <WIZCHIP_WRITE>
   wizphy_reset();
 80018e6:	f7ff feff 	bl	80016e8 <wizphy_reset>
   tmp = getPHYCFGR();
 80018ea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018ee:	f7fe fc35 	bl	800015c <WIZCHIP_READ>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <wizphy_setphypmode+0x88>
 8001906:	2300      	movs	r3, #0
 8001908:	e008      	b.n	800191c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <wizphy_setphypmode+0x88>
 8001914:	2300      	movs	r3, #0
 8001916:	e001      	b.n	800191c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2206      	movs	r2, #6
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001936:	f7fe fd0b 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330e      	adds	r3, #14
 800193e:	2204      	movs	r2, #4
 8001940:	4619      	mov	r1, r3
 8001942:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001946:	f7fe fd03 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	330a      	adds	r3, #10
 800194e:	2204      	movs	r2, #4
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001956:	f7fe fcfb 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3306      	adds	r3, #6
 800195e:	2204      	movs	r2, #4
 8001960:	4619      	mov	r1, r3
 8001962:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001966:	f7fe fcf3 	bl	8000350 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7c9a      	ldrb	r2, [r3, #18]
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <wizchip_setnetinfo+0x78>)
 8001970:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7cda      	ldrb	r2, [r3, #19]
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <wizchip_setnetinfo+0x78>)
 8001978:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7d1a      	ldrb	r2, [r3, #20]
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <wizchip_setnetinfo+0x78>)
 8001980:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7d5a      	ldrb	r2, [r3, #21]
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <wizchip_setnetinfo+0x78>)
 8001988:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7d9a      	ldrb	r2, [r3, #22]
 800198e:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <wizchip_setnetinfo+0x7c>)
 8001990:	701a      	strb	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000084 	.word	0x20000084
 80019a0:	20000088 	.word	0x20000088

080019a4 <csLOW>:
#include "main.h"
#include "W25Qxx.h"

uint8_t tempBytes[4];
void csLOW(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ae:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <csLOW+0x14>)
 80019b0:	f005 facf 	bl	8006f52 <HAL_GPIO_WritePin>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40010c00 	.word	0x40010c00

080019bc <csHIGH>:
void csHIGH(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019c6:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <csHIGH+0x14>)
 80019c8:	f005 fac3 	bl	8006f52 <HAL_GPIO_WritePin>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010c00 	.word	0x40010c00

080019d4 <W25Q_delay>:
void W25Q_delay(uint32_t time)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f003 fc59 	bl	8005294 <HAL_Delay>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <SPI_Write>:
void SPI_Write(uint8_t *data, uint16_t len)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 80019f8:	887a      	ldrh	r2, [r7, #2]
 80019fa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <SPI_Write+0x24>)
 8001a02:	f005 ffd9 	bl	80079b8 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&W25Q_SPI, data, len);
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000128 	.word	0x20000128

08001a14 <SPI_Read>:
void SPI_Read(uint8_t *data, uint16_t len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4803      	ldr	r0, [pc, #12]	@ (8001a38 <SPI_Read+0x24>)
 8001a2a:	f006 f909 	bl	8007c40 <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&W25Q_SPI, data, len);
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000128 	.word	0x20000128

08001a3c <W25Q_WaitForWriteEnd>:
//	uint8_t	ret;
//	HAL_SPI_TransmitReceive(&W25Q_SPI,&Data,&ret,1,100);
//	return ret;
//}
void W25Q_WaitForWriteEnd(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
	uint8_t w25q_stt;
	uint8_t tData = 0x05;
 8001a42:	2305      	movs	r3, #5
 8001a44:	71bb      	strb	r3, [r7, #6]
	W25Q_delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff ffc4 	bl	80019d4 <W25Q_delay>

	csLOW();
 8001a4c:	f7ff ffaa 	bl	80019a4 <csLOW>
	HAL_SPI_Transmit(&W25Q_SPI, &tData, 1, 1000);
 8001a50:	1db9      	adds	r1, r7, #6
 8001a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a56:	2201      	movs	r2, #1
 8001a58:	480b      	ldr	r0, [pc, #44]	@ (8001a88 <W25Q_WaitForWriteEnd+0x4c>)
 8001a5a:	f005 ffad 	bl	80079b8 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&W25Q_SPI, &tData, 1);
	do
	{
		HAL_SPI_Receive(&W25Q_SPI, &w25q_stt, 1, 1000);
 8001a5e:	1df9      	adds	r1, r7, #7
 8001a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a64:	2201      	movs	r2, #1
 8001a66:	4808      	ldr	r0, [pc, #32]	@ (8001a88 <W25Q_WaitForWriteEnd+0x4c>)
 8001a68:	f006 f8ea 	bl	8007c40 <HAL_SPI_Receive>
//		HAL_SPI_Receive_DMA(&W25Q_SPI, &w25q_stt, 1);
		W25Q_delay(1);
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f7ff ffb1 	bl	80019d4 <W25Q_delay>
	}
	while ((w25q_stt & 0x01) == 0x01);
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <W25Q_WaitForWriteEnd+0x22>
	csHIGH();
 8001a7c:	f7ff ff9e 	bl	80019bc <csHIGH>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000128 	.word	0x20000128

08001a8c <W25Q_Reset>:
void W25Q_Reset (void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x66; //  enable reset
 8001a92:	2366      	movs	r3, #102	@ 0x66
 8001a94:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99; //reset
 8001a96:	2399      	movs	r3, #153	@ 0x99
 8001a98:	717b      	strb	r3, [r7, #5]
	csLOW();
 8001a9a:	f7ff ff83 	bl	80019a4 <csLOW>
	HAL_SPI_Transmit(&W25Q_SPI, tData, 2, 1000);
 8001a9e:	1d39      	adds	r1, r7, #4
 8001aa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4804      	ldr	r0, [pc, #16]	@ (8001ab8 <W25Q_Reset+0x2c>)
 8001aa8:	f005 ff86 	bl	80079b8 <HAL_SPI_Transmit>
	csHIGH();
 8001aac:	f7ff ff86 	bl	80019bc <csHIGH>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000128 	.word	0x20000128

08001abc <W25Q_FastRead>:
	}
	SPI_Read(rData, size);
	csHIGH();
}
void W25Q_FastRead(uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
 8001ad0:	7afb      	ldrb	r3, [r7, #11]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	61fb      	str	r3, [r7, #28]
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x0B;// enable fast read
 8001ad6:	230b      	movs	r3, #11
 8001ad8:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	763b      	strb	r3, [r7, #24]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;// LSB addr;
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		tData[5] = 0;
	}
	csLOW();
 8001af4:	f7ff ff56 	bl	80019a4 <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 5);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2105      	movs	r1, #5
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff74 	bl	80019ec <SPI_Write>
	} else
	{
		SPI_Write(tData, 6);
	}
	SPI_Read(rData, size);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6838      	ldr	r0, [r7, #0]
 8001b0c:	f7ff ff82 	bl	8001a14 <SPI_Read>
	csHIGH();
 8001b10:	f7ff ff54 	bl	80019bc <csHIGH>
}
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <W25Q_FastRead_address>:

void W25Q_FastRead_address(uint32_t memAddr, uint32_t size, uint8_t *rData)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
	uint8_t tData[6];
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x0B;// enable fast read
 8001b28:	230b      	movs	r3, #11
 8001b2a:	743b      	strb	r3, [r7, #16]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	0c1b      	lsrs	r3, r3, #16
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	747b      	strb	r3, [r7, #17]
		tData[2] = (memAddr>>8)&0xFF;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	74bb      	strb	r3, [r7, #18]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	74fb      	strb	r3, [r7, #19]
		tData[4] = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	753b      	strb	r3, [r7, #20]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;// LSB addr;
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		tData[5] = 0;
	}
	csLOW();
 8001b46:	f7ff ff2d 	bl	80019a4 <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 5);
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	2105      	movs	r1, #5
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff4b 	bl	80019ec <SPI_Write>
	} else
	{
		SPI_Write(tData, 6);
	}
	SPI_Read(rData, size);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff59 	bl	8001a14 <SPI_Read>
	csHIGH();
 8001b62:	f7ff ff2b 	bl	80019bc <csHIGH>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <write_enable>:


void write_enable(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06; // enable write
 8001b74:	2306      	movs	r3, #6
 8001b76:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001b78:	f7ff ff14 	bl	80019a4 <csLOW>
	SPI_Write(&tData, 1);
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff33 	bl	80019ec <SPI_Write>
	csHIGH();
 8001b86:	f7ff ff19 	bl	80019bc <csHIGH>
	W25Q_delay(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff ff22 	bl	80019d4 <W25Q_delay>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <write_disable>:
void write_disable(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04; // disable write
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001ba2:	f7ff feff 	bl	80019a4 <csLOW>
	SPI_Write(&tData, 1);
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff1e 	bl	80019ec <SPI_Write>
	csHIGH();
 8001bb0:	f7ff ff04 	bl	80019bc <csHIGH>
	W25Q_delay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff ff0d 	bl	80019d4 <W25Q_delay>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <W25Q_EraseChip>:
{
	if ((size+offset)<4096) return size;
	else return 4096-offset;
}
void W25Q_EraseChip(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
	uint8_t tData = 0xC7;
 8001bc8:	23c7      	movs	r3, #199	@ 0xc7
 8001bca:	71fb      	strb	r3, [r7, #7]
	write_enable();
 8001bcc:	f7ff ffcf 	bl	8001b6e <write_enable>
	csLOW();
 8001bd0:	f7ff fee8 	bl	80019a4 <csLOW>
	SPI_Write(&tData, 1);
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff07 	bl	80019ec <SPI_Write>
	csHIGH();
 8001bde:	f7ff feed 	bl	80019bc <csHIGH>
	W25Q_WaitForWriteEnd();
 8001be2:	f7ff ff2b 	bl	8001a3c <W25Q_WaitForWriteEnd>
	W25Q_delay(5);
 8001be6:	2005      	movs	r0, #5
 8001be8:	f7ff fef4 	bl	80019d4 <W25Q_delay>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <W25Q_Erase_Sector>:
void W25Q_Erase_Sector (uint16_t numsector)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256; // mỗi sector có 16 page * 256 byte
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	031b      	lsls	r3, r3, #12
 8001c02:	617b      	str	r3, [r7, #20]
	W25Q_WaitForWriteEnd();
 8001c04:	f7ff ff1a 	bl	8001a3c <W25Q_WaitForWriteEnd>
	write_enable();
 8001c08:	f7ff ffb1 	bl	8001b6e <write_enable>
	if (numBLOCK<512)
	{
		tData[0] = 0x20;//Erase sector
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	0c1b      	lsrs	r3, r3, #16
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	73fb      	strb	r3, [r7, #15]
		csLOW();
 8001c26:	f7ff febd 	bl	80019a4 <csLOW>
		SPI_Write(tData, 4);
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2104      	movs	r1, #4
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fedb 	bl	80019ec <SPI_Write>
		csHIGH();
 8001c36:	f7ff fec1 	bl	80019bc <csHIGH>
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		csLOW();
		SPI_Write(tData, 5);
		csHIGH();
	}
	W25Q_WaitForWriteEnd();
 8001c3a:	f7ff feff 	bl	8001a3c <W25Q_WaitForWriteEnd>
	write_disable();
 8001c3e:	f7ff ffab 	bl	8001b98 <write_disable>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <W25Q_Read_Byte>:
		dataindx = dataindx + bytesRemaining;
		size = size - bytesRemaining;
	}
}
uint8_t W25Q_Read_Byte(uint32_t Addr)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	uint8_t tData[5];
	uint8_t rData;
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x03;// enable read
 8001c52:	2303      	movs	r3, #3
 8001c54:	743b      	strb	r3, [r7, #16]
		tData[1] = (Addr>>16)&0xFF;// MSB addr
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	747b      	strb	r3, [r7, #17]
		tData[2] = (Addr>>8)&0xFF;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	74bb      	strb	r3, [r7, #18]
		tData[3] = (Addr>>0)&0xFF;// LSB addr
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	74fb      	strb	r3, [r7, #19]
		tData[1] = (Addr>>24)&0xFF;// MSB addr
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;// LSB addr;
		tData[4] = (Addr>>0)&0xFF;// LSB addr
	}
	csLOW();
 8001c6c:	f7ff fe9a 	bl	80019a4 <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 4);
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	2104      	movs	r1, #4
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff feb8 	bl	80019ec <SPI_Write>
	} else
	{
		SPI_Write(tData, 5);
	}
	SPI_Read(&rData, 1);
 8001c7c:	f107 030f 	add.w	r3, r7, #15
 8001c80:	2101      	movs	r1, #1
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fec6 	bl	8001a14 <SPI_Read>
	csHIGH();
 8001c88:	f7ff fe98 	bl	80019bc <csHIGH>
	return rData;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <W25Q_Write_Nbytes>:
		W25Q_WaitForWriteEnd();
		write_disable();
	}
}
void W25Q_Write_Nbytes(uint32_t Addr, uint8_t *data, uint32_t len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b0c8      	sub	sp, #288	@ 0x120
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ca0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ca4:	6018      	str	r0, [r3, #0]
 8001ca6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001caa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001cae:	6019      	str	r1, [r3, #0]
 8001cb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cb4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cb8:	601a      	str	r2, [r3, #0]
	uint8_t tData[266];
	uint8_t indx;
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x02;// enable read
 8001cba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cbe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	701a      	strb	r2, [r3, #0]
		tData[1] = (Addr>>16)&0xFF;// MSB addr
 8001cc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cd8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cdc:	705a      	strb	r2, [r3, #1]
		tData[2] = (Addr>>8)&0xFF;
 8001cde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ce2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cf0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cf4:	709a      	strb	r2, [r3, #2]
		tData[3] = (Addr>>0)&0xFF;// LSB addr
 8001cf6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cfa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d06:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d0a:	70da      	strb	r2, [r3, #3]
		indx = 4;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;// LSB addr;
		tData[4] = (Addr>>0)&0xFF;// LSB addr
		indx = 5;
	}
	uint16_t bytestosend = len + indx;
 8001d12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d1c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
	for (uint16_t i=0; i<len; i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8001d30:	e018      	b.n	8001d64 <W25Q_Write_Nbytes+0xce>
	{
		tData[indx++] = data[i];
 8001d32:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d36:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d3a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	441a      	add	r2, r3
 8001d42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001d46:	1c59      	adds	r1, r3, #1
 8001d48:	f887 111f 	strb.w	r1, [r7, #287]	@ 0x11f
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d58:	545a      	strb	r2, [r3, r1]
	for (uint16_t i=0; i<len; i++)
 8001d5a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8001d64:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d68:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d6c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d8dd      	bhi.n	8001d32 <W25Q_Write_Nbytes+0x9c>
	}
	if (W25Q_Read_Byte(Addr) == 0xFF)
 8001d76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	f7ff ff63 	bl	8001c4a <W25Q_Read_Byte>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2bff      	cmp	r3, #255	@ 0xff
 8001d88:	d12b      	bne.n	8001de2 <W25Q_Write_Nbytes+0x14c>
	{
		write_enable();
 8001d8a:	f7ff fef0 	bl	8001b6e <write_enable>
		if (bytestosend > 250)
 8001d8e:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8001d92:	2bfa      	cmp	r3, #250	@ 0xfa
 8001d94:	d915      	bls.n	8001dc2 <W25Q_Write_Nbytes+0x12c>
		{
			csLOW();
 8001d96:	f7ff fe05 	bl	80019a4 <csLOW>
			SPI_Write(tData, 100);
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	2164      	movs	r1, #100	@ 0x64
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fe23 	bl	80019ec <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 8001da6:	f107 0310 	add.w	r3, r7, #16
 8001daa:	3364      	adds	r3, #100	@ 0x64
 8001dac:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8001db0:	3a64      	subs	r2, #100	@ 0x64
 8001db2:	b292      	uxth	r2, r2
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fe18 	bl	80019ec <SPI_Write>
			csHIGH();
 8001dbc:	f7ff fdfe 	bl	80019bc <csHIGH>
 8001dc0:	e00b      	b.n	8001dda <W25Q_Write_Nbytes+0x144>
		} else
		{
			csLOW();
 8001dc2:	f7ff fdef 	bl	80019a4 <csLOW>
			SPI_Write(tData, bytestosend);
 8001dc6:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fe0b 	bl	80019ec <SPI_Write>
			csHIGH();
 8001dd6:	f7ff fdf1 	bl	80019bc <csHIGH>
		}
//		W25Q_delay(5);
		W25Q_WaitForWriteEnd();
 8001dda:	f7ff fe2f 	bl	8001a3c <W25Q_WaitForWriteEnd>
		write_disable();
 8001dde:	f7ff fedb 	bl	8001b98 <write_disable>
	}
}
 8001de2:	bf00      	nop
 8001de4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == huart1.Instance)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b78      	ldr	r3, [pc, #480]	@ (8001fe0 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 819f 	bne.w	8002144 <HAL_UARTEx_RxEventCallback+0x358>
	{
		heardbit_REB = HAL_GetTick(); // Heard bit from REB
 8001e06:	f003 fa3b 	bl	8005280 <HAL_GetTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a75      	ldr	r2, [pc, #468]	@ (8001fe4 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8001e0e:	6013      	str	r3, [r2, #0]
		switch (uart_data[0])
 8001e10:	4b75      	ldr	r3, [pc, #468]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3b43      	subs	r3, #67	@ 0x43
 8001e16:	2b14      	cmp	r3, #20
 8001e18:	f200 8194 	bhi.w	8002144 <HAL_UARTEx_RxEventCallback+0x358>
 8001e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <HAL_UARTEx_RxEventCallback+0x38>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001ef3 	.word	0x08001ef3
 8001e28:	08001e79 	.word	0x08001e79
 8001e2c:	08002145 	.word	0x08002145
 8001e30:	08002145 	.word	0x08002145
 8001e34:	08002145 	.word	0x08002145
 8001e38:	08002145 	.word	0x08002145
 8001e3c:	08002145 	.word	0x08002145
 8001e40:	08002145 	.word	0x08002145
 8001e44:	08002145 	.word	0x08002145
 8001e48:	08002145 	.word	0x08002145
 8001e4c:	08002145 	.word	0x08002145
 8001e50:	08002145 	.word	0x08002145
 8001e54:	08002145 	.word	0x08002145
 8001e58:	08002145 	.word	0x08002145
 8001e5c:	08002145 	.word	0x08002145
 8001e60:	08001f5d 	.word	0x08001f5d
 8001e64:	08001f2f 	.word	0x08001f2f
 8001e68:	08002145 	.word	0x08002145
 8001e6c:	08002145 	.word	0x08002145
 8001e70:	08002145 	.word	0x08002145
 8001e74:	08001f7d 	.word	0x08001f7d
		{
		case 0x44: //Data: D
			wcode = uart_data[1]<<24|uart_data[2]<<16|uart_data[3]<<8|uart_data[4];
 8001e78:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001e7a:	785b      	ldrb	r3, [r3, #1]
 8001e7c:	061a      	lsls	r2, r3, #24
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001e80:	789b      	ldrb	r3, [r3, #2]
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	431a      	orrs	r2, r3
 8001e86:	4b58      	ldr	r3, [pc, #352]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001e88:	78db      	ldrb	r3, [r3, #3]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	4a56      	ldr	r2, [pc, #344]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001e90:	7912      	ldrb	r2, [r2, #4]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b55      	ldr	r3, [pc, #340]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x200>)
 8001e98:	601a      	str	r2, [r3, #0]
			if (!write_mode && !write_mode_somecard && !write_card_by_hand)
 8001e9a:	4b55      	ldr	r3, [pc, #340]	@ (8001ff0 <HAL_UARTEx_RxEventCallback+0x204>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	f083 0301 	eor.w	r3, r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <HAL_UARTEx_RxEventCallback+0xf4>
 8001ea8:	4b52      	ldr	r3, [pc, #328]	@ (8001ff4 <HAL_UARTEx_RxEventCallback+0x208>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d014      	beq.n	8001ee0 <HAL_UARTEx_RxEventCallback+0xf4>
 8001eb6:	4b50      	ldr	r3, [pc, #320]	@ (8001ff8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_UARTEx_RxEventCallback+0xf4>
			{
				sendData_eth("D", wcode);
 8001ec4:	4b49      	ldr	r3, [pc, #292]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x200>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	484c      	ldr	r0, [pc, #304]	@ (8001ffc <HAL_UARTEx_RxEventCallback+0x210>)
 8001ecc:	f002 f930 	bl	8004130 <sendData_eth>
				isSendDataEth = true;
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8002000 <HAL_UARTEx_RxEventCallback+0x214>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
				timeSendDataEth = HAL_GetTick();
 8001ed6:	f003 f9d3 	bl	8005280 <HAL_GetTick>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4a49      	ldr	r2, [pc, #292]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x218>)
 8001ede:	6013      	str	r3, [r2, #0]
			}
			if (write_card_by_hand)
 8001ee0:	4b45      	ldr	r3, [pc, #276]	@ (8001ff8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8128 	beq.w	800213a <HAL_UARTEx_RxEventCallback+0x34e>
			{
				new_wcode = true;
 8001eea:	4b47      	ldr	r3, [pc, #284]	@ (8002008 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001ef0:	e123      	b.n	800213a <HAL_UARTEx_RxEventCallback+0x34e>
		case 0x43://Comand: C
//			send_uart_to_REB = true;
			if (send_uart_to_REB)
 8001ef2:	4b46      	ldr	r3, [pc, #280]	@ (800200c <HAL_UARTEx_RxEventCallback+0x220>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_UARTEx_RxEventCallback+0x122>
			{
				send_uart_to_REB = false;
 8001efa:	4b44      	ldr	r3, [pc, #272]	@ (800200c <HAL_UARTEx_RxEventCallback+0x220>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
				sendData_uart("I", send_uart);
 8001f00:	4b43      	ldr	r3, [pc, #268]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x224>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4843      	ldr	r0, [pc, #268]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x228>)
 8001f08:	f002 fa4e 	bl	80043a8 <sendData_uart>
 8001f0c:	e005      	b.n	8001f1a <HAL_UARTEx_RxEventCallback+0x12e>
			} else
			{
				sendData_uart("I", uart_bypass);
 8001f0e:	4b42      	ldr	r3, [pc, #264]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x22c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	4619      	mov	r1, r3
 8001f14:	483f      	ldr	r0, [pc, #252]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x228>)
 8001f16:	f002 fa47 	bl	80043a8 <sendData_uart>
			}
//			time_send_uart = HAL_GetTick();
			bypass_from_REB = uart_data[4];
 8001f1a:	4b33      	ldr	r3, [pc, #204]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001f1c:	791b      	ldrb	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b3c      	ldr	r3, [pc, #240]	@ (800201c <HAL_UARTEx_RxEventCallback+0x230>)
 8001f2a:	701a      	strb	r2, [r3, #0]
			break;
 8001f2c:	e10a      	b.n	8002144 <HAL_UARTEx_RxEventCallback+0x358>
		case 0x53://setting: S
			Ethernet_setting = true;
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <HAL_UARTEx_RxEventCallback+0x234>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
			send_uart_to_PC = true;
 8001f34:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <HAL_UARTEx_RxEventCallback+0x238>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
			for (uint8_t i =0; i<23; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
 8001f3e:	e009      	b.n	8001f54 <HAL_UARTEx_RxEventCallback+0x168>
			{
				Ethernet_setting_data[i] = uart_data[i+1];
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	4928      	ldr	r1, [pc, #160]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001f48:	5c89      	ldrb	r1, [r1, r2]
 8001f4a:	4a37      	ldr	r2, [pc, #220]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x23c>)
 8001f4c:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i =0; i<23; i++)
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	3301      	adds	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	2b16      	cmp	r3, #22
 8001f58:	d9f2      	bls.n	8001f40 <HAL_UARTEx_RxEventCallback+0x154>
			}
			break;
 8001f5a:	e0f3      	b.n	8002144 <HAL_UARTEx_RxEventCallback+0x358>
		case 0x52://Read R
			if (uart_data[1] == 0x01)
 8001f5c:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001f5e:	785b      	ldrb	r3, [r3, #1]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	f040 80ec 	bne.w	800213e <HAL_UARTEx_RxEventCallback+0x352>
			{
				  Ethernet_read_and_reset = true;
 8001f66:	4b31      	ldr	r3, [pc, #196]	@ (800202c <HAL_UARTEx_RxEventCallback+0x240>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
				  Ethernet_read_and_reset_data = uart_data[1];
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001f6e:	785a      	ldrb	r2, [r3, #1]
 8001f70:	4b2f      	ldr	r3, [pc, #188]	@ (8002030 <HAL_UARTEx_RxEventCallback+0x244>)
 8001f72:	701a      	strb	r2, [r3, #0]
				  send_uart_to_PC = true;
 8001f74:	4b2b      	ldr	r3, [pc, #172]	@ (8002024 <HAL_UARTEx_RxEventCallback+0x238>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f7a:	e0e0      	b.n	800213e <HAL_UARTEx_RxEventCallback+0x352>
		case 0x57: // W
			switch (uart_data[1])
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001f7e:	785b      	ldrb	r3, [r3, #1]
 8001f80:	3b41      	subs	r3, #65	@ 0x41
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	f200 80dd 	bhi.w	8002142 <HAL_UARTEx_RxEventCallback+0x356>
 8001f88:	a201      	add	r2, pc, #4	@ (adr r2, 8001f90 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8e:	bf00      	nop
 8001f90:	08001fa5 	.word	0x08001fa5
 8001f94:	08002143 	.word	0x08002143
 8001f98:	0800212b 	.word	0x0800212b
 8001f9c:	0800203d 	.word	0x0800203d
 8001fa0:	08001fc3 	.word	0x08001fc3
			{
			case 0x41:// E: errase
				write_mode_somecard = true;
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <HAL_UARTEx_RxEventCallback+0x208>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
				time_break = HAL_GetTick();
 8001faa:	f003 f969 	bl	8005280 <HAL_GetTick>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a20      	ldr	r2, [pc, #128]	@ (8002034 <HAL_UARTEx_RxEventCallback+0x248>)
 8001fb2:	6013      	str	r3, [r2, #0]
				send_uart_to_PC = true;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_UARTEx_RxEventCallback+0x238>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
				add_card_uart = true;
 8001fba:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
				break;
 8001fc0:	e0ba      	b.n	8002138 <HAL_UARTEx_RxEventCallback+0x34c>
			case 0x45:// E: errase
				write_mode = true;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_UARTEx_RxEventCallback+0x204>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
				time_break = HAL_GetTick();
 8001fc8:	f003 f95a 	bl	8005280 <HAL_GetTick>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <HAL_UARTEx_RxEventCallback+0x248>)
 8001fd0:	6013      	str	r3, [r2, #0]
				send_uart_to_PC = true;
 8001fd2:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <HAL_UARTEx_RxEventCallback+0x238>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
				add_card_uart = true;
 8001fd8:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
				break;
 8001fde:	e0ab      	b.n	8002138 <HAL_UARTEx_RxEventCallback+0x34c>
 8001fe0:	20000210 	.word	0x20000210
 8001fe4:	200006b4 	.word	0x200006b4
 8001fe8:	200002d0 	.word	0x200002d0
 8001fec:	2000058c 	.word	0x2000058c
 8001ff0:	20000723 	.word	0x20000723
 8001ff4:	20000722 	.word	0x20000722
 8001ff8:	2000072c 	.word	0x2000072c
 8001ffc:	08009cc4 	.word	0x08009cc4
 8002000:	20000721 	.word	0x20000721
 8002004:	200006b8 	.word	0x200006b8
 8002008:	20000728 	.word	0x20000728
 800200c:	20000730 	.word	0x20000730
 8002010:	20000580 	.word	0x20000580
 8002014:	08009cc8 	.word	0x08009cc8
 8002018:	20000030 	.word	0x20000030
 800201c:	200006dc 	.word	0x200006dc
 8002020:	2000072a 	.word	0x2000072a
 8002024:	20000731 	.word	0x20000731
 8002028:	2000055c 	.word	0x2000055c
 800202c:	2000072d 	.word	0x2000072d
 8002030:	20000575 	.word	0x20000575
 8002034:	2000069c 	.word	0x2000069c
 8002038:	2000072b 	.word	0x2000072b
			case 0x44:
				write_user.STT++;
 800203c:	4b4a      	ldr	r3, [pc, #296]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a49      	ldr	r2, [pc, #292]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 8002044:	6013      	str	r3, [r2, #0]
				write_user.cardID =  uart_data[2]<<24|uart_data[3]<<16|uart_data[4]<<8|uart_data[5];
 8002046:	4b49      	ldr	r3, [pc, #292]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 8002048:	789b      	ldrb	r3, [r3, #2]
 800204a:	061a      	lsls	r2, r3, #24
 800204c:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 800204e:	78db      	ldrb	r3, [r3, #3]
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	431a      	orrs	r2, r3
 8002054:	4b45      	ldr	r3, [pc, #276]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 8002056:	791b      	ldrb	r3, [r3, #4]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	4313      	orrs	r3, r2
 800205c:	4a43      	ldr	r2, [pc, #268]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 800205e:	7952      	ldrb	r2, [r2, #5]
 8002060:	4313      	orrs	r3, r2
 8002062:	461a      	mov	r2, r3
 8002064:	4b40      	ldr	r3, [pc, #256]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 8002066:	605a      	str	r2, [r3, #4]
				write_user.permis[0] = uart_data[6];
 8002068:	4b40      	ldr	r3, [pc, #256]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 800206a:	799a      	ldrb	r2, [r3, #6]
 800206c:	4b3e      	ldr	r3, [pc, #248]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 800206e:	721a      	strb	r2, [r3, #8]
				write_user.permis[1] = uart_data[7];
 8002070:	4b3e      	ldr	r3, [pc, #248]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 8002072:	79da      	ldrb	r2, [r3, #7]
 8002074:	4b3c      	ldr	r3, [pc, #240]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 8002076:	725a      	strb	r2, [r3, #9]
				write_user.permis[2] = uart_data[8];
 8002078:	4b3c      	ldr	r3, [pc, #240]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 800207a:	7a1a      	ldrb	r2, [r3, #8]
 800207c:	4b3a      	ldr	r3, [pc, #232]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 800207e:	729a      	strb	r2, [r3, #10]
				write_user.permis[3] = uart_data[9];
 8002080:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 8002082:	7a5a      	ldrb	r2, [r3, #9]
 8002084:	4b38      	ldr	r3, [pc, #224]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 8002086:	72da      	strb	r2, [r3, #11]
				write_user.permis[4] = uart_data[10];
 8002088:	4b38      	ldr	r3, [pc, #224]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 800208a:	7a9a      	ldrb	r2, [r3, #10]
 800208c:	4b36      	ldr	r3, [pc, #216]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 800208e:	731a      	strb	r2, [r3, #12]
				write_user.permis[5] = uart_data[11];
 8002090:	4b36      	ldr	r3, [pc, #216]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 8002092:	7ada      	ldrb	r2, [r3, #11]
 8002094:	4b34      	ldr	r3, [pc, #208]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 8002096:	735a      	strb	r2, [r3, #13]
				write_user.permis[6] = uart_data[12];
 8002098:	4b34      	ldr	r3, [pc, #208]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 800209a:	7b1a      	ldrb	r2, [r3, #12]
 800209c:	4b32      	ldr	r3, [pc, #200]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 800209e:	739a      	strb	r2, [r3, #14]
				write_user.permis[7] = uart_data[13];
 80020a0:	4b32      	ldr	r3, [pc, #200]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 80020a2:	7b5a      	ldrb	r2, [r3, #13]
 80020a4:	4b30      	ldr	r3, [pc, #192]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 80020a6:	73da      	strb	r2, [r3, #15]
				write_user.beginDate = buf[14];
 80020a8:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 80020aa:	7b9a      	ldrb	r2, [r3, #14]
 80020ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 80020ae:	74da      	strb	r2, [r3, #19]
				write_user.beginMonth = buf[15];
 80020b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 80020b2:	7bda      	ldrb	r2, [r3, #15]
 80020b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 80020b6:	749a      	strb	r2, [r3, #18]
				write_user.beginYear = buf[16]<<8 | buf[17];
 80020b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 80020ba:	7c1b      	ldrb	r3, [r3, #16]
 80020bc:	b21b      	sxth	r3, r3
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 80020c4:	7c5b      	ldrb	r3, [r3, #17]
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	4313      	orrs	r3, r2
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 80020d0:	821a      	strh	r2, [r3, #16]
				write_user.beginHour = buf[18];
 80020d2:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 80020d4:	7c9a      	ldrb	r2, [r3, #18]
 80020d6:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 80020d8:	751a      	strb	r2, [r3, #20]
				write_user.beginMinute = buf[19];
 80020da:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 80020dc:	7cda      	ldrb	r2, [r3, #19]
 80020de:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 80020e0:	755a      	strb	r2, [r3, #21]
				write_user.endDate = buf[20];
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 80020e4:	7d1a      	ldrb	r2, [r3, #20]
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 80020e8:	765a      	strb	r2, [r3, #25]
				write_user.endMonth = buf[21];
 80020ea:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 80020ec:	7d5a      	ldrb	r2, [r3, #21]
 80020ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 80020f0:	761a      	strb	r2, [r3, #24]
				write_user.endYear = buf[22]<<8 | buf[23];
 80020f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 80020f4:	7d9b      	ldrb	r3, [r3, #22]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	b21a      	sxth	r2, r3
 80020fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 80020fe:	7ddb      	ldrb	r3, [r3, #23]
 8002100:	b21b      	sxth	r3, r3
 8002102:	4313      	orrs	r3, r2
 8002104:	b21b      	sxth	r3, r3
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 800210a:	82da      	strh	r2, [r3, #22]
				write_user.endHour = buf[24];
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 800210e:	7e1a      	ldrb	r2, [r3, #24]
 8002110:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 8002112:	769a      	strb	r2, [r3, #26]
				write_user.endMinute = buf[25];
 8002114:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x384>)
 8002116:	7e5a      	ldrb	r2, [r3, #25]
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x37c>)
 800211a:	76da      	strb	r2, [r3, #27]
				new_card = true;
 800211c:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <HAL_UARTEx_RxEventCallback+0x388>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
				send_uart_to_PC = true;
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_UARTEx_RxEventCallback+0x38c>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
				break;
 8002128:	e006      	b.n	8002138 <HAL_UARTEx_RxEventCallback+0x34c>
			case 0x43:
				write_done = true;
 800212a:	4b14      	ldr	r3, [pc, #80]	@ (800217c <HAL_UARTEx_RxEventCallback+0x390>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
				send_uart_to_PC = true;
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_UARTEx_RxEventCallback+0x38c>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
				break;
 8002136:	bf00      	nop
			}
			break;
 8002138:	e003      	b.n	8002142 <HAL_UARTEx_RxEventCallback+0x356>
			break;
 800213a:	bf00      	nop
 800213c:	e002      	b.n	8002144 <HAL_UARTEx_RxEventCallback+0x358>
			break;
 800213e:	bf00      	nop
 8002140:	e000      	b.n	8002144 <HAL_UARTEx_RxEventCallback+0x358>
			break;
 8002142:	bf00      	nop
		}
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 50);
 8002144:	2232      	movs	r2, #50	@ 0x32
 8002146:	4909      	ldr	r1, [pc, #36]	@ (800216c <HAL_UARTEx_RxEventCallback+0x380>)
 8002148:	480d      	ldr	r0, [pc, #52]	@ (8002180 <HAL_UARTEx_RxEventCallback+0x394>)
 800214a:	f006 fe12 	bl	8008d72 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800214e:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <HAL_UARTEx_RxEventCallback+0x398>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_UARTEx_RxEventCallback+0x398>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0204 	bic.w	r2, r2, #4
 800215c:	601a      	str	r2, [r3, #0]
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000794 	.word	0x20000794
 800216c:	200002d0 	.word	0x200002d0
 8002170:	20000304 	.word	0x20000304
 8002174:	20000725 	.word	0x20000725
 8002178:	20000731 	.word	0x20000731
 800217c:	20000724 	.word	0x20000724
 8002180:	20000210 	.word	0x20000210
 8002184:	20000258 	.word	0x20000258

08002188 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RST_Pin)
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	2b40      	cmp	r3, #64	@ 0x40
 8002196:	d145      	bne.n	8002224 <HAL_GPIO_EXTI_Callback+0x9c>
	{
		HAL_Delay(20);
 8002198:	2014      	movs	r0, #20
 800219a:	f003 f87b 	bl	8005294 <HAL_Delay>
		if (HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin) == 0)
 800219e:	2140      	movs	r1, #64	@ 0x40
 80021a0:	4822      	ldr	r0, [pc, #136]	@ (800222c <HAL_GPIO_EXTI_Callback+0xa4>)
 80021a2:	f004 febf 	bl	8006f24 <HAL_GPIO_ReadPin>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d13b      	bne.n	8002224 <HAL_GPIO_EXTI_Callback+0x9c>
		{
			RST_set = true;
 80021ac:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <HAL_GPIO_EXTI_Callback+0xa8>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
			RST_timer = HAL_GetTick();
 80021b2:	f003 f865 	bl	8005280 <HAL_GetTick>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002234 <HAL_GPIO_EXTI_Callback+0xac>)
 80021ba:	6013      	str	r3, [r2, #0]
			count_RST = 2000;
 80021bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <HAL_GPIO_EXTI_Callback+0xb0>)
 80021be:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80021c2:	601a      	str	r2, [r3, #0]
			while (!HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin))
 80021c4:	e027      	b.n	8002216 <HAL_GPIO_EXTI_Callback+0x8e>
			{
				RST_timer_last = HAL_GetTick() - RST_timer;
 80021c6:	f003 f85b 	bl	8005280 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <HAL_GPIO_EXTI_Callback+0xac>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	4a1a      	ldr	r2, [pc, #104]	@ (800223c <HAL_GPIO_EXTI_Callback+0xb4>)
 80021d4:	6013      	str	r3, [r2, #0]
//				if ((RST_timer_last > 5000) && (RST_timer_last < 10000))
//				{
//					count_RST = 500;
//				} else
				if (RST_timer_last > 10000)
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <HAL_GPIO_EXTI_Callback+0xb4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80021de:	4293      	cmp	r3, r2
 80021e0:	d902      	bls.n	80021e8 <HAL_GPIO_EXTI_Callback+0x60>
				{
					count_RST = 100;
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <HAL_GPIO_EXTI_Callback+0xb0>)
 80021e4:	2264      	movs	r2, #100	@ 0x64
 80021e6:	601a      	str	r2, [r3, #0]
				}
				if (HAL_GetTick() - RST_timer_now > count_RST)
 80021e8:	f003 f84a 	bl	8005280 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <HAL_GPIO_EXTI_Callback+0xb8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <HAL_GPIO_EXTI_Callback+0xb0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d909      	bls.n	8002210 <HAL_GPIO_EXTI_Callback+0x88>
				{
					RST_timer_now = HAL_GetTick();
 80021fc:	f003 f840 	bl	8005280 <HAL_GetTick>
 8002200:	4603      	mov	r3, r0
 8002202:	4a0f      	ldr	r2, [pc, #60]	@ (8002240 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002204:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8002206:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800220a:	480e      	ldr	r0, [pc, #56]	@ (8002244 <HAL_GPIO_EXTI_Callback+0xbc>)
 800220c:	f004 feb9 	bl	8006f82 <HAL_GPIO_TogglePin>
				}
				HAL_Delay(10);
 8002210:	200a      	movs	r0, #10
 8002212:	f003 f83f 	bl	8005294 <HAL_Delay>
			while (!HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin))
 8002216:	2140      	movs	r1, #64	@ 0x40
 8002218:	4804      	ldr	r0, [pc, #16]	@ (800222c <HAL_GPIO_EXTI_Callback+0xa4>)
 800221a:	f004 fe83 	bl	8006f24 <HAL_GPIO_ReadPin>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0d0      	beq.n	80021c6 <HAL_GPIO_EXTI_Callback+0x3e>
			}
		}
	}
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40010c00 	.word	0x40010c00
 8002230:	2000072e 	.word	0x2000072e
 8002234:	200006bc 	.word	0x200006bc
 8002238:	200006c8 	.word	0x200006c8
 800223c:	200006c4 	.word	0x200006c4
 8002240:	200006c0 	.word	0x200006c0
 8002244:	40011000 	.word	0x40011000

08002248 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af02      	add	r7, sp, #8
 800224e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b43      	ldr	r3, [pc, #268]	@ (8002364 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d169      	bne.n	8002330 <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		// calculator data
		if (counter_start < time_delay)
 800225c:	4b42      	ldr	r3, [pc, #264]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	4b42      	ldr	r3, [pc, #264]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d205      	bcs.n	8002274 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			counter_start++;
 8002268:	4b3f      	ldr	r3, [pc, #252]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b3d      	ldr	r3, [pc, #244]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002272:	701a      	strb	r2, [r3, #0]
		}
		if (write_mode || write_mode_somecard || unlock_fire || bypass_from_Eth || bypass_from_REB || !REB_connected || !HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin))
 8002274:	4b3e      	ldr	r3, [pc, #248]	@ (8002370 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d11d      	bne.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0x70>
 800227c:	4b3d      	ldr	r3, [pc, #244]	@ (8002374 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d119      	bne.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002284:	4b3c      	ldr	r3, [pc, #240]	@ (8002378 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d115      	bne.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0x70>
 800228c:	4b3b      	ldr	r3, [pc, #236]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d111      	bne.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002294:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10d      	bne.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0x70>
 800229c:	4b39      	ldr	r3, [pc, #228]	@ (8002384 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	f083 0301 	eor.w	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0x70>
 80022aa:	2104      	movs	r1, #4
 80022ac:	4836      	ldr	r0, [pc, #216]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80022ae:	f004 fe39 	bl	8006f24 <HAL_GPIO_ReadPin>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d121      	bne.n	80022fc <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
			data_MC2B[0] = 1;
 80022b8:	4b34      	ldr	r3, [pc, #208]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
			data_MC2B[1] = 0;
 80022be:	4b33      	ldr	r3, [pc, #204]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	705a      	strb	r2, [r3, #1]
			data_MC2B[2] = 0;
 80022c4:	4b31      	ldr	r3, [pc, #196]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	709a      	strb	r2, [r3, #2]
			data_MC2B[3] = 0;
 80022ca:	4b30      	ldr	r3, [pc, #192]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	70da      	strb	r2, [r3, #3]
			data_MC2B[4] = 0;
 80022d0:	4b2e      	ldr	r3, [pc, #184]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	711a      	strb	r2, [r3, #4]
			data_MC2B[5] = 0;
 80022d6:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80022d8:	2200      	movs	r2, #0
 80022da:	715a      	strb	r2, [r3, #5]
			data_MC2B[6] = 0;
 80022dc:	4b2b      	ldr	r3, [pc, #172]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80022de:	2200      	movs	r2, #0
 80022e0:	719a      	strb	r2, [r3, #6]
			data_MC2B[7] = 0;
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	71da      	strb	r2, [r3, #7]
			HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, 1);
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ee:	4828      	ldr	r0, [pc, #160]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80022f0:	f004 fe2f 	bl	8006f52 <HAL_GPIO_WritePin>
//			sendData_uart("I", 2);
			uart_bypass = 2;
 80022f4:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80022f6:	2202      	movs	r2, #2
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e013      	b.n	8002324 <HAL_TIM_PeriodElapsedCallback+0xdc>
//			send_uart_to_REB = true;
		} else
		{
			calculate_data_can(x, x_timer, data_MC2B, lock_default, time_delay, &counter_start);
 80022fc:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4a19      	ldr	r2, [pc, #100]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002302:	9201      	str	r2, [sp, #4]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	4b24      	ldr	r3, [pc, #144]	@ (8002398 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002308:	4a20      	ldr	r2, [pc, #128]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800230a:	4924      	ldr	r1, [pc, #144]	@ (800239c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800230c:	4824      	ldr	r0, [pc, #144]	@ (80023a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800230e:	f002 fa8d 	bl	800482c <calculate_data_can>
			HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002318:	481d      	ldr	r0, [pc, #116]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800231a:	f004 fe1a 	bl	8006f52 <HAL_GPIO_WritePin>
			uart_bypass = 3;
 800231e:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002320:	2203      	movs	r2, #3
 8002322:	701a      	strb	r2, [r3, #0]
	//		send_uart_to_REB = true;
		}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader_MC2B, data_MC2B, &TxMailbox);
 8002324:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002326:	4a19      	ldr	r2, [pc, #100]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002328:	491f      	ldr	r1, [pc, #124]	@ (80023a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800232a:	4820      	ldr	r0, [pc, #128]	@ (80023ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 800232c:	f003 f9fc 	bl	8005728 <HAL_CAN_AddTxMessage>
//		sendData_uart("I", 3);
	}
	if (htim->Instance == htim3.Instance)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d10e      	bne.n	800235a <HAL_TIM_PeriodElapsedCallback+0x112>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800233c:	481d      	ldr	r0, [pc, #116]	@ (80023b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800233e:	f004 fe95 	bl	800706c <HAL_IWDG_Refresh>
		if (!RST_set)
 8002342:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f083 0301 	eor.w	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_TIM_PeriodElapsedCallback+0x112>
		{
			HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8002350:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002354:	480e      	ldr	r0, [pc, #56]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002356:	f004 fe14 	bl	8006f82 <HAL_GPIO_TogglePin>
		}
	}
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000180 	.word	0x20000180
 8002368:	20000576 	.word	0x20000576
 800236c:	20000510 	.word	0x20000510
 8002370:	20000723 	.word	0x20000723
 8002374:	20000722 	.word	0x20000722
 8002378:	2000072f 	.word	0x2000072f
 800237c:	200006dd 	.word	0x200006dd
 8002380:	200006dc 	.word	0x200006dc
 8002384:	20000036 	.word	0x20000036
 8002388:	40010800 	.word	0x40010800
 800238c:	20000544 	.word	0x20000544
 8002390:	40011000 	.word	0x40011000
 8002394:	20000030 	.word	0x20000030
 8002398:	20000514 	.word	0x20000514
 800239c:	20000594 	.word	0x20000594
 80023a0:	200006e0 	.word	0x200006e0
 80023a4:	20000590 	.word	0x20000590
 80023a8:	200002b8 	.word	0x200002b8
 80023ac:	2000009c 	.word	0x2000009c
 80023b0:	200001c8 	.word	0x200001c8
 80023b4:	200000c4 	.word	0x200000c4
 80023b8:	2000072e 	.word	0x2000072e

080023bc <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80023c4:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80023c6:	4a13      	ldr	r2, [pc, #76]	@ (8002414 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80023c8:	2100      	movs	r1, #0
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f003 faf3 	bl	80059b6 <HAL_CAN_GetRxMessage>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
	    Error_Handler();
 80023d6:	f002 fc91 	bl	8004cfc <Error_Handler>
	}
	if (RxHeader.StdId == 0x740 && RxData[2] == 0x48)
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 80023e2:	d110      	bne.n	8002406 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 80023e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80023e6:	789b      	ldrb	r3, [r3, #2]
 80023e8:	2b48      	cmp	r3, #72	@ 0x48
 80023ea:	d10c      	bne.n	8002406 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	{
		if ((RxData[4] & 0x40) == 0x40)
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80023ee:	791b      	ldrb	r3, [r3, #4]
 80023f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		{
			unlock_fire = true;
 80023f8:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
		} else
		{
			unlock_fire = false;
		}
	}
}
 80023fe:	e002      	b.n	8002406 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
			unlock_fire = false;
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000578 	.word	0x20000578
 8002414:	2000029c 	.word	0x2000029c
 8002418:	2000072f 	.word	0x2000072f

0800241c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800241c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241e:	b0b5      	sub	sp, #212	@ 0xd4
 8002420:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002422:	f002 fed5 	bl	80051d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002426:	f001 fbb9 	bl	8003b9c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_DBGMCU_FREEZE_IWDG();
 800242a:	4b92      	ldr	r3, [pc, #584]	@ (8002674 <main+0x258>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a91      	ldr	r2, [pc, #580]	@ (8002674 <main+0x258>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002434:	6053      	str	r3, [r2, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002436:	f001 fd99 	bl	8003f6c <MX_GPIO_Init>
  MX_DMA_Init();
 800243a:	f001 fd79 	bl	8003f30 <MX_DMA_Init>
  MX_CAN_Init();
 800243e:	f001 fbf5 	bl	8003c2c <MX_CAN_Init>
  MX_SPI1_Init();
 8002442:	f001 fc43 	bl	8003ccc <MX_SPI1_Init>
  MX_SPI2_Init();
 8002446:	f001 fc77 	bl	8003d38 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800244a:	f001 fd47 	bl	8003edc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800244e:	f001 fcf7 	bl	8003e40 <MX_TIM3_Init>
  MX_IWDG_Init();
 8002452:	f001 fc21 	bl	8003c98 <MX_IWDG_Init>
  MX_TIM2_Init();
 8002456:	f001 fca5 	bl	8003da4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800245a:	4887      	ldr	r0, [pc, #540]	@ (8002678 <main+0x25c>)
 800245c:	f006 f80c 	bl	8008478 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 50);
 8002460:	2232      	movs	r2, #50	@ 0x32
 8002462:	4986      	ldr	r1, [pc, #536]	@ (800267c <main+0x260>)
 8002464:	4886      	ldr	r0, [pc, #536]	@ (8002680 <main+0x264>)
 8002466:	f006 fc84 	bl	8008d72 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800246a:	4b86      	ldr	r3, [pc, #536]	@ (8002684 <main+0x268>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b84      	ldr	r3, [pc, #528]	@ (8002684 <main+0x268>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0204 	bic.w	r2, r2, #4
 8002478:	601a      	str	r2, [r3, #0]
  TxHeader_MC2B.DLC = 8;
 800247a:	4b83      	ldr	r3, [pc, #524]	@ (8002688 <main+0x26c>)
 800247c:	2208      	movs	r2, #8
 800247e:	611a      	str	r2, [r3, #16]
  TxHeader_MC2B.ExtId = 0x47FF;
 8002480:	4b81      	ldr	r3, [pc, #516]	@ (8002688 <main+0x26c>)
 8002482:	f244 72ff 	movw	r2, #18431	@ 0x47ff
 8002486:	605a      	str	r2, [r3, #4]
  TxHeader_MC2B.IDE = CAN_ID_EXT;
 8002488:	4b7f      	ldr	r3, [pc, #508]	@ (8002688 <main+0x26c>)
 800248a:	2204      	movs	r2, #4
 800248c:	609a      	str	r2, [r3, #8]
  TxHeader_MC2B.RTR = CAN_RTR_DATA;
 800248e:	4b7e      	ldr	r3, [pc, #504]	@ (8002688 <main+0x26c>)
 8002490:	2200      	movs	r2, #0
 8002492:	60da      	str	r2, [r3, #12]
  TxHeader_MC2B.StdId = 0;
 8002494:	4b7c      	ldr	r3, [pc, #496]	@ (8002688 <main+0x26c>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
  TxHeader_MC2B.TransmitGlobalTime = DISABLE;
 800249a:	4b7b      	ldr	r3, [pc, #492]	@ (8002688 <main+0x26c>)
 800249c:	2200      	movs	r2, #0
 800249e:	751a      	strb	r2, [r3, #20]

  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80024a0:	4b7a      	ldr	r3, [pc, #488]	@ (800268c <main+0x270>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
  EraseInit.Banks = FLASH_BANK_1;
 80024a6:	4b79      	ldr	r3, [pc, #484]	@ (800268c <main+0x270>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	605a      	str	r2, [r3, #4]
  EraseInit.PageAddress =  0x0800FC00;
 80024ac:	4b77      	ldr	r3, [pc, #476]	@ (800268c <main+0x270>)
 80024ae:	4a78      	ldr	r2, [pc, #480]	@ (8002690 <main+0x274>)
 80024b0:	609a      	str	r2, [r3, #8]
  EraseInit.NbPages = 1;
 80024b2:	4b76      	ldr	r3, [pc, #472]	@ (800268c <main+0x270>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	60da      	str	r2, [r3, #12]
  ip1 = *(uint32_t *)(0x0800FC00);
 80024b8:	4b75      	ldr	r3, [pc, #468]	@ (8002690 <main+0x274>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4b75      	ldr	r3, [pc, #468]	@ (8002694 <main+0x278>)
 80024c0:	701a      	strb	r2, [r3, #0]
  ip2 = *(uint32_t *)(0x0800FC04);
 80024c2:	4b75      	ldr	r3, [pc, #468]	@ (8002698 <main+0x27c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b74      	ldr	r3, [pc, #464]	@ (800269c <main+0x280>)
 80024ca:	701a      	strb	r2, [r3, #0]
  ip3 = *(uint32_t *)(0x0800FC08);
 80024cc:	4b74      	ldr	r3, [pc, #464]	@ (80026a0 <main+0x284>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b74      	ldr	r3, [pc, #464]	@ (80026a4 <main+0x288>)
 80024d4:	701a      	strb	r2, [r3, #0]
  ip4 = *(uint32_t *)(0x0800FC0C);
 80024d6:	4b74      	ldr	r3, [pc, #464]	@ (80026a8 <main+0x28c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b73      	ldr	r3, [pc, #460]	@ (80026ac <main+0x290>)
 80024de:	701a      	strb	r2, [r3, #0]
  port_client = *(uint32_t *)(0x0800FC10);
 80024e0:	4b73      	ldr	r3, [pc, #460]	@ (80026b0 <main+0x294>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	4b73      	ldr	r3, [pc, #460]	@ (80026b4 <main+0x298>)
 80024e8:	801a      	strh	r2, [r3, #0]
  ip_server1 = *(uint32_t *)(0x0800FC14);
 80024ea:	4b73      	ldr	r3, [pc, #460]	@ (80026b8 <main+0x29c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b72      	ldr	r3, [pc, #456]	@ (80026bc <main+0x2a0>)
 80024f2:	701a      	strb	r2, [r3, #0]
  ip_server2 = *(uint32_t *)(0x0800FC18);
 80024f4:	4b72      	ldr	r3, [pc, #456]	@ (80026c0 <main+0x2a4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b72      	ldr	r3, [pc, #456]	@ (80026c4 <main+0x2a8>)
 80024fc:	701a      	strb	r2, [r3, #0]
  ip_server3 = *(uint32_t *)(0x0800FC1C);
 80024fe:	4b72      	ldr	r3, [pc, #456]	@ (80026c8 <main+0x2ac>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b71      	ldr	r3, [pc, #452]	@ (80026cc <main+0x2b0>)
 8002506:	701a      	strb	r2, [r3, #0]
  ip_server4 = *(uint32_t *)(0x0800FC20);
 8002508:	4b71      	ldr	r3, [pc, #452]	@ (80026d0 <main+0x2b4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b71      	ldr	r3, [pc, #452]	@ (80026d4 <main+0x2b8>)
 8002510:	701a      	strb	r2, [r3, #0]
  port_server = *(uint32_t *)(0x0800FC24);
 8002512:	4b71      	ldr	r3, [pc, #452]	@ (80026d8 <main+0x2bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29a      	uxth	r2, r3
 8002518:	4b70      	ldr	r3, [pc, #448]	@ (80026dc <main+0x2c0>)
 800251a:	801a      	strh	r2, [r3, #0]
  time_delay = *(uint32_t *)(0x0800FC28);
 800251c:	4b70      	ldr	r3, [pc, #448]	@ (80026e0 <main+0x2c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b70      	ldr	r3, [pc, #448]	@ (80026e4 <main+0x2c8>)
 8002524:	701a      	strb	r2, [r3, #0]
  elevator_mode = *(uint32_t *)(0x0800FC2C);
 8002526:	4b70      	ldr	r3, [pc, #448]	@ (80026e8 <main+0x2cc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b6f      	ldr	r3, [pc, #444]	@ (80026ec <main+0x2d0>)
 800252e:	701a      	strb	r2, [r3, #0]
  lock_default_1 = *(uint32_t *)(0x0800FC30);
 8002530:	4b6f      	ldr	r3, [pc, #444]	@ (80026f0 <main+0x2d4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6f      	ldr	r2, [pc, #444]	@ (80026f4 <main+0x2d8>)
 8002536:	6013      	str	r3, [r2, #0]
  lock_default_2 = *(uint32_t *)(0x0800FC34);
 8002538:	4b6f      	ldr	r3, [pc, #444]	@ (80026f8 <main+0x2dc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6f      	ldr	r2, [pc, #444]	@ (80026fc <main+0x2e0>)
 800253e:	6013      	str	r3, [r2, #0]
  if (ip1 == 0xFF) ip1 = 192;
 8002540:	4b54      	ldr	r3, [pc, #336]	@ (8002694 <main+0x278>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2bff      	cmp	r3, #255	@ 0xff
 8002546:	d102      	bne.n	800254e <main+0x132>
 8002548:	4b52      	ldr	r3, [pc, #328]	@ (8002694 <main+0x278>)
 800254a:	22c0      	movs	r2, #192	@ 0xc0
 800254c:	701a      	strb	r2, [r3, #0]
  if (ip2 == 0xFF) ip2 = 168;
 800254e:	4b53      	ldr	r3, [pc, #332]	@ (800269c <main+0x280>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2bff      	cmp	r3, #255	@ 0xff
 8002554:	d102      	bne.n	800255c <main+0x140>
 8002556:	4b51      	ldr	r3, [pc, #324]	@ (800269c <main+0x280>)
 8002558:	22a8      	movs	r2, #168	@ 0xa8
 800255a:	701a      	strb	r2, [r3, #0]
  if (ip3 == 0xFF) ip3 = 0;
 800255c:	4b51      	ldr	r3, [pc, #324]	@ (80026a4 <main+0x288>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2bff      	cmp	r3, #255	@ 0xff
 8002562:	d102      	bne.n	800256a <main+0x14e>
 8002564:	4b4f      	ldr	r3, [pc, #316]	@ (80026a4 <main+0x288>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
  if (ip4 == 0xFF) ip4 = 72;
 800256a:	4b50      	ldr	r3, [pc, #320]	@ (80026ac <main+0x290>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2bff      	cmp	r3, #255	@ 0xff
 8002570:	d102      	bne.n	8002578 <main+0x15c>
 8002572:	4b4e      	ldr	r3, [pc, #312]	@ (80026ac <main+0x290>)
 8002574:	2248      	movs	r2, #72	@ 0x48
 8002576:	701a      	strb	r2, [r3, #0]
  if (port_client == 0xFFFF) port_client = 0;
 8002578:	4b4e      	ldr	r3, [pc, #312]	@ (80026b4 <main+0x298>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002580:	4293      	cmp	r3, r2
 8002582:	d102      	bne.n	800258a <main+0x16e>
 8002584:	4b4b      	ldr	r3, [pc, #300]	@ (80026b4 <main+0x298>)
 8002586:	2200      	movs	r2, #0
 8002588:	801a      	strh	r2, [r3, #0]
  if (ip_server1 == 0xFF) ip_server1 = 192;
 800258a:	4b4c      	ldr	r3, [pc, #304]	@ (80026bc <main+0x2a0>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2bff      	cmp	r3, #255	@ 0xff
 8002590:	d102      	bne.n	8002598 <main+0x17c>
 8002592:	4b4a      	ldr	r3, [pc, #296]	@ (80026bc <main+0x2a0>)
 8002594:	22c0      	movs	r2, #192	@ 0xc0
 8002596:	701a      	strb	r2, [r3, #0]
  if (ip_server2 == 0xFF) ip_server2 = 168;
 8002598:	4b4a      	ldr	r3, [pc, #296]	@ (80026c4 <main+0x2a8>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2bff      	cmp	r3, #255	@ 0xff
 800259e:	d102      	bne.n	80025a6 <main+0x18a>
 80025a0:	4b48      	ldr	r3, [pc, #288]	@ (80026c4 <main+0x2a8>)
 80025a2:	22a8      	movs	r2, #168	@ 0xa8
 80025a4:	701a      	strb	r2, [r3, #0]
  if (ip_server3 == 0xFF) ip_server3 = 0;
 80025a6:	4b49      	ldr	r3, [pc, #292]	@ (80026cc <main+0x2b0>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2bff      	cmp	r3, #255	@ 0xff
 80025ac:	d102      	bne.n	80025b4 <main+0x198>
 80025ae:	4b47      	ldr	r3, [pc, #284]	@ (80026cc <main+0x2b0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
  if (ip_server4 == 0xFF) ip_server4 = 2;
 80025b4:	4b47      	ldr	r3, [pc, #284]	@ (80026d4 <main+0x2b8>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2bff      	cmp	r3, #255	@ 0xff
 80025ba:	d102      	bne.n	80025c2 <main+0x1a6>
 80025bc:	4b45      	ldr	r3, [pc, #276]	@ (80026d4 <main+0x2b8>)
 80025be:	2202      	movs	r2, #2
 80025c0:	701a      	strb	r2, [r3, #0]
  if (port_server == 0xFFFF) port_server = 6000;
 80025c2:	4b46      	ldr	r3, [pc, #280]	@ (80026dc <main+0x2c0>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d103      	bne.n	80025d6 <main+0x1ba>
 80025ce:	4b43      	ldr	r3, [pc, #268]	@ (80026dc <main+0x2c0>)
 80025d0:	f241 7270 	movw	r2, #6000	@ 0x1770
 80025d4:	801a      	strh	r2, [r3, #0]
  if (time_delay == 0xFF) time_delay = 1;
 80025d6:	4b43      	ldr	r3, [pc, #268]	@ (80026e4 <main+0x2c8>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2bff      	cmp	r3, #255	@ 0xff
 80025dc:	d102      	bne.n	80025e4 <main+0x1c8>
 80025de:	4b41      	ldr	r3, [pc, #260]	@ (80026e4 <main+0x2c8>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
  if (elevator_mode == 0xFF) elevator_mode = 0;
 80025e4:	4b41      	ldr	r3, [pc, #260]	@ (80026ec <main+0x2d0>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2bff      	cmp	r3, #255	@ 0xff
 80025ea:	d102      	bne.n	80025f2 <main+0x1d6>
 80025ec:	4b3f      	ldr	r3, [pc, #252]	@ (80026ec <main+0x2d0>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
//  if (lock_default_1 == 0xFFFFFFFF) lock_default_1 = 0;
//  if (lock_default_2 == 0xFFFFFFFF) lock_default_2 = 0;
  lock_default[0] = lock_default_1 & 0xFF;
 80025f2:	4b40      	ldr	r3, [pc, #256]	@ (80026f4 <main+0x2d8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b41      	ldr	r3, [pc, #260]	@ (8002700 <main+0x2e4>)
 80025fa:	701a      	strb	r2, [r3, #0]
  lock_default[1] = (lock_default_1>>8) & 0xFF;
 80025fc:	4b3d      	ldr	r3, [pc, #244]	@ (80026f4 <main+0x2d8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b3e      	ldr	r3, [pc, #248]	@ (8002700 <main+0x2e4>)
 8002606:	705a      	strb	r2, [r3, #1]
  lock_default[2] = (lock_default_1>>16) & 0xFF;
 8002608:	4b3a      	ldr	r3, [pc, #232]	@ (80026f4 <main+0x2d8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b3b      	ldr	r3, [pc, #236]	@ (8002700 <main+0x2e4>)
 8002612:	709a      	strb	r2, [r3, #2]
  lock_default[3] = (lock_default_1>>24) & 0xFF;
 8002614:	4b37      	ldr	r3, [pc, #220]	@ (80026f4 <main+0x2d8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e1b      	lsrs	r3, r3, #24
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b38      	ldr	r3, [pc, #224]	@ (8002700 <main+0x2e4>)
 800261e:	70da      	strb	r2, [r3, #3]
  lock_default[4] = lock_default_2 & 0xFF;
 8002620:	4b36      	ldr	r3, [pc, #216]	@ (80026fc <main+0x2e0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <main+0x2e4>)
 8002628:	711a      	strb	r2, [r3, #4]
  lock_default[5] = (lock_default_2>>8) & 0xFF;
 800262a:	4b34      	ldr	r3, [pc, #208]	@ (80026fc <main+0x2e0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b33      	ldr	r3, [pc, #204]	@ (8002700 <main+0x2e4>)
 8002634:	715a      	strb	r2, [r3, #5]
  lock_default[6] = (lock_default_2>>16) & 0xFF;
 8002636:	4b31      	ldr	r3, [pc, #196]	@ (80026fc <main+0x2e0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4b30      	ldr	r3, [pc, #192]	@ (8002700 <main+0x2e4>)
 8002640:	719a      	strb	r2, [r3, #6]
  lock_default[7] = (lock_default_2>>24) & 0xFF;
 8002642:	4b2e      	ldr	r3, [pc, #184]	@ (80026fc <main+0x2e0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0e1b      	lsrs	r3, r3, #24
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b2d      	ldr	r3, [pc, #180]	@ (8002700 <main+0x2e4>)
 800264c:	71da      	strb	r2, [r3, #7]
  server_ip[0] = ip_server1;
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <main+0x2a0>)
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	4b2c      	ldr	r3, [pc, #176]	@ (8002704 <main+0x2e8>)
 8002654:	701a      	strb	r2, [r3, #0]
  server_ip[1] = ip_server2;
 8002656:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <main+0x2a8>)
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	4b2a      	ldr	r3, [pc, #168]	@ (8002704 <main+0x2e8>)
 800265c:	705a      	strb	r2, [r3, #1]
  server_ip[2] = ip_server3;
 800265e:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <main+0x2b0>)
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	4b28      	ldr	r3, [pc, #160]	@ (8002704 <main+0x2e8>)
 8002664:	709a      	strb	r2, [r3, #2]
  server_ip[3] = ip_server4;
 8002666:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <main+0x2b8>)
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	4b26      	ldr	r3, [pc, #152]	@ (8002704 <main+0x2e8>)
 800266c:	70da      	strb	r2, [r3, #3]

  W25Q_Reset();
 800266e:	f7ff fa0d 	bl	8001a8c <W25Q_Reset>
//  W25Q_EraseChip();
  while(user.STT!=0xFFFFFFFF)
 8002672:	e05c      	b.n	800272e <main+0x312>
 8002674:	e0042000 	.word	0xe0042000
 8002678:	200001c8 	.word	0x200001c8
 800267c:	200002d0 	.word	0x200002d0
 8002680:	20000210 	.word	0x20000210
 8002684:	20000258 	.word	0x20000258
 8002688:	200002b8 	.word	0x200002b8
 800268c:	2000008c 	.word	0x2000008c
 8002690:	0800fc00 	.word	0x0800fc00
 8002694:	2000051c 	.word	0x2000051c
 8002698:	0800fc04 	.word	0x0800fc04
 800269c:	2000051d 	.word	0x2000051d
 80026a0:	0800fc08 	.word	0x0800fc08
 80026a4:	2000051e 	.word	0x2000051e
 80026a8:	0800fc0c 	.word	0x0800fc0c
 80026ac:	2000051f 	.word	0x2000051f
 80026b0:	0800fc10 	.word	0x0800fc10
 80026b4:	20000584 	.word	0x20000584
 80026b8:	0800fc14 	.word	0x0800fc14
 80026bc:	20000520 	.word	0x20000520
 80026c0:	0800fc18 	.word	0x0800fc18
 80026c4:	20000521 	.word	0x20000521
 80026c8:	0800fc1c 	.word	0x0800fc1c
 80026cc:	20000522 	.word	0x20000522
 80026d0:	0800fc20 	.word	0x0800fc20
 80026d4:	20000523 	.word	0x20000523
 80026d8:	0800fc24 	.word	0x0800fc24
 80026dc:	20000582 	.word	0x20000582
 80026e0:	0800fc28 	.word	0x0800fc28
 80026e4:	20000510 	.word	0x20000510
 80026e8:	0800fc2c 	.word	0x0800fc2c
 80026ec:	20000542 	.word	0x20000542
 80026f0:	0800fc30 	.word	0x0800fc30
 80026f4:	200006a8 	.word	0x200006a8
 80026f8:	0800fc34 	.word	0x0800fc34
 80026fc:	200006ac 	.word	0x200006ac
 8002700:	20000514 	.word	0x20000514
 8002704:	2000050c 	.word	0x2000050c
  {
	  W25Q_FastRead_address(number_card*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&user);
 8002708:	4bb2      	ldr	r3, [pc, #712]	@ (80029d4 <main+0x5b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	015b      	lsls	r3, r3, #5
 800270e:	4ab2      	ldr	r2, [pc, #712]	@ (80029d8 <main+0x5bc>)
 8002710:	2120      	movs	r1, #32
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fa02 	bl	8001b1c <W25Q_FastRead_address>
	  if (user.STT -1 == number_card)
 8002718:	4baf      	ldr	r3, [pc, #700]	@ (80029d8 <main+0x5bc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	1e5a      	subs	r2, r3, #1
 800271e:	4bad      	ldr	r3, [pc, #692]	@ (80029d4 <main+0x5b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d103      	bne.n	800272e <main+0x312>
	  {
		  number_card = user.STT;
 8002726:	4bac      	ldr	r3, [pc, #688]	@ (80029d8 <main+0x5bc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4aaa      	ldr	r2, [pc, #680]	@ (80029d4 <main+0x5b8>)
 800272c:	6013      	str	r3, [r2, #0]
  while(user.STT!=0xFFFFFFFF)
 800272e:	4baa      	ldr	r3, [pc, #680]	@ (80029d8 <main+0x5bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002736:	d1e7      	bne.n	8002708 <main+0x2ec>
	  }
  }
  while(user_before.STT!=0xFFFFFFFF)
 8002738:	e014      	b.n	8002764 <main+0x348>
  {
	  W25Q_FastRead_address(number_card_old*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&user_before);
 800273a:	4ba8      	ldr	r3, [pc, #672]	@ (80029dc <main+0x5c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002742:	015b      	lsls	r3, r3, #5
 8002744:	4aa6      	ldr	r2, [pc, #664]	@ (80029e0 <main+0x5c4>)
 8002746:	2120      	movs	r1, #32
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f9e7 	bl	8001b1c <W25Q_FastRead_address>
	  if (user_before.STT -1 == number_card_old)
 800274e:	4ba4      	ldr	r3, [pc, #656]	@ (80029e0 <main+0x5c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	1e5a      	subs	r2, r3, #1
 8002754:	4ba1      	ldr	r3, [pc, #644]	@ (80029dc <main+0x5c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d103      	bne.n	8002764 <main+0x348>
	  {
		  number_card_old = user_before.STT;
 800275c:	4ba0      	ldr	r3, [pc, #640]	@ (80029e0 <main+0x5c4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a9e      	ldr	r2, [pc, #632]	@ (80029dc <main+0x5c0>)
 8002762:	6013      	str	r3, [r2, #0]
  while(user_before.STT!=0xFFFFFFFF)
 8002764:	4b9e      	ldr	r3, [pc, #632]	@ (80029e0 <main+0x5c4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d1e5      	bne.n	800273a <main+0x31e>
	  }
  }
  if (number_card_old > 0)
 800276e:	4b9b      	ldr	r3, [pc, #620]	@ (80029dc <main+0x5c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01b      	beq.n	80027ae <main+0x392>
  {
	  for (uint32_t i=0; i<(number_card_old*sizeof(user_info_t)/Sector +2); i++)
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800277c:	e00d      	b.n	800279a <main+0x37e>
	  {
		  W25Q_Erase_Sector(i + Block32/256);
 800277e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002782:	b29b      	uxth	r3, r3
 8002784:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002788:	b29b      	uxth	r3, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fa32 	bl	8001bf4 <W25Q_Erase_Sector>
	  for (uint32_t i=0; i<(number_card_old*sizeof(user_info_t)/Sector +2); i++)
 8002790:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002794:	3301      	adds	r3, #1
 8002796:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800279a:	4b90      	ldr	r3, [pc, #576]	@ (80029dc <main+0x5c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	015b      	lsls	r3, r3, #5
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	3302      	adds	r3, #2
 80027a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d3e7      	bcc.n	800277e <main+0x362>
	  }
  }
  wiz_NetInfo gWIZNETINFO = {
 80027ae:	2300      	movs	r3, #0
 80027b0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80027b4:	231c      	movs	r3, #28
 80027b6:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 80027ba:	2316      	movs	r3, #22
 80027bc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 80027c0:	f002 fd8c 	bl	80052dc <HAL_GetUIDw0>
 80027c4:	4603      	mov	r3, r0
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b86      	ldr	r3, [pc, #536]	@ (80029e4 <main+0x5c8>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4053      	eors	r3, r2
 80027ce:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 80027d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 80027d4:	f002 fd8c 	bl	80052f0 <HAL_GetUIDw1>
 80027d8:	4603      	mov	r3, r0
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b81      	ldr	r3, [pc, #516]	@ (80029e4 <main+0x5c8>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	4053      	eors	r3, r2
 80027e2:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 80027e4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 80027e8:	f002 fd8c 	bl	8005304 <HAL_GetUIDw2>
 80027ec:	4603      	mov	r3, r0
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b7c      	ldr	r3, [pc, #496]	@ (80029e4 <main+0x5c8>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4053      	eors	r3, r2
 80027f6:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 80027f8:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 80027fc:	4b7a      	ldr	r3, [pc, #488]	@ (80029e8 <main+0x5cc>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8002804:	4b79      	ldr	r3, [pc, #484]	@ (80029ec <main+0x5d0>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800280c:	4b78      	ldr	r3, [pc, #480]	@ (80029f0 <main+0x5d4>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8002814:	4b73      	ldr	r3, [pc, #460]	@ (80029e4 <main+0x5c8>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 800281c:	4a75      	ldr	r2, [pc, #468]	@ (80029f4 <main+0x5d8>)
 800281e:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8002822:	6810      	ldr	r0, [r2, #0]
 8002824:	6018      	str	r0, [r3, #0]
 8002826:	4a74      	ldr	r2, [pc, #464]	@ (80029f8 <main+0x5dc>)
 8002828:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 800282c:	6810      	ldr	r0, [r2, #0]
 800282e:	6018      	str	r0, [r3, #0]
 8002830:	4a72      	ldr	r2, [pc, #456]	@ (80029fc <main+0x5e0>)
 8002832:	f107 0376 	add.w	r3, r7, #118	@ 0x76
 8002836:	6810      	ldr	r0, [r2, #0]
 8002838:	6018      	str	r0, [r3, #0]
 800283a:	2301      	movs	r3, #1
 800283c:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
  		  .ip = {ip1,ip2,ip3,ip4},
  		  .sn = {255, 255, 255, 0},
  		  .gw = {192, 168, 0, 1},
  		  .dns = {168, 126, 63, 1},
  		  .dhcp = NETINFO_STATIC};
  server_ip[0] = ip_server1;
 8002840:	4b6f      	ldr	r3, [pc, #444]	@ (8002a00 <main+0x5e4>)
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <main+0x5e8>)
 8002846:	701a      	strb	r2, [r3, #0]
  server_ip[1] = ip_server2;
 8002848:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <main+0x5ec>)
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a04 <main+0x5e8>)
 800284e:	705a      	strb	r2, [r3, #1]
  server_ip[2] = ip_server3;
 8002850:	4b6e      	ldr	r3, [pc, #440]	@ (8002a0c <main+0x5f0>)
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	4b6b      	ldr	r3, [pc, #428]	@ (8002a04 <main+0x5e8>)
 8002856:	709a      	strb	r2, [r3, #2]
  server_ip[3] = ip_server4;
 8002858:	4b6d      	ldr	r3, [pc, #436]	@ (8002a10 <main+0x5f4>)
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	4b69      	ldr	r3, [pc, #420]	@ (8002a04 <main+0x5e8>)
 800285e:	70da      	strb	r2, [r3, #3]
  W5500Init();
 8002860:	f7fd ff80 	bl	8000764 <W5500Init>
  HAL_Delay(2000);
 8002864:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002868:	f002 fd14 	bl	8005294 <HAL_Delay>
  wizchip_setnetinfo(&gWIZNETINFO);
 800286c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff f857 	bl	8001924 <wizchip_setnetinfo>
  socket(SOCK_NUM, Sn_MR_TCP, port_client, SF_TCP_NODELAY);
 8002876:	4b67      	ldr	r3, [pc, #412]	@ (8002a14 <main+0x5f8>)
 8002878:	881a      	ldrh	r2, [r3, #0]
 800287a:	2320      	movs	r3, #32
 800287c:	2101      	movs	r1, #1
 800287e:	2000      	movs	r0, #0
 8002880:	f7fd ffbc 	bl	80007fc <socket>
  connect(SOCK_NUM, server_ip, port_server);
 8002884:	4b64      	ldr	r3, [pc, #400]	@ (8002a18 <main+0x5fc>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	495e      	ldr	r1, [pc, #376]	@ (8002a04 <main+0x5e8>)
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe f943 	bl	8000b18 <connect>
  Set_speed_can(elevator_mode);
 8002892:	4b62      	ldr	r3, [pc, #392]	@ (8002a1c <main+0x600>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 f922 	bl	8004ae0 <Set_speed_can>
  HAL_TIM_Base_Start_IT(&htim2);
 800289c:	4860      	ldr	r0, [pc, #384]	@ (8002a20 <main+0x604>)
 800289e:	f005 fdeb 	bl	8008478 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lenData = getSn_RX_RSR(SOCK_NUM);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fd fdfd 	bl	80004a2 <getSn_RX_RSR>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002a24 <main+0x608>)
 80028ae:	601a      	str	r2, [r3, #0]
	  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7fd fdf6 	bl	80004a2 <getSn_RX_RSR>
 80028b6:	4603      	mov	r3, r0
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002a24 <main+0x608>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	f041 8137 	bne.w	8003b32 <main+0x1716>
	  {
		  if (lenData > 512)
 80028c4:	4b57      	ldr	r3, [pc, #348]	@ (8002a24 <main+0x608>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028cc:	d901      	bls.n	80028d2 <main+0x4b6>
		  {
			  HAL_NVIC_SystemReset();
 80028ce:	f003 fcf2 	bl	80062b6 <HAL_NVIC_SystemReset>
		  }
		  if (lenData > 0)
 80028d2:	4b54      	ldr	r3, [pc, #336]	@ (8002a24 <main+0x608>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 810d 	beq.w	8002af6 <main+0x6da>
		  {
			  recv(SOCK_NUM, buf, lenData);
 80028dc:	4b51      	ldr	r3, [pc, #324]	@ (8002a24 <main+0x608>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	4950      	ldr	r1, [pc, #320]	@ (8002a28 <main+0x60c>)
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe faf6 	bl	8000ed8 <recv>
			  switch (buf[0])
 80028ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002a28 <main+0x60c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	3b44      	subs	r3, #68	@ 0x44
 80028f2:	2b13      	cmp	r3, #19
 80028f4:	f200 80ff 	bhi.w	8002af6 <main+0x6da>
 80028f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <main+0x4e4>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002991 	.word	0x08002991
 8002904:	08002af7 	.word	0x08002af7
 8002908:	08002af7 	.word	0x08002af7
 800290c:	08002af7 	.word	0x08002af7
 8002910:	08002951 	.word	0x08002951
 8002914:	08002af7 	.word	0x08002af7
 8002918:	08002af7 	.word	0x08002af7
 800291c:	08002af7 	.word	0x08002af7
 8002920:	08002af7 	.word	0x08002af7
 8002924:	08002af7 	.word	0x08002af7
 8002928:	08002af7 	.word	0x08002af7
 800292c:	08002af7 	.word	0x08002af7
 8002930:	08002af7 	.word	0x08002af7
 8002934:	08002af7 	.word	0x08002af7
 8002938:	08002a67 	.word	0x08002a67
 800293c:	080029c5 	.word	0x080029c5
 8002940:	08002af7 	.word	0x08002af7
 8002944:	08002af7 	.word	0x08002af7
 8002948:	08002af7 	.word	0x08002af7
 800294c:	08002aab 	.word	0x08002aab
			  {
			  case 0x48:
				  connected = HAL_GetTick();
 8002950:	f002 fc96 	bl	8005280 <HAL_GetTick>
 8002954:	4603      	mov	r3, r0
 8002956:	4a35      	ldr	r2, [pc, #212]	@ (8002a2c <main+0x610>)
 8002958:	6013      	str	r3, [r2, #0]
				  timeNow = mktime((buf[3]<<8) & buf[4], buf[2], buf[1], buf[5], buf[6]);
 800295a:	4b33      	ldr	r3, [pc, #204]	@ (8002a28 <main+0x60c>)
 800295c:	78db      	ldrb	r3, [r3, #3]
 800295e:	b21b      	sxth	r3, r3
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	b21a      	sxth	r2, r3
 8002964:	4b30      	ldr	r3, [pc, #192]	@ (8002a28 <main+0x60c>)
 8002966:	791b      	ldrb	r3, [r3, #4]
 8002968:	b21b      	sxth	r3, r3
 800296a:	4013      	ands	r3, r2
 800296c:	b21b      	sxth	r3, r3
 800296e:	b298      	uxth	r0, r3
 8002970:	4b2d      	ldr	r3, [pc, #180]	@ (8002a28 <main+0x60c>)
 8002972:	7899      	ldrb	r1, [r3, #2]
 8002974:	4b2c      	ldr	r3, [pc, #176]	@ (8002a28 <main+0x60c>)
 8002976:	785a      	ldrb	r2, [r3, #1]
 8002978:	4b2b      	ldr	r3, [pc, #172]	@ (8002a28 <main+0x60c>)
 800297a:	795c      	ldrb	r4, [r3, #5]
 800297c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a28 <main+0x60c>)
 800297e:	799b      	ldrb	r3, [r3, #6]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4623      	mov	r3, r4
 8002984:	f002 f944 	bl	8004c10 <mktime>
 8002988:	4603      	mov	r3, r0
 800298a:	4a29      	ldr	r2, [pc, #164]	@ (8002a30 <main+0x614>)
 800298c:	6013      	str	r3, [r2, #0]
				  break;
 800298e:	e0b2      	b.n	8002af6 <main+0x6da>
			  case 0x44://data: D
				  Ethernet_received = true;
 8002990:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <main+0x618>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
				  for (uint8_t i =0; i<9; i++)
 8002996:	2300      	movs	r3, #0
 8002998:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800299c:	e00d      	b.n	80029ba <main+0x59e>
				  {
					  Ethernet_received_data[i] = buf[i+1];
 800299e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80029a8:	491f      	ldr	r1, [pc, #124]	@ (8002a28 <main+0x60c>)
 80029aa:	5c89      	ldrb	r1, [r1, r2]
 80029ac:	4a22      	ldr	r2, [pc, #136]	@ (8002a38 <main+0x61c>)
 80029ae:	54d1      	strb	r1, [r2, r3]
				  for (uint8_t i =0; i<9; i++)
 80029b0:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80029b4:	3301      	adds	r3, #1
 80029b6:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80029ba:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d9ed      	bls.n	800299e <main+0x582>
				  }
				  break;
 80029c2:	e098      	b.n	8002af6 <main+0x6da>
			  case 0x53://setting: S
				  Ethernet_setting = true;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a3c <main+0x620>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
				  for (uint8_t i =0; i<23; i++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 80029d0:	e044      	b.n	8002a5c <main+0x640>
 80029d2:	bf00      	nop
 80029d4:	20000694 	.word	0x20000694
 80029d8:	20000734 	.word	0x20000734
 80029dc:	200006a4 	.word	0x200006a4
 80029e0:	20000754 	.word	0x20000754
 80029e4:	2000051f 	.word	0x2000051f
 80029e8:	2000051c 	.word	0x2000051c
 80029ec:	2000051d 	.word	0x2000051d
 80029f0:	2000051e 	.word	0x2000051e
 80029f4:	08009d1c 	.word	0x08009d1c
 80029f8:	08009d20 	.word	0x08009d20
 80029fc:	08009d24 	.word	0x08009d24
 8002a00:	20000520 	.word	0x20000520
 8002a04:	2000050c 	.word	0x2000050c
 8002a08:	20000521 	.word	0x20000521
 8002a0c:	20000522 	.word	0x20000522
 8002a10:	20000523 	.word	0x20000523
 8002a14:	20000584 	.word	0x20000584
 8002a18:	20000582 	.word	0x20000582
 8002a1c:	20000542 	.word	0x20000542
 8002a20:	20000180 	.word	0x20000180
 8002a24:	200006a0 	.word	0x200006a0
 8002a28:	20000304 	.word	0x20000304
 8002a2c:	20000698 	.word	0x20000698
 8002a30:	200006d0 	.word	0x200006d0
 8002a34:	20000729 	.word	0x20000729
 8002a38:	20000550 	.word	0x20000550
 8002a3c:	2000072a 	.word	0x2000072a
				  {
					  Ethernet_setting_data[i] = buf[i+1];
 8002a40:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8002a4a:	499b      	ldr	r1, [pc, #620]	@ (8002cb8 <main+0x89c>)
 8002a4c:	5c89      	ldrb	r1, [r1, r2]
 8002a4e:	4a9b      	ldr	r2, [pc, #620]	@ (8002cbc <main+0x8a0>)
 8002a50:	54d1      	strb	r1, [r2, r3]
				  for (uint8_t i =0; i<23; i++)
 8002a52:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8002a56:	3301      	adds	r3, #1
 8002a58:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 8002a5c:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8002a60:	2b16      	cmp	r3, #22
 8002a62:	d9ed      	bls.n	8002a40 <main+0x624>
				  }
				  break;
 8002a64:	e047      	b.n	8002af6 <main+0x6da>
			  case 0x52:// reset board R: 0; read data: 1
				  if (buf[1] == 2)
 8002a66:	4b94      	ldr	r3, [pc, #592]	@ (8002cb8 <main+0x89c>)
 8002a68:	785b      	ldrb	r3, [r3, #1]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d108      	bne.n	8002a80 <main+0x664>
				  {
					  send_card_to_pc = true;
 8002a6e:	4b94      	ldr	r3, [pc, #592]	@ (8002cc0 <main+0x8a4>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002a74:	f002 fc04 	bl	8005280 <HAL_GetTick>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4a92      	ldr	r2, [pc, #584]	@ (8002cc4 <main+0x8a8>)
 8002a7c:	6013      	str	r3, [r2, #0]
				  } else
				  {
					  Ethernet_read_and_reset = true;
					  Ethernet_read_and_reset_data = buf[1];
				  }
				  break;
 8002a7e:	e03a      	b.n	8002af6 <main+0x6da>
				  } else if (buf[1] == 3)
 8002a80:	4b8d      	ldr	r3, [pc, #564]	@ (8002cb8 <main+0x89c>)
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d108      	bne.n	8002a9a <main+0x67e>
					  send_card_done = true;
 8002a88:	4b8f      	ldr	r3, [pc, #572]	@ (8002cc8 <main+0x8ac>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002a8e:	f002 fbf7 	bl	8005280 <HAL_GetTick>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4a8b      	ldr	r2, [pc, #556]	@ (8002cc4 <main+0x8a8>)
 8002a96:	6013      	str	r3, [r2, #0]
				  break;
 8002a98:	e02d      	b.n	8002af6 <main+0x6da>
					  Ethernet_read_and_reset = true;
 8002a9a:	4b8c      	ldr	r3, [pc, #560]	@ (8002ccc <main+0x8b0>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
					  Ethernet_read_and_reset_data = buf[1];
 8002aa0:	4b85      	ldr	r3, [pc, #532]	@ (8002cb8 <main+0x89c>)
 8002aa2:	785a      	ldrb	r2, [r3, #1]
 8002aa4:	4b8a      	ldr	r3, [pc, #552]	@ (8002cd0 <main+0x8b4>)
 8002aa6:	701a      	strb	r2, [r3, #0]
				  break;
 8002aa8:	e025      	b.n	8002af6 <main+0x6da>
			  case 0x57: // W
				  switch (buf[1])
 8002aaa:	4b83      	ldr	r3, [pc, #524]	@ (8002cb8 <main+0x89c>)
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b48      	cmp	r3, #72	@ 0x48
 8002ab0:	d017      	beq.n	8002ae2 <main+0x6c6>
 8002ab2:	2b48      	cmp	r3, #72	@ 0x48
 8002ab4:	dc1e      	bgt.n	8002af4 <main+0x6d8>
 8002ab6:	2b41      	cmp	r3, #65	@ 0x41
 8002ab8:	d00a      	beq.n	8002ad0 <main+0x6b4>
 8002aba:	2b45      	cmp	r3, #69	@ 0x45
 8002abc:	d11a      	bne.n	8002af4 <main+0x6d8>
				  {
				  case 0x45:// E: errase
					  write_mode = true;
 8002abe:	4b85      	ldr	r3, [pc, #532]	@ (8002cd4 <main+0x8b8>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002ac4:	f002 fbdc 	bl	8005280 <HAL_GetTick>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc4 <main+0x8a8>)
 8002acc:	6013      	str	r3, [r2, #0]
					  break;
 8002ace:	e011      	b.n	8002af4 <main+0x6d8>
				  case 0x41:// A: add card
					  write_mode_somecard = true;
 8002ad0:	4b81      	ldr	r3, [pc, #516]	@ (8002cd8 <main+0x8bc>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002ad6:	f002 fbd3 	bl	8005280 <HAL_GetTick>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4a79      	ldr	r2, [pc, #484]	@ (8002cc4 <main+0x8a8>)
 8002ade:	6013      	str	r3, [r2, #0]
					  break;
 8002ae0:	e008      	b.n	8002af4 <main+0x6d8>
				  case 0x48:// H: add card by hand
					  write_card_by_hand = true;
 8002ae2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cdc <main+0x8c0>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002ae8:	f002 fbca 	bl	8005280 <HAL_GetTick>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4a75      	ldr	r2, [pc, #468]	@ (8002cc4 <main+0x8a8>)
 8002af0:	6013      	str	r3, [r2, #0]
					  break;
 8002af2:	bf00      	nop
				  }
				  break;
 8002af4:	bf00      	nop
	  } else
	  {
		  continue;
	  }

	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8002af6:	487a      	ldr	r0, [pc, #488]	@ (8002ce0 <main+0x8c4>)
 8002af8:	f002 ff29 	bl	800594e <HAL_CAN_GetTxMailboxesFreeLevel>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10a      	bne.n	8002b18 <main+0x6fc>
	  {
		  if (HAL_CAN_AbortTxRequest(&hcan, TxMailbox) != HAL_OK)
 8002b02:	4b78      	ldr	r3, [pc, #480]	@ (8002ce4 <main+0x8c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4619      	mov	r1, r3
 8002b08:	4875      	ldr	r0, [pc, #468]	@ (8002ce0 <main+0x8c4>)
 8002b0a:	f002 fedc 	bl	80058c6 <HAL_CAN_AbortTxRequest>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <main+0x6fc>
		  {
			HAL_NVIC_SystemReset();
 8002b14:	f003 fbcf 	bl	80062b6 <HAL_NVIC_SystemReset>
		  }
	  }

	  // check connection Ethernet
	  if (keepalive == SOCK_ESTABLISHED && (abs(HAL_GetTick() - connected) < Timeout_heartbit))
 8002b18:	4b73      	ldr	r3, [pc, #460]	@ (8002ce8 <main+0x8cc>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b17      	cmp	r3, #23
 8002b1e:	d110      	bne.n	8002b42 <main+0x726>
 8002b20:	f002 fbae 	bl	8005280 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b71      	ldr	r3, [pc, #452]	@ (8002cec <main+0x8d0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bfb8      	it	lt
 8002b30:	425b      	neglt	r3, r3
 8002b32:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002b36:	4293      	cmp	r3, r2
 8002b38:	dc03      	bgt.n	8002b42 <main+0x726>
	  {
		  Ethernet_connected = true;
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf0 <main+0x8d4>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e002      	b.n	8002b48 <main+0x72c>
	  } else
	  {
		  Ethernet_connected = false;// false
 8002b42:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf0 <main+0x8d4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
	  }
	  // check connection REB
	  if (abs(HAL_GetTick() - heardbit_REB) > Timeout_heartbit)
 8002b48:	f002 fb9a 	bl	8005280 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b69      	ldr	r3, [pc, #420]	@ (8002cf4 <main+0x8d8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bfb8      	it	lt
 8002b58:	425b      	neglt	r3, r3
 8002b5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	dd03      	ble.n	8002b6a <main+0x74e>
	  {
		  REB_connected = false;// false
 8002b62:	4b65      	ldr	r3, [pc, #404]	@ (8002cf8 <main+0x8dc>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e002      	b.n	8002b70 <main+0x754>
	  } else
	  {
		  REB_connected = true;
 8002b6a:	4b63      	ldr	r3, [pc, #396]	@ (8002cf8 <main+0x8dc>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
	  }
	  //// received data from Ethernet
	  if (Ethernet_received)// 0x44
 8002b70:	4b62      	ldr	r3, [pc, #392]	@ (8002cfc <main+0x8e0>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d022      	beq.n	8002bbe <main+0x7a2>
	  {
		  Ethernet_received = false;
 8002b78:	4b60      	ldr	r3, [pc, #384]	@ (8002cfc <main+0x8e0>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_received_data[0])
 8002b7e:	4b60      	ldr	r3, [pc, #384]	@ (8002d00 <main+0x8e4>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <main+0x770>
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d00a      	beq.n	8002ba0 <main+0x784>
 8002b8a:	e018      	b.n	8002bbe <main+0x7a2>
		  {
		  case 0:
			  send_uart = 0;
 8002b8c:	4b5d      	ldr	r3, [pc, #372]	@ (8002d04 <main+0x8e8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 8002b92:	4b5d      	ldr	r3, [pc, #372]	@ (8002d08 <main+0x8ec>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
			  isSendDataEth = false;
 8002b98:	4b5c      	ldr	r3, [pc, #368]	@ (8002d0c <main+0x8f0>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
			  break;
 8002b9e:	e00e      	b.n	8002bbe <main+0x7a2>
		  case 1: // data ok
			  new_card_update(&Ethernet_received_data[1], x, x_timer);
 8002ba0:	4a5b      	ldr	r2, [pc, #364]	@ (8002d10 <main+0x8f4>)
 8002ba2:	495c      	ldr	r1, [pc, #368]	@ (8002d14 <main+0x8f8>)
 8002ba4:	485c      	ldr	r0, [pc, #368]	@ (8002d18 <main+0x8fc>)
 8002ba6:	f001 fdd6 	bl	8004756 <new_card_update>
			  send_uart = 1;
 8002baa:	4b56      	ldr	r3, [pc, #344]	@ (8002d04 <main+0x8e8>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 8002bb0:	4b55      	ldr	r3, [pc, #340]	@ (8002d08 <main+0x8ec>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
			  isSendDataEth = false;
 8002bb6:	4b55      	ldr	r3, [pc, #340]	@ (8002d0c <main+0x8f0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
			  break;
 8002bbc:	bf00      	nop
		  }
	  }

	  // Nếu không nhận được Data từ server sau khi gửi mã thẻ, thì xử lý offline

	  if ((isSendDataEth == true) && (!Ethernet_connected || ((HAL_GetTick() - timeSendDataEth) > 500)))
 8002bbe:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <main+0x8f0>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d067      	beq.n	8002c96 <main+0x87a>
 8002bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf0 <main+0x8d4>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	f083 0301 	eor.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d108      	bne.n	8002be6 <main+0x7ca>
 8002bd4:	f002 fb54 	bl	8005280 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b50      	ldr	r3, [pc, #320]	@ (8002d1c <main+0x900>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002be4:	d957      	bls.n	8002c96 <main+0x87a>
	  {
		  isSendDataEth = false;
 8002be6:	4b49      	ldr	r3, [pc, #292]	@ (8002d0c <main+0x8f0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
		  compare_user = binary_search(number_card, wcode);
 8002bec:	4b4c      	ldr	r3, [pc, #304]	@ (8002d20 <main+0x904>)
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8002d24 <main+0x908>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4c4c      	ldr	r4, [pc, #304]	@ (8002d28 <main+0x90c>)
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 fd59 	bl	80046b0 <binary_search>
 8002bfe:	4625      	mov	r5, r4
 8002c00:	463c      	mov	r4, r7
 8002c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		  if (compare_user.STT)
 8002c0e:	4b46      	ldr	r3, [pc, #280]	@ (8002d28 <main+0x90c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d039      	beq.n	8002c8a <main+0x86e>
		  {
			  timeBegin = mktime(compare_user.beginYear, compare_user.beginMonth, compare_user.beginDate, compare_user.beginHour, compare_user.beginMinute);
 8002c16:	4b44      	ldr	r3, [pc, #272]	@ (8002d28 <main+0x90c>)
 8002c18:	8a18      	ldrh	r0, [r3, #16]
 8002c1a:	4b43      	ldr	r3, [pc, #268]	@ (8002d28 <main+0x90c>)
 8002c1c:	7c99      	ldrb	r1, [r3, #18]
 8002c1e:	4b42      	ldr	r3, [pc, #264]	@ (8002d28 <main+0x90c>)
 8002c20:	7cda      	ldrb	r2, [r3, #19]
 8002c22:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <main+0x90c>)
 8002c24:	7d1c      	ldrb	r4, [r3, #20]
 8002c26:	4b40      	ldr	r3, [pc, #256]	@ (8002d28 <main+0x90c>)
 8002c28:	7d5b      	ldrb	r3, [r3, #21]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	f001 ffef 	bl	8004c10 <mktime>
 8002c32:	4603      	mov	r3, r0
 8002c34:	4a3d      	ldr	r2, [pc, #244]	@ (8002d2c <main+0x910>)
 8002c36:	6013      	str	r3, [r2, #0]
			  timeEnd = mktime(compare_user.endYear, compare_user.endMonth, compare_user.endDate, compare_user.endHour, compare_user.endMinute);
 8002c38:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <main+0x90c>)
 8002c3a:	8ad8      	ldrh	r0, [r3, #22]
 8002c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d28 <main+0x90c>)
 8002c3e:	7e19      	ldrb	r1, [r3, #24]
 8002c40:	4b39      	ldr	r3, [pc, #228]	@ (8002d28 <main+0x90c>)
 8002c42:	7e5a      	ldrb	r2, [r3, #25]
 8002c44:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <main+0x90c>)
 8002c46:	7e9c      	ldrb	r4, [r3, #26]
 8002c48:	4b37      	ldr	r3, [pc, #220]	@ (8002d28 <main+0x90c>)
 8002c4a:	7edb      	ldrb	r3, [r3, #27]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	4623      	mov	r3, r4
 8002c50:	f001 ffde 	bl	8004c10 <mktime>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4a36      	ldr	r2, [pc, #216]	@ (8002d30 <main+0x914>)
 8002c58:	6013      	str	r3, [r2, #0]
			  if ((timeBegin < timeNow) && (timeEnd > timeNow))
 8002c5a:	4b34      	ldr	r3, [pc, #208]	@ (8002d2c <main+0x910>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b35      	ldr	r3, [pc, #212]	@ (8002d34 <main+0x918>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d217      	bcs.n	8002c96 <main+0x87a>
 8002c66:	4b32      	ldr	r3, [pc, #200]	@ (8002d30 <main+0x914>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4b32      	ldr	r3, [pc, #200]	@ (8002d34 <main+0x918>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d911      	bls.n	8002c96 <main+0x87a>
			  {
				  new_card_update(compare_user.permis, x, x_timer);
 8002c72:	4a27      	ldr	r2, [pc, #156]	@ (8002d10 <main+0x8f4>)
 8002c74:	4927      	ldr	r1, [pc, #156]	@ (8002d14 <main+0x8f8>)
 8002c76:	4830      	ldr	r0, [pc, #192]	@ (8002d38 <main+0x91c>)
 8002c78:	f001 fd6d 	bl	8004756 <new_card_update>
				  send_uart = 1;
 8002c7c:	4b21      	ldr	r3, [pc, #132]	@ (8002d04 <main+0x8e8>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
				  send_uart_to_REB = true;
 8002c82:	4b21      	ldr	r3, [pc, #132]	@ (8002d08 <main+0x8ec>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e005      	b.n	8002c96 <main+0x87a>
			  }
		  } else
		  {
			  send_uart = 0;
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <main+0x8e8>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <main+0x8ec>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  //// setting from PC Ethernet
	  if (Ethernet_setting) // 0x53
 8002c96:	4b29      	ldr	r3, [pc, #164]	@ (8002d3c <main+0x920>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80d1 	beq.w	8002e42 <main+0xa26>
	  {
		  Ethernet_setting = false;
 8002ca0:	4b26      	ldr	r3, [pc, #152]	@ (8002d3c <main+0x920>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_setting_data[0])
 8002ca6:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <main+0x8a0>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d048      	beq.n	8002d40 <main+0x924>
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	f000 80bd 	beq.w	8002e2e <main+0xa12>
 8002cb4:	e0c5      	b.n	8002e42 <main+0xa26>
 8002cb6:	bf00      	nop
 8002cb8:	20000304 	.word	0x20000304
 8002cbc:	2000055c 	.word	0x2000055c
 8002cc0:	20000726 	.word	0x20000726
 8002cc4:	2000069c 	.word	0x2000069c
 8002cc8:	20000727 	.word	0x20000727
 8002ccc:	2000072d 	.word	0x2000072d
 8002cd0:	20000575 	.word	0x20000575
 8002cd4:	20000723 	.word	0x20000723
 8002cd8:	20000722 	.word	0x20000722
 8002cdc:	2000072c 	.word	0x2000072c
 8002ce0:	2000009c 	.word	0x2000009c
 8002ce4:	20000590 	.word	0x20000590
 8002ce8:	2000054c 	.word	0x2000054c
 8002cec:	20000698 	.word	0x20000698
 8002cf0:	20000720 	.word	0x20000720
 8002cf4:	200006b4 	.word	0x200006b4
 8002cf8:	20000036 	.word	0x20000036
 8002cfc:	20000729 	.word	0x20000729
 8002d00:	20000550 	.word	0x20000550
 8002d04:	20000580 	.word	0x20000580
 8002d08:	20000730 	.word	0x20000730
 8002d0c:	20000721 	.word	0x20000721
 8002d10:	20000594 	.word	0x20000594
 8002d14:	200006e0 	.word	0x200006e0
 8002d18:	20000551 	.word	0x20000551
 8002d1c:	200006b8 	.word	0x200006b8
 8002d20:	20000694 	.word	0x20000694
 8002d24:	2000058c 	.word	0x2000058c
 8002d28:	20000774 	.word	0x20000774
 8002d2c:	200006d4 	.word	0x200006d4
 8002d30:	200006d8 	.word	0x200006d8
 8002d34:	200006d0 	.word	0x200006d0
 8002d38:	2000077c 	.word	0x2000077c
 8002d3c:	2000072a 	.word	0x2000072a
		  {
		  case 0:// setting board
			  ip1 = Ethernet_setting_data[1];
 8002d40:	4b8a      	ldr	r3, [pc, #552]	@ (8002f6c <main+0xb50>)
 8002d42:	785a      	ldrb	r2, [r3, #1]
 8002d44:	4b8a      	ldr	r3, [pc, #552]	@ (8002f70 <main+0xb54>)
 8002d46:	701a      	strb	r2, [r3, #0]
			  ip2 = Ethernet_setting_data[2];
 8002d48:	4b88      	ldr	r3, [pc, #544]	@ (8002f6c <main+0xb50>)
 8002d4a:	789a      	ldrb	r2, [r3, #2]
 8002d4c:	4b89      	ldr	r3, [pc, #548]	@ (8002f74 <main+0xb58>)
 8002d4e:	701a      	strb	r2, [r3, #0]
			  ip3 = Ethernet_setting_data[3];
 8002d50:	4b86      	ldr	r3, [pc, #536]	@ (8002f6c <main+0xb50>)
 8002d52:	78da      	ldrb	r2, [r3, #3]
 8002d54:	4b88      	ldr	r3, [pc, #544]	@ (8002f78 <main+0xb5c>)
 8002d56:	701a      	strb	r2, [r3, #0]
			  ip4 = Ethernet_setting_data[4];
 8002d58:	4b84      	ldr	r3, [pc, #528]	@ (8002f6c <main+0xb50>)
 8002d5a:	791a      	ldrb	r2, [r3, #4]
 8002d5c:	4b87      	ldr	r3, [pc, #540]	@ (8002f7c <main+0xb60>)
 8002d5e:	701a      	strb	r2, [r3, #0]
			  port_client = Ethernet_setting_data[5]<<8|Ethernet_setting_data[6];
 8002d60:	4b82      	ldr	r3, [pc, #520]	@ (8002f6c <main+0xb50>)
 8002d62:	795b      	ldrb	r3, [r3, #5]
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	b21a      	sxth	r2, r3
 8002d6a:	4b80      	ldr	r3, [pc, #512]	@ (8002f6c <main+0xb50>)
 8002d6c:	799b      	ldrb	r3, [r3, #6]
 8002d6e:	b21b      	sxth	r3, r3
 8002d70:	4313      	orrs	r3, r2
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	4b82      	ldr	r3, [pc, #520]	@ (8002f80 <main+0xb64>)
 8002d78:	801a      	strh	r2, [r3, #0]
			  ip_server1 = Ethernet_setting_data[7];
 8002d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f6c <main+0xb50>)
 8002d7c:	79da      	ldrb	r2, [r3, #7]
 8002d7e:	4b81      	ldr	r3, [pc, #516]	@ (8002f84 <main+0xb68>)
 8002d80:	701a      	strb	r2, [r3, #0]
			  ip_server2 = Ethernet_setting_data[8];
 8002d82:	4b7a      	ldr	r3, [pc, #488]	@ (8002f6c <main+0xb50>)
 8002d84:	7a1a      	ldrb	r2, [r3, #8]
 8002d86:	4b80      	ldr	r3, [pc, #512]	@ (8002f88 <main+0xb6c>)
 8002d88:	701a      	strb	r2, [r3, #0]
			  ip_server3 = Ethernet_setting_data[9];
 8002d8a:	4b78      	ldr	r3, [pc, #480]	@ (8002f6c <main+0xb50>)
 8002d8c:	7a5a      	ldrb	r2, [r3, #9]
 8002d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f8c <main+0xb70>)
 8002d90:	701a      	strb	r2, [r3, #0]
			  ip_server4 = Ethernet_setting_data[10];
 8002d92:	4b76      	ldr	r3, [pc, #472]	@ (8002f6c <main+0xb50>)
 8002d94:	7a9a      	ldrb	r2, [r3, #10]
 8002d96:	4b7e      	ldr	r3, [pc, #504]	@ (8002f90 <main+0xb74>)
 8002d98:	701a      	strb	r2, [r3, #0]
			  port_server = Ethernet_setting_data[11]<<8|Ethernet_setting_data[12];
 8002d9a:	4b74      	ldr	r3, [pc, #464]	@ (8002f6c <main+0xb50>)
 8002d9c:	7adb      	ldrb	r3, [r3, #11]
 8002d9e:	b21b      	sxth	r3, r3
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	b21a      	sxth	r2, r3
 8002da4:	4b71      	ldr	r3, [pc, #452]	@ (8002f6c <main+0xb50>)
 8002da6:	7b1b      	ldrb	r3, [r3, #12]
 8002da8:	b21b      	sxth	r3, r3
 8002daa:	4313      	orrs	r3, r2
 8002dac:	b21b      	sxth	r3, r3
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	4b78      	ldr	r3, [pc, #480]	@ (8002f94 <main+0xb78>)
 8002db2:	801a      	strh	r2, [r3, #0]
			  time_delay = Ethernet_setting_data[13];
 8002db4:	4b6d      	ldr	r3, [pc, #436]	@ (8002f6c <main+0xb50>)
 8002db6:	7b5a      	ldrb	r2, [r3, #13]
 8002db8:	4b77      	ldr	r3, [pc, #476]	@ (8002f98 <main+0xb7c>)
 8002dba:	701a      	strb	r2, [r3, #0]
			  elevator_mode = Ethernet_setting_data[14];
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8002f6c <main+0xb50>)
 8002dbe:	7b9a      	ldrb	r2, [r3, #14]
 8002dc0:	4b76      	ldr	r3, [pc, #472]	@ (8002f9c <main+0xb80>)
 8002dc2:	701a      	strb	r2, [r3, #0]
			  lock_default_1 = Ethernet_setting_data[15]|(Ethernet_setting_data[16]<<8)|(Ethernet_setting_data[17]<<16)|(Ethernet_setting_data[18]<<24);
 8002dc4:	4b69      	ldr	r3, [pc, #420]	@ (8002f6c <main+0xb50>)
 8002dc6:	7bdb      	ldrb	r3, [r3, #15]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b68      	ldr	r3, [pc, #416]	@ (8002f6c <main+0xb50>)
 8002dcc:	7c1b      	ldrb	r3, [r3, #16]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	4b66      	ldr	r3, [pc, #408]	@ (8002f6c <main+0xb50>)
 8002dd4:	7c5b      	ldrb	r3, [r3, #17]
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	4b64      	ldr	r3, [pc, #400]	@ (8002f6c <main+0xb50>)
 8002ddc:	7c9b      	ldrb	r3, [r3, #18]
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	4313      	orrs	r3, r2
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b6e      	ldr	r3, [pc, #440]	@ (8002fa0 <main+0xb84>)
 8002de6:	601a      	str	r2, [r3, #0]
			  lock_default_2 = Ethernet_setting_data[19]|(Ethernet_setting_data[20]<<8)|(Ethernet_setting_data[21]<<16)|(Ethernet_setting_data[22]<<24);
 8002de8:	4b60      	ldr	r3, [pc, #384]	@ (8002f6c <main+0xb50>)
 8002dea:	7cdb      	ldrb	r3, [r3, #19]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b5f      	ldr	r3, [pc, #380]	@ (8002f6c <main+0xb50>)
 8002df0:	7d1b      	ldrb	r3, [r3, #20]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	431a      	orrs	r2, r3
 8002df6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f6c <main+0xb50>)
 8002df8:	7d5b      	ldrb	r3, [r3, #21]
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8002f6c <main+0xb50>)
 8002e00:	7d9b      	ldrb	r3, [r3, #22]
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	4313      	orrs	r3, r2
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b66      	ldr	r3, [pc, #408]	@ (8002fa4 <main+0xb88>)
 8002e0a:	601a      	str	r2, [r3, #0]
			  save_data();
 8002e0c:	f001 fb5c 	bl	80044c8 <save_data>
			  if (send_uart_to_PC)
 8002e10:	4b65      	ldr	r3, [pc, #404]	@ (8002fa8 <main+0xb8c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <main+0xa04>
			  {
				  sendString_uart("SOK");
 8002e18:	4864      	ldr	r0, [pc, #400]	@ (8002fac <main+0xb90>)
 8002e1a:	f001 faed 	bl	80043f8 <sendString_uart>
 8002e1e:	e003      	b.n	8002e28 <main+0xa0c>
			  } else
			  {
				  sendString("S", "OK");
 8002e20:	4963      	ldr	r1, [pc, #396]	@ (8002fb0 <main+0xb94>)
 8002e22:	4864      	ldr	r0, [pc, #400]	@ (8002fb4 <main+0xb98>)
 8002e24:	f001 f9bc 	bl	80041a0 <sendString>
			  }
			  HAL_NVIC_SystemReset();
 8002e28:	f003 fa45 	bl	80062b6 <HAL_NVIC_SystemReset>
			  break;
 8002e2c:	e009      	b.n	8002e42 <main+0xa26>
		  case 1:// bypass mode
			  bypass_from_Eth = Ethernet_setting_data[1];
 8002e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8002f6c <main+0xb50>)
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fb8 <main+0xb9c>)
 8002e3e:	701a      	strb	r2, [r3, #0]
			  break;
 8002e40:	bf00      	nop
		  }
	  }
	  /// reset or conmand read data from PC
	  if (Ethernet_read_and_reset)// 0x52
 8002e42:	4b5e      	ldr	r3, [pc, #376]	@ (8002fbc <main+0xba0>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80c7 	beq.w	8002fda <main+0xbbe>
	  {
		  Ethernet_read_and_reset = false;
 8002e4c:	4b5b      	ldr	r3, [pc, #364]	@ (8002fbc <main+0xba0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_read_and_reset_data)
 8002e52:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc0 <main+0xba4>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <main+0xa44>
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d003      	beq.n	8002e66 <main+0xa4a>
 8002e5e:	e0bc      	b.n	8002fda <main+0xbbe>
		  {
		  case 0:
			  HAL_NVIC_SystemReset();
 8002e60:	f003 fa29 	bl	80062b6 <HAL_NVIC_SystemReset>
			  break;
 8002e64:	e0b9      	b.n	8002fda <main+0xbbe>
		  case 1:
			  data_info[0] = ip1;
 8002e66:	4b42      	ldr	r3, [pc, #264]	@ (8002f70 <main+0xb54>)
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	4b56      	ldr	r3, [pc, #344]	@ (8002fc4 <main+0xba8>)
 8002e6c:	701a      	strb	r2, [r3, #0]
			  data_info[1] = ip2;
 8002e6e:	4b41      	ldr	r3, [pc, #260]	@ (8002f74 <main+0xb58>)
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	4b54      	ldr	r3, [pc, #336]	@ (8002fc4 <main+0xba8>)
 8002e74:	705a      	strb	r2, [r3, #1]
			  data_info[2] = ip3;
 8002e76:	4b40      	ldr	r3, [pc, #256]	@ (8002f78 <main+0xb5c>)
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	4b52      	ldr	r3, [pc, #328]	@ (8002fc4 <main+0xba8>)
 8002e7c:	709a      	strb	r2, [r3, #2]
			  data_info[3] = ip4;
 8002e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f7c <main+0xb60>)
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	4b50      	ldr	r3, [pc, #320]	@ (8002fc4 <main+0xba8>)
 8002e84:	70da      	strb	r2, [r3, #3]
			  data_info[4] = port_client>>8;
 8002e86:	4b3e      	ldr	r3, [pc, #248]	@ (8002f80 <main+0xb64>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc4 <main+0xba8>)
 8002e92:	711a      	strb	r2, [r3, #4]
			  data_info[5] = port_client & 0xFF;
 8002e94:	4b3a      	ldr	r3, [pc, #232]	@ (8002f80 <main+0xb64>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc4 <main+0xba8>)
 8002e9c:	715a      	strb	r2, [r3, #5]
			  data_info[6] = ip_server1;
 8002e9e:	4b39      	ldr	r3, [pc, #228]	@ (8002f84 <main+0xb68>)
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	4b48      	ldr	r3, [pc, #288]	@ (8002fc4 <main+0xba8>)
 8002ea4:	719a      	strb	r2, [r3, #6]
			  data_info[7] = ip_server2;
 8002ea6:	4b38      	ldr	r3, [pc, #224]	@ (8002f88 <main+0xb6c>)
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	4b46      	ldr	r3, [pc, #280]	@ (8002fc4 <main+0xba8>)
 8002eac:	71da      	strb	r2, [r3, #7]
			  data_info[8] = ip_server3;
 8002eae:	4b37      	ldr	r3, [pc, #220]	@ (8002f8c <main+0xb70>)
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	4b44      	ldr	r3, [pc, #272]	@ (8002fc4 <main+0xba8>)
 8002eb4:	721a      	strb	r2, [r3, #8]
			  data_info[9] = ip_server4;
 8002eb6:	4b36      	ldr	r3, [pc, #216]	@ (8002f90 <main+0xb74>)
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	4b42      	ldr	r3, [pc, #264]	@ (8002fc4 <main+0xba8>)
 8002ebc:	725a      	strb	r2, [r3, #9]
			  data_info[10] = port_server>>8;
 8002ebe:	4b35      	ldr	r3, [pc, #212]	@ (8002f94 <main+0xb78>)
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <main+0xba8>)
 8002eca:	729a      	strb	r2, [r3, #10]
			  data_info[11] = port_server & 0xFF;
 8002ecc:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <main+0xb78>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc4 <main+0xba8>)
 8002ed4:	72da      	strb	r2, [r3, #11]
			  data_info[12] = time_delay;
 8002ed6:	4b30      	ldr	r3, [pc, #192]	@ (8002f98 <main+0xb7c>)
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc4 <main+0xba8>)
 8002edc:	731a      	strb	r2, [r3, #12]
			  data_info[13] = elevator_mode;
 8002ede:	4b2f      	ldr	r3, [pc, #188]	@ (8002f9c <main+0xb80>)
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	4b38      	ldr	r3, [pc, #224]	@ (8002fc4 <main+0xba8>)
 8002ee4:	735a      	strb	r2, [r3, #13]
			  data_info[14] = number_card>>24&0xFF;
 8002ee6:	4b38      	ldr	r3, [pc, #224]	@ (8002fc8 <main+0xbac>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0e1b      	lsrs	r3, r3, #24
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4b35      	ldr	r3, [pc, #212]	@ (8002fc4 <main+0xba8>)
 8002ef0:	739a      	strb	r2, [r3, #14]
			  data_info[15] = number_card>>16&0xFF;
 8002ef2:	4b35      	ldr	r3, [pc, #212]	@ (8002fc8 <main+0xbac>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	0c1b      	lsrs	r3, r3, #16
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4b32      	ldr	r3, [pc, #200]	@ (8002fc4 <main+0xba8>)
 8002efc:	73da      	strb	r2, [r3, #15]
			  data_info[16] = number_card>>8&0xFF;
 8002efe:	4b32      	ldr	r3, [pc, #200]	@ (8002fc8 <main+0xbac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc4 <main+0xba8>)
 8002f08:	741a      	strb	r2, [r3, #16]
			  data_info[17] = number_card&0xFF;
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc8 <main+0xbac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc4 <main+0xba8>)
 8002f12:	745a      	strb	r2, [r3, #17]
			  data_info[18] = lock_default[0];
 8002f14:	4b2d      	ldr	r3, [pc, #180]	@ (8002fcc <main+0xbb0>)
 8002f16:	781a      	ldrb	r2, [r3, #0]
 8002f18:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc4 <main+0xba8>)
 8002f1a:	749a      	strb	r2, [r3, #18]
			  data_info[19] = lock_default[1];
 8002f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fcc <main+0xbb0>)
 8002f1e:	785a      	ldrb	r2, [r3, #1]
 8002f20:	4b28      	ldr	r3, [pc, #160]	@ (8002fc4 <main+0xba8>)
 8002f22:	74da      	strb	r2, [r3, #19]
			  data_info[20] = lock_default[2];
 8002f24:	4b29      	ldr	r3, [pc, #164]	@ (8002fcc <main+0xbb0>)
 8002f26:	789a      	ldrb	r2, [r3, #2]
 8002f28:	4b26      	ldr	r3, [pc, #152]	@ (8002fc4 <main+0xba8>)
 8002f2a:	751a      	strb	r2, [r3, #20]
			  data_info[21] = lock_default[3];
 8002f2c:	4b27      	ldr	r3, [pc, #156]	@ (8002fcc <main+0xbb0>)
 8002f2e:	78da      	ldrb	r2, [r3, #3]
 8002f30:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <main+0xba8>)
 8002f32:	755a      	strb	r2, [r3, #21]
			  data_info[22] = lock_default[4];
 8002f34:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <main+0xbb0>)
 8002f36:	791a      	ldrb	r2, [r3, #4]
 8002f38:	4b22      	ldr	r3, [pc, #136]	@ (8002fc4 <main+0xba8>)
 8002f3a:	759a      	strb	r2, [r3, #22]
			  data_info[23] = lock_default[5];
 8002f3c:	4b23      	ldr	r3, [pc, #140]	@ (8002fcc <main+0xbb0>)
 8002f3e:	795a      	ldrb	r2, [r3, #5]
 8002f40:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <main+0xba8>)
 8002f42:	75da      	strb	r2, [r3, #23]
			  data_info[24] = lock_default[6];
 8002f44:	4b21      	ldr	r3, [pc, #132]	@ (8002fcc <main+0xbb0>)
 8002f46:	799a      	ldrb	r2, [r3, #6]
 8002f48:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <main+0xba8>)
 8002f4a:	761a      	strb	r2, [r3, #24]
			  data_info[25] = lock_default[7];
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fcc <main+0xbb0>)
 8002f4e:	79da      	ldrb	r2, [r3, #7]
 8002f50:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc4 <main+0xba8>)
 8002f52:	765a      	strb	r2, [r3, #25]
			  if (send_uart_to_PC)
 8002f54:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <main+0xb8c>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d039      	beq.n	8002fd0 <main+0xbb4>
			  {
				  sendString_info_uart(data_info);
 8002f5c:	4819      	ldr	r0, [pc, #100]	@ (8002fc4 <main+0xba8>)
 8002f5e:	f001 fa77 	bl	8004450 <sendString_info_uart>
				  send_uart_to_PC = false;
 8002f62:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <main+0xb8c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
			  } else
			  {
				  sendData_eth_info("R", data_info);
			  }
			  break;
 8002f68:	e036      	b.n	8002fd8 <main+0xbbc>
 8002f6a:	bf00      	nop
 8002f6c:	2000055c 	.word	0x2000055c
 8002f70:	2000051c 	.word	0x2000051c
 8002f74:	2000051d 	.word	0x2000051d
 8002f78:	2000051e 	.word	0x2000051e
 8002f7c:	2000051f 	.word	0x2000051f
 8002f80:	20000584 	.word	0x20000584
 8002f84:	20000520 	.word	0x20000520
 8002f88:	20000521 	.word	0x20000521
 8002f8c:	20000522 	.word	0x20000522
 8002f90:	20000523 	.word	0x20000523
 8002f94:	20000582 	.word	0x20000582
 8002f98:	20000510 	.word	0x20000510
 8002f9c:	20000542 	.word	0x20000542
 8002fa0:	200006a8 	.word	0x200006a8
 8002fa4:	200006ac 	.word	0x200006ac
 8002fa8:	20000731 	.word	0x20000731
 8002fac:	08009ccc 	.word	0x08009ccc
 8002fb0:	08009cd0 	.word	0x08009cd0
 8002fb4:	08009cd4 	.word	0x08009cd4
 8002fb8:	200006dd 	.word	0x200006dd
 8002fbc:	2000072d 	.word	0x2000072d
 8002fc0:	20000575 	.word	0x20000575
 8002fc4:	20000524 	.word	0x20000524
 8002fc8:	20000694 	.word	0x20000694
 8002fcc:	20000514 	.word	0x20000514
				  sendData_eth_info("R", data_info);
 8002fd0:	4953      	ldr	r1, [pc, #332]	@ (8003120 <main+0xd04>)
 8002fd2:	4854      	ldr	r0, [pc, #336]	@ (8003124 <main+0xd08>)
 8002fd4:	f001 f906 	bl	80041e4 <sendData_eth_info>
			  break;
 8002fd8:	bf00      	nop
		  }
	  }
	  //// send data to PC, to keep alive connection
	  if (!add_card_uart && (abs(HAL_GetTick() - time_check) > 5000))
 8002fda:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <main+0xd0c>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	f083 0301 	eor.w	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8088 	beq.w	80030fa <main+0xcde>
 8002fea:	f002 f949 	bl	8005280 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b4e      	ldr	r3, [pc, #312]	@ (800312c <main+0xd10>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bfb8      	it	lt
 8002ffa:	425b      	neglt	r3, r3
 8002ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	dd7a      	ble.n	80030fa <main+0xcde>
	  {
		  keepalive = reconect_eth(SOCK_NUM);
 8003004:	2000      	movs	r0, #0
 8003006:	f001 fcf3 	bl	80049f0 <reconect_eth>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	4b48      	ldr	r3, [pc, #288]	@ (8003130 <main+0xd14>)
 8003010:	701a      	strb	r2, [r3, #0]
		  if (keepalive == SOCK_ESTABLISHED)
 8003012:	4b47      	ldr	r3, [pc, #284]	@ (8003130 <main+0xd14>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b17      	cmp	r3, #23
 8003018:	d16f      	bne.n	80030fa <main+0xcde>
		  {
			  if (unlock_fire)
 800301a:	4b46      	ldr	r3, [pc, #280]	@ (8003134 <main+0xd18>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <main+0xc0e>
			  {
				  c[1] = 0x46;//F
 8003022:	4b45      	ldr	r3, [pc, #276]	@ (8003138 <main+0xd1c>)
 8003024:	2246      	movs	r2, #70	@ 0x46
 8003026:	705a      	strb	r2, [r3, #1]
 8003028:	e033      	b.n	8003092 <main+0xc76>
			  } else if (bypass_from_Eth)
 800302a:	4b44      	ldr	r3, [pc, #272]	@ (800313c <main+0xd20>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <main+0xc1e>
			  {
				  c[1] = 0x50;//P
 8003032:	4b41      	ldr	r3, [pc, #260]	@ (8003138 <main+0xd1c>)
 8003034:	2250      	movs	r2, #80	@ 0x50
 8003036:	705a      	strb	r2, [r3, #1]
 8003038:	e02b      	b.n	8003092 <main+0xc76>
			  } else if (bypass_from_REB)
 800303a:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <main+0xd24>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <main+0xc2e>
			  {
				  c[1] = 0x45;//E
 8003042:	4b3d      	ldr	r3, [pc, #244]	@ (8003138 <main+0xd1c>)
 8003044:	2245      	movs	r2, #69	@ 0x45
 8003046:	705a      	strb	r2, [r3, #1]
 8003048:	e023      	b.n	8003092 <main+0xc76>
			  } else if (!REB_connected)
 800304a:	4b3e      	ldr	r3, [pc, #248]	@ (8003144 <main+0xd28>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	f083 0301 	eor.w	r3, r3, #1
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <main+0xc44>
			  {
				  c[1] = 0x44;//D
 8003058:	4b37      	ldr	r3, [pc, #220]	@ (8003138 <main+0xd1c>)
 800305a:	2244      	movs	r2, #68	@ 0x44
 800305c:	705a      	strb	r2, [r3, #1]
 800305e:	e018      	b.n	8003092 <main+0xc76>
			  } else if (!HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin))
 8003060:	2104      	movs	r1, #4
 8003062:	4839      	ldr	r0, [pc, #228]	@ (8003148 <main+0xd2c>)
 8003064:	f003 ff5e 	bl	8006f24 <HAL_GPIO_ReadPin>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <main+0xc5a>
			  {
				  c[1] = 0x43;//C
 800306e:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <main+0xd1c>)
 8003070:	2243      	movs	r2, #67	@ 0x43
 8003072:	705a      	strb	r2, [r3, #1]
 8003074:	e00d      	b.n	8003092 <main+0xc76>
			  } else if (!Ethernet_connected)
 8003076:	4b35      	ldr	r3, [pc, #212]	@ (800314c <main+0xd30>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	f083 0301 	eor.w	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <main+0xc70>
			  {
				  c[1] = 0x4F;//o
 8003084:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <main+0xd1c>)
 8003086:	224f      	movs	r2, #79	@ 0x4f
 8003088:	705a      	strb	r2, [r3, #1]
 800308a:	e002      	b.n	8003092 <main+0xc76>
			  } else
			  {
				  c[1] = 0x52;//r
 800308c:	4b2a      	ldr	r3, [pc, #168]	@ (8003138 <main+0xd1c>)
 800308e:	2252      	movs	r2, #82	@ 0x52
 8003090:	705a      	strb	r2, [r3, #1]
			  }
			  send(SOCK_NUM, c, 2);
 8003092:	2202      	movs	r2, #2
 8003094:	4928      	ldr	r1, [pc, #160]	@ (8003138 <main+0xd1c>)
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fe26 	bl	8000ce8 <send>
		  }
	  }

	  while (send_card_to_pc)
 800309c:	e02d      	b.n	80030fa <main+0xcde>
	  {
		  for (uint32_t i=0; i< number_card; i++)
 800309e:	2300      	movs	r3, #0
 80030a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030a4:	e01c      	b.n	80030e0 <main+0xcc4>
		  {
			  W25Q_FastRead_address(i*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&send_user);
 80030a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030aa:	015b      	lsls	r3, r3, #5
 80030ac:	4a28      	ldr	r2, [pc, #160]	@ (8003150 <main+0xd34>)
 80030ae:	2120      	movs	r1, #32
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fd33 	bl	8001b1c <W25Q_FastRead_address>
			  sendData_eth_CardID ("X", send_user);
 80030b6:	4e26      	ldr	r6, [pc, #152]	@ (8003150 <main+0xd34>)
 80030b8:	466d      	mov	r5, sp
 80030ba:	f106 040c 	add.w	r4, r6, #12
 80030be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	602b      	str	r3, [r5, #0]
 80030c6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80030ca:	4822      	ldr	r0, [pc, #136]	@ (8003154 <main+0xd38>)
 80030cc:	f001 f8b6 	bl	800423c <sendData_eth_CardID>
			  HAL_Delay(100);
 80030d0:	2064      	movs	r0, #100	@ 0x64
 80030d2:	f002 f8df 	bl	8005294 <HAL_Delay>
		  for (uint32_t i=0; i< number_card; i++)
 80030d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030da:	3301      	adds	r3, #1
 80030dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <main+0xd3c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3dc      	bcc.n	80030a6 <main+0xc8a>
		  }
//					  sendString("R", "CMPLT");
		  send_u8_eth("X", 1);
 80030ec:	2101      	movs	r1, #1
 80030ee:	4819      	ldr	r0, [pc, #100]	@ (8003154 <main+0xd38>)
 80030f0:	f001 f840 	bl	8004174 <send_u8_eth>
		  send_card_to_pc = false;
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <main+0xd40>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
	  while (send_card_to_pc)
 80030fa:	4b18      	ldr	r3, [pc, #96]	@ (800315c <main+0xd40>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1cd      	bne.n	800309e <main+0xc82>
	  }
	  while (write_mode)
 8003102:	e1c5      	b.n	8003490 <main+0x1074>
	  {
		  uint32_t totalCard = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		  if (send_uart_to_PC)
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <main+0xd44>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d02a      	beq.n	8003168 <main+0xd4c>
		  {
			  send_uart_to_PC = false;
 8003112:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <main+0xd44>)
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
			  sendString_uart("WEOK");
 8003118:	4812      	ldr	r0, [pc, #72]	@ (8003164 <main+0xd48>)
 800311a:	f001 f96d 	bl	80043f8 <sendString_uart>
 800311e:	e027      	b.n	8003170 <main+0xd54>
 8003120:	20000524 	.word	0x20000524
 8003124:	08009cd8 	.word	0x08009cd8
 8003128:	2000072b 	.word	0x2000072b
 800312c:	200006b0 	.word	0x200006b0
 8003130:	2000054c 	.word	0x2000054c
 8003134:	2000072f 	.word	0x2000072f
 8003138:	20000034 	.word	0x20000034
 800313c:	200006dd 	.word	0x200006dd
 8003140:	200006dc 	.word	0x200006dc
 8003144:	20000036 	.word	0x20000036
 8003148:	40010800 	.word	0x40010800
 800314c:	20000720 	.word	0x20000720
 8003150:	200007b4 	.word	0x200007b4
 8003154:	08009cdc 	.word	0x08009cdc
 8003158:	20000694 	.word	0x20000694
 800315c:	20000726 	.word	0x20000726
 8003160:	20000731 	.word	0x20000731
 8003164:	08009ce0 	.word	0x08009ce0
		  } else
		  {
			  sendString("W", "EOK");
 8003168:	49aa      	ldr	r1, [pc, #680]	@ (8003414 <main+0xff8>)
 800316a:	48ab      	ldr	r0, [pc, #684]	@ (8003418 <main+0xffc>)
 800316c:	f001 f818 	bl	80041a0 <sendString>
		  }
		  time_break = HAL_GetTick();
 8003170:	f002 f886 	bl	8005280 <HAL_GetTick>
 8003174:	4603      	mov	r3, r0
 8003176:	4aa9      	ldr	r2, [pc, #676]	@ (800341c <main+0x1000>)
 8003178:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 800317a:	4ba9      	ldr	r3, [pc, #676]	@ (8003420 <main+0x1004>)
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd f98e 	bl	80004a2 <getSn_RX_RSR>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	4ba6      	ldr	r3, [pc, #664]	@ (8003424 <main+0x1008>)
 800318c:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 800318e:	2000      	movs	r0, #0
 8003190:	f7fd f987 	bl	80004a2 <getSn_RX_RSR>
 8003194:	4603      	mov	r3, r0
 8003196:	461a      	mov	r2, r3
 8003198:	4ba2      	ldr	r3, [pc, #648]	@ (8003424 <main+0x1008>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	f040 8175 	bne.w	800348c <main+0x1070>
			  {
				  if (lenData > 500)
 80031a2:	4ba0      	ldr	r3, [pc, #640]	@ (8003424 <main+0x1008>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031aa:	d901      	bls.n	80031b0 <main+0xd94>
				  {
					  HAL_NVIC_SystemReset();
 80031ac:	f003 f883 	bl	80062b6 <HAL_NVIC_SystemReset>
				  }
				  if (!add_card_uart && (lenData > 0))
 80031b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003428 <main+0x100c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f083 0301 	eor.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80a7 	beq.w	800330e <main+0xef2>
 80031c0:	4b98      	ldr	r3, [pc, #608]	@ (8003424 <main+0x1008>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80a2 	beq.w	800330e <main+0xef2>
				  {
					  recv(SOCK_NUM, buf, lenData);
 80031ca:	4b96      	ldr	r3, [pc, #600]	@ (8003424 <main+0x1008>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	4996      	ldr	r1, [pc, #600]	@ (800342c <main+0x1010>)
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fe7f 	bl	8000ed8 <recv>
					  if (buf[0] == 0x57)
 80031da:	4b94      	ldr	r3, [pc, #592]	@ (800342c <main+0x1010>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b57      	cmp	r3, #87	@ 0x57
 80031e0:	f040 8095 	bne.w	800330e <main+0xef2>
					  {
						  if (buf[1] == 0x44)
 80031e4:	4b91      	ldr	r3, [pc, #580]	@ (800342c <main+0x1010>)
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	2b44      	cmp	r3, #68	@ 0x44
 80031ea:	f040 8089 	bne.w	8003300 <main+0xee4>
						  {
							  totalCard++;
 80031ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031f2:	3301      	adds	r3, #1
 80031f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							  write_user.STT = totalCard;
 80031f8:	4a8d      	ldr	r2, [pc, #564]	@ (8003430 <main+0x1014>)
 80031fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031fe:	6013      	str	r3, [r2, #0]
							  write_user.cardID =  buf[2]<<24|buf[3]<<16|buf[4]<<8|buf[5];
 8003200:	4b8a      	ldr	r3, [pc, #552]	@ (800342c <main+0x1010>)
 8003202:	789b      	ldrb	r3, [r3, #2]
 8003204:	061a      	lsls	r2, r3, #24
 8003206:	4b89      	ldr	r3, [pc, #548]	@ (800342c <main+0x1010>)
 8003208:	78db      	ldrb	r3, [r3, #3]
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	431a      	orrs	r2, r3
 800320e:	4b87      	ldr	r3, [pc, #540]	@ (800342c <main+0x1010>)
 8003210:	791b      	ldrb	r3, [r3, #4]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	4313      	orrs	r3, r2
 8003216:	4a85      	ldr	r2, [pc, #532]	@ (800342c <main+0x1010>)
 8003218:	7952      	ldrb	r2, [r2, #5]
 800321a:	4313      	orrs	r3, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4b84      	ldr	r3, [pc, #528]	@ (8003430 <main+0x1014>)
 8003220:	605a      	str	r2, [r3, #4]
							  write_user.permis[0] = buf[6];
 8003222:	4b82      	ldr	r3, [pc, #520]	@ (800342c <main+0x1010>)
 8003224:	799a      	ldrb	r2, [r3, #6]
 8003226:	4b82      	ldr	r3, [pc, #520]	@ (8003430 <main+0x1014>)
 8003228:	721a      	strb	r2, [r3, #8]
							  write_user.permis[1] = buf[7];
 800322a:	4b80      	ldr	r3, [pc, #512]	@ (800342c <main+0x1010>)
 800322c:	79da      	ldrb	r2, [r3, #7]
 800322e:	4b80      	ldr	r3, [pc, #512]	@ (8003430 <main+0x1014>)
 8003230:	725a      	strb	r2, [r3, #9]
							  write_user.permis[2] = buf[8];
 8003232:	4b7e      	ldr	r3, [pc, #504]	@ (800342c <main+0x1010>)
 8003234:	7a1a      	ldrb	r2, [r3, #8]
 8003236:	4b7e      	ldr	r3, [pc, #504]	@ (8003430 <main+0x1014>)
 8003238:	729a      	strb	r2, [r3, #10]
							  write_user.permis[3] = buf[9];
 800323a:	4b7c      	ldr	r3, [pc, #496]	@ (800342c <main+0x1010>)
 800323c:	7a5a      	ldrb	r2, [r3, #9]
 800323e:	4b7c      	ldr	r3, [pc, #496]	@ (8003430 <main+0x1014>)
 8003240:	72da      	strb	r2, [r3, #11]
							  write_user.permis[4] = buf[10];
 8003242:	4b7a      	ldr	r3, [pc, #488]	@ (800342c <main+0x1010>)
 8003244:	7a9a      	ldrb	r2, [r3, #10]
 8003246:	4b7a      	ldr	r3, [pc, #488]	@ (8003430 <main+0x1014>)
 8003248:	731a      	strb	r2, [r3, #12]
							  write_user.permis[5] = buf[11];
 800324a:	4b78      	ldr	r3, [pc, #480]	@ (800342c <main+0x1010>)
 800324c:	7ada      	ldrb	r2, [r3, #11]
 800324e:	4b78      	ldr	r3, [pc, #480]	@ (8003430 <main+0x1014>)
 8003250:	735a      	strb	r2, [r3, #13]
							  write_user.permis[6] = buf[12];
 8003252:	4b76      	ldr	r3, [pc, #472]	@ (800342c <main+0x1010>)
 8003254:	7b1a      	ldrb	r2, [r3, #12]
 8003256:	4b76      	ldr	r3, [pc, #472]	@ (8003430 <main+0x1014>)
 8003258:	739a      	strb	r2, [r3, #14]
							  write_user.permis[7] = buf[13];
 800325a:	4b74      	ldr	r3, [pc, #464]	@ (800342c <main+0x1010>)
 800325c:	7b5a      	ldrb	r2, [r3, #13]
 800325e:	4b74      	ldr	r3, [pc, #464]	@ (8003430 <main+0x1014>)
 8003260:	73da      	strb	r2, [r3, #15]
							  write_user.beginDate = buf[14];
 8003262:	4b72      	ldr	r3, [pc, #456]	@ (800342c <main+0x1010>)
 8003264:	7b9a      	ldrb	r2, [r3, #14]
 8003266:	4b72      	ldr	r3, [pc, #456]	@ (8003430 <main+0x1014>)
 8003268:	74da      	strb	r2, [r3, #19]
							  write_user.beginMonth = buf[15];
 800326a:	4b70      	ldr	r3, [pc, #448]	@ (800342c <main+0x1010>)
 800326c:	7bda      	ldrb	r2, [r3, #15]
 800326e:	4b70      	ldr	r3, [pc, #448]	@ (8003430 <main+0x1014>)
 8003270:	749a      	strb	r2, [r3, #18]
							  write_user.beginYear = buf[16]<<8 | buf[17];
 8003272:	4b6e      	ldr	r3, [pc, #440]	@ (800342c <main+0x1010>)
 8003274:	7c1b      	ldrb	r3, [r3, #16]
 8003276:	b21b      	sxth	r3, r3
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	b21a      	sxth	r2, r3
 800327c:	4b6b      	ldr	r3, [pc, #428]	@ (800342c <main+0x1010>)
 800327e:	7c5b      	ldrb	r3, [r3, #17]
 8003280:	b21b      	sxth	r3, r3
 8003282:	4313      	orrs	r3, r2
 8003284:	b21b      	sxth	r3, r3
 8003286:	b29a      	uxth	r2, r3
 8003288:	4b69      	ldr	r3, [pc, #420]	@ (8003430 <main+0x1014>)
 800328a:	821a      	strh	r2, [r3, #16]
							  write_user.beginHour = buf[18];
 800328c:	4b67      	ldr	r3, [pc, #412]	@ (800342c <main+0x1010>)
 800328e:	7c9a      	ldrb	r2, [r3, #18]
 8003290:	4b67      	ldr	r3, [pc, #412]	@ (8003430 <main+0x1014>)
 8003292:	751a      	strb	r2, [r3, #20]
							  write_user.beginMinute = buf[19];
 8003294:	4b65      	ldr	r3, [pc, #404]	@ (800342c <main+0x1010>)
 8003296:	7cda      	ldrb	r2, [r3, #19]
 8003298:	4b65      	ldr	r3, [pc, #404]	@ (8003430 <main+0x1014>)
 800329a:	755a      	strb	r2, [r3, #21]
							  write_user.endDate = buf[20];
 800329c:	4b63      	ldr	r3, [pc, #396]	@ (800342c <main+0x1010>)
 800329e:	7d1a      	ldrb	r2, [r3, #20]
 80032a0:	4b63      	ldr	r3, [pc, #396]	@ (8003430 <main+0x1014>)
 80032a2:	765a      	strb	r2, [r3, #25]
							  write_user.endMonth = buf[21];
 80032a4:	4b61      	ldr	r3, [pc, #388]	@ (800342c <main+0x1010>)
 80032a6:	7d5a      	ldrb	r2, [r3, #21]
 80032a8:	4b61      	ldr	r3, [pc, #388]	@ (8003430 <main+0x1014>)
 80032aa:	761a      	strb	r2, [r3, #24]
							  write_user.endYear = buf[22]<<8 | buf[23];
 80032ac:	4b5f      	ldr	r3, [pc, #380]	@ (800342c <main+0x1010>)
 80032ae:	7d9b      	ldrb	r3, [r3, #22]
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	b21a      	sxth	r2, r3
 80032b6:	4b5d      	ldr	r3, [pc, #372]	@ (800342c <main+0x1010>)
 80032b8:	7ddb      	ldrb	r3, [r3, #23]
 80032ba:	b21b      	sxth	r3, r3
 80032bc:	4313      	orrs	r3, r2
 80032be:	b21b      	sxth	r3, r3
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003430 <main+0x1014>)
 80032c4:	82da      	strh	r2, [r3, #22]
							  write_user.endHour = buf[24];
 80032c6:	4b59      	ldr	r3, [pc, #356]	@ (800342c <main+0x1010>)
 80032c8:	7e1a      	ldrb	r2, [r3, #24]
 80032ca:	4b59      	ldr	r3, [pc, #356]	@ (8003430 <main+0x1014>)
 80032cc:	769a      	strb	r2, [r3, #26]
							  write_user.endMinute = buf[25];
 80032ce:	4b57      	ldr	r3, [pc, #348]	@ (800342c <main+0x1010>)
 80032d0:	7e5a      	ldrb	r2, [r3, #25]
 80032d2:	4b57      	ldr	r3, [pc, #348]	@ (8003430 <main+0x1014>)
 80032d4:	76da      	strb	r2, [r3, #27]
							  W25Q_Write_Nbytes((totalCard-1)*sizeof(user_info_t) + Block32, (uint8_t *)&write_user, sizeof(user_info_t));
 80032d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032da:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80032de:	33ff      	adds	r3, #255	@ 0xff
 80032e0:	015b      	lsls	r3, r3, #5
 80032e2:	2220      	movs	r2, #32
 80032e4:	4952      	ldr	r1, [pc, #328]	@ (8003430 <main+0x1014>)
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fcd5 	bl	8001c96 <W25Q_Write_Nbytes>
							  sendString("W", "DOK");
 80032ec:	4951      	ldr	r1, [pc, #324]	@ (8003434 <main+0x1018>)
 80032ee:	484a      	ldr	r0, [pc, #296]	@ (8003418 <main+0xffc>)
 80032f0:	f000 ff56 	bl	80041a0 <sendString>
							  time_break = HAL_GetTick();
 80032f4:	f001 ffc4 	bl	8005280 <HAL_GetTick>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4a48      	ldr	r2, [pc, #288]	@ (800341c <main+0x1000>)
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e006      	b.n	800330e <main+0xef2>
						  } else if (buf[1] == 0x43)
 8003300:	4b4a      	ldr	r3, [pc, #296]	@ (800342c <main+0x1010>)
 8003302:	785b      	ldrb	r3, [r3, #1]
 8003304:	2b43      	cmp	r3, #67	@ 0x43
 8003306:	d102      	bne.n	800330e <main+0xef2>
						  {
							  write_done = true;
 8003308:	4b4b      	ldr	r3, [pc, #300]	@ (8003438 <main+0x101c>)
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
				  }
			  } else
			  {
				  continue;
			  }
			  if (new_card)
 800330e:	4b4b      	ldr	r3, [pc, #300]	@ (800343c <main+0x1020>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80a4 	beq.w	8003460 <main+0x1044>
			  {
				  totalCard++;
 8003318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800331c:	3301      	adds	r3, #1
 800331e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				  W25Q_Write_Nbytes((totalCard-1)*sizeof(user_info_t) + Block32, (uint8_t *)&write_user, sizeof(user_info_t));
 8003322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003326:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800332a:	33ff      	adds	r3, #255	@ 0xff
 800332c:	015b      	lsls	r3, r3, #5
 800332e:	2220      	movs	r2, #32
 8003330:	493f      	ldr	r1, [pc, #252]	@ (8003430 <main+0x1014>)
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fcaf 	bl	8001c96 <W25Q_Write_Nbytes>
				  new_card = false;
 8003338:	4b40      	ldr	r3, [pc, #256]	@ (800343c <main+0x1020>)
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
				  sendString_uart("WDOK");
 800333e:	4840      	ldr	r0, [pc, #256]	@ (8003440 <main+0x1024>)
 8003340:	f001 f85a 	bl	80043f8 <sendString_uart>
				  time_break = HAL_GetTick();
 8003344:	f001 ff9c 	bl	8005280 <HAL_GetTick>
 8003348:	4603      	mov	r3, r0
 800334a:	4a34      	ldr	r2, [pc, #208]	@ (800341c <main+0x1000>)
 800334c:	6013      	str	r3, [r2, #0]
			  }
			  while (write_done)
 800334e:	e087      	b.n	8003460 <main+0x1044>
			  {
				  for (uint8_t i=0; i<(number_card)*sizeof(user_info_t)/Sector+1; i++)
 8003350:	2300      	movs	r3, #0
 8003352:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8003356:	e00a      	b.n	800336e <main+0xf52>
				  {
					  W25Q_Erase_Sector(i);
 8003358:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800335c:	b29b      	uxth	r3, r3
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fc48 	bl	8001bf4 <W25Q_Erase_Sector>
				  for (uint8_t i=0; i<(number_card)*sizeof(user_info_t)/Sector+1; i++)
 8003364:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8003368:	3301      	adds	r3, #1
 800336a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800336e:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8003372:	4b34      	ldr	r3, [pc, #208]	@ (8003444 <main+0x1028>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	015b      	lsls	r3, r3, #5
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	3301      	adds	r3, #1
 800337e:	429a      	cmp	r2, r3
 8003380:	d3ea      	bcc.n	8003358 <main+0xf3c>
				  }
				  for (uint32_t i = 0; i<totalCard; i++)
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003388:	e016      	b.n	80033b8 <main+0xf9c>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t)+ Block32, sizeof(user_info_t), (uint8_t *)&send_user);
 800338a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800338e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003392:	015b      	lsls	r3, r3, #5
 8003394:	4a2c      	ldr	r2, [pc, #176]	@ (8003448 <main+0x102c>)
 8003396:	2120      	movs	r1, #32
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fbbf 	bl	8001b1c <W25Q_FastRead_address>
					  W25Q_Write_Nbytes(i*sizeof(user_info_t), (uint8_t *)&send_user, sizeof(user_info_t));
 800339e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033a2:	015b      	lsls	r3, r3, #5
 80033a4:	2220      	movs	r2, #32
 80033a6:	4928      	ldr	r1, [pc, #160]	@ (8003448 <main+0x102c>)
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe fc74 	bl	8001c96 <W25Q_Write_Nbytes>
				  for (uint32_t i = 0; i<totalCard; i++)
 80033ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033b2:	3301      	adds	r3, #1
 80033b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033b8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80033bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d3e2      	bcc.n	800338a <main+0xf6e>
				  }
				  for (uint32_t i=0; i<((totalCard*sizeof(user_info_t)/Sector)+1); i++)
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033ca:	e00d      	b.n	80033e8 <main+0xfcc>
				  {
					  W25Q_Erase_Sector(i + Block32/256);
 80033cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe fc0b 	bl	8001bf4 <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((totalCard*sizeof(user_info_t)/Sector)+1); i++)
 80033de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033e2:	3301      	adds	r3, #1
 80033e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033ec:	015b      	lsls	r3, r3, #5
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	3301      	adds	r3, #1
 80033f4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3e7      	bcc.n	80033cc <main+0xfb0>
				  }
				  if (send_uart_to_PC)
 80033fc:	4b13      	ldr	r3, [pc, #76]	@ (800344c <main+0x1030>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d027      	beq.n	8003454 <main+0x1038>
				  {
					  send_uart_to_PC = false;
 8003404:	4b11      	ldr	r3, [pc, #68]	@ (800344c <main+0x1030>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
					  sendString_uart("WCOK");
 800340a:	4811      	ldr	r0, [pc, #68]	@ (8003450 <main+0x1034>)
 800340c:	f000 fff4 	bl	80043f8 <sendString_uart>
 8003410:	e024      	b.n	800345c <main+0x1040>
 8003412:	bf00      	nop
 8003414:	08009ce8 	.word	0x08009ce8
 8003418:	08009cec 	.word	0x08009cec
 800341c:	2000069c 	.word	0x2000069c
 8003420:	200006dd 	.word	0x200006dd
 8003424:	200006a0 	.word	0x200006a0
 8003428:	2000072b 	.word	0x2000072b
 800342c:	20000304 	.word	0x20000304
 8003430:	20000794 	.word	0x20000794
 8003434:	08009cf0 	.word	0x08009cf0
 8003438:	20000724 	.word	0x20000724
 800343c:	20000725 	.word	0x20000725
 8003440:	08009cf4 	.word	0x08009cf4
 8003444:	20000694 	.word	0x20000694
 8003448:	200007b4 	.word	0x200007b4
 800344c:	20000731 	.word	0x20000731
 8003450:	08009cfc 	.word	0x08009cfc
				  } else
				  {
					  sendString("W", "COK");
 8003454:	49a6      	ldr	r1, [pc, #664]	@ (80036f0 <main+0x12d4>)
 8003456:	48a7      	ldr	r0, [pc, #668]	@ (80036f4 <main+0x12d8>)
 8003458:	f000 fea2 	bl	80041a0 <sendString>
				  }
				  HAL_NVIC_SystemReset();
 800345c:	f002 ff2b 	bl	80062b6 <HAL_NVIC_SystemReset>
			  while (write_done)
 8003460:	4ba5      	ldr	r3, [pc, #660]	@ (80036f8 <main+0x12dc>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f af73 	bne.w	8003350 <main+0xf34>
			  }

			  if ((abs(HAL_GetTick() - time_break) > Timeout_online))
 800346a:	f001 ff09 	bl	8005280 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	4ba2      	ldr	r3, [pc, #648]	@ (80036fc <main+0x12e0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	bfb8      	it	lt
 800347a:	425b      	neglt	r3, r3
 800347c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003480:	4293      	cmp	r3, r2
 8003482:	f77f ae7d 	ble.w	8003180 <main+0xd64>
			  {
				  HAL_NVIC_SystemReset();
 8003486:	f002 ff16 	bl	80062b6 <HAL_NVIC_SystemReset>
 800348a:	e679      	b.n	8003180 <main+0xd64>
				  continue;
 800348c:	bf00      	nop
			  lenData = getSn_RX_RSR(SOCK_NUM);
 800348e:	e677      	b.n	8003180 <main+0xd64>
	  while (write_mode)
 8003490:	4b9b      	ldr	r3, [pc, #620]	@ (8003700 <main+0x12e4>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f47f ae35 	bne.w	8003104 <main+0xce8>
			  }
		  }
	  }
	  while (write_mode_somecard)
 800349a:	e294      	b.n	80039c6 <main+0x15aa>
	  {
		  uint32_t add_card = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  if (send_uart_to_PC)
 80034a2:	4b98      	ldr	r3, [pc, #608]	@ (8003704 <main+0x12e8>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d006      	beq.n	80034b8 <main+0x109c>
		  {
			  send_uart_to_PC = false;
 80034aa:	4b96      	ldr	r3, [pc, #600]	@ (8003704 <main+0x12e8>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
			  sendString_uart("WAOK");
 80034b0:	4895      	ldr	r0, [pc, #596]	@ (8003708 <main+0x12ec>)
 80034b2:	f000 ffa1 	bl	80043f8 <sendString_uart>
 80034b6:	e003      	b.n	80034c0 <main+0x10a4>
		  } else
		  {
			  sendString("W", "AOK");
 80034b8:	4994      	ldr	r1, [pc, #592]	@ (800370c <main+0x12f0>)
 80034ba:	488e      	ldr	r0, [pc, #568]	@ (80036f4 <main+0x12d8>)
 80034bc:	f000 fe70 	bl	80041a0 <sendString>
		  }
		  time_break = HAL_GetTick();
 80034c0:	f001 fede 	bl	8005280 <HAL_GetTick>
 80034c4:	4603      	mov	r3, r0
 80034c6:	4a8d      	ldr	r2, [pc, #564]	@ (80036fc <main+0x12e0>)
 80034c8:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 80034ca:	4b91      	ldr	r3, [pc, #580]	@ (8003710 <main+0x12f4>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 80034d0:	2000      	movs	r0, #0
 80034d2:	f7fc ffe6 	bl	80004a2 <getSn_RX_RSR>
 80034d6:	4603      	mov	r3, r0
 80034d8:	461a      	mov	r2, r3
 80034da:	4b8e      	ldr	r3, [pc, #568]	@ (8003714 <main+0x12f8>)
 80034dc:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fc ffdf 	bl	80004a2 <getSn_RX_RSR>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b8a      	ldr	r3, [pc, #552]	@ (8003714 <main+0x12f8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	f040 8268 	bne.w	80039c2 <main+0x15a6>
			  {
				  if (lenData > 512)
 80034f2:	4b88      	ldr	r3, [pc, #544]	@ (8003714 <main+0x12f8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034fa:	d901      	bls.n	8003500 <main+0x10e4>
				  {
					  HAL_NVIC_SystemReset();
 80034fc:	f002 fedb 	bl	80062b6 <HAL_NVIC_SystemReset>
				  }
				  if (!add_card_uart && (lenData > 0))
 8003500:	4b85      	ldr	r3, [pc, #532]	@ (8003718 <main+0x12fc>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	f083 0301 	eor.w	r3, r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80a9 	beq.w	8003662 <main+0x1246>
 8003510:	4b80      	ldr	r3, [pc, #512]	@ (8003714 <main+0x12f8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80a4 	beq.w	8003662 <main+0x1246>
				  {
					  recv(SOCK_NUM, buf, lenData);
 800351a:	4b7e      	ldr	r3, [pc, #504]	@ (8003714 <main+0x12f8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	497e      	ldr	r1, [pc, #504]	@ (800371c <main+0x1300>)
 8003524:	2000      	movs	r0, #0
 8003526:	f7fd fcd7 	bl	8000ed8 <recv>
					  if (buf[0] == 0x57)
 800352a:	4b7c      	ldr	r3, [pc, #496]	@ (800371c <main+0x1300>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b57      	cmp	r3, #87	@ 0x57
 8003530:	f040 8097 	bne.w	8003662 <main+0x1246>
					  {
						  if (buf[1] == 0x44)
 8003534:	4b79      	ldr	r3, [pc, #484]	@ (800371c <main+0x1300>)
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	2b44      	cmp	r3, #68	@ 0x44
 800353a:	f040 808b 	bne.w	8003654 <main+0x1238>
						  {
							  add_card++;
 800353e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003542:	3301      	adds	r3, #1
 8003544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							  write_user.STT++;
 8003548:	4b75      	ldr	r3, [pc, #468]	@ (8003720 <main+0x1304>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	4a74      	ldr	r2, [pc, #464]	@ (8003720 <main+0x1304>)
 8003550:	6013      	str	r3, [r2, #0]
							  write_user.cardID =  buf[2]<<24|buf[3]<<16|buf[4]<<8|buf[5];
 8003552:	4b72      	ldr	r3, [pc, #456]	@ (800371c <main+0x1300>)
 8003554:	789b      	ldrb	r3, [r3, #2]
 8003556:	061a      	lsls	r2, r3, #24
 8003558:	4b70      	ldr	r3, [pc, #448]	@ (800371c <main+0x1300>)
 800355a:	78db      	ldrb	r3, [r3, #3]
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	431a      	orrs	r2, r3
 8003560:	4b6e      	ldr	r3, [pc, #440]	@ (800371c <main+0x1300>)
 8003562:	791b      	ldrb	r3, [r3, #4]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	4313      	orrs	r3, r2
 8003568:	4a6c      	ldr	r2, [pc, #432]	@ (800371c <main+0x1300>)
 800356a:	7952      	ldrb	r2, [r2, #5]
 800356c:	4313      	orrs	r3, r2
 800356e:	461a      	mov	r2, r3
 8003570:	4b6b      	ldr	r3, [pc, #428]	@ (8003720 <main+0x1304>)
 8003572:	605a      	str	r2, [r3, #4]
							  write_user.permis[0] = buf[6];
 8003574:	4b69      	ldr	r3, [pc, #420]	@ (800371c <main+0x1300>)
 8003576:	799a      	ldrb	r2, [r3, #6]
 8003578:	4b69      	ldr	r3, [pc, #420]	@ (8003720 <main+0x1304>)
 800357a:	721a      	strb	r2, [r3, #8]
							  write_user.permis[1] = buf[7];
 800357c:	4b67      	ldr	r3, [pc, #412]	@ (800371c <main+0x1300>)
 800357e:	79da      	ldrb	r2, [r3, #7]
 8003580:	4b67      	ldr	r3, [pc, #412]	@ (8003720 <main+0x1304>)
 8003582:	725a      	strb	r2, [r3, #9]
							  write_user.permis[2] = buf[8];
 8003584:	4b65      	ldr	r3, [pc, #404]	@ (800371c <main+0x1300>)
 8003586:	7a1a      	ldrb	r2, [r3, #8]
 8003588:	4b65      	ldr	r3, [pc, #404]	@ (8003720 <main+0x1304>)
 800358a:	729a      	strb	r2, [r3, #10]
							  write_user.permis[3] = buf[9];
 800358c:	4b63      	ldr	r3, [pc, #396]	@ (800371c <main+0x1300>)
 800358e:	7a5a      	ldrb	r2, [r3, #9]
 8003590:	4b63      	ldr	r3, [pc, #396]	@ (8003720 <main+0x1304>)
 8003592:	72da      	strb	r2, [r3, #11]
							  write_user.permis[4] = buf[10];
 8003594:	4b61      	ldr	r3, [pc, #388]	@ (800371c <main+0x1300>)
 8003596:	7a9a      	ldrb	r2, [r3, #10]
 8003598:	4b61      	ldr	r3, [pc, #388]	@ (8003720 <main+0x1304>)
 800359a:	731a      	strb	r2, [r3, #12]
							  write_user.permis[5] = buf[11];
 800359c:	4b5f      	ldr	r3, [pc, #380]	@ (800371c <main+0x1300>)
 800359e:	7ada      	ldrb	r2, [r3, #11]
 80035a0:	4b5f      	ldr	r3, [pc, #380]	@ (8003720 <main+0x1304>)
 80035a2:	735a      	strb	r2, [r3, #13]
							  write_user.permis[6] = buf[12];
 80035a4:	4b5d      	ldr	r3, [pc, #372]	@ (800371c <main+0x1300>)
 80035a6:	7b1a      	ldrb	r2, [r3, #12]
 80035a8:	4b5d      	ldr	r3, [pc, #372]	@ (8003720 <main+0x1304>)
 80035aa:	739a      	strb	r2, [r3, #14]
							  write_user.permis[7] = buf[13];
 80035ac:	4b5b      	ldr	r3, [pc, #364]	@ (800371c <main+0x1300>)
 80035ae:	7b5a      	ldrb	r2, [r3, #13]
 80035b0:	4b5b      	ldr	r3, [pc, #364]	@ (8003720 <main+0x1304>)
 80035b2:	73da      	strb	r2, [r3, #15]
							  write_user.beginDate = buf[14];
 80035b4:	4b59      	ldr	r3, [pc, #356]	@ (800371c <main+0x1300>)
 80035b6:	7b9a      	ldrb	r2, [r3, #14]
 80035b8:	4b59      	ldr	r3, [pc, #356]	@ (8003720 <main+0x1304>)
 80035ba:	74da      	strb	r2, [r3, #19]
							  write_user.beginMonth = buf[15];
 80035bc:	4b57      	ldr	r3, [pc, #348]	@ (800371c <main+0x1300>)
 80035be:	7bda      	ldrb	r2, [r3, #15]
 80035c0:	4b57      	ldr	r3, [pc, #348]	@ (8003720 <main+0x1304>)
 80035c2:	749a      	strb	r2, [r3, #18]
							  write_user.beginYear = buf[16]<<8 | buf[17];
 80035c4:	4b55      	ldr	r3, [pc, #340]	@ (800371c <main+0x1300>)
 80035c6:	7c1b      	ldrb	r3, [r3, #16]
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	b21a      	sxth	r2, r3
 80035ce:	4b53      	ldr	r3, [pc, #332]	@ (800371c <main+0x1300>)
 80035d0:	7c5b      	ldrb	r3, [r3, #17]
 80035d2:	b21b      	sxth	r3, r3
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b21b      	sxth	r3, r3
 80035d8:	b29a      	uxth	r2, r3
 80035da:	4b51      	ldr	r3, [pc, #324]	@ (8003720 <main+0x1304>)
 80035dc:	821a      	strh	r2, [r3, #16]
							  write_user.beginHour = buf[18];
 80035de:	4b4f      	ldr	r3, [pc, #316]	@ (800371c <main+0x1300>)
 80035e0:	7c9a      	ldrb	r2, [r3, #18]
 80035e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003720 <main+0x1304>)
 80035e4:	751a      	strb	r2, [r3, #20]
							  write_user.beginMinute = buf[19];
 80035e6:	4b4d      	ldr	r3, [pc, #308]	@ (800371c <main+0x1300>)
 80035e8:	7cda      	ldrb	r2, [r3, #19]
 80035ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003720 <main+0x1304>)
 80035ec:	755a      	strb	r2, [r3, #21]
							  write_user.endDate = buf[20];
 80035ee:	4b4b      	ldr	r3, [pc, #300]	@ (800371c <main+0x1300>)
 80035f0:	7d1a      	ldrb	r2, [r3, #20]
 80035f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003720 <main+0x1304>)
 80035f4:	765a      	strb	r2, [r3, #25]
							  write_user.endMonth = buf[21];
 80035f6:	4b49      	ldr	r3, [pc, #292]	@ (800371c <main+0x1300>)
 80035f8:	7d5a      	ldrb	r2, [r3, #21]
 80035fa:	4b49      	ldr	r3, [pc, #292]	@ (8003720 <main+0x1304>)
 80035fc:	761a      	strb	r2, [r3, #24]
							  write_user.endYear = buf[22]<<8 | buf[23];
 80035fe:	4b47      	ldr	r3, [pc, #284]	@ (800371c <main+0x1300>)
 8003600:	7d9b      	ldrb	r3, [r3, #22]
 8003602:	b21b      	sxth	r3, r3
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	b21a      	sxth	r2, r3
 8003608:	4b44      	ldr	r3, [pc, #272]	@ (800371c <main+0x1300>)
 800360a:	7ddb      	ldrb	r3, [r3, #23]
 800360c:	b21b      	sxth	r3, r3
 800360e:	4313      	orrs	r3, r2
 8003610:	b21b      	sxth	r3, r3
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b42      	ldr	r3, [pc, #264]	@ (8003720 <main+0x1304>)
 8003616:	82da      	strh	r2, [r3, #22]
							  write_user.endHour = buf[24];
 8003618:	4b40      	ldr	r3, [pc, #256]	@ (800371c <main+0x1300>)
 800361a:	7e1a      	ldrb	r2, [r3, #24]
 800361c:	4b40      	ldr	r3, [pc, #256]	@ (8003720 <main+0x1304>)
 800361e:	769a      	strb	r2, [r3, #26]
							  write_user.endMinute = buf[25];
 8003620:	4b3e      	ldr	r3, [pc, #248]	@ (800371c <main+0x1300>)
 8003622:	7e5a      	ldrb	r2, [r3, #25]
 8003624:	4b3e      	ldr	r3, [pc, #248]	@ (8003720 <main+0x1304>)
 8003626:	76da      	strb	r2, [r3, #27]
							  W25Q_Write_Nbytes((add_card-1)*sizeof(user_info_t) + Block63, (uint8_t *)&write_user, sizeof(user_info_t));
 8003628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800362c:	f503 33fb 	add.w	r3, r3, #128512	@ 0x1f600
 8003630:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003634:	015b      	lsls	r3, r3, #5
 8003636:	2220      	movs	r2, #32
 8003638:	4939      	ldr	r1, [pc, #228]	@ (8003720 <main+0x1304>)
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fb2b 	bl	8001c96 <W25Q_Write_Nbytes>
							  sendString("W", "DOK");
 8003640:	4938      	ldr	r1, [pc, #224]	@ (8003724 <main+0x1308>)
 8003642:	482c      	ldr	r0, [pc, #176]	@ (80036f4 <main+0x12d8>)
 8003644:	f000 fdac 	bl	80041a0 <sendString>
							  time_break = HAL_GetTick();
 8003648:	f001 fe1a 	bl	8005280 <HAL_GetTick>
 800364c:	4603      	mov	r3, r0
 800364e:	4a2b      	ldr	r2, [pc, #172]	@ (80036fc <main+0x12e0>)
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e006      	b.n	8003662 <main+0x1246>
						  } else if (buf[1] == 0x43)
 8003654:	4b31      	ldr	r3, [pc, #196]	@ (800371c <main+0x1300>)
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b43      	cmp	r3, #67	@ 0x43
 800365a:	d102      	bne.n	8003662 <main+0x1246>
						  {
							  write_done = true;
 800365c:	4b26      	ldr	r3, [pc, #152]	@ (80036f8 <main+0x12dc>)
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
				  }
			  } else
			  {
				  continue;
			  }
			  if (new_card)
 8003662:	4b31      	ldr	r3, [pc, #196]	@ (8003728 <main+0x130c>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8195 	beq.w	8003996 <main+0x157a>
			  {
				  add_card++;
 800366c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003670:	3301      	adds	r3, #1
 8003672:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				  W25Q_Write_Nbytes((add_card-1)*sizeof(user_info_t) + Block63, (uint8_t *)&write_user, sizeof(user_info_t));
 8003676:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800367a:	f503 33fb 	add.w	r3, r3, #128512	@ 0x1f600
 800367e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003682:	015b      	lsls	r3, r3, #5
 8003684:	2220      	movs	r2, #32
 8003686:	4926      	ldr	r1, [pc, #152]	@ (8003720 <main+0x1304>)
 8003688:	4618      	mov	r0, r3
 800368a:	f7fe fb04 	bl	8001c96 <W25Q_Write_Nbytes>
				  new_card = false;
 800368e:	4b26      	ldr	r3, [pc, #152]	@ (8003728 <main+0x130c>)
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
				  sendString_uart("WDOK");
 8003694:	4825      	ldr	r0, [pc, #148]	@ (800372c <main+0x1310>)
 8003696:	f000 feaf 	bl	80043f8 <sendString_uart>
				  time_break = HAL_GetTick();
 800369a:	f001 fdf1 	bl	8005280 <HAL_GetTick>
 800369e:	4603      	mov	r3, r0
 80036a0:	4a16      	ldr	r2, [pc, #88]	@ (80036fc <main+0x12e0>)
 80036a2:	6013      	str	r3, [r2, #0]
			  }
			  while (write_done)
 80036a4:	e177      	b.n	8003996 <main+0x157a>
			  {
				  // ghi các thẻ hiện tại vào bộ nhớ đệm từ Block 33
				  for (uint32_t i = 0; i<number_card; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036ac:	e016      	b.n	80036dc <main+0x12c0>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&send_user);
 80036ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036b2:	015b      	lsls	r3, r3, #5
 80036b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003730 <main+0x1314>)
 80036b6:	2120      	movs	r1, #32
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fa2f 	bl	8001b1c <W25Q_FastRead_address>
					  W25Q_Write_Nbytes(i*sizeof(user_info_t) + Block32, (uint8_t *)&send_user, sizeof(user_info_t));
 80036be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036c2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80036c6:	015b      	lsls	r3, r3, #5
 80036c8:	2220      	movs	r2, #32
 80036ca:	4919      	ldr	r1, [pc, #100]	@ (8003730 <main+0x1314>)
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fae2 	bl	8001c96 <W25Q_Write_Nbytes>
				  for (uint32_t i = 0; i<number_card; i++)
 80036d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036d6:	3301      	adds	r3, #1
 80036d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036dc:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <main+0x1318>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d3e2      	bcc.n	80036ae <main+0x1292>
				  }
				  // xóa bộ nhớ ban đầu
				  for (uint8_t i=0; i<(number_card*sizeof(user_info_t)/Sector+1); i++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 80036ee:	e02e      	b.n	800374e <main+0x1332>
 80036f0:	08009d04 	.word	0x08009d04
 80036f4:	08009cec 	.word	0x08009cec
 80036f8:	20000724 	.word	0x20000724
 80036fc:	2000069c 	.word	0x2000069c
 8003700:	20000723 	.word	0x20000723
 8003704:	20000731 	.word	0x20000731
 8003708:	08009d08 	.word	0x08009d08
 800370c:	08009d10 	.word	0x08009d10
 8003710:	200006dd 	.word	0x200006dd
 8003714:	200006a0 	.word	0x200006a0
 8003718:	2000072b 	.word	0x2000072b
 800371c:	20000304 	.word	0x20000304
 8003720:	20000794 	.word	0x20000794
 8003724:	08009cf0 	.word	0x08009cf0
 8003728:	20000725 	.word	0x20000725
 800372c:	08009cf4 	.word	0x08009cf4
 8003730:	200007b4 	.word	0x200007b4
 8003734:	20000694 	.word	0x20000694
				  {
					  W25Q_Erase_Sector(i);
 8003738:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800373c:	b29b      	uxth	r3, r3
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fa58 	bl	8001bf4 <W25Q_Erase_Sector>
				  for (uint8_t i=0; i<(number_card*sizeof(user_info_t)/Sector+1); i++)
 8003744:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8003748:	3301      	adds	r3, #1
 800374a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 800374e:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8003752:	4ba0      	ldr	r3, [pc, #640]	@ (80039d4 <main+0x15b8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	015b      	lsls	r3, r3, #5
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	3301      	adds	r3, #1
 800375e:	429a      	cmp	r2, r3
 8003760:	d3ea      	bcc.n	8003738 <main+0x131c>
				  }
				  uint32_t i = 0, j = 0, k = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800376e:	2300      	movs	r3, #0
 8003770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  user_info_t old_user, new_user;

				  while (i < number_card && j < add_card)
 8003774:	e06d      	b.n	8003852 <main+0x1436>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&old_user);
 8003776:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800377a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800377e:	015b      	lsls	r3, r3, #5
 8003780:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003784:	2120      	movs	r1, #32
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe f9c8 	bl	8001b1c <W25Q_FastRead_address>
					  W25Q_FastRead_address(j*sizeof(user_info_t) + Block63, sizeof(user_info_t), (uint8_t *)&new_user);
 800378c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003790:	f503 33fc 	add.w	r3, r3, #129024	@ 0x1f800
 8003794:	015b      	lsls	r3, r3, #5
 8003796:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800379a:	2120      	movs	r1, #32
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe f9bd 	bl	8001b1c <W25Q_FastRead_address>
					  if (old_user.cardID < new_user.cardID)
 80037a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d217      	bcs.n	80037da <main+0x13be>
					  {
						  old_user.STT = k + 1;
 80037aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037ae:	3301      	adds	r3, #1
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&old_user, sizeof(user_info_t));
 80037b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037b6:	015b      	lsls	r3, r3, #5
 80037b8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80037bc:	2220      	movs	r2, #32
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fa69 	bl	8001c96 <W25Q_Write_Nbytes>
						  i++; // Dịch chỉ số của mảng đã lấy
 80037c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c8:	3301      	adds	r3, #1
 80037ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						  k++;
 80037ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037d2:	3301      	adds	r3, #1
 80037d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037d8:	e03b      	b.n	8003852 <main+0x1436>
					  } else if (old_user.cardID > new_user.cardID)
 80037da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037de:	429a      	cmp	r2, r3
 80037e0:	d917      	bls.n	8003812 <main+0x13f6>
					  {
						  new_user.STT = k + 1;
 80037e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037e6:	3301      	adds	r3, #1
 80037e8:	647b      	str	r3, [r7, #68]	@ 0x44
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 80037ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037ee:	015b      	lsls	r3, r3, #5
 80037f0:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80037f4:	2220      	movs	r2, #32
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fa4d 	bl	8001c96 <W25Q_Write_Nbytes>
						  j++; // Dịch chỉ số của mảng đã lấy
 80037fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003800:	3301      	adds	r3, #1
 8003802:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						  k++;
 8003806:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800380a:	3301      	adds	r3, #1
 800380c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003810:	e01f      	b.n	8003852 <main+0x1436>
					  } else if (old_user.cardID == new_user.cardID)
 8003812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003816:	429a      	cmp	r2, r3
 8003818:	d11b      	bne.n	8003852 <main+0x1436>
					  {
						  new_user.STT = k + 1;
 800381a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800381e:	3301      	adds	r3, #1
 8003820:	647b      	str	r3, [r7, #68]	@ 0x44
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 8003822:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003826:	015b      	lsls	r3, r3, #5
 8003828:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800382c:	2220      	movs	r2, #32
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fa31 	bl	8001c96 <W25Q_Write_Nbytes>
						  j++; // Dịch chỉ số của mảng đã lấy
 8003834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003838:	3301      	adds	r3, #1
 800383a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						  i++;
 800383e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003842:	3301      	adds	r3, #1
 8003844:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						  k++;
 8003848:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800384c:	3301      	adds	r3, #1
 800384e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (i < number_card && j < add_card)
 8003852:	4b60      	ldr	r3, [pc, #384]	@ (80039d4 <main+0x15b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800385a:	429a      	cmp	r2, r3
 800385c:	d228      	bcs.n	80038b0 <main+0x1494>
 800385e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003862:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003866:	429a      	cmp	r2, r3
 8003868:	d385      	bcc.n	8003776 <main+0x135a>
					  }
				  }
				  while (i < number_card)
 800386a:	e021      	b.n	80038b0 <main+0x1494>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&old_user);
 800386c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003870:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003874:	015b      	lsls	r3, r3, #5
 8003876:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800387a:	2120      	movs	r1, #32
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe f94d 	bl	8001b1c <W25Q_FastRead_address>
					  old_user.STT = k + 1;
 8003882:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003886:	3301      	adds	r3, #1
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24
					  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&old_user, sizeof(user_info_t));
 800388a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800388e:	015b      	lsls	r3, r3, #5
 8003890:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003894:	2220      	movs	r2, #32
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe f9fd 	bl	8001c96 <W25Q_Write_Nbytes>
					  i++;
 800389c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038a0:	3301      	adds	r3, #1
 80038a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					  k++;
 80038a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038aa:	3301      	adds	r3, #1
 80038ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (i < number_card)
 80038b0:	4b48      	ldr	r3, [pc, #288]	@ (80039d4 <main+0x15b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d3d7      	bcc.n	800386c <main+0x1450>
				  }
				  while (j < add_card)
 80038bc:	e021      	b.n	8003902 <main+0x14e6>
				  {
					  W25Q_FastRead_address(j*sizeof(user_info_t) + Block63, sizeof(user_info_t), (uint8_t *)&new_user);
 80038be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038c2:	f503 33fc 	add.w	r3, r3, #129024	@ 0x1f800
 80038c6:	015b      	lsls	r3, r3, #5
 80038c8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80038cc:	2120      	movs	r1, #32
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe f924 	bl	8001b1c <W25Q_FastRead_address>
					  new_user.STT = k + 1;
 80038d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038d8:	3301      	adds	r3, #1
 80038da:	647b      	str	r3, [r7, #68]	@ 0x44
					  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 80038dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038e0:	015b      	lsls	r3, r3, #5
 80038e2:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80038e6:	2220      	movs	r2, #32
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe f9d4 	bl	8001c96 <W25Q_Write_Nbytes>
					  j++;
 80038ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038f2:	3301      	adds	r3, #1
 80038f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
					  k++;
 80038f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038fc:	3301      	adds	r3, #1
 80038fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (j < add_card)
 8003902:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003906:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800390a:	429a      	cmp	r2, r3
 800390c:	d3d7      	bcc.n	80038be <main+0x14a2>
				  }
				  for (uint32_t i=0; i<((number_card*sizeof(user_info_t)/Sector)+1); i++)
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003914:	e00d      	b.n	8003932 <main+0x1516>
				  {
					  W25Q_Erase_Sector(i + Block32/256);
 8003916:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800391a:	b29b      	uxth	r3, r3
 800391c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003920:	b29b      	uxth	r3, r3
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe f966 	bl	8001bf4 <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((number_card*sizeof(user_info_t)/Sector)+1); i++)
 8003928:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800392c:	3301      	adds	r3, #1
 800392e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003932:	4b28      	ldr	r3, [pc, #160]	@ (80039d4 <main+0x15b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	015b      	lsls	r3, r3, #5
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	3301      	adds	r3, #1
 800393e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003942:	429a      	cmp	r2, r3
 8003944:	d3e7      	bcc.n	8003916 <main+0x14fa>
				  }
				  for (uint32_t i=0; i<((add_card*sizeof(user_info_t)/Sector)+1); i++)
 8003946:	2300      	movs	r3, #0
 8003948:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800394a:	e00a      	b.n	8003962 <main+0x1546>
				  {
					  W25Q_Erase_Sector(i + Block63/256);
 800394c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800394e:	b29b      	uxth	r3, r3
 8003950:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
 8003954:	b29b      	uxth	r3, r3
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe f94c 	bl	8001bf4 <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((add_card*sizeof(user_info_t)/Sector)+1); i++)
 800395c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800395e:	3301      	adds	r3, #1
 8003960:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003962:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003966:	015b      	lsls	r3, r3, #5
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	3301      	adds	r3, #1
 800396e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003970:	429a      	cmp	r2, r3
 8003972:	d3eb      	bcc.n	800394c <main+0x1530>
				  }
				  if (send_uart_to_PC)
 8003974:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <main+0x15bc>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d006      	beq.n	800398a <main+0x156e>
				  {
					  send_uart_to_PC = false;
 800397c:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <main+0x15bc>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
					  sendString_uart("WCOK");
 8003982:	4816      	ldr	r0, [pc, #88]	@ (80039dc <main+0x15c0>)
 8003984:	f000 fd38 	bl	80043f8 <sendString_uart>
 8003988:	e003      	b.n	8003992 <main+0x1576>
				  } else
				  {
					  sendString("W", "COK");
 800398a:	4915      	ldr	r1, [pc, #84]	@ (80039e0 <main+0x15c4>)
 800398c:	4815      	ldr	r0, [pc, #84]	@ (80039e4 <main+0x15c8>)
 800398e:	f000 fc07 	bl	80041a0 <sendString>
				  }
				  HAL_NVIC_SystemReset();
 8003992:	f002 fc90 	bl	80062b6 <HAL_NVIC_SystemReset>
			  while (write_done)
 8003996:	4b14      	ldr	r3, [pc, #80]	@ (80039e8 <main+0x15cc>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f47f ae83 	bne.w	80036a6 <main+0x128a>
			  }

			  if (abs(HAL_GetTick() - time_break) > Timeout_online)
 80039a0:	f001 fc6e 	bl	8005280 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b11      	ldr	r3, [pc, #68]	@ (80039ec <main+0x15d0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bfb8      	it	lt
 80039b0:	425b      	neglt	r3, r3
 80039b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80039b6:	4293      	cmp	r3, r2
 80039b8:	f77f ad8a 	ble.w	80034d0 <main+0x10b4>
			  {
				  HAL_NVIC_SystemReset();
 80039bc:	f002 fc7b 	bl	80062b6 <HAL_NVIC_SystemReset>
 80039c0:	e586      	b.n	80034d0 <main+0x10b4>
				  continue;
 80039c2:	bf00      	nop
			  lenData = getSn_RX_RSR(SOCK_NUM);
 80039c4:	e584      	b.n	80034d0 <main+0x10b4>
	  while (write_mode_somecard)
 80039c6:	4b0a      	ldr	r3, [pc, #40]	@ (80039f0 <main+0x15d4>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f47f ad66 	bne.w	800349c <main+0x1080>
			  }
		  }
	  }
	  while (write_card_by_hand)
 80039d0:	e06b      	b.n	8003aaa <main+0x168e>
 80039d2:	bf00      	nop
 80039d4:	20000694 	.word	0x20000694
 80039d8:	20000731 	.word	0x20000731
 80039dc:	08009cfc 	.word	0x08009cfc
 80039e0:	08009d04 	.word	0x08009d04
 80039e4:	08009cec 	.word	0x08009cec
 80039e8:	20000724 	.word	0x20000724
 80039ec:	2000069c 	.word	0x2000069c
 80039f0:	20000722 	.word	0x20000722
	  {
		  sendString("W", "HOK");
 80039f4:	4950      	ldr	r1, [pc, #320]	@ (8003b38 <main+0x171c>)
 80039f6:	4851      	ldr	r0, [pc, #324]	@ (8003b3c <main+0x1720>)
 80039f8:	f000 fbd2 	bl	80041a0 <sendString>
		  time_break = HAL_GetTick();
 80039fc:	f001 fc40 	bl	8005280 <HAL_GetTick>
 8003a00:	4603      	mov	r3, r0
 8003a02:	4a4f      	ldr	r2, [pc, #316]	@ (8003b40 <main+0x1724>)
 8003a04:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 8003a06:	4b4f      	ldr	r3, [pc, #316]	@ (8003b44 <main+0x1728>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f7fc fd48 	bl	80004a2 <getSn_RX_RSR>
 8003a12:	4603      	mov	r3, r0
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b4c      	ldr	r3, [pc, #304]	@ (8003b48 <main+0x172c>)
 8003a18:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f7fc fd41 	bl	80004a2 <getSn_RX_RSR>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	4b48      	ldr	r3, [pc, #288]	@ (8003b48 <main+0x172c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d11c      	bne.n	8003a66 <main+0x164a>
			  {
				  if (lenData > 512)
 8003a2c:	4b46      	ldr	r3, [pc, #280]	@ (8003b48 <main+0x172c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a34:	d901      	bls.n	8003a3a <main+0x161e>
				  {
					  HAL_NVIC_SystemReset();
 8003a36:	f002 fc3e 	bl	80062b6 <HAL_NVIC_SystemReset>
				  }
				  if (lenData > 0)
 8003a3a:	4b43      	ldr	r3, [pc, #268]	@ (8003b48 <main+0x172c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d011      	beq.n	8003a66 <main+0x164a>
				  {
					  recv(SOCK_NUM, buf, lenData);
 8003a42:	4b41      	ldr	r3, [pc, #260]	@ (8003b48 <main+0x172c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4940      	ldr	r1, [pc, #256]	@ (8003b4c <main+0x1730>)
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7fd fa43 	bl	8000ed8 <recv>
					  if (buf[0] == 0x57)
 8003a52:	4b3e      	ldr	r3, [pc, #248]	@ (8003b4c <main+0x1730>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b57      	cmp	r3, #87	@ 0x57
 8003a58:	d105      	bne.n	8003a66 <main+0x164a>
					  {
						  if (buf[1] == 0x43)
 8003a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b4c <main+0x1730>)
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b43      	cmp	r3, #67	@ 0x43
 8003a60:	d101      	bne.n	8003a66 <main+0x164a>
						  {
							  HAL_NVIC_SystemReset();
 8003a62:	f002 fc28 	bl	80062b6 <HAL_NVIC_SystemReset>
						  }
					  }
				  }
			  }
			  if (new_wcode)
 8003a66:	4b3a      	ldr	r3, [pc, #232]	@ (8003b50 <main+0x1734>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <main+0x166e>
			  {
				  new_wcode = false;
 8003a6e:	4b38      	ldr	r3, [pc, #224]	@ (8003b50 <main+0x1734>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
				  sendData_eth("H", wcode);
 8003a74:	4b37      	ldr	r3, [pc, #220]	@ (8003b54 <main+0x1738>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4837      	ldr	r0, [pc, #220]	@ (8003b58 <main+0x173c>)
 8003a7c:	f000 fb58 	bl	8004130 <sendData_eth>
				  time_break = HAL_GetTick();
 8003a80:	f001 fbfe 	bl	8005280 <HAL_GetTick>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4a2e      	ldr	r2, [pc, #184]	@ (8003b40 <main+0x1724>)
 8003a88:	6013      	str	r3, [r2, #0]
			  }
			  if (abs(HAL_GetTick() - time_break) > Timeout_online)
 8003a8a:	f001 fbf9 	bl	8005280 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4b2b      	ldr	r3, [pc, #172]	@ (8003b40 <main+0x1724>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bfb8      	it	lt
 8003a9a:	425b      	neglt	r3, r3
 8003a9c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	ddb3      	ble.n	8003a0c <main+0x15f0>
			  {
				  HAL_NVIC_SystemReset();
 8003aa4:	f002 fc07 	bl	80062b6 <HAL_NVIC_SystemReset>
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003aa8:	e7b0      	b.n	8003a0c <main+0x15f0>
	  while (write_card_by_hand)
 8003aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003b5c <main+0x1740>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1a0      	bne.n	80039f4 <main+0x15d8>
			  }
		  }
	  }
	  if (RST_set)
 8003ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b60 <main+0x1744>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d030      	beq.n	8003b1c <main+0x1700>
	  {
		  if (RST_timer_last > 10000)
 8003aba:	4b2a      	ldr	r3, [pc, #168]	@ (8003b64 <main+0x1748>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d928      	bls.n	8003b18 <main+0x16fc>
		  {
			  ip1 = 192;
 8003ac6:	4b28      	ldr	r3, [pc, #160]	@ (8003b68 <main+0x174c>)
 8003ac8:	22c0      	movs	r2, #192	@ 0xc0
 8003aca:	701a      	strb	r2, [r3, #0]
			  ip2 = 168;
 8003acc:	4b27      	ldr	r3, [pc, #156]	@ (8003b6c <main+0x1750>)
 8003ace:	22a8      	movs	r2, #168	@ 0xa8
 8003ad0:	701a      	strb	r2, [r3, #0]
			  ip3 = 0;
 8003ad2:	4b27      	ldr	r3, [pc, #156]	@ (8003b70 <main+0x1754>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
			  ip4 = 72;
 8003ad8:	4b26      	ldr	r3, [pc, #152]	@ (8003b74 <main+0x1758>)
 8003ada:	2248      	movs	r2, #72	@ 0x48
 8003adc:	701a      	strb	r2, [r3, #0]
			  ip_server1 = 192;
 8003ade:	4b26      	ldr	r3, [pc, #152]	@ (8003b78 <main+0x175c>)
 8003ae0:	22c0      	movs	r2, #192	@ 0xc0
 8003ae2:	701a      	strb	r2, [r3, #0]
			  ip_server2 = 168;
 8003ae4:	4b25      	ldr	r3, [pc, #148]	@ (8003b7c <main+0x1760>)
 8003ae6:	22a8      	movs	r2, #168	@ 0xa8
 8003ae8:	701a      	strb	r2, [r3, #0]
			  ip_server3 = 0;
 8003aea:	4b25      	ldr	r3, [pc, #148]	@ (8003b80 <main+0x1764>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
			  ip_server4 = 2;
 8003af0:	4b24      	ldr	r3, [pc, #144]	@ (8003b84 <main+0x1768>)
 8003af2:	2202      	movs	r2, #2
 8003af4:	701a      	strb	r2, [r3, #0]
			  port_server = 6000;
 8003af6:	4b24      	ldr	r3, [pc, #144]	@ (8003b88 <main+0x176c>)
 8003af8:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003afc:	801a      	strh	r2, [r3, #0]
			  port_client = 0;
 8003afe:	4b23      	ldr	r3, [pc, #140]	@ (8003b8c <main+0x1770>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	801a      	strh	r2, [r3, #0]
			  time_delay = 1;
 8003b04:	4b22      	ldr	r3, [pc, #136]	@ (8003b90 <main+0x1774>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
			  elevator_mode = 0;
 8003b0a:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <main+0x1778>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
			  W25Q_EraseChip();
 8003b10:	f7fe f857 	bl	8001bc2 <W25Q_EraseChip>
			  save_data();
 8003b14:	f000 fcd8 	bl	80044c8 <save_data>
		  }
		  HAL_NVIC_SystemReset();
 8003b18:	f002 fbcd 	bl	80062b6 <HAL_NVIC_SystemReset>
	  }
	  if (counter_reset == 100)
 8003b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003b98 <main+0x177c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b64      	cmp	r3, #100	@ 0x64
 8003b22:	d101      	bne.n	8003b28 <main+0x170c>
	  {
		  HAL_NVIC_SystemReset();
 8003b24:	f002 fbc7 	bl	80062b6 <HAL_NVIC_SystemReset>
	  }
	  HAL_Delay(10);
 8003b28:	200a      	movs	r0, #10
 8003b2a:	f001 fbb3 	bl	8005294 <HAL_Delay>
 8003b2e:	f7fe beb8 	b.w	80028a2 <main+0x486>
		  continue;
 8003b32:	bf00      	nop
	  lenData = getSn_RX_RSR(SOCK_NUM);
 8003b34:	f7fe beb5 	b.w	80028a2 <main+0x486>
 8003b38:	08009d14 	.word	0x08009d14
 8003b3c:	08009cec 	.word	0x08009cec
 8003b40:	2000069c 	.word	0x2000069c
 8003b44:	200006dd 	.word	0x200006dd
 8003b48:	200006a0 	.word	0x200006a0
 8003b4c:	20000304 	.word	0x20000304
 8003b50:	20000728 	.word	0x20000728
 8003b54:	2000058c 	.word	0x2000058c
 8003b58:	08009d18 	.word	0x08009d18
 8003b5c:	2000072c 	.word	0x2000072c
 8003b60:	2000072e 	.word	0x2000072e
 8003b64:	200006c4 	.word	0x200006c4
 8003b68:	2000051c 	.word	0x2000051c
 8003b6c:	2000051d 	.word	0x2000051d
 8003b70:	2000051e 	.word	0x2000051e
 8003b74:	2000051f 	.word	0x2000051f
 8003b78:	20000520 	.word	0x20000520
 8003b7c:	20000521 	.word	0x20000521
 8003b80:	20000522 	.word	0x20000522
 8003b84:	20000523 	.word	0x20000523
 8003b88:	20000582 	.word	0x20000582
 8003b8c:	20000584 	.word	0x20000584
 8003b90:	20000510 	.word	0x20000510
 8003b94:	20000542 	.word	0x20000542
 8003b98:	200006cc 	.word	0x200006cc

08003b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b090      	sub	sp, #64	@ 0x40
 8003ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ba2:	f107 0318 	add.w	r3, r7, #24
 8003ba6:	2228      	movs	r2, #40	@ 0x28
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f006 f832 	bl	8009c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bb0:	1d3b      	adds	r3, r7, #4
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003bbe:	2309      	movs	r3, #9
 8003bc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003bc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003be0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003be6:	f107 0318 	add.w	r3, r7, #24
 8003bea:	4618      	mov	r0, r3
 8003bec:	f003 fa4e 	bl	800708c <HAL_RCC_OscConfig>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003bf6:	f001 f881 	bl	8004cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bfa:	230f      	movs	r3, #15
 8003bfc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c10:	1d3b      	adds	r3, r7, #4
 8003c12:	2102      	movs	r1, #2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f003 fcbb 	bl	8007590 <HAL_RCC_ClockConfig>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003c20:	f001 f86c 	bl	8004cfc <Error_Handler>
  }
}
 8003c24:	bf00      	nop
 8003c26:	3740      	adds	r7, #64	@ 0x40
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003c30:	4b17      	ldr	r3, [pc, #92]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c32:	4a18      	ldr	r2, [pc, #96]	@ (8003c94 <MX_CAN_Init+0x68>)
 8003c34:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 60;
 8003c36:	4b16      	ldr	r3, [pc, #88]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c38:	223c      	movs	r2, #60	@ 0x3c
 8003c3a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003c3c:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003c42:	4b13      	ldr	r3, [pc, #76]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8003c48:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c4a:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8003c4e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8003c50:	4b0f      	ldr	r3, [pc, #60]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c52:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8003c56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003c58:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003c64:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003c6a:	4b09      	ldr	r3, [pc, #36]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003c70:	4b07      	ldr	r3, [pc, #28]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003c76:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003c7c:	4804      	ldr	r0, [pc, #16]	@ (8003c90 <MX_CAN_Init+0x64>)
 8003c7e:	f001 fb4b 	bl	8005318 <HAL_CAN_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003c88:	f001 f838 	bl	8004cfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	2000009c 	.word	0x2000009c
 8003c94:	40006400 	.word	0x40006400

08003c98 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003c9c:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <MX_IWDG_Init+0x2c>)
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <MX_IWDG_Init+0x30>)
 8003ca0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003ca2:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <MX_IWDG_Init+0x2c>)
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1874;
 8003ca8:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <MX_IWDG_Init+0x2c>)
 8003caa:	f240 7252 	movw	r2, #1874	@ 0x752
 8003cae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003cb0:	4804      	ldr	r0, [pc, #16]	@ (8003cc4 <MX_IWDG_Init+0x2c>)
 8003cb2:	f003 f997 	bl	8006fe4 <HAL_IWDG_Init>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003cbc:	f001 f81e 	bl	8004cfc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003cc0:	bf00      	nop
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	200000c4 	.word	0x200000c4
 8003cc8:	40003000 	.word	0x40003000

08003ccc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cd0:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003cd2:	4a18      	ldr	r2, [pc, #96]	@ (8003d34 <MX_SPI1_Init+0x68>)
 8003cd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cd6:	4b16      	ldr	r3, [pc, #88]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003cd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003cdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cde:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ce4:	4b12      	ldr	r3, [pc, #72]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cea:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003d00:	2220      	movs	r2, #32
 8003d02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d04:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d0a:	4b09      	ldr	r3, [pc, #36]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d10:	4b07      	ldr	r3, [pc, #28]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d16:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003d18:	220a      	movs	r2, #10
 8003d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d1c:	4804      	ldr	r0, [pc, #16]	@ (8003d30 <MX_SPI1_Init+0x64>)
 8003d1e:	f003 fdc7 	bl	80078b0 <HAL_SPI_Init>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d28:	f000 ffe8 	bl	8004cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	200000d0 	.word	0x200000d0
 8003d34:	40013000 	.word	0x40013000

08003d38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d3c:	4b17      	ldr	r3, [pc, #92]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d3e:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <MX_SPI2_Init+0x68>)
 8003d40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d42:	4b16      	ldr	r3, [pc, #88]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d50:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d56:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d62:	4b0e      	ldr	r3, [pc, #56]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d70:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d76:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d7c:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d84:	220a      	movs	r2, #10
 8003d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d88:	4804      	ldr	r0, [pc, #16]	@ (8003d9c <MX_SPI2_Init+0x64>)
 8003d8a:	f003 fd91 	bl	80078b0 <HAL_SPI_Init>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d94:	f000 ffb2 	bl	8004cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d98:	bf00      	nop
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000128 	.word	0x20000128
 8003da0:	40003800 	.word	0x40003800

08003da4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]
 8003db4:	609a      	str	r2, [r3, #8]
 8003db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003db8:	463b      	mov	r3, r7
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e3c <MX_TIM2_Init+0x98>)
 8003dc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003dc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e3c <MX_TIM2_Init+0x98>)
 8003dca:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003dce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e3c <MX_TIM2_Init+0x98>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003dd6:	4b19      	ldr	r3, [pc, #100]	@ (8003e3c <MX_TIM2_Init+0x98>)
 8003dd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ddc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dde:	4b17      	ldr	r3, [pc, #92]	@ (8003e3c <MX_TIM2_Init+0x98>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003de4:	4b15      	ldr	r3, [pc, #84]	@ (8003e3c <MX_TIM2_Init+0x98>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003dea:	4814      	ldr	r0, [pc, #80]	@ (8003e3c <MX_TIM2_Init+0x98>)
 8003dec:	f004 faf5 	bl	80083da <HAL_TIM_Base_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003df6:	f000 ff81 	bl	8004cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e00:	f107 0308 	add.w	r3, r7, #8
 8003e04:	4619      	mov	r1, r3
 8003e06:	480d      	ldr	r0, [pc, #52]	@ (8003e3c <MX_TIM2_Init+0x98>)
 8003e08:	f004 fc78 	bl	80086fc <HAL_TIM_ConfigClockSource>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003e12:	f000 ff73 	bl	8004cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e1e:	463b      	mov	r3, r7
 8003e20:	4619      	mov	r1, r3
 8003e22:	4806      	ldr	r0, [pc, #24]	@ (8003e3c <MX_TIM2_Init+0x98>)
 8003e24:	f004 fe5a 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003e2e:	f000 ff65 	bl	8004cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e32:	bf00      	nop
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000180 	.word	0x20000180

08003e40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e46:	f107 0308 	add.w	r3, r7, #8
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	609a      	str	r2, [r3, #8]
 8003e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e54:	463b      	mov	r3, r7
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <MX_TIM3_Init+0x94>)
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed8 <MX_TIM3_Init+0x98>)
 8003e60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000;
 8003e62:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed4 <MX_TIM3_Init+0x94>)
 8003e64:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003e68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed4 <MX_TIM3_Init+0x94>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003e70:	4b18      	ldr	r3, [pc, #96]	@ (8003ed4 <MX_TIM3_Init+0x94>)
 8003e72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e78:	4b16      	ldr	r3, [pc, #88]	@ (8003ed4 <MX_TIM3_Init+0x94>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e7e:	4b15      	ldr	r3, [pc, #84]	@ (8003ed4 <MX_TIM3_Init+0x94>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e84:	4813      	ldr	r0, [pc, #76]	@ (8003ed4 <MX_TIM3_Init+0x94>)
 8003e86:	f004 faa8 	bl	80083da <HAL_TIM_Base_Init>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003e90:	f000 ff34 	bl	8004cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e9a:	f107 0308 	add.w	r3, r7, #8
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480c      	ldr	r0, [pc, #48]	@ (8003ed4 <MX_TIM3_Init+0x94>)
 8003ea2:	f004 fc2b 	bl	80086fc <HAL_TIM_ConfigClockSource>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003eac:	f000 ff26 	bl	8004cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003eb8:	463b      	mov	r3, r7
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4805      	ldr	r0, [pc, #20]	@ (8003ed4 <MX_TIM3_Init+0x94>)
 8003ebe:	f004 fe0d 	bl	8008adc <HAL_TIMEx_MasterConfigSynchronization>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003ec8:	f000 ff18 	bl	8004cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ecc:	bf00      	nop
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200001c8 	.word	0x200001c8
 8003ed8:	40000400 	.word	0x40000400

08003edc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ee0:	4b11      	ldr	r3, [pc, #68]	@ (8003f28 <MX_USART1_UART_Init+0x4c>)
 8003ee2:	4a12      	ldr	r2, [pc, #72]	@ (8003f2c <MX_USART1_UART_Init+0x50>)
 8003ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003ee6:	4b10      	ldr	r3, [pc, #64]	@ (8003f28 <MX_USART1_UART_Init+0x4c>)
 8003ee8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003eee:	4b0e      	ldr	r3, [pc, #56]	@ (8003f28 <MX_USART1_UART_Init+0x4c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <MX_USART1_UART_Init+0x4c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003efa:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <MX_USART1_UART_Init+0x4c>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <MX_USART1_UART_Init+0x4c>)
 8003f02:	220c      	movs	r2, #12
 8003f04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f06:	4b08      	ldr	r3, [pc, #32]	@ (8003f28 <MX_USART1_UART_Init+0x4c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <MX_USART1_UART_Init+0x4c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f12:	4805      	ldr	r0, [pc, #20]	@ (8003f28 <MX_USART1_UART_Init+0x4c>)
 8003f14:	f004 fe52 	bl	8008bbc <HAL_UART_Init>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f1e:	f000 feed 	bl	8004cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000210 	.word	0x20000210
 8003f2c:	40013800 	.word	0x40013800

08003f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f36:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <MX_DMA_Init+0x38>)
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003f68 <MX_DMA_Init+0x38>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6153      	str	r3, [r2, #20]
 8003f42:	4b09      	ldr	r3, [pc, #36]	@ (8003f68 <MX_DMA_Init+0x38>)
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	607b      	str	r3, [r7, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2100      	movs	r1, #0
 8003f52:	200f      	movs	r0, #15
 8003f54:	f002 f985 	bl	8006262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003f58:	200f      	movs	r0, #15
 8003f5a:	f002 f99e 	bl	800629a <HAL_NVIC_EnableIRQ>

}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000

08003f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f72:	f107 0310 	add.w	r3, r7, #16
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
 8003f7e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f80:	4b66      	ldr	r3, [pc, #408]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	4a65      	ldr	r2, [pc, #404]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003f86:	f043 0310 	orr.w	r3, r3, #16
 8003f8a:	6193      	str	r3, [r2, #24]
 8003f8c:	4b63      	ldr	r3, [pc, #396]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f98:	4b60      	ldr	r3, [pc, #384]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4a5f      	ldr	r2, [pc, #380]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003f9e:	f043 0320 	orr.w	r3, r3, #32
 8003fa2:	6193      	str	r3, [r2, #24]
 8003fa4:	4b5d      	ldr	r3, [pc, #372]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	4a59      	ldr	r2, [pc, #356]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003fb6:	f043 0304 	orr.w	r3, r3, #4
 8003fba:	6193      	str	r3, [r2, #24]
 8003fbc:	4b57      	ldr	r3, [pc, #348]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc8:	4b54      	ldr	r3, [pc, #336]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	4a53      	ldr	r2, [pc, #332]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003fce:	f043 0308 	orr.w	r3, r3, #8
 8003fd2:	6193      	str	r3, [r2, #24]
 8003fd4:	4b51      	ldr	r3, [pc, #324]	@ (800411c <MX_GPIO_Init+0x1b0>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_STT_Pin|LED_STT_ETH_Pin|LED_BP_Pin, GPIO_PIN_RESET);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8003fe6:	484e      	ldr	r0, [pc, #312]	@ (8004120 <MX_GPIO_Init+0x1b4>)
 8003fe8:	f002 ffb3 	bl	8006f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003fec:	2201      	movs	r2, #1
 8003fee:	2110      	movs	r1, #16
 8003ff0:	484c      	ldr	r0, [pc, #304]	@ (8004124 <MX_GPIO_Init+0x1b8>)
 8003ff2:	f002 ffae 	bl	8006f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|S_OUT2_Pin|S_OUT1_Pin, GPIO_PIN_RESET);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2132      	movs	r1, #50	@ 0x32
 8003ffa:	484b      	ldr	r0, [pc, #300]	@ (8004128 <MX_GPIO_Init+0x1bc>)
 8003ffc:	f002 ffa9 	bl	8006f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_SET);
 8004000:	2201      	movs	r2, #1
 8004002:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004006:	4848      	ldr	r0, [pc, #288]	@ (8004128 <MX_GPIO_Init+0x1bc>)
 8004008:	f002 ffa3 	bl	8006f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004012:	4844      	ldr	r0, [pc, #272]	@ (8004124 <MX_GPIO_Init+0x1b8>)
 8004014:	f002 ff9d 	bl	8006f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STT_Pin LED_STT_ETH_Pin LED_BP_Pin */
  GPIO_InitStruct.Pin = LED_STT_Pin|LED_STT_ETH_Pin|LED_BP_Pin;
 8004018:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800401c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401e:	2301      	movs	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004026:	2302      	movs	r3, #2
 8004028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800402a:	f107 0310 	add.w	r3, r7, #16
 800402e:	4619      	mov	r1, r3
 8004030:	483b      	ldr	r0, [pc, #236]	@ (8004120 <MX_GPIO_Init+0x1b4>)
 8004032:	f002 fdf3 	bl	8006c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BYPASS_Pin */
  GPIO_InitStruct.Pin = BYPASS_Pin;
 8004036:	2304      	movs	r3, #4
 8004038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800403e:	2301      	movs	r3, #1
 8004040:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BYPASS_GPIO_Port, &GPIO_InitStruct);
 8004042:	f107 0310 	add.w	r3, r7, #16
 8004046:	4619      	mov	r1, r3
 8004048:	4836      	ldr	r0, [pc, #216]	@ (8004124 <MX_GPIO_Init+0x1b8>)
 800404a:	f002 fde7 	bl	8006c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800404e:	2310      	movs	r3, #16
 8004050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004052:	2301      	movs	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800405a:	2303      	movs	r3, #3
 800405c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800405e:	f107 0310 	add.w	r3, r7, #16
 8004062:	4619      	mov	r1, r3
 8004064:	482f      	ldr	r0, [pc, #188]	@ (8004124 <MX_GPIO_Init+0x1b8>)
 8004066:	f002 fdd9 	bl	8006c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800406a:	2301      	movs	r3, #1
 800406c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800406e:	4b2f      	ldr	r3, [pc, #188]	@ (800412c <MX_GPIO_Init+0x1c0>)
 8004070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004076:	f107 0310 	add.w	r3, r7, #16
 800407a:	4619      	mov	r1, r3
 800407c:	482a      	ldr	r0, [pc, #168]	@ (8004128 <MX_GPIO_Init+0x1bc>)
 800407e:	f002 fdcd 	bl	8006c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 S_OUT2_Pin S_OUT1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|S_OUT2_Pin|S_OUT1_Pin;
 8004082:	2332      	movs	r3, #50	@ 0x32
 8004084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004086:	2301      	movs	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	2302      	movs	r3, #2
 8004090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004092:	f107 0310 	add.w	r3, r7, #16
 8004096:	4619      	mov	r1, r3
 8004098:	4823      	ldr	r0, [pc, #140]	@ (8004128 <MX_GPIO_Init+0x1bc>)
 800409a:	f002 fdbf 	bl	8006c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_W25_Pin */
  GPIO_InitStruct.Pin = CS_W25_Pin;
 800409e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a4:	2301      	movs	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040ac:	2303      	movs	r3, #3
 80040ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_W25_GPIO_Port, &GPIO_InitStruct);
 80040b0:	f107 0310 	add.w	r3, r7, #16
 80040b4:	4619      	mov	r1, r3
 80040b6:	481c      	ldr	r0, [pc, #112]	@ (8004128 <MX_GPIO_Init+0x1bc>)
 80040b8:	f002 fdb0 	bl	8006c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DE_Pin */
  GPIO_InitStruct.Pin = DE_Pin;
 80040bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c2:	2301      	movs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ca:	2302      	movs	r3, #2
 80040cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 80040ce:	f107 0310 	add.w	r3, r7, #16
 80040d2:	4619      	mov	r1, r3
 80040d4:	4813      	ldr	r0, [pc, #76]	@ (8004124 <MX_GPIO_Init+0x1b8>)
 80040d6:	f002 fda1 	bl	8006c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80040da:	2340      	movs	r3, #64	@ 0x40
 80040dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040de:	4b13      	ldr	r3, [pc, #76]	@ (800412c <MX_GPIO_Init+0x1c0>)
 80040e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040e2:	2301      	movs	r3, #1
 80040e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80040e6:	f107 0310 	add.w	r3, r7, #16
 80040ea:	4619      	mov	r1, r3
 80040ec:	480e      	ldr	r0, [pc, #56]	@ (8004128 <MX_GPIO_Init+0x1bc>)
 80040ee:	f002 fd95 	bl	8006c1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2101      	movs	r1, #1
 80040f6:	2006      	movs	r0, #6
 80040f8:	f002 f8b3 	bl	8006262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80040fc:	2006      	movs	r0, #6
 80040fe:	f002 f8cc 	bl	800629a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8004102:	2200      	movs	r2, #0
 8004104:	2107      	movs	r1, #7
 8004106:	2017      	movs	r0, #23
 8004108:	f002 f8ab 	bl	8006262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800410c:	2017      	movs	r0, #23
 800410e:	f002 f8c4 	bl	800629a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004112:	bf00      	nop
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	40011000 	.word	0x40011000
 8004124:	40010800 	.word	0x40010800
 8004128:	40010c00 	.word	0x40010c00
 800412c:	10210000 	.word	0x10210000

08004130 <sendData_eth>:

/* USER CODE BEGIN 4 */
void sendData_eth (char *CMD, uint32_t data)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	uint8_t cmd[6];
	cmd[0] = CMD[0];
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	723b      	strb	r3, [r7, #8]
	cmd[1] = data>>24&0xFF;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	0e1b      	lsrs	r3, r3, #24
 8004144:	b2db      	uxtb	r3, r3
 8004146:	727b      	strb	r3, [r7, #9]
	cmd[2] = data>>16&0xFF;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	0c1b      	lsrs	r3, r3, #16
 800414c:	b2db      	uxtb	r3, r3
 800414e:	72bb      	strb	r3, [r7, #10]
	cmd[3] = data>>8&0xFF;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	b2db      	uxtb	r3, r3
 8004156:	72fb      	strb	r3, [r7, #11]
	cmd[4] = data&0xFF;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	733b      	strb	r3, [r7, #12]
	send(SOCK_NUM,(uint8_t *) cmd, 5);
 800415e:	f107 0308 	add.w	r3, r7, #8
 8004162:	2205      	movs	r2, #5
 8004164:	4619      	mov	r1, r3
 8004166:	2000      	movs	r0, #0
 8004168:	f7fc fdbe 	bl	8000ce8 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <send_u8_eth>:
void send_u8_eth (char *CMD, uint8_t data)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
//	char buf[10] = {0};
	uint8_t cmd[2];
	cmd[0] = CMD[0];
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	733b      	strb	r3, [r7, #12]
	cmd[1] = data;
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	737b      	strb	r3, [r7, #13]
	send(SOCK_NUM,(uint8_t *) cmd, 2);
 800418a:	f107 030c 	add.w	r3, r7, #12
 800418e:	2202      	movs	r2, #2
 8004190:	4619      	mov	r1, r3
 8004192:	2000      	movs	r0, #0
 8004194:	f7fc fda8 	bl	8000ce8 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <sendString>:
void sendString (char *CMD, char *data)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
//	char buf[10] = {0};
	char cmd[20];
	strcpy(cmd,CMD);
 80041aa:	f107 030c 	add.w	r3, r7, #12
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f005 fd6b 	bl	8009c8c <strcpy>
	strcat(cmd, data);
 80041b6:	f107 030c 	add.w	r3, r7, #12
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 fd31 	bl	8009c24 <strcat>
//	cmd[1] = (data&0xFF000000)>>24;
//	cmd[2] = (data&0x00FF0000)>>16;
//	cmd[3] = (data&0x0000FF00)>>8;
//	cmd[4] = (data&0x000000FF)>>0;
	send(SOCK_NUM,(uint8_t *) cmd, strlen(cmd));
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fb ffc0 	bl	800014c <strlen>
 80041cc:	4603      	mov	r3, r0
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	f107 030c 	add.w	r3, r7, #12
 80041d4:	4619      	mov	r1, r3
 80041d6:	2000      	movs	r0, #0
 80041d8:	f7fc fd86 	bl	8000ce8 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 80041dc:	bf00      	nop
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <sendData_eth_info>:
void sendData_eth_info (char *CMD, uint8_t *data)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	@ 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	char cx[27];
//	strcpy(cx,CMD);
//	strcat(cx, data);
	cx[0] = CMD[0];
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	733b      	strb	r3, [r7, #12]
	for (uint8_t i=0; i<26; i++)
 80041f4:	2300      	movs	r3, #0
 80041f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80041fa:	e010      	b.n	800421e <sendData_eth_info+0x3a>
	{
		cx[i+1] = data[i];
 80041fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	441a      	add	r2, r3
 8004204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004208:	3301      	adds	r3, #1
 800420a:	7812      	ldrb	r2, [r2, #0]
 800420c:	3328      	adds	r3, #40	@ 0x28
 800420e:	443b      	add	r3, r7
 8004210:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i=0; i<26; i++)
 8004214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004218:	3301      	adds	r3, #1
 800421a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800421e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004222:	2b19      	cmp	r3, #25
 8004224:	d9ea      	bls.n	80041fc <sendData_eth_info+0x18>
	}
	send(SOCK_NUM,(uint8_t *) cx, 27);
 8004226:	f107 030c 	add.w	r3, r7, #12
 800422a:	221b      	movs	r2, #27
 800422c:	4619      	mov	r1, r3
 800422e:	2000      	movs	r0, #0
 8004230:	f7fc fd5a 	bl	8000ce8 <send>
}
 8004234:	bf00      	nop
 8004236:	3728      	adds	r7, #40	@ 0x28
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <sendData_eth_CardID>:
void sendData_eth_CardID (char *CMD, user_info_t user)
{
 800423c:	b084      	sub	sp, #16
 800423e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800424c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004250:	466b      	mov	r3, sp
 8004252:	461e      	mov	r6, r3
	uint8_t size = sizeof(user_info_t)+2;
 8004254:	2322      	movs	r3, #34	@ 0x22
 8004256:	75fb      	strb	r3, [r7, #23]
	uint8_t cx[size];
 8004258:	7df9      	ldrb	r1, [r7, #23]
 800425a:	460b      	mov	r3, r1
 800425c:	3b01      	subs	r3, #1
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	b2cb      	uxtb	r3, r1
 8004262:	2200      	movs	r2, #0
 8004264:	4698      	mov	r8, r3
 8004266:	4691      	mov	r9, r2
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004274:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004278:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800427c:	b2cb      	uxtb	r3, r1
 800427e:	2200      	movs	r2, #0
 8004280:	461c      	mov	r4, r3
 8004282:	4615      	mov	r5, r2
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	00eb      	lsls	r3, r5, #3
 800428e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004292:	00e2      	lsls	r2, r4, #3
 8004294:	460b      	mov	r3, r1
 8004296:	3307      	adds	r3, #7
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	ebad 0d03 	sub.w	sp, sp, r3
 80042a0:	466b      	mov	r3, sp
 80042a2:	3300      	adds	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
	cx[0] = CMD[0];
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	701a      	strb	r2, [r3, #0]
	cx[1] = 2;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2202      	movs	r2, #2
 80042b2:	705a      	strb	r2, [r3, #1]
	cx[2] = user.cardID>>24&0xFF;
 80042b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b6:	0e1b      	lsrs	r3, r3, #24
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	709a      	strb	r2, [r3, #2]
	cx[3] = user.cardID>>16&0xFF;
 80042be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	70da      	strb	r2, [r3, #3]
	cx[4] = user.cardID>>8&0xFF;
 80042c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	711a      	strb	r2, [r3, #4]
	cx[5] = user.cardID&0xFF;
 80042d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	715a      	strb	r2, [r3, #5]
	cx[6] = user.permis[0];
 80042da:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	719a      	strb	r2, [r3, #6]
	cx[7] = user.permis[1];
 80042e2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	71da      	strb	r2, [r3, #7]
	cx[8] = user.permis[2];
 80042ea:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	721a      	strb	r2, [r3, #8]
	cx[9] = user.permis[3];
 80042f2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	725a      	strb	r2, [r3, #9]
	cx[10] = user.permis[4];
 80042fa:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	729a      	strb	r2, [r3, #10]
	cx[11] = user.permis[5];
 8004302:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	72da      	strb	r2, [r3, #11]
	cx[12] = user.permis[6];
 800430a:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	731a      	strb	r2, [r3, #12]
	cx[13] = user.permis[7];
 8004312:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	735a      	strb	r2, [r3, #13]
	cx[14] = user.beginDate;
 800431a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	739a      	strb	r2, [r3, #14]
	cx[15] = user.beginMonth;
 8004322:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	73da      	strb	r2, [r3, #15]
	cx[16] = user.beginYear>>8&0xFF;
 800432a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	741a      	strb	r2, [r3, #16]
	cx[17] = user.beginYear&0xFF;
 8004338:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	745a      	strb	r2, [r3, #17]
	cx[18] = user.beginHour;
 8004342:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	749a      	strb	r2, [r3, #18]
	cx[19] = user.beginMinute;
 800434a:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	74da      	strb	r2, [r3, #19]
	cx[20] = user.endDate;
 8004352:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	751a      	strb	r2, [r3, #20]
	cx[21] = user.endMonth;
 800435a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	755a      	strb	r2, [r3, #21]
	cx[22] = user.endYear>>8&0xFF;
 8004362:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	b29b      	uxth	r3, r3
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	759a      	strb	r2, [r3, #22]
	cx[23] = user.endYear&0xFF;
 8004370:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	75da      	strb	r2, [r3, #23]
	cx[24] = user.endHour;
 800437a:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	761a      	strb	r2, [r3, #24]
	cx[25] = user.endMinute;
 8004382:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	765a      	strb	r2, [r3, #25]
	send(SOCK_NUM,(uint8_t *) cx, size);
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	b29b      	uxth	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	68f9      	ldr	r1, [r7, #12]
 8004392:	2000      	movs	r0, #0
 8004394:	f7fc fca8 	bl	8000ce8 <send>
 8004398:	46b5      	mov	sp, r6
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043a4:	b004      	add	sp, #16
 80043a6:	4770      	bx	lr

080043a8 <sendData_uart>:
void sendData_uart (char *CMD, uint8_t data)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
	char cmd[2];
	cmd[0] = CMD[0];
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	733b      	strb	r3, [r7, #12]
	cmd[1] = data;
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	737b      	strb	r3, [r7, #13]
//	strcpy(cmd,CMD);
//	strcat(cmd,data);
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 80043be:	2201      	movs	r2, #1
 80043c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80043c4:	480a      	ldr	r0, [pc, #40]	@ (80043f0 <sendData_uart+0x48>)
 80043c6:	f002 fdc4 	bl	8006f52 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,(uint8_t *) cmd, 2, 500);
 80043ca:	f107 010c 	add.w	r1, r7, #12
 80043ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80043d2:	2202      	movs	r2, #2
 80043d4:	4807      	ldr	r0, [pc, #28]	@ (80043f4 <sendData_uart+0x4c>)
 80043d6:	f004 fc41 	bl	8008c5c <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 80043da:	2200      	movs	r2, #0
 80043dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80043e0:	4803      	ldr	r0, [pc, #12]	@ (80043f0 <sendData_uart+0x48>)
 80043e2:	f002 fdb6 	bl	8006f52 <HAL_GPIO_WritePin>
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40010800 	.word	0x40010800
 80043f4:	20000210 	.word	0x20000210

080043f8 <sendString_uart>:
void sendString_uart (char *CMD)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	char cmd[2];
	cmd[0] = CMD[0];
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	733b      	strb	r3, [r7, #12]
	cmd[1] =  CMD[1];
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	785b      	ldrb	r3, [r3, #1]
 800440a:	737b      	strb	r3, [r7, #13]
	cmd[2] =  CMD[2];
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	789b      	ldrb	r3, [r3, #2]
 8004410:	73bb      	strb	r3, [r7, #14]
	cmd[3] =  CMD[3];
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	78db      	ldrb	r3, [r3, #3]
 8004416:	73fb      	strb	r3, [r7, #15]
//	strcpy(cmd,CMD);
//	strcat(cmd,data);
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 8004418:	2201      	movs	r2, #1
 800441a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800441e:	480a      	ldr	r0, [pc, #40]	@ (8004448 <sendString_uart+0x50>)
 8004420:	f002 fd97 	bl	8006f52 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,(uint8_t *) cmd, 4, 500);
 8004424:	f107 010c 	add.w	r1, r7, #12
 8004428:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800442c:	2204      	movs	r2, #4
 800442e:	4807      	ldr	r0, [pc, #28]	@ (800444c <sendString_uart+0x54>)
 8004430:	f004 fc14 	bl	8008c5c <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8004434:	2200      	movs	r2, #0
 8004436:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800443a:	4803      	ldr	r0, [pc, #12]	@ (8004448 <sendString_uart+0x50>)
 800443c:	f002 fd89 	bl	8006f52 <HAL_GPIO_WritePin>
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40010800 	.word	0x40010800
 800444c:	20000210 	.word	0x20000210

08004450 <sendString_info_uart>:
void sendString_info_uart (uint8_t *CMD)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	@ 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
	uint8_t cmd[27];
	cmd[0] = 0x52;
 8004458:	2352      	movs	r3, #82	@ 0x52
 800445a:	733b      	strb	r3, [r7, #12]
	for (uint8_t i=0; i<26; i++)
 800445c:	2300      	movs	r3, #0
 800445e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004462:	e010      	b.n	8004486 <sendString_info_uart+0x36>
	{
		cmd[i+1] =  CMD[i];
 8004464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	441a      	add	r2, r3
 800446c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004470:	3301      	adds	r3, #1
 8004472:	7812      	ldrb	r2, [r2, #0]
 8004474:	3328      	adds	r3, #40	@ 0x28
 8004476:	443b      	add	r3, r7
 8004478:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i=0; i<26; i++)
 800447c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004480:	3301      	adds	r3, #1
 8004482:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004486:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800448a:	2b19      	cmp	r3, #25
 800448c:	d9ea      	bls.n	8004464 <sendString_info_uart+0x14>
	}
//	strcpy(cmd,CMD);
//	strcat(cmd,data);
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 800448e:	2201      	movs	r2, #1
 8004490:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004494:	480a      	ldr	r0, [pc, #40]	@ (80044c0 <sendString_info_uart+0x70>)
 8004496:	f002 fd5c 	bl	8006f52 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, cmd, 27, 1000);
 800449a:	f107 010c 	add.w	r1, r7, #12
 800449e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044a2:	221b      	movs	r2, #27
 80044a4:	4807      	ldr	r0, [pc, #28]	@ (80044c4 <sendString_info_uart+0x74>)
 80044a6:	f004 fbd9 	bl	8008c5c <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 80044aa:	2200      	movs	r2, #0
 80044ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80044b0:	4803      	ldr	r0, [pc, #12]	@ (80044c0 <sendString_info_uart+0x70>)
 80044b2:	f002 fd4e 	bl	8006f52 <HAL_GPIO_WritePin>
}
 80044b6:	bf00      	nop
 80044b8:	3728      	adds	r7, #40	@ 0x28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40010800 	.word	0x40010800
 80044c4:	20000210 	.word	0x20000210

080044c8 <save_data>:
void save_data()
{
 80044c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044cc:	b096      	sub	sp, #88	@ 0x58
 80044ce:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80044d0:	f002 fa14 	bl	80068fc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 80044d4:	4958      	ldr	r1, [pc, #352]	@ (8004638 <save_data+0x170>)
 80044d6:	4859      	ldr	r0, [pc, #356]	@ (800463c <save_data+0x174>)
 80044d8:	f002 faf8 	bl	8006acc <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC00, ip1);
 80044dc:	4b58      	ldr	r3, [pc, #352]	@ (8004640 <save_data+0x178>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2200      	movs	r2, #0
 80044e4:	461c      	mov	r4, r3
 80044e6:	4615      	mov	r5, r2
 80044e8:	4622      	mov	r2, r4
 80044ea:	462b      	mov	r3, r5
 80044ec:	4955      	ldr	r1, [pc, #340]	@ (8004644 <save_data+0x17c>)
 80044ee:	2002      	movs	r0, #2
 80044f0:	f002 f994 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC04, ip2);
 80044f4:	4b54      	ldr	r3, [pc, #336]	@ (8004648 <save_data+0x180>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2200      	movs	r2, #0
 80044fc:	4698      	mov	r8, r3
 80044fe:	4691      	mov	r9, r2
 8004500:	4642      	mov	r2, r8
 8004502:	464b      	mov	r3, r9
 8004504:	4951      	ldr	r1, [pc, #324]	@ (800464c <save_data+0x184>)
 8004506:	2002      	movs	r0, #2
 8004508:	f002 f988 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC08, ip3);
 800450c:	4b50      	ldr	r3, [pc, #320]	@ (8004650 <save_data+0x188>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2200      	movs	r2, #0
 8004514:	469a      	mov	sl, r3
 8004516:	4693      	mov	fp, r2
 8004518:	4652      	mov	r2, sl
 800451a:	465b      	mov	r3, fp
 800451c:	494d      	ldr	r1, [pc, #308]	@ (8004654 <save_data+0x18c>)
 800451e:	2002      	movs	r0, #2
 8004520:	f002 f97c 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC0C, ip4);
 8004524:	4b4c      	ldr	r3, [pc, #304]	@ (8004658 <save_data+0x190>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2200      	movs	r2, #0
 800452c:	653b      	str	r3, [r7, #80]	@ 0x50
 800452e:	657a      	str	r2, [r7, #84]	@ 0x54
 8004530:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004534:	4949      	ldr	r1, [pc, #292]	@ (800465c <save_data+0x194>)
 8004536:	2002      	movs	r0, #2
 8004538:	f002 f970 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC10, port_client);
 800453c:	4b48      	ldr	r3, [pc, #288]	@ (8004660 <save_data+0x198>)
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	2200      	movs	r2, #0
 8004544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004546:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800454c:	4945      	ldr	r1, [pc, #276]	@ (8004664 <save_data+0x19c>)
 800454e:	2002      	movs	r0, #2
 8004550:	f002 f964 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC14, ip_server1);
 8004554:	4b44      	ldr	r3, [pc, #272]	@ (8004668 <save_data+0x1a0>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2200      	movs	r2, #0
 800455c:	643b      	str	r3, [r7, #64]	@ 0x40
 800455e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004560:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004564:	4941      	ldr	r1, [pc, #260]	@ (800466c <save_data+0x1a4>)
 8004566:	2002      	movs	r0, #2
 8004568:	f002 f958 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC18, ip_server2);
 800456c:	4b40      	ldr	r3, [pc, #256]	@ (8004670 <save_data+0x1a8>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2200      	movs	r2, #0
 8004574:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004576:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800457c:	493d      	ldr	r1, [pc, #244]	@ (8004674 <save_data+0x1ac>)
 800457e:	2002      	movs	r0, #2
 8004580:	f002 f94c 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC1C, ip_server3);
 8004584:	4b3c      	ldr	r3, [pc, #240]	@ (8004678 <save_data+0x1b0>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2200      	movs	r2, #0
 800458c:	633b      	str	r3, [r7, #48]	@ 0x30
 800458e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004590:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004594:	4939      	ldr	r1, [pc, #228]	@ (800467c <save_data+0x1b4>)
 8004596:	2002      	movs	r0, #2
 8004598:	f002 f940 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC20, ip_server4);
 800459c:	4b38      	ldr	r3, [pc, #224]	@ (8004680 <save_data+0x1b8>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2200      	movs	r2, #0
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045ac:	4935      	ldr	r1, [pc, #212]	@ (8004684 <save_data+0x1bc>)
 80045ae:	2002      	movs	r0, #2
 80045b0:	f002 f934 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC24, port_server);
 80045b4:	4b34      	ldr	r3, [pc, #208]	@ (8004688 <save_data+0x1c0>)
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2200      	movs	r2, #0
 80045bc:	623b      	str	r3, [r7, #32]
 80045be:	627a      	str	r2, [r7, #36]	@ 0x24
 80045c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045c4:	4931      	ldr	r1, [pc, #196]	@ (800468c <save_data+0x1c4>)
 80045c6:	2002      	movs	r0, #2
 80045c8:	f002 f928 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC28, time_delay);
 80045cc:	4b30      	ldr	r3, [pc, #192]	@ (8004690 <save_data+0x1c8>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2200      	movs	r2, #0
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	61fa      	str	r2, [r7, #28]
 80045d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045dc:	492d      	ldr	r1, [pc, #180]	@ (8004694 <save_data+0x1cc>)
 80045de:	2002      	movs	r0, #2
 80045e0:	f002 f91c 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC2C, elevator_mode);
 80045e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004698 <save_data+0x1d0>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2200      	movs	r2, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	617a      	str	r2, [r7, #20]
 80045f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045f4:	4929      	ldr	r1, [pc, #164]	@ (800469c <save_data+0x1d4>)
 80045f6:	2002      	movs	r0, #2
 80045f8:	f002 f910 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC30, lock_default_1);
 80045fc:	4b28      	ldr	r3, [pc, #160]	@ (80046a0 <save_data+0x1d8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2200      	movs	r2, #0
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	60fa      	str	r2, [r7, #12]
 8004606:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800460a:	4926      	ldr	r1, [pc, #152]	@ (80046a4 <save_data+0x1dc>)
 800460c:	2002      	movs	r0, #2
 800460e:	f002 f905 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC34, lock_default_2);
 8004612:	4b25      	ldr	r3, [pc, #148]	@ (80046a8 <save_data+0x1e0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2200      	movs	r2, #0
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004620:	4922      	ldr	r1, [pc, #136]	@ (80046ac <save_data+0x1e4>)
 8004622:	2002      	movs	r0, #2
 8004624:	f002 f8fa 	bl	800681c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8004628:	f002 f98e 	bl	8006948 <HAL_FLASH_Lock>
}
 800462c:	bf00      	nop
 800462e:	3758      	adds	r7, #88	@ 0x58
 8004630:	46bd      	mov	sp, r7
 8004632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004636:	bf00      	nop
 8004638:	20000588 	.word	0x20000588
 800463c:	2000008c 	.word	0x2000008c
 8004640:	2000051c 	.word	0x2000051c
 8004644:	0800fc00 	.word	0x0800fc00
 8004648:	2000051d 	.word	0x2000051d
 800464c:	0800fc04 	.word	0x0800fc04
 8004650:	2000051e 	.word	0x2000051e
 8004654:	0800fc08 	.word	0x0800fc08
 8004658:	2000051f 	.word	0x2000051f
 800465c:	0800fc0c 	.word	0x0800fc0c
 8004660:	20000584 	.word	0x20000584
 8004664:	0800fc10 	.word	0x0800fc10
 8004668:	20000520 	.word	0x20000520
 800466c:	0800fc14 	.word	0x0800fc14
 8004670:	20000521 	.word	0x20000521
 8004674:	0800fc18 	.word	0x0800fc18
 8004678:	20000522 	.word	0x20000522
 800467c:	0800fc1c 	.word	0x0800fc1c
 8004680:	20000523 	.word	0x20000523
 8004684:	0800fc20 	.word	0x0800fc20
 8004688:	20000582 	.word	0x20000582
 800468c:	0800fc24 	.word	0x0800fc24
 8004690:	20000510 	.word	0x20000510
 8004694:	0800fc28 	.word	0x0800fc28
 8004698:	20000542 	.word	0x20000542
 800469c:	0800fc2c 	.word	0x0800fc2c
 80046a0:	200006a8 	.word	0x200006a8
 80046a4:	0800fc30 	.word	0x0800fc30
 80046a8:	200006ac 	.word	0x200006ac
 80046ac:	0800fc34 	.word	0x0800fc34

080046b0 <binary_search>:

user_info_t binary_search(uint32_t Number_card, uint32_t code)
{
 80046b0:	b5b0      	push	{r4, r5, r7, lr}
 80046b2:	b098      	sub	sp, #96	@ 0x60
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
	uint32_t low = 1, high = Number_card;
 80046bc:	2301      	movs	r3, #1
 80046be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	65bb      	str	r3, [r7, #88]	@ 0x58
	user_info_t user_0={0}, user_compare;
 80046c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80046c8:	2220      	movs	r2, #32
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f005 faa1 	bl	8009c14 <memset>

    while (low <= high) {
 80046d2:	e02e      	b.n	8004732 <binary_search+0x82>
    	uint32_t mid = (low + high) / 2;
 80046d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046d8:	4413      	add	r3, r2
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	657b      	str	r3, [r7, #84]	@ 0x54
		W25Q_FastRead((mid-1)/16, ((mid-1)%16)*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&user_compare);
 80046de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e0:	3b01      	subs	r3, #1
 80046e2:	0918      	lsrs	r0, r3, #4
 80046e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	015b      	lsls	r3, r3, #5
 80046f2:	b2d9      	uxtb	r1, r3
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	2220      	movs	r2, #32
 80046fa:	f7fd f9df 	bl	8001abc <W25Q_FastRead>
        if (user_compare.cardID == code) {
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d10a      	bne.n	800471c <binary_search+0x6c>
            return user_compare;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	461d      	mov	r5, r3
 800470a:	f107 0414 	add.w	r4, r7, #20
 800470e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004712:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004716:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800471a:	e018      	b.n	800474e <binary_search+0x9e>
        } else if (user_compare.cardID < code) {
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d903      	bls.n	800472c <binary_search+0x7c>
            low = mid + 1;
 8004724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004726:	3301      	adds	r3, #1
 8004728:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800472a:	e002      	b.n	8004732 <binary_search+0x82>
        } else {
            high = mid - 1;
 800472c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472e:	3b01      	subs	r3, #1
 8004730:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (low <= high) {
 8004732:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004736:	429a      	cmp	r2, r3
 8004738:	d9cc      	bls.n	80046d4 <binary_search+0x24>
        }
    }
    return user_0;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	461d      	mov	r5, r3
 800473e:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8004742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004746:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800474a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	3760      	adds	r7, #96	@ 0x60
 8004752:	46bd      	mov	sp, r7
 8004754:	bdb0      	pop	{r4, r5, r7, pc}

08004756 <new_card_update>:
void new_card_update(uint8_t *data, bool *input, uint32_t *input_timer)
{
 8004756:	b590      	push	{r4, r7, lr}
 8004758:	b087      	sub	sp, #28
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
	for (uint8_t i=0; i<8; i++)
 8004762:	2300      	movs	r3, #0
 8004764:	75fb      	strb	r3, [r7, #23]
 8004766:	e02b      	b.n	80047c0 <new_card_update+0x6a>
	{
		for (uint8_t j=0; j<8; j++)
 8004768:	2300      	movs	r3, #0
 800476a:	75bb      	strb	r3, [r7, #22]
 800476c:	e022      	b.n	80047b4 <new_card_update+0x5e>
		{
			if((data[i]>>j)&0x01)//2 + i
 800476e:	7dfb      	ldrb	r3, [r7, #23]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	7dbb      	ldrb	r3, [r7, #22]
 800477a:	fa42 f303 	asr.w	r3, r2, r3
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d013      	beq.n	80047ae <new_card_update+0x58>
			{
				input[i*8+j] = true;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	00da      	lsls	r2, r3, #3
 800478a:	7dbb      	ldrb	r3, [r7, #22]
 800478c:	4413      	add	r3, r2
 800478e:	461a      	mov	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4413      	add	r3, r2
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
				input_timer[i*8+j] = HAL_GetTick();
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	00da      	lsls	r2, r3, #3
 800479c:	7dbb      	ldrb	r3, [r7, #22]
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	18d4      	adds	r4, r2, r3
 80047a6:	f000 fd6b 	bl	8005280 <HAL_GetTick>
 80047aa:	4603      	mov	r3, r0
 80047ac:	6023      	str	r3, [r4, #0]
		for (uint8_t j=0; j<8; j++)
 80047ae:	7dbb      	ldrb	r3, [r7, #22]
 80047b0:	3301      	adds	r3, #1
 80047b2:	75bb      	strb	r3, [r7, #22]
 80047b4:	7dbb      	ldrb	r3, [r7, #22]
 80047b6:	2b07      	cmp	r3, #7
 80047b8:	d9d9      	bls.n	800476e <new_card_update+0x18>
	for (uint8_t i=0; i<8; i++)
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
 80047bc:	3301      	adds	r3, #1
 80047be:	75fb      	strb	r3, [r7, #23]
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
 80047c2:	2b07      	cmp	r3, #7
 80047c4:	d9d0      	bls.n	8004768 <new_card_update+0x12>
			}
		}
	}
}
 80047c6:	bf00      	nop
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd90      	pop	{r4, r7, pc}

080047d0 <shift_left_1bit>:
void shift_left_1bit( uint8_t input[8], uint8_t output[8])
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
    uint8_t carry = 0;  // Khởi tạo carry ban đầu
 80047da:	2300      	movs	r3, #0
 80047dc:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 8; i++)
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e01a      	b.n	800481a <shift_left_1bit+0x4a>
    {
        // Lấy bit MSB của byte hiện tại trước khi dịch
        uint8_t new_carry = (input[i] >> 7) & 0x01;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	09db      	lsrs	r3, r3, #7
 80047ee:	73fb      	strb	r3, [r7, #15]
        // Dịch trái 1 bit và kết hợp với carry từ byte trước
        output[i] = (input[i] << 1) | carry;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b25b      	sxtb	r3, r3
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	b25a      	sxtb	r2, r3
 80047fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004802:	4313      	orrs	r3, r2
 8004804:	b259      	sxtb	r1, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	4413      	add	r3, r2
 800480c:	b2ca      	uxtb	r2, r1
 800480e:	701a      	strb	r2, [r3, #0]
        // Cập nhật carry cho byte tiếp theo
        carry = new_carry;
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 8; i++)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	3301      	adds	r3, #1
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b07      	cmp	r3, #7
 800481e:	dde1      	ble.n	80047e4 <shift_left_1bit+0x14>
    }
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <calculate_data_can>:
void calculate_data_can(bool *input, uint32_t *input_timer, uint8_t *data_can, uint8_t *lock_df, uint8_t delay_time, uint8_t *counter_start)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
	uint8_t data[8] = {0};
 800483a:	f107 0310 	add.w	r3, r7, #16
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	605a      	str	r2, [r3, #4]
	if (*counter_start < delay_time)
 8004844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800484c:	429a      	cmp	r2, r3
 800484e:	d948      	bls.n	80048e2 <calculate_data_can+0xb6>
	{
		for (uint8_t i=0; i<8; i++)
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e040      	b.n	80048d8 <calculate_data_can+0xac>
		{
			for (uint8_t j=0; j<8; j++)
 8004856:	2300      	movs	r3, #0
 8004858:	77bb      	strb	r3, [r7, #30]
 800485a:	e031      	b.n	80048c0 <calculate_data_can+0x94>
			{
				if (input_timer[i*8+j] == 0)
 800485c:	7ffb      	ldrb	r3, [r7, #31]
 800485e:	00da      	lsls	r2, r3, #3
 8004860:	7fbb      	ldrb	r3, [r7, #30]
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	4413      	add	r3, r2
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d11f      	bne.n	80048b0 <calculate_data_can+0x84>
				{
					if ((lock_df[i]>>j)&0x01)
 8004870:	7ffb      	ldrb	r3, [r7, #31]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	4413      	add	r3, r2
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	7fbb      	ldrb	r3, [r7, #30]
 800487c:	fa42 f303 	asr.w	r3, r2, r3
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <calculate_data_can+0x70>
					{
						input[i*8+j] = true;
 8004888:	7ffb      	ldrb	r3, [r7, #31]
 800488a:	00da      	lsls	r2, r3, #3
 800488c:	7fbb      	ldrb	r3, [r7, #30]
 800488e:	4413      	add	r3, r2
 8004890:	461a      	mov	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4413      	add	r3, r2
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e00e      	b.n	80048ba <calculate_data_can+0x8e>
					} else
					{
						input[i*8+j] = false;
 800489c:	7ffb      	ldrb	r3, [r7, #31]
 800489e:	00da      	lsls	r2, r3, #3
 80048a0:	7fbb      	ldrb	r3, [r7, #30]
 80048a2:	4413      	add	r3, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e004      	b.n	80048ba <calculate_data_can+0x8e>
					}
				} else
				{
					*counter_start = delay_time;
 80048b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80048b6:	701a      	strb	r2, [r3, #0]
					break;
 80048b8:	e005      	b.n	80048c6 <calculate_data_can+0x9a>
			for (uint8_t j=0; j<8; j++)
 80048ba:	7fbb      	ldrb	r3, [r7, #30]
 80048bc:	3301      	adds	r3, #1
 80048be:	77bb      	strb	r3, [r7, #30]
 80048c0:	7fbb      	ldrb	r3, [r7, #30]
 80048c2:	2b07      	cmp	r3, #7
 80048c4:	d9ca      	bls.n	800485c <calculate_data_can+0x30>
				}
			}
			if (*counter_start == delay_time) break;
 80048c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d006      	beq.n	80048e0 <calculate_data_can+0xb4>
		for (uint8_t i=0; i<8; i++)
 80048d2:	7ffb      	ldrb	r3, [r7, #31]
 80048d4:	3301      	adds	r3, #1
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	7ffb      	ldrb	r3, [r7, #31]
 80048da:	2b07      	cmp	r3, #7
 80048dc:	d9bb      	bls.n	8004856 <calculate_data_can+0x2a>
 80048de:	e000      	b.n	80048e2 <calculate_data_can+0xb6>
			if (*counter_start == delay_time) break;
 80048e0:	bf00      	nop
		}
	}
	if (*counter_start >= delay_time)
 80048e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d848      	bhi.n	8004980 <calculate_data_can+0x154>
	{
		for (uint8_t i=0; i<8; i++)
 80048ee:	2300      	movs	r3, #0
 80048f0:	777b      	strb	r3, [r7, #29]
 80048f2:	e042      	b.n	800497a <calculate_data_can+0x14e>
		{
			for (uint8_t j=0; j<8; j++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	773b      	strb	r3, [r7, #28]
 80048f8:	e039      	b.n	800496e <calculate_data_can+0x142>
			{
				if (((lock_df[i]>>j)&0x01) && (abs(HAL_GetTick() - input_timer[i*8+j]) > delay_time*1000))
 80048fa:	7f7b      	ldrb	r3, [r7, #29]
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	4413      	add	r3, r2
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	7f3b      	ldrb	r3, [r7, #28]
 8004906:	fa42 f303 	asr.w	r3, r2, r3
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d021      	beq.n	8004956 <calculate_data_can+0x12a>
 8004912:	f000 fcb5 	bl	8005280 <HAL_GetTick>
 8004916:	4601      	mov	r1, r0
 8004918:	7f7b      	ldrb	r3, [r7, #29]
 800491a:	00da      	lsls	r2, r3, #3
 800491c:	7f3b      	ldrb	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4413      	add	r3, r2
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	1acb      	subs	r3, r1, r3
 800492a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800492e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004932:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004936:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	429a      	cmp	r2, r3
 8004940:	dd09      	ble.n	8004956 <calculate_data_can+0x12a>
				{
					input[i*8+j] = true;
 8004942:	7f7b      	ldrb	r3, [r7, #29]
 8004944:	00da      	lsls	r2, r3, #3
 8004946:	7f3b      	ldrb	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	e008      	b.n	8004968 <calculate_data_can+0x13c>
				} else
				{
					input[i*8+j] = false;
 8004956:	7f7b      	ldrb	r3, [r7, #29]
 8004958:	00da      	lsls	r2, r3, #3
 800495a:	7f3b      	ldrb	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
			for (uint8_t j=0; j<8; j++)
 8004968:	7f3b      	ldrb	r3, [r7, #28]
 800496a:	3301      	adds	r3, #1
 800496c:	773b      	strb	r3, [r7, #28]
 800496e:	7f3b      	ldrb	r3, [r7, #28]
 8004970:	2b07      	cmp	r3, #7
 8004972:	d9c2      	bls.n	80048fa <calculate_data_can+0xce>
		for (uint8_t i=0; i<8; i++)
 8004974:	7f7b      	ldrb	r3, [r7, #29]
 8004976:	3301      	adds	r3, #1
 8004978:	777b      	strb	r3, [r7, #29]
 800497a:	7f7b      	ldrb	r3, [r7, #29]
 800497c:	2b07      	cmp	r3, #7
 800497e:	d9b9      	bls.n	80048f4 <calculate_data_can+0xc8>
				}
			}
		}
	}
	for (uint8_t i=0; i<8; i++)
 8004980:	2300      	movs	r3, #0
 8004982:	76fb      	strb	r3, [r7, #27]
 8004984:	e026      	b.n	80049d4 <calculate_data_can+0x1a8>
	{
		for (uint8_t j=0; j<8; j++)
 8004986:	2300      	movs	r3, #0
 8004988:	76bb      	strb	r3, [r7, #26]
 800498a:	e01d      	b.n	80049c8 <calculate_data_can+0x19c>
		{
			data[i] |= input[i*8+j]<<j;
 800498c:	7efb      	ldrb	r3, [r7, #27]
 800498e:	3320      	adds	r3, #32
 8004990:	443b      	add	r3, r7
 8004992:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004996:	b25a      	sxtb	r2, r3
 8004998:	7efb      	ldrb	r3, [r7, #27]
 800499a:	00d9      	lsls	r1, r3, #3
 800499c:	7ebb      	ldrb	r3, [r7, #26]
 800499e:	440b      	add	r3, r1
 80049a0:	4619      	mov	r1, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	440b      	add	r3, r1
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	7ebb      	ldrb	r3, [r7, #26]
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	b25b      	sxtb	r3, r3
 80049b2:	4313      	orrs	r3, r2
 80049b4:	b25a      	sxtb	r2, r3
 80049b6:	7efb      	ldrb	r3, [r7, #27]
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	3320      	adds	r3, #32
 80049bc:	443b      	add	r3, r7
 80049be:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t j=0; j<8; j++)
 80049c2:	7ebb      	ldrb	r3, [r7, #26]
 80049c4:	3301      	adds	r3, #1
 80049c6:	76bb      	strb	r3, [r7, #26]
 80049c8:	7ebb      	ldrb	r3, [r7, #26]
 80049ca:	2b07      	cmp	r3, #7
 80049cc:	d9de      	bls.n	800498c <calculate_data_can+0x160>
	for (uint8_t i=0; i<8; i++)
 80049ce:	7efb      	ldrb	r3, [r7, #27]
 80049d0:	3301      	adds	r3, #1
 80049d2:	76fb      	strb	r3, [r7, #27]
 80049d4:	7efb      	ldrb	r3, [r7, #27]
 80049d6:	2b07      	cmp	r3, #7
 80049d8:	d9d5      	bls.n	8004986 <calculate_data_can+0x15a>
		}
	}
	shift_left_1bit(data, data_can);
 80049da:	f107 0310 	add.w	r3, r7, #16
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fef5 	bl	80047d0 <shift_left_1bit>
}
 80049e6:	bf00      	nop
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <reconect_eth>:
uint8_t reconect_eth(uint8_t sn)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	71fb      	strb	r3, [r7, #7]
//	bool linkport = false;
	uint8_t Status_SN;
	Status_SN = getSn_SR(sn);
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	3301      	adds	r3, #1
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fb fba8 	bl	800015c <WIZCHIP_READ>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]
	time_check = HAL_GetTick();
 8004a10:	f000 fc36 	bl	8005280 <HAL_GetTick>
 8004a14:	4603      	mov	r3, r0
 8004a16:	4a2c      	ldr	r2, [pc, #176]	@ (8004ac8 <reconect_eth+0xd8>)
 8004a18:	6013      	str	r3, [r2, #0]
	if (Status_SN == SOCK_ESTABLISHED)
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b17      	cmp	r3, #23
 8004a1e:	d109      	bne.n	8004a34 <reconect_eth+0x44>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_SET);
 8004a20:	2201      	movs	r2, #1
 8004a22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a26:	4829      	ldr	r0, [pc, #164]	@ (8004acc <reconect_eth+0xdc>)
 8004a28:	f002 fa93 	bl	8006f52 <HAL_GPIO_WritePin>
		counter_reset = 0;
 8004a2c:	4b28      	ldr	r3, [pc, #160]	@ (8004ad0 <reconect_eth+0xe0>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e039      	b.n	8004aa8 <reconect_eth+0xb8>
	} else if (wizphy_getphylink() == PHY_LINK_ON && Status_SN == SOCK_CLOSED)
 8004a34:	f7fc fe29 	bl	800168a <wizphy_getphylink>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d123      	bne.n	8004a86 <reconect_eth+0x96>
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d120      	bne.n	8004a86 <reconect_eth+0x96>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_RESET);
 8004a44:	2200      	movs	r2, #0
 8004a46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a4a:	4820      	ldr	r0, [pc, #128]	@ (8004acc <reconect_eth+0xdc>)
 8004a4c:	f002 fa81 	bl	8006f52 <HAL_GPIO_WritePin>
		socket(sn, Sn_MR_TCP, port_client, SF_TCP_NODELAY);
 8004a50:	4b20      	ldr	r3, [pc, #128]	@ (8004ad4 <reconect_eth+0xe4>)
 8004a52:	881a      	ldrh	r2, [r3, #0]
 8004a54:	79f8      	ldrb	r0, [r7, #7]
 8004a56:	2320      	movs	r3, #32
 8004a58:	2101      	movs	r1, #1
 8004a5a:	f7fb fecf 	bl	80007fc <socket>
		connect(sn, server_ip, port_server);
 8004a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad8 <reconect_eth+0xe8>)
 8004a60:	881a      	ldrh	r2, [r3, #0]
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	491d      	ldr	r1, [pc, #116]	@ (8004adc <reconect_eth+0xec>)
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fc f856 	bl	8000b18 <connect>
		counter_reset++;
 8004a6c:	4b18      	ldr	r3, [pc, #96]	@ (8004ad0 <reconect_eth+0xe0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	4a17      	ldr	r2, [pc, #92]	@ (8004ad0 <reconect_eth+0xe0>)
 8004a74:	6013      	str	r3, [r2, #0]
		time_check -= 5000;
 8004a76:	4b14      	ldr	r3, [pc, #80]	@ (8004ac8 <reconect_eth+0xd8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 8004a7e:	3b08      	subs	r3, #8
 8004a80:	4a11      	ldr	r2, [pc, #68]	@ (8004ac8 <reconect_eth+0xd8>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e010      	b.n	8004aa8 <reconect_eth+0xb8>
	} else
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_RESET);
 8004a86:	2200      	movs	r2, #0
 8004a88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a8c:	480f      	ldr	r0, [pc, #60]	@ (8004acc <reconect_eth+0xdc>)
 8004a8e:	f002 fa60 	bl	8006f52 <HAL_GPIO_WritePin>
		close(sn);
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fb ffc5 	bl	8000a24 <close>
		time_check -= 5000;
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <reconect_eth+0xd8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 8004aa2:	3b08      	subs	r3, #8
 8004aa4:	4a08      	ldr	r2, [pc, #32]	@ (8004ac8 <reconect_eth+0xd8>)
 8004aa6:	6013      	str	r3, [r2, #0]
	}
	Status_SN = getSn_SR(sn);
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	3301      	adds	r3, #1
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fb fb51 	bl	800015c <WIZCHIP_READ>
 8004aba:	4603      	mov	r3, r0
 8004abc:	73fb      	strb	r3, [r7, #15]
	return Status_SN;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	200006b0 	.word	0x200006b0
 8004acc:	40011000 	.word	0x40011000
 8004ad0:	200006cc 	.word	0x200006cc
 8004ad4:	20000584 	.word	0x20000584
 8004ad8:	20000582 	.word	0x20000582
 8004adc:	2000050c 	.word	0x2000050c

08004ae0 <Set_speed_can>:

void Set_speed_can(uint8_t speed)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08c      	sub	sp, #48	@ 0x30
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
	if (speed == 0)// 100kps
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <Set_speed_can+0x28>
	{
		hcan.Init.Prescaler = 30;
 8004af0:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004af2:	221e      	movs	r2, #30
 8004af4:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8004af6:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004af8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8004afc:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004afe:	4b29      	ldr	r3, [pc, #164]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b00:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004b04:	615a      	str	r2, [r3, #20]
 8004b06:	e01c      	b.n	8004b42 <Set_speed_can+0x62>
	} else if (speed == 1)// 50kps
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10b      	bne.n	8004b26 <Set_speed_can+0x46>
	{
		hcan.Init.Prescaler = 40;
 8004b0e:	4b25      	ldr	r3, [pc, #148]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b10:	2228      	movs	r2, #40	@ 0x28
 8004b12:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8004b14:	4b23      	ldr	r3, [pc, #140]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b16:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8004b1a:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8004b1c:	4b21      	ldr	r3, [pc, #132]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b1e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004b22:	615a      	str	r2, [r3, #20]
 8004b24:	e00d      	b.n	8004b42 <Set_speed_can+0x62>
	} else if (speed == 2)// 25kps
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d10a      	bne.n	8004b42 <Set_speed_can+0x62>
	{
		hcan.Init.Prescaler = 60;
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b2e:	223c      	movs	r2, #60	@ 0x3c
 8004b30:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8004b32:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b34:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8004b38:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b3c:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8004b40:	615a      	str	r2, [r3, #20]
	}
	hcan.Init.AutoRetransmission = ENABLE;
 8004b42:	4b18      	ldr	r3, [pc, #96]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	76da      	strb	r2, [r3, #27]
	hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8004b48:	4b16      	ldr	r3, [pc, #88]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b4e:	60da      	str	r2, [r3, #12]
	HAL_CAN_Init(&hcan);
 8004b50:	4814      	ldr	r0, [pc, #80]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b52:	f000 fbe1 	bl	8005318 <HAL_CAN_Init>

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8004b56:	2301      	movs	r3, #1
 8004b58:	62bb      	str	r3, [r7, #40]	@ 0x28
	canfilterconfig.FilterBank = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterIdHigh = 0x740<<5;
 8004b62:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 8004b66:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterIdLow = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba8 <Set_speed_can+0xc8>)
 8004b6e:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdLow = 6;
 8004b70:	2306      	movs	r3, #6
 8004b72:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
	canfilterconfig.SlaveStartFilterBank = 13;
 8004b7c:	230d      	movs	r3, #13
 8004b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8004b80:	f107 0308 	add.w	r3, r7, #8
 8004b84:	4619      	mov	r1, r3
 8004b86:	4807      	ldr	r0, [pc, #28]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b88:	f000 fcc1 	bl	800550e <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 8004b8c:	4805      	ldr	r0, [pc, #20]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b8e:	f000 fd87 	bl	80056a0 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004b92:	2102      	movs	r1, #2
 8004b94:	4803      	ldr	r0, [pc, #12]	@ (8004ba4 <Set_speed_can+0xc4>)
 8004b96:	f001 f82f 	bl	8005bf8 <HAL_CAN_ActivateNotification>
}
 8004b9a:	bf00      	nop
 8004b9c:	3730      	adds	r7, #48	@ 0x30
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	2000009c 	.word	0x2000009c
 8004ba8:	0001ffe0 	.word	0x0001ffe0

08004bac <is_leap_year>:


// Hàm kiểm tra năm nhuận
static uint8_t is_leap_year(uint16_t year)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	80fb      	strh	r3, [r7, #6]
    if (year % 400 == 0) {
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	4a14      	ldr	r2, [pc, #80]	@ (8004c0c <is_leap_year+0x60>)
 8004bba:	fba2 1203 	umull	r1, r2, r2, r3
 8004bbe:	09d2      	lsrs	r2, r2, #7
 8004bc0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004bc4:	fb01 f202 	mul.w	r2, r1, r2
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <is_leap_year+0x28>
        return 1;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e016      	b.n	8004c02 <is_leap_year+0x56>
    }
    if (year % 100 == 0) {
 8004bd4:	88fb      	ldrh	r3, [r7, #6]
 8004bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8004c0c <is_leap_year+0x60>)
 8004bd8:	fba2 1203 	umull	r1, r2, r2, r3
 8004bdc:	0952      	lsrs	r2, r2, #5
 8004bde:	2164      	movs	r1, #100	@ 0x64
 8004be0:	fb01 f202 	mul.w	r2, r1, r2
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <is_leap_year+0x44>
        return 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e008      	b.n	8004c02 <is_leap_year+0x56>
    }
    if (year % 4 == 0) {
 8004bf0:	88fb      	ldrh	r3, [r7, #6]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <is_leap_year+0x54>
        return 1;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <is_leap_year+0x56>
    }
    return 0;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	51eb851f 	.word	0x51eb851f

08004c10 <mktime>:

// Hàm tùy chỉnh tương tự mktime
uint32_t mktime(uint16_t year, uint8_t month, uint8_t date, uint8_t hour, uint8_t minute)
{
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4623      	mov	r3, r4
 8004c20:	80fb      	strh	r3, [r7, #6]
 8004c22:	4603      	mov	r3, r0
 8004c24:	717b      	strb	r3, [r7, #5]
 8004c26:	460b      	mov	r3, r1
 8004c28:	713b      	strb	r3, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	70fb      	strb	r3, [r7, #3]
	uint32_t time = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
	uint32_t i = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]

    // 1. Cộng dồn số giây từ các năm đã qua
    // Giả sử epoch là 1/1/2000
    for (i = EPOCH_YEAR; i < (year - EPOCH_YEAR); i++) {
 8004c36:	f240 73e4 	movw	r3, #2020	@ 0x7e4
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	e012      	b.n	8004c64 <mktime+0x54>
        time += (365 + is_leap_year(i)) * 24 * 60;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff ffb2 	bl	8004bac <is_leap_year>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 8004c4e:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
    for (i = EPOCH_YEAR; i < (year - EPOCH_YEAR); i++) {
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3301      	adds	r3, #1
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	f2a3 73e4 	subw	r3, r3, #2020	@ 0x7e4
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d3e5      	bcc.n	8004c3e <mktime+0x2e>
    }

    // 2. Cộng dồn số giây từ các tháng đã qua trong năm hiện tại
    for (i = 0; i < month; i++) {
 8004c72:	2300      	movs	r3, #0
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	e01e      	b.n	8004cb6 <mktime+0xa6>
        time += days_in_month[i] * 24 * 60;
 8004c78:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf8 <mktime+0xe8>)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c80:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8004c84:	fb02 f303 	mul.w	r3, r2, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
        // Cộng thêm một ngày nếu là tháng 2 của năm nhuận
        if (i == 1 && is_leap_year(year)) {
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10c      	bne.n	8004cb0 <mktime+0xa0>
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff87 	bl	8004bac <is_leap_year>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <mktime+0xa0>
        	time += 24 * 3600;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004caa:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004cae:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < month; i++) {
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	797b      	ldrb	r3, [r7, #5]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3dc      	bcc.n	8004c78 <mktime+0x68>
        }
    }

    // 3. Cộng dồn số giây từ các ngày, giờ, phút và giây
    time += (uint32_t)(date - 1) * 24 * 60;
 8004cbe:	793b      	ldrb	r3, [r7, #4]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
    time += (uint32_t)hour * 60;
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
    time += (uint32_t)minute;
 8004ce4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

    return time;
 8004cee:	68fb      	ldr	r3, [r7, #12]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd90      	pop	{r4, r7, pc}
 8004cf8:	08009d28 	.word	0x08009d28

08004cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d00:	b672      	cpsid	i
}
 8004d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d04:	bf00      	nop
 8004d06:	e7fd      	b.n	8004d04 <Error_Handler+0x8>

08004d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004d0e:	4b15      	ldr	r3, [pc, #84]	@ (8004d64 <HAL_MspInit+0x5c>)
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	4a14      	ldr	r2, [pc, #80]	@ (8004d64 <HAL_MspInit+0x5c>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6193      	str	r3, [r2, #24]
 8004d1a:	4b12      	ldr	r3, [pc, #72]	@ (8004d64 <HAL_MspInit+0x5c>)
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	4b0f      	ldr	r3, [pc, #60]	@ (8004d64 <HAL_MspInit+0x5c>)
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004d64 <HAL_MspInit+0x5c>)
 8004d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d30:	61d3      	str	r3, [r2, #28]
 8004d32:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <HAL_MspInit+0x5c>)
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d68 <HAL_MspInit+0x60>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	4a04      	ldr	r2, [pc, #16]	@ (8004d68 <HAL_MspInit+0x60>)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	40021000 	.word	0x40021000
 8004d68:	40010000 	.word	0x40010000

08004d6c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d74:	f107 0310 	add.w	r3, r7, #16
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a20      	ldr	r2, [pc, #128]	@ (8004e08 <HAL_CAN_MspInit+0x9c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d139      	bne.n	8004e00 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8004e0c <HAL_CAN_MspInit+0xa0>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	4a1e      	ldr	r2, [pc, #120]	@ (8004e0c <HAL_CAN_MspInit+0xa0>)
 8004d92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d96:	61d3      	str	r3, [r2, #28]
 8004d98:	4b1c      	ldr	r3, [pc, #112]	@ (8004e0c <HAL_CAN_MspInit+0xa0>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004da4:	4b19      	ldr	r3, [pc, #100]	@ (8004e0c <HAL_CAN_MspInit+0xa0>)
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	4a18      	ldr	r2, [pc, #96]	@ (8004e0c <HAL_CAN_MspInit+0xa0>)
 8004daa:	f043 0304 	orr.w	r3, r3, #4
 8004dae:	6193      	str	r3, [r2, #24]
 8004db0:	4b16      	ldr	r3, [pc, #88]	@ (8004e0c <HAL_CAN_MspInit+0xa0>)
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004dbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dca:	f107 0310 	add.w	r3, r7, #16
 8004dce:	4619      	mov	r1, r3
 8004dd0:	480f      	ldr	r0, [pc, #60]	@ (8004e10 <HAL_CAN_MspInit+0xa4>)
 8004dd2:	f001 ff23 	bl	8006c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004de0:	2303      	movs	r3, #3
 8004de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	4619      	mov	r1, r3
 8004dea:	4809      	ldr	r0, [pc, #36]	@ (8004e10 <HAL_CAN_MspInit+0xa4>)
 8004dec:	f001 ff16 	bl	8006c1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 8004df0:	2200      	movs	r2, #0
 8004df2:	2103      	movs	r1, #3
 8004df4:	2014      	movs	r0, #20
 8004df6:	f001 fa34 	bl	8006262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004dfa:	2014      	movs	r0, #20
 8004dfc:	f001 fa4d 	bl	800629a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8004e00:	bf00      	nop
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40006400 	.word	0x40006400
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40010800 	.word	0x40010800

08004e14 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	@ 0x28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1c:	f107 0318 	add.w	r3, r7, #24
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a37      	ldr	r2, [pc, #220]	@ (8004f0c <HAL_SPI_MspInit+0xf8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d130      	bne.n	8004e96 <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004e34:	4b36      	ldr	r3, [pc, #216]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	4a35      	ldr	r2, [pc, #212]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004e3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e3e:	6193      	str	r3, [r2, #24]
 8004e40:	4b33      	ldr	r3, [pc, #204]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e4c:	4b30      	ldr	r3, [pc, #192]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	4a2f      	ldr	r2, [pc, #188]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004e52:	f043 0304 	orr.w	r3, r3, #4
 8004e56:	6193      	str	r3, [r2, #24]
 8004e58:	4b2d      	ldr	r3, [pc, #180]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004e64:	23a0      	movs	r3, #160	@ 0xa0
 8004e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e70:	f107 0318 	add.w	r3, r7, #24
 8004e74:	4619      	mov	r1, r3
 8004e76:	4827      	ldr	r0, [pc, #156]	@ (8004f14 <HAL_SPI_MspInit+0x100>)
 8004e78:	f001 fed0 	bl	8006c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e7c:	2340      	movs	r3, #64	@ 0x40
 8004e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e88:	f107 0318 	add.w	r3, r7, #24
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4821      	ldr	r0, [pc, #132]	@ (8004f14 <HAL_SPI_MspInit+0x100>)
 8004e90:	f001 fec4 	bl	8006c1c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004e94:	e036      	b.n	8004f04 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f18 <HAL_SPI_MspInit+0x104>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d131      	bne.n	8004f04 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eaa:	61d3      	str	r3, [r2, #28]
 8004eac:	4b18      	ldr	r3, [pc, #96]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eb8:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004ebe:	f043 0308 	orr.w	r3, r3, #8
 8004ec2:	6193      	str	r3, [r2, #24]
 8004ec4:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <HAL_SPI_MspInit+0xfc>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004ed0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8004ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004eda:	2303      	movs	r3, #3
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ede:	f107 0318 	add.w	r3, r7, #24
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	480d      	ldr	r0, [pc, #52]	@ (8004f1c <HAL_SPI_MspInit+0x108>)
 8004ee6:	f001 fe99 	bl	8006c1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004eea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ef8:	f107 0318 	add.w	r3, r7, #24
 8004efc:	4619      	mov	r1, r3
 8004efe:	4807      	ldr	r0, [pc, #28]	@ (8004f1c <HAL_SPI_MspInit+0x108>)
 8004f00:	f001 fe8c 	bl	8006c1c <HAL_GPIO_Init>
}
 8004f04:	bf00      	nop
 8004f06:	3728      	adds	r7, #40	@ 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40013000 	.word	0x40013000
 8004f10:	40021000 	.word	0x40021000
 8004f14:	40010800 	.word	0x40010800
 8004f18:	40003800 	.word	0x40003800
 8004f1c:	40010c00 	.word	0x40010c00

08004f20 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f30:	d114      	bne.n	8004f5c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f32:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <HAL_TIM_Base_MspInit+0x78>)
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	4a18      	ldr	r2, [pc, #96]	@ (8004f98 <HAL_TIM_Base_MspInit+0x78>)
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	61d3      	str	r3, [r2, #28]
 8004f3e:	4b16      	ldr	r3, [pc, #88]	@ (8004f98 <HAL_TIM_Base_MspInit+0x78>)
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2104      	movs	r1, #4
 8004f4e:	201c      	movs	r0, #28
 8004f50:	f001 f987 	bl	8006262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f54:	201c      	movs	r0, #28
 8004f56:	f001 f9a0 	bl	800629a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004f5a:	e018      	b.n	8004f8e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0e      	ldr	r2, [pc, #56]	@ (8004f9c <HAL_TIM_Base_MspInit+0x7c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d113      	bne.n	8004f8e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f66:	4b0c      	ldr	r3, [pc, #48]	@ (8004f98 <HAL_TIM_Base_MspInit+0x78>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8004f98 <HAL_TIM_Base_MspInit+0x78>)
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	61d3      	str	r3, [r2, #28]
 8004f72:	4b09      	ldr	r3, [pc, #36]	@ (8004f98 <HAL_TIM_Base_MspInit+0x78>)
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2105      	movs	r1, #5
 8004f82:	201d      	movs	r0, #29
 8004f84:	f001 f96d 	bl	8006262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f88:	201d      	movs	r0, #29
 8004f8a:	f001 f986 	bl	800629a <HAL_NVIC_EnableIRQ>
}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40000400 	.word	0x40000400

08004fa0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa8:	f107 0310 	add.w	r3, r7, #16
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	609a      	str	r2, [r3, #8]
 8004fb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a33      	ldr	r2, [pc, #204]	@ (8005088 <HAL_UART_MspInit+0xe8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d15f      	bne.n	8005080 <HAL_UART_MspInit+0xe0>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fc0:	4b32      	ldr	r3, [pc, #200]	@ (800508c <HAL_UART_MspInit+0xec>)
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	4a31      	ldr	r2, [pc, #196]	@ (800508c <HAL_UART_MspInit+0xec>)
 8004fc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fca:	6193      	str	r3, [r2, #24]
 8004fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800508c <HAL_UART_MspInit+0xec>)
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800508c <HAL_UART_MspInit+0xec>)
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800508c <HAL_UART_MspInit+0xec>)
 8004fde:	f043 0304 	orr.w	r3, r3, #4
 8004fe2:	6193      	str	r3, [r2, #24]
 8004fe4:	4b29      	ldr	r3, [pc, #164]	@ (800508c <HAL_UART_MspInit+0xec>)
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ff4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ffe:	f107 0310 	add.w	r3, r7, #16
 8005002:	4619      	mov	r1, r3
 8005004:	4822      	ldr	r0, [pc, #136]	@ (8005090 <HAL_UART_MspInit+0xf0>)
 8005006:	f001 fe09 	bl	8006c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800500a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800500e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005014:	2300      	movs	r3, #0
 8005016:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005018:	f107 0310 	add.w	r3, r7, #16
 800501c:	4619      	mov	r1, r3
 800501e:	481c      	ldr	r0, [pc, #112]	@ (8005090 <HAL_UART_MspInit+0xf0>)
 8005020:	f001 fdfc 	bl	8006c1c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005024:	4b1b      	ldr	r3, [pc, #108]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 8005026:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <HAL_UART_MspInit+0xf8>)
 8005028:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800502a:	4b1a      	ldr	r3, [pc, #104]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 800502c:	2200      	movs	r2, #0
 800502e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005030:	4b18      	ldr	r3, [pc, #96]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 8005032:	2200      	movs	r2, #0
 8005034:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005036:	4b17      	ldr	r3, [pc, #92]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 8005038:	2280      	movs	r2, #128	@ 0x80
 800503a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800503c:	4b15      	ldr	r3, [pc, #84]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 800503e:	2200      	movs	r2, #0
 8005040:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005042:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 8005044:	2200      	movs	r2, #0
 8005046:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005048:	4b12      	ldr	r3, [pc, #72]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 800504a:	2200      	movs	r2, #0
 800504c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800504e:	4b11      	ldr	r3, [pc, #68]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 8005050:	2200      	movs	r2, #0
 8005052:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005054:	480f      	ldr	r0, [pc, #60]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 8005056:	f001 f93f 	bl	80062d8 <HAL_DMA_Init>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8005060:	f7ff fe4c 	bl	8004cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a0b      	ldr	r2, [pc, #44]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 8005068:	63da      	str	r2, [r3, #60]	@ 0x3c
 800506a:	4a0a      	ldr	r2, [pc, #40]	@ (8005094 <HAL_UART_MspInit+0xf4>)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8005070:	2200      	movs	r2, #0
 8005072:	2102      	movs	r1, #2
 8005074:	2025      	movs	r0, #37	@ 0x25
 8005076:	f001 f8f4 	bl	8006262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800507a:	2025      	movs	r0, #37	@ 0x25
 800507c:	f001 f90d 	bl	800629a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005080:	bf00      	nop
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40013800 	.word	0x40013800
 800508c:	40021000 	.word	0x40021000
 8005090:	40010800 	.word	0x40010800
 8005094:	20000258 	.word	0x20000258
 8005098:	40020058 	.word	0x40020058

0800509c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <NMI_Handler+0x4>

080050a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050a8:	bf00      	nop
 80050aa:	e7fd      	b.n	80050a8 <HardFault_Handler+0x4>

080050ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050b0:	bf00      	nop
 80050b2:	e7fd      	b.n	80050b0 <MemManage_Handler+0x4>

080050b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <BusFault_Handler+0x4>

080050bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <UsageFault_Handler+0x4>

080050c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050c8:	bf00      	nop
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050e0:	bf00      	nop
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr

080050e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050ec:	f000 f8b6 	bl	800525c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050f0:	bf00      	nop
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80050f8:	2001      	movs	r0, #1
 80050fa:	f001 ff5b 	bl	8006fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005108:	4802      	ldr	r0, [pc, #8]	@ (8005114 <DMA1_Channel5_IRQHandler+0x10>)
 800510a:	f001 fa53 	bl	80065b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800510e:	bf00      	nop
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000258 	.word	0x20000258

08005118 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800511c:	4802      	ldr	r0, [pc, #8]	@ (8005128 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800511e:	f000 fd90 	bl	8005c42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	2000009c 	.word	0x2000009c

0800512c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RST_Pin);
 8005130:	2040      	movs	r0, #64	@ 0x40
 8005132:	f001 ff3f 	bl	8006fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005136:	bf00      	nop
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005140:	4802      	ldr	r0, [pc, #8]	@ (800514c <TIM2_IRQHandler+0x10>)
 8005142:	f003 f9eb 	bl	800851c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005146:	bf00      	nop
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000180 	.word	0x20000180

08005150 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005154:	4802      	ldr	r0, [pc, #8]	@ (8005160 <TIM3_IRQHandler+0x10>)
 8005156:	f003 f9e1 	bl	800851c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800515a:	bf00      	nop
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	200001c8 	.word	0x200001c8

08005164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005168:	4802      	ldr	r0, [pc, #8]	@ (8005174 <USART1_IRQHandler+0x10>)
 800516a:	f003 fe5b 	bl	8008e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800516e:	bf00      	nop
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000210 	.word	0x20000210

08005178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800517c:	bf00      	nop
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005184:	f7ff fff8 	bl	8005178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005188:	480b      	ldr	r0, [pc, #44]	@ (80051b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800518a:	490c      	ldr	r1, [pc, #48]	@ (80051bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800518c:	4a0c      	ldr	r2, [pc, #48]	@ (80051c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800518e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005190:	e002      	b.n	8005198 <LoopCopyDataInit>

08005192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005196:	3304      	adds	r3, #4

08005198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800519a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800519c:	d3f9      	bcc.n	8005192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800519e:	4a09      	ldr	r2, [pc, #36]	@ (80051c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80051a0:	4c09      	ldr	r4, [pc, #36]	@ (80051c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051a4:	e001      	b.n	80051aa <LoopFillZerobss>

080051a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051a8:	3204      	adds	r2, #4

080051aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051ac:	d3fb      	bcc.n	80051a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80051ae:	f004 fd49 	bl	8009c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80051b2:	f7fd f933 	bl	800241c <main>
  bx lr
 80051b6:	4770      	bx	lr
  ldr r0, =_sdata
 80051b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051bc:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80051c0:	08009d94 	.word	0x08009d94
  ldr r2, =_sbss
 80051c4:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80051c8:	200007f8 	.word	0x200007f8

080051cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051cc:	e7fe      	b.n	80051cc <ADC1_2_IRQHandler>
	...

080051d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051d4:	4b08      	ldr	r3, [pc, #32]	@ (80051f8 <HAL_Init+0x28>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a07      	ldr	r2, [pc, #28]	@ (80051f8 <HAL_Init+0x28>)
 80051da:	f043 0310 	orr.w	r3, r3, #16
 80051de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051e0:	2003      	movs	r0, #3
 80051e2:	f001 f833 	bl	800624c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051e6:	2006      	movs	r0, #6
 80051e8:	f000 f808 	bl	80051fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051ec:	f7ff fd8c 	bl	8004d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40022000 	.word	0x40022000

080051fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005204:	4b12      	ldr	r3, [pc, #72]	@ (8005250 <HAL_InitTick+0x54>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <HAL_InitTick+0x58>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	4619      	mov	r1, r3
 800520e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005212:	fbb3 f3f1 	udiv	r3, r3, r1
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	4618      	mov	r0, r3
 800521c:	f001 f84f 	bl	80062be <HAL_SYSTICK_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e00e      	b.n	8005248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b0f      	cmp	r3, #15
 800522e:	d80a      	bhi.n	8005246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005230:	2200      	movs	r2, #0
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	f04f 30ff 	mov.w	r0, #4294967295
 8005238:	f001 f813 	bl	8006262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800523c:	4a06      	ldr	r2, [pc, #24]	@ (8005258 <HAL_InitTick+0x5c>)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	e000      	b.n	8005248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000038 	.word	0x20000038
 8005254:	20000040 	.word	0x20000040
 8005258:	2000003c 	.word	0x2000003c

0800525c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005260:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <HAL_IncTick+0x1c>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	4b05      	ldr	r3, [pc, #20]	@ (800527c <HAL_IncTick+0x20>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4413      	add	r3, r2
 800526c:	4a03      	ldr	r2, [pc, #12]	@ (800527c <HAL_IncTick+0x20>)
 800526e:	6013      	str	r3, [r2, #0]
}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr
 8005278:	20000040 	.word	0x20000040
 800527c:	200007d4 	.word	0x200007d4

08005280 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  return uwTick;
 8005284:	4b02      	ldr	r3, [pc, #8]	@ (8005290 <HAL_GetTick+0x10>)
 8005286:	681b      	ldr	r3, [r3, #0]
}
 8005288:	4618      	mov	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr
 8005290:	200007d4 	.word	0x200007d4

08005294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800529c:	f7ff fff0 	bl	8005280 <HAL_GetTick>
 80052a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d005      	beq.n	80052ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052ae:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <HAL_Delay+0x44>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052ba:	bf00      	nop
 80052bc:	f7ff ffe0 	bl	8005280 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d8f7      	bhi.n	80052bc <HAL_Delay+0x28>
  {
  }
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000040 	.word	0x20000040

080052dc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 80052e0:	4b02      	ldr	r3, [pc, #8]	@ (80052ec <HAL_GetUIDw0+0x10>)
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	1ffff7e8 	.word	0x1ffff7e8

080052f0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80052f4:	4b02      	ldr	r3, [pc, #8]	@ (8005300 <HAL_GetUIDw1+0x10>)
 80052f6:	681b      	ldr	r3, [r3, #0]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr
 8005300:	1ffff7ec 	.word	0x1ffff7ec

08005304 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005308:	4b02      	ldr	r3, [pc, #8]	@ (8005314 <HAL_GetUIDw2+0x10>)
 800530a:	681b      	ldr	r3, [r3, #0]
}
 800530c:	4618      	mov	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr
 8005314:	1ffff7f0 	.word	0x1ffff7f0

08005318 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e0ed      	b.n	8005506 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fd18 	bl	8004d6c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800534c:	f7ff ff98 	bl	8005280 <HAL_GetTick>
 8005350:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005352:	e012      	b.n	800537a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005354:	f7ff ff94 	bl	8005280 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b0a      	cmp	r3, #10
 8005360:	d90b      	bls.n	800537a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005366:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2205      	movs	r2, #5
 8005372:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e0c5      	b.n	8005506 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0e5      	beq.n	8005354 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0202 	bic.w	r2, r2, #2
 8005396:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005398:	f7ff ff72 	bl	8005280 <HAL_GetTick>
 800539c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800539e:	e012      	b.n	80053c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80053a0:	f7ff ff6e 	bl	8005280 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b0a      	cmp	r3, #10
 80053ac:	d90b      	bls.n	80053c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2205      	movs	r2, #5
 80053be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e09f      	b.n	8005506 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e5      	bne.n	80053a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	7e1b      	ldrb	r3, [r3, #24]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d108      	bne.n	80053ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	e007      	b.n	80053fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	7e5b      	ldrb	r3, [r3, #25]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d108      	bne.n	8005418 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	e007      	b.n	8005428 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005426:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	7e9b      	ldrb	r3, [r3, #26]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d108      	bne.n	8005442 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0220 	orr.w	r2, r2, #32
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	e007      	b.n	8005452 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0220 	bic.w	r2, r2, #32
 8005450:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	7edb      	ldrb	r3, [r3, #27]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d108      	bne.n	800546c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0210 	bic.w	r2, r2, #16
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e007      	b.n	800547c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0210 	orr.w	r2, r2, #16
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	7f1b      	ldrb	r3, [r3, #28]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d108      	bne.n	8005496 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0208 	orr.w	r2, r2, #8
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	e007      	b.n	80054a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0208 	bic.w	r2, r2, #8
 80054a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7f5b      	ldrb	r3, [r3, #29]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d108      	bne.n	80054c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0204 	orr.w	r2, r2, #4
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	e007      	b.n	80054d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0204 	bic.w	r2, r2, #4
 80054ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	ea42 0103 	orr.w	r1, r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	1e5a      	subs	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800550e:	b480      	push	{r7}
 8005510:	b087      	sub	sp, #28
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005524:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005526:	7cfb      	ldrb	r3, [r7, #19]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d003      	beq.n	8005534 <HAL_CAN_ConfigFilter+0x26>
 800552c:	7cfb      	ldrb	r3, [r7, #19]
 800552e:	2b02      	cmp	r3, #2
 8005530:	f040 80aa 	bne.w	8005688 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800553a:	f043 0201 	orr.w	r2, r3, #1
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	2201      	movs	r2, #1
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d123      	bne.n	80055b6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	43db      	mvns	r3, r3
 8005578:	401a      	ands	r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005590:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	3248      	adds	r2, #72	@ 0x48
 8005596:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055ac:	6979      	ldr	r1, [r7, #20]
 80055ae:	3348      	adds	r3, #72	@ 0x48
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	440b      	add	r3, r1
 80055b4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d122      	bne.n	8005604 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80055de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	3248      	adds	r2, #72	@ 0x48
 80055e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055fa:	6979      	ldr	r1, [r7, #20]
 80055fc:	3348      	adds	r3, #72	@ 0x48
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	440b      	add	r3, r1
 8005602:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	43db      	mvns	r3, r3
 8005616:	401a      	ands	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800561e:	e007      	b.n	8005630 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	431a      	orrs	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800564a:	e007      	b.n	800565c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	431a      	orrs	r2, r3
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d107      	bne.n	8005674 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	431a      	orrs	r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800567a:	f023 0201 	bic.w	r2, r3, #1
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	e006      	b.n	8005696 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
  }
}
 8005696:	4618      	mov	r0, r3
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d12e      	bne.n	8005712 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0201 	bic.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056cc:	f7ff fdd8 	bl	8005280 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80056d2:	e012      	b.n	80056fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80056d4:	f7ff fdd4 	bl	8005280 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b0a      	cmp	r3, #10
 80056e0:	d90b      	bls.n	80056fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2205      	movs	r2, #5
 80056f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e012      	b.n	8005720 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e006      	b.n	8005720 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
  }
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005728:	b480      	push	{r7}
 800572a:	b089      	sub	sp, #36	@ 0x24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800573c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005746:	7ffb      	ldrb	r3, [r7, #31]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d003      	beq.n	8005754 <HAL_CAN_AddTxMessage+0x2c>
 800574c:	7ffb      	ldrb	r3, [r7, #31]
 800574e:	2b02      	cmp	r3, #2
 8005750:	f040 80ad 	bne.w	80058ae <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8095 	beq.w	800589e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	0e1b      	lsrs	r3, r3, #24
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800577e:	2201      	movs	r2, #1
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	409a      	lsls	r2, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10d      	bne.n	80057ac <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	6809      	ldr	r1, [r1, #0]
 800579e:	431a      	orrs	r2, r3
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	3318      	adds	r3, #24
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	440b      	add	r3, r1
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	e00f      	b.n	80057cc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057b6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057bc:	68f9      	ldr	r1, [r7, #12]
 80057be:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80057c0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	3318      	adds	r3, #24
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	440b      	add	r3, r1
 80057ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3318      	adds	r3, #24
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	440b      	add	r3, r1
 80057dc:	3304      	adds	r3, #4
 80057de:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	7d1b      	ldrb	r3, [r3, #20]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d111      	bne.n	800580c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3318      	adds	r3, #24
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	4413      	add	r3, r2
 80057f4:	3304      	adds	r3, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	6811      	ldr	r1, [r2, #0]
 80057fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	3318      	adds	r3, #24
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	440b      	add	r3, r1
 8005808:	3304      	adds	r3, #4
 800580a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3307      	adds	r3, #7
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	061a      	lsls	r2, r3, #24
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3306      	adds	r3, #6
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3305      	adds	r3, #5
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	4313      	orrs	r3, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	3204      	adds	r2, #4
 800582c:	7812      	ldrb	r2, [r2, #0]
 800582e:	4610      	mov	r0, r2
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	6811      	ldr	r1, [r2, #0]
 8005834:	ea43 0200 	orr.w	r2, r3, r0
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	440b      	add	r3, r1
 800583e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005842:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3303      	adds	r3, #3
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	061a      	lsls	r2, r3, #24
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3302      	adds	r3, #2
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	041b      	lsls	r3, r3, #16
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3301      	adds	r3, #1
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	4313      	orrs	r3, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	7812      	ldrb	r2, [r2, #0]
 8005864:	4610      	mov	r0, r2
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	6811      	ldr	r1, [r2, #0]
 800586a:	ea43 0200 	orr.w	r2, r3, r0
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	440b      	add	r3, r1
 8005874:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005878:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	3318      	adds	r3, #24
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	4413      	add	r3, r2
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	6811      	ldr	r1, [r2, #0]
 800588c:	f043 0201 	orr.w	r2, r3, #1
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	3318      	adds	r3, #24
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	440b      	add	r3, r1
 8005898:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e00e      	b.n	80058bc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e006      	b.n	80058bc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
  }
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3724      	adds	r7, #36	@ 0x24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr

080058c6 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058d6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d002      	beq.n	80058e4 <HAL_CAN_AbortTxRequest+0x1e>
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d128      	bne.n	8005936 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058fc:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005916:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005930:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e006      	b.n	8005944 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
  }
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005960:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005962:	7afb      	ldrb	r3, [r7, #11]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d002      	beq.n	800596e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005968:	7afb      	ldrb	r3, [r7, #11]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d11d      	bne.n	80059aa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80059aa:	68fb      	ldr	r3, [r7, #12]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr

080059b6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	607a      	str	r2, [r7, #4]
 80059c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d003      	beq.n	80059da <HAL_CAN_GetRxMessage+0x24>
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	f040 8103 	bne.w	8005be0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10e      	bne.n	80059fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d116      	bne.n	8005a1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e0f7      	b.n	8005bee <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d107      	bne.n	8005a1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a10:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0e8      	b.n	8005bee <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	331b      	adds	r3, #27
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	4413      	add	r3, r2
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0204 	and.w	r2, r3, #4
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10c      	bne.n	8005a54 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	331b      	adds	r3, #27
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	4413      	add	r3, r2
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	0d5b      	lsrs	r3, r3, #21
 8005a4a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	e00b      	b.n	8005a6c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	331b      	adds	r3, #27
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4413      	add	r3, r2
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	08db      	lsrs	r3, r3, #3
 8005a64:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	331b      	adds	r3, #27
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	4413      	add	r3, r2
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0202 	and.w	r2, r3, #2
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	331b      	adds	r3, #27
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3304      	adds	r3, #4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	611a      	str	r2, [r3, #16]
 8005aa0:	e00b      	b.n	8005aba <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	331b      	adds	r3, #27
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	4413      	add	r3, r2
 8005aae:	3304      	adds	r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 020f 	and.w	r2, r3, #15
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	331b      	adds	r3, #27
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	331b      	adds	r3, #27
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	4413      	add	r3, r2
 8005ade:	3304      	adds	r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	0c1b      	lsrs	r3, r3, #16
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	0a1a      	lsrs	r2, r3, #8
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	3301      	adds	r3, #1
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	0c1a      	lsrs	r2, r3, #16
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	3302      	adds	r3, #2
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	0e1a      	lsrs	r2, r3, #24
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	3303      	adds	r3, #3
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	3304      	adds	r3, #4
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	0a1a      	lsrs	r2, r3, #8
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	3305      	adds	r3, #5
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	0c1a      	lsrs	r2, r3, #16
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	3306      	adds	r3, #6
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	0e1a      	lsrs	r2, r3, #24
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	3307      	adds	r3, #7
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d108      	bne.n	8005bcc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0220 	orr.w	r2, r2, #32
 8005bc8:	60da      	str	r2, [r3, #12]
 8005bca:	e007      	b.n	8005bdc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0220 	orr.w	r2, r2, #32
 8005bda:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e006      	b.n	8005bee <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
  }
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c08:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d002      	beq.n	8005c16 <HAL_CAN_ActivateNotification+0x1e>
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d109      	bne.n	8005c2a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6959      	ldr	r1, [r3, #20]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e006      	b.n	8005c38 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b08a      	sub	sp, #40	@ 0x28
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d07c      	beq.n	8005d82 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d023      	beq.n	8005cda <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2201      	movs	r2, #1
 8005c98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f983 	bl	8005fb0 <HAL_CAN_TxMailbox0CompleteCallback>
 8005caa:	e016      	b.n	8005cda <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cbe:	e00c      	b.n	8005cda <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d004      	beq.n	8005cd4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd2:	e002      	b.n	8005cda <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f986 	bl	8005fe6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d024      	beq.n	8005d2e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f962 	bl	8005fc2 <HAL_CAN_TxMailbox1CompleteCallback>
 8005cfe:	e016      	b.n	8005d2e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d12:	e00c      	b.n	8005d2e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d004      	beq.n	8005d28 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d26:	e002      	b.n	8005d2e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f965 	bl	8005ff8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d024      	beq.n	8005d82 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005d40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f941 	bl	8005fd4 <HAL_CAN_TxMailbox2CompleteCallback>
 8005d52:	e016      	b.n	8005d82 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d66:	e00c      	b.n	8005d82 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7a:	e002      	b.n	8005d82 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f944 	bl	800600a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00c      	beq.n	8005da6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2210      	movs	r2, #16
 8005da4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00b      	beq.n	8005dc8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d006      	beq.n	8005dc8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2208      	movs	r2, #8
 8005dc0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f92a 	bl	800601c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d009      	beq.n	8005de6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7fc faeb 	bl	80023bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00c      	beq.n	8005e0a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2210      	movs	r2, #16
 8005e08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00b      	beq.n	8005e2c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d006      	beq.n	8005e2c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2208      	movs	r2, #8
 8005e24:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f90a 	bl	8006040 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f8f2 	bl	800602e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f003 0310 	and.w	r3, r3, #16
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d006      	beq.n	8005e6c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2210      	movs	r2, #16
 8005e64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f8f3 	bl	8006052 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d006      	beq.n	8005e8e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2208      	movs	r2, #8
 8005e86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f8eb 	bl	8006064 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d07b      	beq.n	8005f90 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d072      	beq.n	8005f88 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	f043 0302 	orr.w	r3, r3, #2
 8005ed8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	f043 0304 	orr.w	r3, r3, #4
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d043      	beq.n	8005f88 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d03e      	beq.n	8005f88 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f10:	2b60      	cmp	r3, #96	@ 0x60
 8005f12:	d02b      	beq.n	8005f6c <HAL_CAN_IRQHandler+0x32a>
 8005f14:	2b60      	cmp	r3, #96	@ 0x60
 8005f16:	d82e      	bhi.n	8005f76 <HAL_CAN_IRQHandler+0x334>
 8005f18:	2b50      	cmp	r3, #80	@ 0x50
 8005f1a:	d022      	beq.n	8005f62 <HAL_CAN_IRQHandler+0x320>
 8005f1c:	2b50      	cmp	r3, #80	@ 0x50
 8005f1e:	d82a      	bhi.n	8005f76 <HAL_CAN_IRQHandler+0x334>
 8005f20:	2b40      	cmp	r3, #64	@ 0x40
 8005f22:	d019      	beq.n	8005f58 <HAL_CAN_IRQHandler+0x316>
 8005f24:	2b40      	cmp	r3, #64	@ 0x40
 8005f26:	d826      	bhi.n	8005f76 <HAL_CAN_IRQHandler+0x334>
 8005f28:	2b30      	cmp	r3, #48	@ 0x30
 8005f2a:	d010      	beq.n	8005f4e <HAL_CAN_IRQHandler+0x30c>
 8005f2c:	2b30      	cmp	r3, #48	@ 0x30
 8005f2e:	d822      	bhi.n	8005f76 <HAL_CAN_IRQHandler+0x334>
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	d002      	beq.n	8005f3a <HAL_CAN_IRQHandler+0x2f8>
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d005      	beq.n	8005f44 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005f38:	e01d      	b.n	8005f76 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	f043 0308 	orr.w	r3, r3, #8
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f42:	e019      	b.n	8005f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	f043 0310 	orr.w	r3, r3, #16
 8005f4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f4c:	e014      	b.n	8005f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	f043 0320 	orr.w	r3, r3, #32
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f56:	e00f      	b.n	8005f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f60:	e00a      	b.n	8005f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f6a:	e005      	b.n	8005f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f74:	e000      	b.n	8005f78 <HAL_CAN_IRQHandler+0x336>
            break;
 8005f76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005f86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2204      	movs	r2, #4
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d008      	beq.n	8005fa8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f867 	bl	8006076 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005fa8:	bf00      	nop
 8005faa:	3728      	adds	r7, #40	@ 0x28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr

0800600a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr

0800602e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr

08006040 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr

08006052 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr

08006076 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr

08006088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006098:	4b0c      	ldr	r3, [pc, #48]	@ (80060cc <__NVIC_SetPriorityGrouping+0x44>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80060a4:	4013      	ands	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80060b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060ba:	4a04      	ldr	r2, [pc, #16]	@ (80060cc <__NVIC_SetPriorityGrouping+0x44>)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	60d3      	str	r3, [r2, #12]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	e000ed00 	.word	0xe000ed00

080060d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060d4:	4b04      	ldr	r3, [pc, #16]	@ (80060e8 <__NVIC_GetPriorityGrouping+0x18>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	0a1b      	lsrs	r3, r3, #8
 80060da:	f003 0307 	and.w	r3, r3, #7
}
 80060de:	4618      	mov	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	e000ed00 	.word	0xe000ed00

080060ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	db0b      	blt.n	8006116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	f003 021f 	and.w	r2, r3, #31
 8006104:	4906      	ldr	r1, [pc, #24]	@ (8006120 <__NVIC_EnableIRQ+0x34>)
 8006106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	2001      	movs	r0, #1
 800610e:	fa00 f202 	lsl.w	r2, r0, r2
 8006112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	bc80      	pop	{r7}
 800611e:	4770      	bx	lr
 8006120:	e000e100 	.word	0xe000e100

08006124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	4603      	mov	r3, r0
 800612c:	6039      	str	r1, [r7, #0]
 800612e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006134:	2b00      	cmp	r3, #0
 8006136:	db0a      	blt.n	800614e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	490c      	ldr	r1, [pc, #48]	@ (8006170 <__NVIC_SetPriority+0x4c>)
 800613e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006142:	0112      	lsls	r2, r2, #4
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	440b      	add	r3, r1
 8006148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800614c:	e00a      	b.n	8006164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	4908      	ldr	r1, [pc, #32]	@ (8006174 <__NVIC_SetPriority+0x50>)
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	3b04      	subs	r3, #4
 800615c:	0112      	lsls	r2, r2, #4
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	440b      	add	r3, r1
 8006162:	761a      	strb	r2, [r3, #24]
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	e000e100 	.word	0xe000e100
 8006174:	e000ed00 	.word	0xe000ed00

08006178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006178:	b480      	push	{r7}
 800617a:	b089      	sub	sp, #36	@ 0x24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f1c3 0307 	rsb	r3, r3, #7
 8006192:	2b04      	cmp	r3, #4
 8006194:	bf28      	it	cs
 8006196:	2304      	movcs	r3, #4
 8006198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	3304      	adds	r3, #4
 800619e:	2b06      	cmp	r3, #6
 80061a0:	d902      	bls.n	80061a8 <NVIC_EncodePriority+0x30>
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	3b03      	subs	r3, #3
 80061a6:	e000      	b.n	80061aa <NVIC_EncodePriority+0x32>
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43da      	mvns	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	401a      	ands	r2, r3
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061c0:	f04f 31ff 	mov.w	r1, #4294967295
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	43d9      	mvns	r1, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d0:	4313      	orrs	r3, r2
         );
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3724      	adds	r7, #36	@ 0x24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80061e0:	f3bf 8f4f 	dsb	sy
}
 80061e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80061e6:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <__NVIC_SystemReset+0x24>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80061ee:	4904      	ldr	r1, [pc, #16]	@ (8006200 <__NVIC_SystemReset+0x24>)
 80061f0:	4b04      	ldr	r3, [pc, #16]	@ (8006204 <__NVIC_SystemReset+0x28>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80061f6:	f3bf 8f4f 	dsb	sy
}
 80061fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80061fc:	bf00      	nop
 80061fe:	e7fd      	b.n	80061fc <__NVIC_SystemReset+0x20>
 8006200:	e000ed00 	.word	0xe000ed00
 8006204:	05fa0004 	.word	0x05fa0004

08006208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3b01      	subs	r3, #1
 8006214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006218:	d301      	bcc.n	800621e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800621a:	2301      	movs	r3, #1
 800621c:	e00f      	b.n	800623e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800621e:	4a0a      	ldr	r2, [pc, #40]	@ (8006248 <SysTick_Config+0x40>)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3b01      	subs	r3, #1
 8006224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006226:	210f      	movs	r1, #15
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	f7ff ff7a 	bl	8006124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006230:	4b05      	ldr	r3, [pc, #20]	@ (8006248 <SysTick_Config+0x40>)
 8006232:	2200      	movs	r2, #0
 8006234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006236:	4b04      	ldr	r3, [pc, #16]	@ (8006248 <SysTick_Config+0x40>)
 8006238:	2207      	movs	r2, #7
 800623a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	e000e010 	.word	0xe000e010

0800624c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff ff17 	bl	8006088 <__NVIC_SetPriorityGrouping>
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006262:	b580      	push	{r7, lr}
 8006264:	b086      	sub	sp, #24
 8006266:	af00      	add	r7, sp, #0
 8006268:	4603      	mov	r3, r0
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006274:	f7ff ff2c 	bl	80060d0 <__NVIC_GetPriorityGrouping>
 8006278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	6978      	ldr	r0, [r7, #20]
 8006280:	f7ff ff7a 	bl	8006178 <NVIC_EncodePriority>
 8006284:	4602      	mov	r2, r0
 8006286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800628a:	4611      	mov	r1, r2
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff ff49 	bl	8006124 <__NVIC_SetPriority>
}
 8006292:	bf00      	nop
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	4603      	mov	r3, r0
 80062a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff ff1f 	bl	80060ec <__NVIC_EnableIRQ>
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80062ba:	f7ff ff8f 	bl	80061dc <__NVIC_SystemReset>

080062be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff ff9e 	bl	8006208 <SysTick_Config>
 80062cc:	4603      	mov	r3, r0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e043      	b.n	8006376 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	4b22      	ldr	r3, [pc, #136]	@ (8006380 <HAL_DMA_Init+0xa8>)
 80062f6:	4413      	add	r3, r2
 80062f8:	4a22      	ldr	r2, [pc, #136]	@ (8006384 <HAL_DMA_Init+0xac>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	091b      	lsrs	r3, r3, #4
 8006300:	009a      	lsls	r2, r3, #2
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1f      	ldr	r2, [pc, #124]	@ (8006388 <HAL_DMA_Init+0xb0>)
 800630a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006322:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006326:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800633c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr
 8006380:	bffdfff8 	.word	0xbffdfff8
 8006384:	cccccccd 	.word	0xcccccccd
 8006388:	40020000 	.word	0x40020000

0800638c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_DMA_Start_IT+0x20>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e04b      	b.n	8006444 <HAL_DMA_Start_IT+0xb8>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d13a      	bne.n	8006436 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f9eb 	bl	80067c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d008      	beq.n	8006404 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 020e 	orr.w	r2, r2, #14
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	e00f      	b.n	8006424 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0204 	bic.w	r2, r2, #4
 8006412:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 020a 	orr.w	r2, r2, #10
 8006422:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e005      	b.n	8006442 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800643e:	2302      	movs	r3, #2
 8006440:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006442:	7dfb      	ldrb	r3, [r7, #23]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d008      	beq.n	8006476 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2204      	movs	r2, #4
 8006468:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e020      	b.n	80064b8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 020e 	bic.w	r2, r2, #14
 8006484:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0201 	bic.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649e:	2101      	movs	r1, #1
 80064a0:	fa01 f202 	lsl.w	r2, r1, r2
 80064a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr
	...

080064c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d005      	beq.n	80064e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2204      	movs	r2, #4
 80064e0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	73fb      	strb	r3, [r7, #15]
 80064e6:	e051      	b.n	800658c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 020e 	bic.w	r2, r2, #14
 80064f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a22      	ldr	r2, [pc, #136]	@ (8006598 <HAL_DMA_Abort_IT+0xd4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d029      	beq.n	8006566 <HAL_DMA_Abort_IT+0xa2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a21      	ldr	r2, [pc, #132]	@ (800659c <HAL_DMA_Abort_IT+0xd8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d022      	beq.n	8006562 <HAL_DMA_Abort_IT+0x9e>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1f      	ldr	r2, [pc, #124]	@ (80065a0 <HAL_DMA_Abort_IT+0xdc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01a      	beq.n	800655c <HAL_DMA_Abort_IT+0x98>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	@ (80065a4 <HAL_DMA_Abort_IT+0xe0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d012      	beq.n	8006556 <HAL_DMA_Abort_IT+0x92>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1c      	ldr	r2, [pc, #112]	@ (80065a8 <HAL_DMA_Abort_IT+0xe4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00a      	beq.n	8006550 <HAL_DMA_Abort_IT+0x8c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1b      	ldr	r2, [pc, #108]	@ (80065ac <HAL_DMA_Abort_IT+0xe8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d102      	bne.n	800654a <HAL_DMA_Abort_IT+0x86>
 8006544:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006548:	e00e      	b.n	8006568 <HAL_DMA_Abort_IT+0xa4>
 800654a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800654e:	e00b      	b.n	8006568 <HAL_DMA_Abort_IT+0xa4>
 8006550:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006554:	e008      	b.n	8006568 <HAL_DMA_Abort_IT+0xa4>
 8006556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800655a:	e005      	b.n	8006568 <HAL_DMA_Abort_IT+0xa4>
 800655c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006560:	e002      	b.n	8006568 <HAL_DMA_Abort_IT+0xa4>
 8006562:	2310      	movs	r3, #16
 8006564:	e000      	b.n	8006568 <HAL_DMA_Abort_IT+0xa4>
 8006566:	2301      	movs	r3, #1
 8006568:	4a11      	ldr	r2, [pc, #68]	@ (80065b0 <HAL_DMA_Abort_IT+0xec>)
 800656a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	4798      	blx	r3
    } 
  }
  return status;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40020008 	.word	0x40020008
 800659c:	4002001c 	.word	0x4002001c
 80065a0:	40020030 	.word	0x40020030
 80065a4:	40020044 	.word	0x40020044
 80065a8:	40020058 	.word	0x40020058
 80065ac:	4002006c 	.word	0x4002006c
 80065b0:	40020000 	.word	0x40020000

080065b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d0:	2204      	movs	r2, #4
 80065d2:	409a      	lsls	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d04f      	beq.n	800667c <HAL_DMA_IRQHandler+0xc8>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d04a      	beq.n	800667c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d107      	bne.n	8006604 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0204 	bic.w	r2, r2, #4
 8006602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a66      	ldr	r2, [pc, #408]	@ (80067a4 <HAL_DMA_IRQHandler+0x1f0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d029      	beq.n	8006662 <HAL_DMA_IRQHandler+0xae>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a65      	ldr	r2, [pc, #404]	@ (80067a8 <HAL_DMA_IRQHandler+0x1f4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d022      	beq.n	800665e <HAL_DMA_IRQHandler+0xaa>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a63      	ldr	r2, [pc, #396]	@ (80067ac <HAL_DMA_IRQHandler+0x1f8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d01a      	beq.n	8006658 <HAL_DMA_IRQHandler+0xa4>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a62      	ldr	r2, [pc, #392]	@ (80067b0 <HAL_DMA_IRQHandler+0x1fc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d012      	beq.n	8006652 <HAL_DMA_IRQHandler+0x9e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a60      	ldr	r2, [pc, #384]	@ (80067b4 <HAL_DMA_IRQHandler+0x200>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00a      	beq.n	800664c <HAL_DMA_IRQHandler+0x98>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a5f      	ldr	r2, [pc, #380]	@ (80067b8 <HAL_DMA_IRQHandler+0x204>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d102      	bne.n	8006646 <HAL_DMA_IRQHandler+0x92>
 8006640:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006644:	e00e      	b.n	8006664 <HAL_DMA_IRQHandler+0xb0>
 8006646:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800664a:	e00b      	b.n	8006664 <HAL_DMA_IRQHandler+0xb0>
 800664c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006650:	e008      	b.n	8006664 <HAL_DMA_IRQHandler+0xb0>
 8006652:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006656:	e005      	b.n	8006664 <HAL_DMA_IRQHandler+0xb0>
 8006658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800665c:	e002      	b.n	8006664 <HAL_DMA_IRQHandler+0xb0>
 800665e:	2340      	movs	r3, #64	@ 0x40
 8006660:	e000      	b.n	8006664 <HAL_DMA_IRQHandler+0xb0>
 8006662:	2304      	movs	r3, #4
 8006664:	4a55      	ldr	r2, [pc, #340]	@ (80067bc <HAL_DMA_IRQHandler+0x208>)
 8006666:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8094 	beq.w	800679a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800667a:	e08e      	b.n	800679a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	2202      	movs	r2, #2
 8006682:	409a      	lsls	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4013      	ands	r3, r2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d056      	beq.n	800673a <HAL_DMA_IRQHandler+0x186>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d051      	beq.n	800673a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10b      	bne.n	80066bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 020a 	bic.w	r2, r2, #10
 80066b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a38      	ldr	r2, [pc, #224]	@ (80067a4 <HAL_DMA_IRQHandler+0x1f0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d029      	beq.n	800671a <HAL_DMA_IRQHandler+0x166>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a37      	ldr	r2, [pc, #220]	@ (80067a8 <HAL_DMA_IRQHandler+0x1f4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d022      	beq.n	8006716 <HAL_DMA_IRQHandler+0x162>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a35      	ldr	r2, [pc, #212]	@ (80067ac <HAL_DMA_IRQHandler+0x1f8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d01a      	beq.n	8006710 <HAL_DMA_IRQHandler+0x15c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a34      	ldr	r2, [pc, #208]	@ (80067b0 <HAL_DMA_IRQHandler+0x1fc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d012      	beq.n	800670a <HAL_DMA_IRQHandler+0x156>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a32      	ldr	r2, [pc, #200]	@ (80067b4 <HAL_DMA_IRQHandler+0x200>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00a      	beq.n	8006704 <HAL_DMA_IRQHandler+0x150>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a31      	ldr	r2, [pc, #196]	@ (80067b8 <HAL_DMA_IRQHandler+0x204>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d102      	bne.n	80066fe <HAL_DMA_IRQHandler+0x14a>
 80066f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80066fc:	e00e      	b.n	800671c <HAL_DMA_IRQHandler+0x168>
 80066fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006702:	e00b      	b.n	800671c <HAL_DMA_IRQHandler+0x168>
 8006704:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006708:	e008      	b.n	800671c <HAL_DMA_IRQHandler+0x168>
 800670a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800670e:	e005      	b.n	800671c <HAL_DMA_IRQHandler+0x168>
 8006710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006714:	e002      	b.n	800671c <HAL_DMA_IRQHandler+0x168>
 8006716:	2320      	movs	r3, #32
 8006718:	e000      	b.n	800671c <HAL_DMA_IRQHandler+0x168>
 800671a:	2302      	movs	r3, #2
 800671c:	4a27      	ldr	r2, [pc, #156]	@ (80067bc <HAL_DMA_IRQHandler+0x208>)
 800671e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672c:	2b00      	cmp	r3, #0
 800672e:	d034      	beq.n	800679a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006738:	e02f      	b.n	800679a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673e:	2208      	movs	r2, #8
 8006740:	409a      	lsls	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4013      	ands	r3, r2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d028      	beq.n	800679c <HAL_DMA_IRQHandler+0x1e8>
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d023      	beq.n	800679c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 020e 	bic.w	r2, r2, #14
 8006762:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	2101      	movs	r1, #1
 800676e:	fa01 f202 	lsl.w	r2, r1, r2
 8006772:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
    }
  }
  return;
 800679a:	bf00      	nop
 800679c:	bf00      	nop
}
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40020008 	.word	0x40020008
 80067a8:	4002001c 	.word	0x4002001c
 80067ac:	40020030 	.word	0x40020030
 80067b0:	40020044 	.word	0x40020044
 80067b4:	40020058 	.word	0x40020058
 80067b8:	4002006c 	.word	0x4002006c
 80067bc:	40020000 	.word	0x40020000

080067c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d6:	2101      	movs	r1, #1
 80067d8:	fa01 f202 	lsl.w	r2, r1, r2
 80067dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b10      	cmp	r3, #16
 80067ec:	d108      	bne.n	8006800 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80067fe:	e007      	b.n	8006810 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	60da      	str	r2, [r3, #12]
}
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr
	...

0800681c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800681c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006836:	4b2f      	ldr	r3, [pc, #188]	@ (80068f4 <HAL_FLASH_Program+0xd8>)
 8006838:	7e1b      	ldrb	r3, [r3, #24]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <HAL_FLASH_Program+0x26>
 800683e:	2302      	movs	r3, #2
 8006840:	e054      	b.n	80068ec <HAL_FLASH_Program+0xd0>
 8006842:	4b2c      	ldr	r3, [pc, #176]	@ (80068f4 <HAL_FLASH_Program+0xd8>)
 8006844:	2201      	movs	r2, #1
 8006846:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006848:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800684c:	f000 f8a8 	bl	80069a0 <FLASH_WaitForLastOperation>
 8006850:	4603      	mov	r3, r0
 8006852:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d144      	bne.n	80068e4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d102      	bne.n	8006866 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8006860:	2301      	movs	r3, #1
 8006862:	757b      	strb	r3, [r7, #21]
 8006864:	e007      	b.n	8006876 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d102      	bne.n	8006872 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800686c:	2302      	movs	r3, #2
 800686e:	757b      	strb	r3, [r7, #21]
 8006870:	e001      	b.n	8006876 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8006872:	2304      	movs	r3, #4
 8006874:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8006876:	2300      	movs	r3, #0
 8006878:	75bb      	strb	r3, [r7, #22]
 800687a:	e02d      	b.n	80068d8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800687c:	7dbb      	ldrb	r3, [r7, #22]
 800687e:	005a      	lsls	r2, r3, #1
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	eb02 0c03 	add.w	ip, r2, r3
 8006886:	7dbb      	ldrb	r3, [r7, #22]
 8006888:	0119      	lsls	r1, r3, #4
 800688a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688e:	f1c1 0620 	rsb	r6, r1, #32
 8006892:	f1a1 0020 	sub.w	r0, r1, #32
 8006896:	fa22 f401 	lsr.w	r4, r2, r1
 800689a:	fa03 f606 	lsl.w	r6, r3, r6
 800689e:	4334      	orrs	r4, r6
 80068a0:	fa23 f000 	lsr.w	r0, r3, r0
 80068a4:	4304      	orrs	r4, r0
 80068a6:	fa23 f501 	lsr.w	r5, r3, r1
 80068aa:	b2a3      	uxth	r3, r4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4660      	mov	r0, ip
 80068b0:	f000 f85a 	bl	8006968 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80068b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80068b8:	f000 f872 	bl	80069a0 <FLASH_WaitForLastOperation>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80068c0:	4b0d      	ldr	r3, [pc, #52]	@ (80068f8 <HAL_FLASH_Program+0xdc>)
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	4a0c      	ldr	r2, [pc, #48]	@ (80068f8 <HAL_FLASH_Program+0xdc>)
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d107      	bne.n	80068e2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80068d2:	7dbb      	ldrb	r3, [r7, #22]
 80068d4:	3301      	adds	r3, #1
 80068d6:	75bb      	strb	r3, [r7, #22]
 80068d8:	7dba      	ldrb	r2, [r7, #22]
 80068da:	7d7b      	ldrb	r3, [r7, #21]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d3cd      	bcc.n	800687c <HAL_FLASH_Program+0x60>
 80068e0:	e000      	b.n	80068e4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80068e2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068e4:	4b03      	ldr	r3, [pc, #12]	@ (80068f4 <HAL_FLASH_Program+0xd8>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	761a      	strb	r2, [r3, #24]

  return status;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068f4:	200007d8 	.word	0x200007d8
 80068f8:	40022000 	.word	0x40022000

080068fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006906:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <HAL_FLASH_Unlock+0x40>)
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006912:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <HAL_FLASH_Unlock+0x40>)
 8006914:	4a0a      	ldr	r2, [pc, #40]	@ (8006940 <HAL_FLASH_Unlock+0x44>)
 8006916:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006918:	4b08      	ldr	r3, [pc, #32]	@ (800693c <HAL_FLASH_Unlock+0x40>)
 800691a:	4a0a      	ldr	r2, [pc, #40]	@ (8006944 <HAL_FLASH_Unlock+0x48>)
 800691c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800691e:	4b07      	ldr	r3, [pc, #28]	@ (800693c <HAL_FLASH_Unlock+0x40>)
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800692e:	79fb      	ldrb	r3, [r7, #7]
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	bc80      	pop	{r7}
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40022000 	.word	0x40022000
 8006940:	45670123 	.word	0x45670123
 8006944:	cdef89ab 	.word	0xcdef89ab

08006948 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800694c:	4b05      	ldr	r3, [pc, #20]	@ (8006964 <HAL_FLASH_Lock+0x1c>)
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	4a04      	ldr	r2, [pc, #16]	@ (8006964 <HAL_FLASH_Lock+0x1c>)
 8006952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006956:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40022000 	.word	0x40022000

08006968 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006974:	4b08      	ldr	r3, [pc, #32]	@ (8006998 <FLASH_Program_HalfWord+0x30>)
 8006976:	2200      	movs	r2, #0
 8006978:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800697a:	4b08      	ldr	r3, [pc, #32]	@ (800699c <FLASH_Program_HalfWord+0x34>)
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	4a07      	ldr	r2, [pc, #28]	@ (800699c <FLASH_Program_HalfWord+0x34>)
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	887a      	ldrh	r2, [r7, #2]
 800698a:	801a      	strh	r2, [r3, #0]
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	200007d8 	.word	0x200007d8
 800699c:	40022000 	.word	0x40022000

080069a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80069a8:	f7fe fc6a 	bl	8005280 <HAL_GetTick>
 80069ac:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80069ae:	e010      	b.n	80069d2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b6:	d00c      	beq.n	80069d2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <FLASH_WaitForLastOperation+0x2e>
 80069be:	f7fe fc5f 	bl	8005280 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d201      	bcs.n	80069d2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e025      	b.n	8006a1e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80069d2:	4b15      	ldr	r3, [pc, #84]	@ (8006a28 <FLASH_WaitForLastOperation+0x88>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e8      	bne.n	80069b0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80069de:	4b12      	ldr	r3, [pc, #72]	@ (8006a28 <FLASH_WaitForLastOperation+0x88>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80069ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006a28 <FLASH_WaitForLastOperation+0x88>)
 80069ec:	2220      	movs	r2, #32
 80069ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80069f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006a28 <FLASH_WaitForLastOperation+0x88>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0310 	and.w	r3, r3, #16
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80069fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a28 <FLASH_WaitForLastOperation+0x88>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d105      	bne.n	8006a14 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006a08:	4b07      	ldr	r3, [pc, #28]	@ (8006a28 <FLASH_WaitForLastOperation+0x88>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006a14:	f000 f80a 	bl	8006a2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	40022000 	.word	0x40022000

08006a2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006a36:	4b23      	ldr	r3, [pc, #140]	@ (8006ac4 <FLASH_SetErrorCode+0x98>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006a42:	4b21      	ldr	r3, [pc, #132]	@ (8006ac8 <FLASH_SetErrorCode+0x9c>)
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f043 0302 	orr.w	r3, r3, #2
 8006a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac8 <FLASH_SetErrorCode+0x9c>)
 8006a4c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f043 0310 	orr.w	r3, r3, #16
 8006a54:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006a56:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac4 <FLASH_SetErrorCode+0x98>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006a62:	4b19      	ldr	r3, [pc, #100]	@ (8006ac8 <FLASH_SetErrorCode+0x9c>)
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	4a17      	ldr	r2, [pc, #92]	@ (8006ac8 <FLASH_SetErrorCode+0x9c>)
 8006a6c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f043 0304 	orr.w	r3, r3, #4
 8006a74:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8006a76:	4b13      	ldr	r3, [pc, #76]	@ (8006ac4 <FLASH_SetErrorCode+0x98>)
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8006a82:	4b11      	ldr	r3, [pc, #68]	@ (8006ac8 <FLASH_SetErrorCode+0x9c>)
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f043 0304 	orr.w	r3, r3, #4
 8006a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8006ac8 <FLASH_SetErrorCode+0x9c>)
 8006a8c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac4 <FLASH_SetErrorCode+0x98>)
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	4a0c      	ldr	r2, [pc, #48]	@ (8006ac4 <FLASH_SetErrorCode+0x98>)
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f240 1201 	movw	r2, #257	@ 0x101
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d106      	bne.n	8006ab2 <FLASH_SetErrorCode+0x86>
 8006aa4:	4b07      	ldr	r3, [pc, #28]	@ (8006ac4 <FLASH_SetErrorCode+0x98>)
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	4a06      	ldr	r2, [pc, #24]	@ (8006ac4 <FLASH_SetErrorCode+0x98>)
 8006aaa:	f023 0301 	bic.w	r3, r3, #1
 8006aae:	61d3      	str	r3, [r2, #28]
}  
 8006ab0:	e002      	b.n	8006ab8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006ab2:	4a04      	ldr	r2, [pc, #16]	@ (8006ac4 <FLASH_SetErrorCode+0x98>)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	60d3      	str	r3, [r2, #12]
}  
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40022000 	.word	0x40022000
 8006ac8:	200007d8 	.word	0x200007d8

08006acc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006ade:	4b2f      	ldr	r3, [pc, #188]	@ (8006b9c <HAL_FLASHEx_Erase+0xd0>)
 8006ae0:	7e1b      	ldrb	r3, [r3, #24]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_FLASHEx_Erase+0x1e>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e053      	b.n	8006b92 <HAL_FLASHEx_Erase+0xc6>
 8006aea:	4b2c      	ldr	r3, [pc, #176]	@ (8006b9c <HAL_FLASHEx_Erase+0xd0>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d116      	bne.n	8006b26 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006af8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006afc:	f7ff ff50 	bl	80069a0 <FLASH_WaitForLastOperation>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d141      	bne.n	8006b8a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8006b06:	2001      	movs	r0, #1
 8006b08:	f000 f84c 	bl	8006ba4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006b10:	f7ff ff46 	bl	80069a0 <FLASH_WaitForLastOperation>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006b18:	4b21      	ldr	r3, [pc, #132]	@ (8006ba0 <HAL_FLASHEx_Erase+0xd4>)
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	4a20      	ldr	r2, [pc, #128]	@ (8006ba0 <HAL_FLASHEx_Erase+0xd4>)
 8006b1e:	f023 0304 	bic.w	r3, r3, #4
 8006b22:	6113      	str	r3, [r2, #16]
 8006b24:	e031      	b.n	8006b8a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006b26:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006b2a:	f7ff ff39 	bl	80069a0 <FLASH_WaitForLastOperation>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d12a      	bne.n	8006b8a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	e019      	b.n	8006b78 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8006b44:	68b8      	ldr	r0, [r7, #8]
 8006b46:	f000 f849 	bl	8006bdc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b4a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006b4e:	f7ff ff27 	bl	80069a0 <FLASH_WaitForLastOperation>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006b56:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <HAL_FLASHEx_Erase+0xd4>)
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	4a11      	ldr	r2, [pc, #68]	@ (8006ba0 <HAL_FLASHEx_Erase+0xd4>)
 8006b5c:	f023 0302 	bic.w	r3, r3, #2
 8006b60:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	601a      	str	r2, [r3, #0]
            break;
 8006b6e:	e00c      	b.n	8006b8a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b76:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	029a      	lsls	r2, r3, #10
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	4413      	add	r3, r2
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d3dc      	bcc.n	8006b44 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006b8a:	4b04      	ldr	r3, [pc, #16]	@ (8006b9c <HAL_FLASHEx_Erase+0xd0>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	761a      	strb	r2, [r3, #24]

  return status;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	200007d8 	.word	0x200007d8
 8006ba0:	40022000 	.word	0x40022000

08006ba4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006bac:	4b09      	ldr	r3, [pc, #36]	@ (8006bd4 <FLASH_MassErase+0x30>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006bb2:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <FLASH_MassErase+0x34>)
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	4a08      	ldr	r2, [pc, #32]	@ (8006bd8 <FLASH_MassErase+0x34>)
 8006bb8:	f043 0304 	orr.w	r3, r3, #4
 8006bbc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006bbe:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <FLASH_MassErase+0x34>)
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	4a05      	ldr	r2, [pc, #20]	@ (8006bd8 <FLASH_MassErase+0x34>)
 8006bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bc8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr
 8006bd4:	200007d8 	.word	0x200007d8
 8006bd8:	40022000 	.word	0x40022000

08006bdc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006be4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c14 <FLASH_PageErase+0x38>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006bea:	4b0b      	ldr	r3, [pc, #44]	@ (8006c18 <FLASH_PageErase+0x3c>)
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	4a0a      	ldr	r2, [pc, #40]	@ (8006c18 <FLASH_PageErase+0x3c>)
 8006bf0:	f043 0302 	orr.w	r3, r3, #2
 8006bf4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006bf6:	4a08      	ldr	r2, [pc, #32]	@ (8006c18 <FLASH_PageErase+0x3c>)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006bfc:	4b06      	ldr	r3, [pc, #24]	@ (8006c18 <FLASH_PageErase+0x3c>)
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	4a05      	ldr	r2, [pc, #20]	@ (8006c18 <FLASH_PageErase+0x3c>)
 8006c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c06:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bc80      	pop	{r7}
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	200007d8 	.word	0x200007d8
 8006c18:	40022000 	.word	0x40022000

08006c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b08b      	sub	sp, #44	@ 0x2c
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c26:	2300      	movs	r3, #0
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c2e:	e169      	b.n	8006f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006c30:	2201      	movs	r2, #1
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	fa02 f303 	lsl.w	r3, r2, r3
 8006c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	4013      	ands	r3, r2
 8006c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	f040 8158 	bne.w	8006efe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4a9a      	ldr	r2, [pc, #616]	@ (8006ebc <HAL_GPIO_Init+0x2a0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d05e      	beq.n	8006d16 <HAL_GPIO_Init+0xfa>
 8006c58:	4a98      	ldr	r2, [pc, #608]	@ (8006ebc <HAL_GPIO_Init+0x2a0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d875      	bhi.n	8006d4a <HAL_GPIO_Init+0x12e>
 8006c5e:	4a98      	ldr	r2, [pc, #608]	@ (8006ec0 <HAL_GPIO_Init+0x2a4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d058      	beq.n	8006d16 <HAL_GPIO_Init+0xfa>
 8006c64:	4a96      	ldr	r2, [pc, #600]	@ (8006ec0 <HAL_GPIO_Init+0x2a4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d86f      	bhi.n	8006d4a <HAL_GPIO_Init+0x12e>
 8006c6a:	4a96      	ldr	r2, [pc, #600]	@ (8006ec4 <HAL_GPIO_Init+0x2a8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d052      	beq.n	8006d16 <HAL_GPIO_Init+0xfa>
 8006c70:	4a94      	ldr	r2, [pc, #592]	@ (8006ec4 <HAL_GPIO_Init+0x2a8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d869      	bhi.n	8006d4a <HAL_GPIO_Init+0x12e>
 8006c76:	4a94      	ldr	r2, [pc, #592]	@ (8006ec8 <HAL_GPIO_Init+0x2ac>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d04c      	beq.n	8006d16 <HAL_GPIO_Init+0xfa>
 8006c7c:	4a92      	ldr	r2, [pc, #584]	@ (8006ec8 <HAL_GPIO_Init+0x2ac>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d863      	bhi.n	8006d4a <HAL_GPIO_Init+0x12e>
 8006c82:	4a92      	ldr	r2, [pc, #584]	@ (8006ecc <HAL_GPIO_Init+0x2b0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d046      	beq.n	8006d16 <HAL_GPIO_Init+0xfa>
 8006c88:	4a90      	ldr	r2, [pc, #576]	@ (8006ecc <HAL_GPIO_Init+0x2b0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d85d      	bhi.n	8006d4a <HAL_GPIO_Init+0x12e>
 8006c8e:	2b12      	cmp	r3, #18
 8006c90:	d82a      	bhi.n	8006ce8 <HAL_GPIO_Init+0xcc>
 8006c92:	2b12      	cmp	r3, #18
 8006c94:	d859      	bhi.n	8006d4a <HAL_GPIO_Init+0x12e>
 8006c96:	a201      	add	r2, pc, #4	@ (adr r2, 8006c9c <HAL_GPIO_Init+0x80>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006d17 	.word	0x08006d17
 8006ca0:	08006cf1 	.word	0x08006cf1
 8006ca4:	08006d03 	.word	0x08006d03
 8006ca8:	08006d45 	.word	0x08006d45
 8006cac:	08006d4b 	.word	0x08006d4b
 8006cb0:	08006d4b 	.word	0x08006d4b
 8006cb4:	08006d4b 	.word	0x08006d4b
 8006cb8:	08006d4b 	.word	0x08006d4b
 8006cbc:	08006d4b 	.word	0x08006d4b
 8006cc0:	08006d4b 	.word	0x08006d4b
 8006cc4:	08006d4b 	.word	0x08006d4b
 8006cc8:	08006d4b 	.word	0x08006d4b
 8006ccc:	08006d4b 	.word	0x08006d4b
 8006cd0:	08006d4b 	.word	0x08006d4b
 8006cd4:	08006d4b 	.word	0x08006d4b
 8006cd8:	08006d4b 	.word	0x08006d4b
 8006cdc:	08006d4b 	.word	0x08006d4b
 8006ce0:	08006cf9 	.word	0x08006cf9
 8006ce4:	08006d0d 	.word	0x08006d0d
 8006ce8:	4a79      	ldr	r2, [pc, #484]	@ (8006ed0 <HAL_GPIO_Init+0x2b4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006cee:	e02c      	b.n	8006d4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	623b      	str	r3, [r7, #32]
          break;
 8006cf6:	e029      	b.n	8006d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	623b      	str	r3, [r7, #32]
          break;
 8006d00:	e024      	b.n	8006d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	3308      	adds	r3, #8
 8006d08:	623b      	str	r3, [r7, #32]
          break;
 8006d0a:	e01f      	b.n	8006d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	330c      	adds	r3, #12
 8006d12:	623b      	str	r3, [r7, #32]
          break;
 8006d14:	e01a      	b.n	8006d4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d102      	bne.n	8006d24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006d1e:	2304      	movs	r3, #4
 8006d20:	623b      	str	r3, [r7, #32]
          break;
 8006d22:	e013      	b.n	8006d4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d105      	bne.n	8006d38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006d2c:	2308      	movs	r3, #8
 8006d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	611a      	str	r2, [r3, #16]
          break;
 8006d36:	e009      	b.n	8006d4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006d38:	2308      	movs	r3, #8
 8006d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	615a      	str	r2, [r3, #20]
          break;
 8006d42:	e003      	b.n	8006d4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006d44:	2300      	movs	r3, #0
 8006d46:	623b      	str	r3, [r7, #32]
          break;
 8006d48:	e000      	b.n	8006d4c <HAL_GPIO_Init+0x130>
          break;
 8006d4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	2bff      	cmp	r3, #255	@ 0xff
 8006d50:	d801      	bhi.n	8006d56 <HAL_GPIO_Init+0x13a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	e001      	b.n	8006d5a <HAL_GPIO_Init+0x13e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2bff      	cmp	r3, #255	@ 0xff
 8006d60:	d802      	bhi.n	8006d68 <HAL_GPIO_Init+0x14c>
 8006d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	e002      	b.n	8006d6e <HAL_GPIO_Init+0x152>
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6a:	3b08      	subs	r3, #8
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	210f      	movs	r1, #15
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	401a      	ands	r2, r3
 8006d80:	6a39      	ldr	r1, [r7, #32]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	fa01 f303 	lsl.w	r3, r1, r3
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 80b1 	beq.w	8006efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8006ed4 <HAL_GPIO_Init+0x2b8>)
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	4a4c      	ldr	r2, [pc, #304]	@ (8006ed4 <HAL_GPIO_Init+0x2b8>)
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	6193      	str	r3, [r2, #24]
 8006da8:	4b4a      	ldr	r3, [pc, #296]	@ (8006ed4 <HAL_GPIO_Init+0x2b8>)
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006db4:	4a48      	ldr	r2, [pc, #288]	@ (8006ed8 <HAL_GPIO_Init+0x2bc>)
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	089b      	lsrs	r3, r3, #2
 8006dba:	3302      	adds	r3, #2
 8006dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc4:	f003 0303 	and.w	r3, r3, #3
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	220f      	movs	r2, #15
 8006dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a40      	ldr	r2, [pc, #256]	@ (8006edc <HAL_GPIO_Init+0x2c0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d013      	beq.n	8006e08 <HAL_GPIO_Init+0x1ec>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ee0 <HAL_GPIO_Init+0x2c4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00d      	beq.n	8006e04 <HAL_GPIO_Init+0x1e8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a3e      	ldr	r2, [pc, #248]	@ (8006ee4 <HAL_GPIO_Init+0x2c8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d007      	beq.n	8006e00 <HAL_GPIO_Init+0x1e4>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a3d      	ldr	r2, [pc, #244]	@ (8006ee8 <HAL_GPIO_Init+0x2cc>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d101      	bne.n	8006dfc <HAL_GPIO_Init+0x1e0>
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e006      	b.n	8006e0a <HAL_GPIO_Init+0x1ee>
 8006dfc:	2304      	movs	r3, #4
 8006dfe:	e004      	b.n	8006e0a <HAL_GPIO_Init+0x1ee>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e002      	b.n	8006e0a <HAL_GPIO_Init+0x1ee>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <HAL_GPIO_Init+0x1ee>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e0c:	f002 0203 	and.w	r2, r2, #3
 8006e10:	0092      	lsls	r2, r2, #2
 8006e12:	4093      	lsls	r3, r2
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006e1a:	492f      	ldr	r1, [pc, #188]	@ (8006ed8 <HAL_GPIO_Init+0x2bc>)
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1e:	089b      	lsrs	r3, r3, #2
 8006e20:	3302      	adds	r3, #2
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d006      	beq.n	8006e42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006e34:	4b2d      	ldr	r3, [pc, #180]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	492c      	ldr	r1, [pc, #176]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	608b      	str	r3, [r1, #8]
 8006e40:	e006      	b.n	8006e50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006e42:	4b2a      	ldr	r3, [pc, #168]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	4928      	ldr	r1, [pc, #160]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d006      	beq.n	8006e6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006e5c:	4b23      	ldr	r3, [pc, #140]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	4922      	ldr	r1, [pc, #136]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60cb      	str	r3, [r1, #12]
 8006e68:	e006      	b.n	8006e78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006e6a:	4b20      	ldr	r3, [pc, #128]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	491e      	ldr	r1, [pc, #120]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d006      	beq.n	8006e92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006e84:	4b19      	ldr	r3, [pc, #100]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	4918      	ldr	r1, [pc, #96]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	604b      	str	r3, [r1, #4]
 8006e90:	e006      	b.n	8006ea0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006e92:	4b16      	ldr	r3, [pc, #88]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	4914      	ldr	r1, [pc, #80]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d021      	beq.n	8006ef0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006eac:	4b0f      	ldr	r3, [pc, #60]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	490e      	ldr	r1, [pc, #56]	@ (8006eec <HAL_GPIO_Init+0x2d0>)
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	600b      	str	r3, [r1, #0]
 8006eb8:	e021      	b.n	8006efe <HAL_GPIO_Init+0x2e2>
 8006eba:	bf00      	nop
 8006ebc:	10320000 	.word	0x10320000
 8006ec0:	10310000 	.word	0x10310000
 8006ec4:	10220000 	.word	0x10220000
 8006ec8:	10210000 	.word	0x10210000
 8006ecc:	10120000 	.word	0x10120000
 8006ed0:	10110000 	.word	0x10110000
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40010800 	.word	0x40010800
 8006ee0:	40010c00 	.word	0x40010c00
 8006ee4:	40011000 	.word	0x40011000
 8006ee8:	40011400 	.word	0x40011400
 8006eec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f20 <HAL_GPIO_Init+0x304>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	4909      	ldr	r1, [pc, #36]	@ (8006f20 <HAL_GPIO_Init+0x304>)
 8006efa:	4013      	ands	r3, r2
 8006efc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	3301      	adds	r3, #1
 8006f02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f47f ae8e 	bne.w	8006c30 <HAL_GPIO_Init+0x14>
  }
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	372c      	adds	r7, #44	@ 0x2c
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr
 8006f20:	40010400 	.word	0x40010400

08006f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	887b      	ldrh	r3, [r7, #2]
 8006f36:	4013      	ands	r3, r2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	73fb      	strb	r3, [r7, #15]
 8006f40:	e001      	b.n	8006f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	807b      	strh	r3, [r7, #2]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f62:	787b      	ldrb	r3, [r7, #1]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f68:	887a      	ldrh	r2, [r7, #2]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006f6e:	e003      	b.n	8006f78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006f70:	887b      	ldrh	r3, [r7, #2]
 8006f72:	041a      	lsls	r2, r3, #16
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	611a      	str	r2, [r3, #16]
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr

08006f82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b085      	sub	sp, #20
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f94:	887a      	ldrh	r2, [r7, #2]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	041a      	lsls	r2, r3, #16
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	43d9      	mvns	r1, r3
 8006fa0:	887b      	ldrh	r3, [r7, #2]
 8006fa2:	400b      	ands	r3, r1
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	611a      	str	r2, [r3, #16]
}
 8006faa:	bf00      	nop
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006fbe:	4b08      	ldr	r3, [pc, #32]	@ (8006fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fc0:	695a      	ldr	r2, [r3, #20]
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d006      	beq.n	8006fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fca:	4a05      	ldr	r2, [pc, #20]	@ (8006fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fd0:	88fb      	ldrh	r3, [r7, #6]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fb f8d8 	bl	8002188 <HAL_GPIO_EXTI_Callback>
  }
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40010400 	.word	0x40010400

08006fe4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e036      	b.n	8007064 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007008:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6852      	ldr	r2, [r2, #4]
 8007012:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6892      	ldr	r2, [r2, #8]
 800701c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800701e:	f7fe f92f 	bl	8005280 <HAL_GetTick>
 8007022:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007024:	e011      	b.n	800704a <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007026:	f7fe f92b 	bl	8005280 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	f241 323c 	movw	r2, #4924	@ 0x133c
 8007034:	4293      	cmp	r3, r2
 8007036:	d908      	bls.n	800704a <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e00c      	b.n	8007064 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e6      	bne.n	8007026 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007060:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800707c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr
	...

0800708c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e272      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8087 	beq.w	80071ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070ac:	4b92      	ldr	r3, [pc, #584]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f003 030c 	and.w	r3, r3, #12
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d00c      	beq.n	80070d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80070b8:	4b8f      	ldr	r3, [pc, #572]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f003 030c 	and.w	r3, r3, #12
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d112      	bne.n	80070ea <HAL_RCC_OscConfig+0x5e>
 80070c4:	4b8c      	ldr	r3, [pc, #560]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d0:	d10b      	bne.n	80070ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d2:	4b89      	ldr	r3, [pc, #548]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d06c      	beq.n	80071b8 <HAL_RCC_OscConfig+0x12c>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d168      	bne.n	80071b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e24c      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070f2:	d106      	bne.n	8007102 <HAL_RCC_OscConfig+0x76>
 80070f4:	4b80      	ldr	r3, [pc, #512]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a7f      	ldr	r2, [pc, #508]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	e02e      	b.n	8007160 <HAL_RCC_OscConfig+0xd4>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10c      	bne.n	8007124 <HAL_RCC_OscConfig+0x98>
 800710a:	4b7b      	ldr	r3, [pc, #492]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a7a      	ldr	r2, [pc, #488]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	4b78      	ldr	r3, [pc, #480]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a77      	ldr	r2, [pc, #476]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800711c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e01d      	b.n	8007160 <HAL_RCC_OscConfig+0xd4>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800712c:	d10c      	bne.n	8007148 <HAL_RCC_OscConfig+0xbc>
 800712e:	4b72      	ldr	r3, [pc, #456]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a71      	ldr	r2, [pc, #452]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	4b6f      	ldr	r3, [pc, #444]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a6e      	ldr	r2, [pc, #440]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	e00b      	b.n	8007160 <HAL_RCC_OscConfig+0xd4>
 8007148:	4b6b      	ldr	r3, [pc, #428]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a6a      	ldr	r2, [pc, #424]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800714e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	4b68      	ldr	r3, [pc, #416]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a67      	ldr	r2, [pc, #412]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800715a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800715e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d013      	beq.n	8007190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007168:	f7fe f88a 	bl	8005280 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007170:	f7fe f886 	bl	8005280 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b64      	cmp	r3, #100	@ 0x64
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e200      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007182:	4b5d      	ldr	r3, [pc, #372]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCC_OscConfig+0xe4>
 800718e:	e014      	b.n	80071ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007190:	f7fe f876 	bl	8005280 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007198:	f7fe f872 	bl	8005280 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b64      	cmp	r3, #100	@ 0x64
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e1ec      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071aa:	4b53      	ldr	r3, [pc, #332]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <HAL_RCC_OscConfig+0x10c>
 80071b6:	e000      	b.n	80071ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d063      	beq.n	800728e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071c6:	4b4c      	ldr	r3, [pc, #304]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f003 030c 	and.w	r3, r3, #12
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80071d2:	4b49      	ldr	r3, [pc, #292]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f003 030c 	and.w	r3, r3, #12
 80071da:	2b08      	cmp	r3, #8
 80071dc:	d11c      	bne.n	8007218 <HAL_RCC_OscConfig+0x18c>
 80071de:	4b46      	ldr	r3, [pc, #280]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d116      	bne.n	8007218 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ea:	4b43      	ldr	r3, [pc, #268]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <HAL_RCC_OscConfig+0x176>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d001      	beq.n	8007202 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e1c0      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007202:	4b3d      	ldr	r3, [pc, #244]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	4939      	ldr	r1, [pc, #228]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007212:	4313      	orrs	r3, r2
 8007214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007216:	e03a      	b.n	800728e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d020      	beq.n	8007262 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007220:	4b36      	ldr	r3, [pc, #216]	@ (80072fc <HAL_RCC_OscConfig+0x270>)
 8007222:	2201      	movs	r2, #1
 8007224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007226:	f7fe f82b 	bl	8005280 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722c:	e008      	b.n	8007240 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800722e:	f7fe f827 	bl	8005280 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e1a1      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007240:	4b2d      	ldr	r3, [pc, #180]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0f0      	beq.n	800722e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800724c:	4b2a      	ldr	r3, [pc, #168]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	4927      	ldr	r1, [pc, #156]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800725c:	4313      	orrs	r3, r2
 800725e:	600b      	str	r3, [r1, #0]
 8007260:	e015      	b.n	800728e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007262:	4b26      	ldr	r3, [pc, #152]	@ (80072fc <HAL_RCC_OscConfig+0x270>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007268:	f7fe f80a 	bl	8005280 <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007270:	f7fe f806 	bl	8005280 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e180      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007282:	4b1d      	ldr	r3, [pc, #116]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f0      	bne.n	8007270 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d03a      	beq.n	8007310 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d019      	beq.n	80072d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072a2:	4b17      	ldr	r3, [pc, #92]	@ (8007300 <HAL_RCC_OscConfig+0x274>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072a8:	f7fd ffea 	bl	8005280 <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072b0:	f7fd ffe6 	bl	8005280 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e160      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072c2:	4b0d      	ldr	r3, [pc, #52]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80072c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0f0      	beq.n	80072b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80072ce:	2001      	movs	r0, #1
 80072d0:	f000 fad0 	bl	8007874 <RCC_Delay>
 80072d4:	e01c      	b.n	8007310 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <HAL_RCC_OscConfig+0x274>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072dc:	f7fd ffd0 	bl	8005280 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072e2:	e00f      	b.n	8007304 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072e4:	f7fd ffcc 	bl	8005280 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d908      	bls.n	8007304 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e146      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
 80072f6:	bf00      	nop
 80072f8:	40021000 	.word	0x40021000
 80072fc:	42420000 	.word	0x42420000
 8007300:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007304:	4b92      	ldr	r3, [pc, #584]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e9      	bne.n	80072e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 80a6 	beq.w	800746a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800731e:	2300      	movs	r3, #0
 8007320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007322:	4b8b      	ldr	r3, [pc, #556]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10d      	bne.n	800734a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800732e:	4b88      	ldr	r3, [pc, #544]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	4a87      	ldr	r2, [pc, #540]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007338:	61d3      	str	r3, [r2, #28]
 800733a:	4b85      	ldr	r3, [pc, #532]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007342:	60bb      	str	r3, [r7, #8]
 8007344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007346:	2301      	movs	r3, #1
 8007348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800734a:	4b82      	ldr	r3, [pc, #520]	@ (8007554 <HAL_RCC_OscConfig+0x4c8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d118      	bne.n	8007388 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007356:	4b7f      	ldr	r3, [pc, #508]	@ (8007554 <HAL_RCC_OscConfig+0x4c8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a7e      	ldr	r2, [pc, #504]	@ (8007554 <HAL_RCC_OscConfig+0x4c8>)
 800735c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007362:	f7fd ff8d 	bl	8005280 <HAL_GetTick>
 8007366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007368:	e008      	b.n	800737c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800736a:	f7fd ff89 	bl	8005280 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b64      	cmp	r3, #100	@ 0x64
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e103      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800737c:	4b75      	ldr	r3, [pc, #468]	@ (8007554 <HAL_RCC_OscConfig+0x4c8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0f0      	beq.n	800736a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d106      	bne.n	800739e <HAL_RCC_OscConfig+0x312>
 8007390:	4b6f      	ldr	r3, [pc, #444]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	4a6e      	ldr	r2, [pc, #440]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007396:	f043 0301 	orr.w	r3, r3, #1
 800739a:	6213      	str	r3, [r2, #32]
 800739c:	e02d      	b.n	80073fa <HAL_RCC_OscConfig+0x36e>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10c      	bne.n	80073c0 <HAL_RCC_OscConfig+0x334>
 80073a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	4a69      	ldr	r2, [pc, #420]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	6213      	str	r3, [r2, #32]
 80073b2:	4b67      	ldr	r3, [pc, #412]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	4a66      	ldr	r2, [pc, #408]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073b8:	f023 0304 	bic.w	r3, r3, #4
 80073bc:	6213      	str	r3, [r2, #32]
 80073be:	e01c      	b.n	80073fa <HAL_RCC_OscConfig+0x36e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	2b05      	cmp	r3, #5
 80073c6:	d10c      	bne.n	80073e2 <HAL_RCC_OscConfig+0x356>
 80073c8:	4b61      	ldr	r3, [pc, #388]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	4a60      	ldr	r2, [pc, #384]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073ce:	f043 0304 	orr.w	r3, r3, #4
 80073d2:	6213      	str	r3, [r2, #32]
 80073d4:	4b5e      	ldr	r3, [pc, #376]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073da:	f043 0301 	orr.w	r3, r3, #1
 80073de:	6213      	str	r3, [r2, #32]
 80073e0:	e00b      	b.n	80073fa <HAL_RCC_OscConfig+0x36e>
 80073e2:	4b5b      	ldr	r3, [pc, #364]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	4a5a      	ldr	r2, [pc, #360]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073e8:	f023 0301 	bic.w	r3, r3, #1
 80073ec:	6213      	str	r3, [r2, #32]
 80073ee:	4b58      	ldr	r3, [pc, #352]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	4a57      	ldr	r2, [pc, #348]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073f4:	f023 0304 	bic.w	r3, r3, #4
 80073f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d015      	beq.n	800742e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007402:	f7fd ff3d 	bl	8005280 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007408:	e00a      	b.n	8007420 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740a:	f7fd ff39 	bl	8005280 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007418:	4293      	cmp	r3, r2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e0b1      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007420:	4b4b      	ldr	r3, [pc, #300]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0ee      	beq.n	800740a <HAL_RCC_OscConfig+0x37e>
 800742c:	e014      	b.n	8007458 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800742e:	f7fd ff27 	bl	8005280 <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007434:	e00a      	b.n	800744c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007436:	f7fd ff23 	bl	8005280 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007444:	4293      	cmp	r3, r2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e09b      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800744c:	4b40      	ldr	r3, [pc, #256]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1ee      	bne.n	8007436 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d105      	bne.n	800746a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800745e:	4b3c      	ldr	r3, [pc, #240]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	4a3b      	ldr	r2, [pc, #236]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007468:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 8087 	beq.w	8007582 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007474:	4b36      	ldr	r3, [pc, #216]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f003 030c 	and.w	r3, r3, #12
 800747c:	2b08      	cmp	r3, #8
 800747e:	d061      	beq.n	8007544 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d146      	bne.n	8007516 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007488:	4b33      	ldr	r3, [pc, #204]	@ (8007558 <HAL_RCC_OscConfig+0x4cc>)
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800748e:	f7fd fef7 	bl	8005280 <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007494:	e008      	b.n	80074a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007496:	f7fd fef3 	bl	8005280 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e06d      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074a8:	4b29      	ldr	r3, [pc, #164]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1f0      	bne.n	8007496 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074bc:	d108      	bne.n	80074d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074be:	4b24      	ldr	r3, [pc, #144]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	4921      	ldr	r1, [pc, #132]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a19      	ldr	r1, [r3, #32]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	430b      	orrs	r3, r1
 80074e2:	491b      	ldr	r1, [pc, #108]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007558 <HAL_RCC_OscConfig+0x4cc>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ee:	f7fd fec7 	bl	8005280 <HAL_GetTick>
 80074f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074f4:	e008      	b.n	8007508 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f6:	f7fd fec3 	bl	8005280 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e03d      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007508:	4b11      	ldr	r3, [pc, #68]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0f0      	beq.n	80074f6 <HAL_RCC_OscConfig+0x46a>
 8007514:	e035      	b.n	8007582 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007516:	4b10      	ldr	r3, [pc, #64]	@ (8007558 <HAL_RCC_OscConfig+0x4cc>)
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800751c:	f7fd feb0 	bl	8005280 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007524:	f7fd feac 	bl	8005280 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e026      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007536:	4b06      	ldr	r3, [pc, #24]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f0      	bne.n	8007524 <HAL_RCC_OscConfig+0x498>
 8007542:	e01e      	b.n	8007582 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d107      	bne.n	800755c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e019      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
 8007550:	40021000 	.word	0x40021000
 8007554:	40007000 	.word	0x40007000
 8007558:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800755c:	4b0b      	ldr	r3, [pc, #44]	@ (800758c <HAL_RCC_OscConfig+0x500>)
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	429a      	cmp	r2, r3
 800756e:	d106      	bne.n	800757e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800757a:	429a      	cmp	r2, r3
 800757c:	d001      	beq.n	8007582 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40021000 	.word	0x40021000

08007590 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e0d0      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d910      	bls.n	80075d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075b2:	4b67      	ldr	r3, [pc, #412]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f023 0207 	bic.w	r2, r3, #7
 80075ba:	4965      	ldr	r1, [pc, #404]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	4313      	orrs	r3, r2
 80075c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075c2:	4b63      	ldr	r3, [pc, #396]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d001      	beq.n	80075d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0b8      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d020      	beq.n	8007622 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075ec:	4b59      	ldr	r3, [pc, #356]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	4a58      	ldr	r2, [pc, #352]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 80075f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80075f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007604:	4b53      	ldr	r3, [pc, #332]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4a52      	ldr	r2, [pc, #328]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 800760a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800760e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007610:	4b50      	ldr	r3, [pc, #320]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	494d      	ldr	r1, [pc, #308]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 800761e:	4313      	orrs	r3, r2
 8007620:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d040      	beq.n	80076b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d107      	bne.n	8007646 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007636:	4b47      	ldr	r3, [pc, #284]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d115      	bne.n	800766e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e07f      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b02      	cmp	r3, #2
 800764c:	d107      	bne.n	800765e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800764e:	4b41      	ldr	r3, [pc, #260]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e073      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800765e:	4b3d      	ldr	r3, [pc, #244]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e06b      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800766e:	4b39      	ldr	r3, [pc, #228]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f023 0203 	bic.w	r2, r3, #3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4936      	ldr	r1, [pc, #216]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 800767c:	4313      	orrs	r3, r2
 800767e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007680:	f7fd fdfe 	bl	8005280 <HAL_GetTick>
 8007684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007686:	e00a      	b.n	800769e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007688:	f7fd fdfa 	bl	8005280 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007696:	4293      	cmp	r3, r2
 8007698:	d901      	bls.n	800769e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e053      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800769e:	4b2d      	ldr	r3, [pc, #180]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f003 020c 	and.w	r2, r3, #12
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d1eb      	bne.n	8007688 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076b0:	4b27      	ldr	r3, [pc, #156]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d210      	bcs.n	80076e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076be:	4b24      	ldr	r3, [pc, #144]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f023 0207 	bic.w	r2, r3, #7
 80076c6:	4922      	ldr	r1, [pc, #136]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ce:	4b20      	ldr	r3, [pc, #128]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d001      	beq.n	80076e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e032      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076ec:	4b19      	ldr	r3, [pc, #100]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4916      	ldr	r1, [pc, #88]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800770a:	4b12      	ldr	r3, [pc, #72]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	490e      	ldr	r1, [pc, #56]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 800771a:	4313      	orrs	r3, r2
 800771c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800771e:	f000 f821 	bl	8007764 <HAL_RCC_GetSysClockFreq>
 8007722:	4602      	mov	r2, r0
 8007724:	4b0b      	ldr	r3, [pc, #44]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	091b      	lsrs	r3, r3, #4
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	490a      	ldr	r1, [pc, #40]	@ (8007758 <HAL_RCC_ClockConfig+0x1c8>)
 8007730:	5ccb      	ldrb	r3, [r1, r3]
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	4a09      	ldr	r2, [pc, #36]	@ (800775c <HAL_RCC_ClockConfig+0x1cc>)
 8007738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800773a:	4b09      	ldr	r3, [pc, #36]	@ (8007760 <HAL_RCC_ClockConfig+0x1d0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f7fd fd5c 	bl	80051fc <HAL_InitTick>

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40022000 	.word	0x40022000
 8007754:	40021000 	.word	0x40021000
 8007758:	08009d58 	.word	0x08009d58
 800775c:	20000038 	.word	0x20000038
 8007760:	2000003c 	.word	0x2000003c

08007764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	2300      	movs	r3, #0
 8007770:	60bb      	str	r3, [r7, #8]
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	2300      	movs	r3, #0
 8007778:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800777e:	4b1e      	ldr	r3, [pc, #120]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b04      	cmp	r3, #4
 800778c:	d002      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0x30>
 800778e:	2b08      	cmp	r3, #8
 8007790:	d003      	beq.n	800779a <HAL_RCC_GetSysClockFreq+0x36>
 8007792:	e027      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007794:	4b19      	ldr	r3, [pc, #100]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x98>)
 8007796:	613b      	str	r3, [r7, #16]
      break;
 8007798:	e027      	b.n	80077ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	0c9b      	lsrs	r3, r3, #18
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	4a17      	ldr	r2, [pc, #92]	@ (8007800 <HAL_RCC_GetSysClockFreq+0x9c>)
 80077a4:	5cd3      	ldrb	r3, [r2, r3]
 80077a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d010      	beq.n	80077d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80077b2:	4b11      	ldr	r3, [pc, #68]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	0c5b      	lsrs	r3, r3, #17
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	4a11      	ldr	r2, [pc, #68]	@ (8007804 <HAL_RCC_GetSysClockFreq+0xa0>)
 80077be:	5cd3      	ldrb	r3, [r2, r3]
 80077c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a0d      	ldr	r2, [pc, #52]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x98>)
 80077c6:	fb03 f202 	mul.w	r2, r3, r2
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e004      	b.n	80077de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007808 <HAL_RCC_GetSysClockFreq+0xa4>)
 80077d8:	fb02 f303 	mul.w	r3, r2, r3
 80077dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	613b      	str	r3, [r7, #16]
      break;
 80077e2:	e002      	b.n	80077ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80077e4:	4b09      	ldr	r3, [pc, #36]	@ (800780c <HAL_RCC_GetSysClockFreq+0xa8>)
 80077e6:	613b      	str	r3, [r7, #16]
      break;
 80077e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077ea:	693b      	ldr	r3, [r7, #16]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40021000 	.word	0x40021000
 80077fc:	00f42400 	.word	0x00f42400
 8007800:	08009d70 	.word	0x08009d70
 8007804:	08009d80 	.word	0x08009d80
 8007808:	003d0900 	.word	0x003d0900
 800780c:	007a1200 	.word	0x007a1200

08007810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007814:	4b02      	ldr	r3, [pc, #8]	@ (8007820 <HAL_RCC_GetHCLKFreq+0x10>)
 8007816:	681b      	ldr	r3, [r3, #0]
}
 8007818:	4618      	mov	r0, r3
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr
 8007820:	20000038 	.word	0x20000038

08007824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007828:	f7ff fff2 	bl	8007810 <HAL_RCC_GetHCLKFreq>
 800782c:	4602      	mov	r2, r0
 800782e:	4b05      	ldr	r3, [pc, #20]	@ (8007844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	4903      	ldr	r1, [pc, #12]	@ (8007848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800783a:	5ccb      	ldrb	r3, [r1, r3]
 800783c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007840:	4618      	mov	r0, r3
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40021000 	.word	0x40021000
 8007848:	08009d68 	.word	0x08009d68

0800784c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007850:	f7ff ffde 	bl	8007810 <HAL_RCC_GetHCLKFreq>
 8007854:	4602      	mov	r2, r0
 8007856:	4b05      	ldr	r3, [pc, #20]	@ (800786c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	0adb      	lsrs	r3, r3, #11
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	4903      	ldr	r1, [pc, #12]	@ (8007870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007862:	5ccb      	ldrb	r3, [r1, r3]
 8007864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007868:	4618      	mov	r0, r3
 800786a:	bd80      	pop	{r7, pc}
 800786c:	40021000 	.word	0x40021000
 8007870:	08009d68 	.word	0x08009d68

08007874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800787c:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <RCC_Delay+0x34>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a0a      	ldr	r2, [pc, #40]	@ (80078ac <RCC_Delay+0x38>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	0a5b      	lsrs	r3, r3, #9
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	fb02 f303 	mul.w	r3, r2, r3
 800788e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007890:	bf00      	nop
  }
  while (Delay --);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	1e5a      	subs	r2, r3, #1
 8007896:	60fa      	str	r2, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1f9      	bne.n	8007890 <RCC_Delay+0x1c>
}
 800789c:	bf00      	nop
 800789e:	bf00      	nop
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr
 80078a8:	20000038 	.word	0x20000038
 80078ac:	10624dd3 	.word	0x10624dd3

080078b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e076      	b.n	80079b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d108      	bne.n	80078dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078d2:	d009      	beq.n	80078e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	61da      	str	r2, [r3, #28]
 80078da:	e005      	b.n	80078e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fd fa86 	bl	8004e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800791e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	431a      	orrs	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007958:	431a      	orrs	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796c:	ea42 0103 	orr.w	r1, r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007974:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	0c1a      	lsrs	r2, r3, #16
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f002 0204 	and.w	r2, r2, #4
 800798e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69da      	ldr	r2, [r3, #28]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800799e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079c8:	f7fd fc5a 	bl	8005280 <HAL_GetTick>
 80079cc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80079ce:	88fb      	ldrh	r3, [r7, #6]
 80079d0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d001      	beq.n	80079e2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80079de:	2302      	movs	r3, #2
 80079e0:	e12a      	b.n	8007c38 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <HAL_SPI_Transmit+0x36>
 80079e8:	88fb      	ldrh	r3, [r7, #6]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e122      	b.n	8007c38 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_SPI_Transmit+0x48>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e11b      	b.n	8007c38 <HAL_SPI_Transmit+0x280>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	88fa      	ldrh	r2, [r7, #6]
 8007a20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	88fa      	ldrh	r2, [r7, #6]
 8007a26:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a4e:	d10f      	bne.n	8007a70 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7a:	2b40      	cmp	r3, #64	@ 0x40
 8007a7c:	d007      	beq.n	8007a8e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a96:	d152      	bne.n	8007b3e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <HAL_SPI_Transmit+0xee>
 8007aa0:	8b7b      	ldrh	r3, [r7, #26]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d145      	bne.n	8007b32 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aaa:	881a      	ldrh	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab6:	1c9a      	adds	r2, r3, #2
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007aca:	e032      	b.n	8007b32 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d112      	bne.n	8007b00 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ade:	881a      	ldrh	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aea:	1c9a      	adds	r2, r3, #2
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007afe:	e018      	b.n	8007b32 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b00:	f7fd fbbe 	bl	8005280 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d803      	bhi.n	8007b18 <HAL_SPI_Transmit+0x160>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d102      	bne.n	8007b1e <HAL_SPI_Transmit+0x166>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e082      	b.n	8007c38 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1c7      	bne.n	8007acc <HAL_SPI_Transmit+0x114>
 8007b3c:	e053      	b.n	8007be6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <HAL_SPI_Transmit+0x194>
 8007b46:	8b7b      	ldrh	r3, [r7, #26]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d147      	bne.n	8007bdc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	330c      	adds	r3, #12
 8007b56:	7812      	ldrb	r2, [r2, #0]
 8007b58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007b72:	e033      	b.n	8007bdc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d113      	bne.n	8007baa <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	330c      	adds	r3, #12
 8007b8c:	7812      	ldrb	r2, [r2, #0]
 8007b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ba8:	e018      	b.n	8007bdc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007baa:	f7fd fb69 	bl	8005280 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d803      	bhi.n	8007bc2 <HAL_SPI_Transmit+0x20a>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d102      	bne.n	8007bc8 <HAL_SPI_Transmit+0x210>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d109      	bne.n	8007bdc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e02d      	b.n	8007c38 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1c6      	bne.n	8007b74 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fbc4 	bl	8008378 <SPI_EndRxTxTransaction>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c04:	2300      	movs	r3, #0
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e000      	b.n	8007c38 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007c36:	2300      	movs	r3, #0
  }
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3720      	adds	r7, #32
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	603b      	str	r3, [r7, #0]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d001      	beq.n	8007c60 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e104      	b.n	8007e6a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c68:	d112      	bne.n	8007c90 <HAL_SPI_Receive+0x50>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10e      	bne.n	8007c90 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2204      	movs	r2, #4
 8007c76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c7a:	88fa      	ldrh	r2, [r7, #6]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4613      	mov	r3, r2
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 f8f3 	bl	8007e72 <HAL_SPI_TransmitReceive>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	e0ec      	b.n	8007e6a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c90:	f7fd faf6 	bl	8005280 <HAL_GetTick>
 8007c94:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <HAL_SPI_Receive+0x62>
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e0e1      	b.n	8007e6a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d101      	bne.n	8007cb4 <HAL_SPI_Receive+0x74>
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	e0da      	b.n	8007e6a <HAL_SPI_Receive+0x22a>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	88fa      	ldrh	r2, [r7, #6]
 8007cd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	88fa      	ldrh	r2, [r7, #6]
 8007cda:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d02:	d10f      	bne.n	8007d24 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d22:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2e:	2b40      	cmp	r3, #64	@ 0x40
 8007d30:	d007      	beq.n	8007d42 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d40:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d170      	bne.n	8007e2c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007d4a:	e035      	b.n	8007db8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d115      	bne.n	8007d86 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f103 020c 	add.w	r2, r3, #12
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d66:	7812      	ldrb	r2, [r2, #0]
 8007d68:	b2d2      	uxtb	r2, r2
 8007d6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d84:	e018      	b.n	8007db8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d86:	f7fd fa7b 	bl	8005280 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d803      	bhi.n	8007d9e <HAL_SPI_Receive+0x15e>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9c:	d102      	bne.n	8007da4 <HAL_SPI_Receive+0x164>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d109      	bne.n	8007db8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e058      	b.n	8007e6a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1c4      	bne.n	8007d4c <HAL_SPI_Receive+0x10c>
 8007dc2:	e038      	b.n	8007e36 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d113      	bne.n	8007dfa <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	b292      	uxth	r2, r2
 8007dde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de4:	1c9a      	adds	r2, r3, #2
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007df8:	e018      	b.n	8007e2c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dfa:	f7fd fa41 	bl	8005280 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d803      	bhi.n	8007e12 <HAL_SPI_Receive+0x1d2>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e10:	d102      	bne.n	8007e18 <HAL_SPI_Receive+0x1d8>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d109      	bne.n	8007e2c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e01e      	b.n	8007e6a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1c6      	bne.n	8007dc4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fa4a 	bl	80082d4 <SPI_EndRxTransaction>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e000      	b.n	8007e6a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007e68:	2300      	movs	r3, #0
  }
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b08a      	sub	sp, #40	@ 0x28
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
 8007e7e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e80:	2301      	movs	r3, #1
 8007e82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e84:	f7fd f9fc 	bl	8005280 <HAL_GetTick>
 8007e88:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e90:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007e98:	887b      	ldrh	r3, [r7, #2]
 8007e9a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e9c:	7ffb      	ldrb	r3, [r7, #31]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d00c      	beq.n	8007ebc <HAL_SPI_TransmitReceive+0x4a>
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ea8:	d106      	bne.n	8007eb8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <HAL_SPI_TransmitReceive+0x46>
 8007eb2:	7ffb      	ldrb	r3, [r7, #31]
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	d001      	beq.n	8007ebc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e17f      	b.n	80081bc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <HAL_SPI_TransmitReceive+0x5c>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <HAL_SPI_TransmitReceive+0x5c>
 8007ec8:	887b      	ldrh	r3, [r7, #2]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e174      	b.n	80081bc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d101      	bne.n	8007ee0 <HAL_SPI_TransmitReceive+0x6e>
 8007edc:	2302      	movs	r3, #2
 8007ede:	e16d      	b.n	80081bc <HAL_SPI_TransmitReceive+0x34a>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d003      	beq.n	8007efc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2205      	movs	r2, #5
 8007ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	887a      	ldrh	r2, [r7, #2]
 8007f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	887a      	ldrh	r2, [r7, #2]
 8007f12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	887a      	ldrh	r2, [r7, #2]
 8007f1e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	887a      	ldrh	r2, [r7, #2]
 8007f24:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f3c:	2b40      	cmp	r3, #64	@ 0x40
 8007f3e:	d007      	beq.n	8007f50 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f58:	d17e      	bne.n	8008058 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <HAL_SPI_TransmitReceive+0xf6>
 8007f62:	8afb      	ldrh	r3, [r7, #22]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d16c      	bne.n	8008042 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6c:	881a      	ldrh	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f78:	1c9a      	adds	r2, r3, #2
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f8c:	e059      	b.n	8008042 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d11b      	bne.n	8007fd4 <HAL_SPI_TransmitReceive+0x162>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d016      	beq.n	8007fd4 <HAL_SPI_TransmitReceive+0x162>
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d113      	bne.n	8007fd4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb0:	881a      	ldrh	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fbc:	1c9a      	adds	r2, r3, #2
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d119      	bne.n	8008016 <HAL_SPI_TransmitReceive+0x1a4>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d014      	beq.n	8008016 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff6:	b292      	uxth	r2, r2
 8007ff8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ffe:	1c9a      	adds	r2, r3, #2
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29a      	uxth	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008012:	2301      	movs	r3, #1
 8008014:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008016:	f7fd f933 	bl	8005280 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008022:	429a      	cmp	r2, r3
 8008024:	d80d      	bhi.n	8008042 <HAL_SPI_TransmitReceive+0x1d0>
 8008026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802c:	d009      	beq.n	8008042 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e0bc      	b.n	80081bc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008046:	b29b      	uxth	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1a0      	bne.n	8007f8e <HAL_SPI_TransmitReceive+0x11c>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d19b      	bne.n	8007f8e <HAL_SPI_TransmitReceive+0x11c>
 8008056:	e082      	b.n	800815e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <HAL_SPI_TransmitReceive+0x1f4>
 8008060:	8afb      	ldrh	r3, [r7, #22]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d171      	bne.n	800814a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	330c      	adds	r3, #12
 8008070:	7812      	ldrb	r2, [r2, #0]
 8008072:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008082:	b29b      	uxth	r3, r3
 8008084:	3b01      	subs	r3, #1
 8008086:	b29a      	uxth	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800808c:	e05d      	b.n	800814a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b02      	cmp	r3, #2
 800809a:	d11c      	bne.n	80080d6 <HAL_SPI_TransmitReceive+0x264>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d017      	beq.n	80080d6 <HAL_SPI_TransmitReceive+0x264>
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d114      	bne.n	80080d6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	330c      	adds	r3, #12
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d119      	bne.n	8008118 <HAL_SPI_TransmitReceive+0x2a6>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d014      	beq.n	8008118 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f8:	b2d2      	uxtb	r2, r2
 80080fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800810a:	b29b      	uxth	r3, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008114:	2301      	movs	r3, #1
 8008116:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008118:	f7fd f8b2 	bl	8005280 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008124:	429a      	cmp	r2, r3
 8008126:	d803      	bhi.n	8008130 <HAL_SPI_TransmitReceive+0x2be>
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812e:	d102      	bne.n	8008136 <HAL_SPI_TransmitReceive+0x2c4>
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	2b00      	cmp	r3, #0
 8008134:	d109      	bne.n	800814a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e038      	b.n	80081bc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d19c      	bne.n	800808e <HAL_SPI_TransmitReceive+0x21c>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008158:	b29b      	uxth	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d197      	bne.n	800808e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800815e:	6a3a      	ldr	r2, [r7, #32]
 8008160:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f908 	bl	8008378 <SPI_EndRxTxTransaction>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2220      	movs	r2, #32
 8008172:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e01d      	b.n	80081bc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008188:	2300      	movs	r3, #0
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80081ba:	2300      	movs	r3, #0
  }
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3728      	adds	r7, #40	@ 0x28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	4613      	mov	r3, r2
 80081d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80081d4:	f7fd f854 	bl	8005280 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	4413      	add	r3, r2
 80081e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081e4:	f7fd f84c 	bl	8005280 <HAL_GetTick>
 80081e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80081ea:	4b39      	ldr	r3, [pc, #228]	@ (80082d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	015b      	lsls	r3, r3, #5
 80081f0:	0d1b      	lsrs	r3, r3, #20
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
 80081f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081fa:	e054      	b.n	80082a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008202:	d050      	beq.n	80082a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008204:	f7fd f83c 	bl	8005280 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	69fa      	ldr	r2, [r7, #28]
 8008210:	429a      	cmp	r2, r3
 8008212:	d902      	bls.n	800821a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d13d      	bne.n	8008296 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008228:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008232:	d111      	bne.n	8008258 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800823c:	d004      	beq.n	8008248 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008246:	d107      	bne.n	8008258 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008256:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008260:	d10f      	bne.n	8008282 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008280:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e017      	b.n	80082c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4013      	ands	r3, r2
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	bf0c      	ite	eq
 80082b6:	2301      	moveq	r3, #1
 80082b8:	2300      	movne	r3, #0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	461a      	mov	r2, r3
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d19b      	bne.n	80081fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3720      	adds	r7, #32
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20000038 	.word	0x20000038

080082d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082e8:	d111      	bne.n	800830e <SPI_EndRxTransaction+0x3a>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082f2:	d004      	beq.n	80082fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082fc:	d107      	bne.n	800830e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800830c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008316:	d117      	bne.n	8008348 <SPI_EndRxTransaction+0x74>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008320:	d112      	bne.n	8008348 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2200      	movs	r2, #0
 800832a:	2101      	movs	r1, #1
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f7ff ff49 	bl	80081c4 <SPI_WaitFlagStateUntilTimeout>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01a      	beq.n	800836e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800833c:	f043 0220 	orr.w	r2, r3, #32
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e013      	b.n	8008370 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	2180      	movs	r1, #128	@ 0x80
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7ff ff36 	bl	80081c4 <SPI_WaitFlagStateUntilTimeout>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008362:	f043 0220 	orr.w	r2, r3, #32
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e000      	b.n	8008370 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af02      	add	r7, sp, #8
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2201      	movs	r2, #1
 800838c:	2102      	movs	r1, #2
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff ff18 	bl	80081c4 <SPI_WaitFlagStateUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d007      	beq.n	80083aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839e:	f043 0220 	orr.w	r2, r3, #32
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e013      	b.n	80083d2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2200      	movs	r2, #0
 80083b2:	2180      	movs	r1, #128	@ 0x80
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff ff05 	bl	80081c4 <SPI_WaitFlagStateUntilTimeout>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d007      	beq.n	80083d0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c4:	f043 0220 	orr.w	r2, r3, #32
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e000      	b.n	80083d2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e041      	b.n	8008470 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d106      	bne.n	8008406 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7fc fd8d 	bl	8004f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2202      	movs	r2, #2
 800840a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	3304      	adds	r3, #4
 8008416:	4619      	mov	r1, r3
 8008418:	4610      	mov	r0, r2
 800841a:	f000 fa5b 	bl	80088d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	d001      	beq.n	8008490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e03a      	b.n	8008506 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0201 	orr.w	r2, r2, #1
 80084a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a18      	ldr	r2, [pc, #96]	@ (8008510 <HAL_TIM_Base_Start_IT+0x98>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d00e      	beq.n	80084d0 <HAL_TIM_Base_Start_IT+0x58>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ba:	d009      	beq.n	80084d0 <HAL_TIM_Base_Start_IT+0x58>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a14      	ldr	r2, [pc, #80]	@ (8008514 <HAL_TIM_Base_Start_IT+0x9c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d004      	beq.n	80084d0 <HAL_TIM_Base_Start_IT+0x58>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a13      	ldr	r2, [pc, #76]	@ (8008518 <HAL_TIM_Base_Start_IT+0xa0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d111      	bne.n	80084f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 0307 	and.w	r3, r3, #7
 80084da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b06      	cmp	r3, #6
 80084e0:	d010      	beq.n	8008504 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f042 0201 	orr.w	r2, r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084f2:	e007      	b.n	8008504 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr
 8008510:	40012c00 	.word	0x40012c00
 8008514:	40000400 	.word	0x40000400
 8008518:	40000800 	.word	0x40000800

0800851c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d020      	beq.n	8008580 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d01b      	beq.n	8008580 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f06f 0202 	mvn.w	r2, #2
 8008550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f998 	bl	800889c <HAL_TIM_IC_CaptureCallback>
 800856c:	e005      	b.n	800857a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f98b 	bl	800888a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f99a 	bl	80088ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f003 0304 	and.w	r3, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	d020      	beq.n	80085cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d01b      	beq.n	80085cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f06f 0204 	mvn.w	r2, #4
 800859c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2202      	movs	r2, #2
 80085a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f972 	bl	800889c <HAL_TIM_IC_CaptureCallback>
 80085b8:	e005      	b.n	80085c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f965 	bl	800888a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f974 	bl	80088ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d020      	beq.n	8008618 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01b      	beq.n	8008618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f06f 0208 	mvn.w	r2, #8
 80085e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2204      	movs	r2, #4
 80085ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	f003 0303 	and.w	r3, r3, #3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f94c 	bl	800889c <HAL_TIM_IC_CaptureCallback>
 8008604:	e005      	b.n	8008612 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f93f 	bl	800888a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f94e 	bl	80088ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 0310 	and.w	r3, r3, #16
 800861e:	2b00      	cmp	r3, #0
 8008620:	d020      	beq.n	8008664 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f003 0310 	and.w	r3, r3, #16
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01b      	beq.n	8008664 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f06f 0210 	mvn.w	r2, #16
 8008634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2208      	movs	r2, #8
 800863a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f926 	bl	800889c <HAL_TIM_IC_CaptureCallback>
 8008650:	e005      	b.n	800865e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f919 	bl	800888a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f928 	bl	80088ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00c      	beq.n	8008688 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	d007      	beq.n	8008688 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f06f 0201 	mvn.w	r2, #1
 8008680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7f9 fde0 	bl	8002248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00c      	beq.n	80086ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008698:	2b00      	cmp	r3, #0
 800869a:	d007      	beq.n	80086ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80086a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fa7f 	bl	8008baa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00c      	beq.n	80086d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d007      	beq.n	80086d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f8f8 	bl	80088c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00c      	beq.n	80086f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f003 0320 	and.w	r3, r3, #32
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f06f 0220 	mvn.w	r2, #32
 80086ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa52 	bl	8008b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086f4:	bf00      	nop
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <HAL_TIM_ConfigClockSource+0x1c>
 8008714:	2302      	movs	r3, #2
 8008716:	e0b4      	b.n	8008882 <HAL_TIM_ConfigClockSource+0x186>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800873e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008750:	d03e      	beq.n	80087d0 <HAL_TIM_ConfigClockSource+0xd4>
 8008752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008756:	f200 8087 	bhi.w	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 800875a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800875e:	f000 8086 	beq.w	800886e <HAL_TIM_ConfigClockSource+0x172>
 8008762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008766:	d87f      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008768:	2b70      	cmp	r3, #112	@ 0x70
 800876a:	d01a      	beq.n	80087a2 <HAL_TIM_ConfigClockSource+0xa6>
 800876c:	2b70      	cmp	r3, #112	@ 0x70
 800876e:	d87b      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008770:	2b60      	cmp	r3, #96	@ 0x60
 8008772:	d050      	beq.n	8008816 <HAL_TIM_ConfigClockSource+0x11a>
 8008774:	2b60      	cmp	r3, #96	@ 0x60
 8008776:	d877      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008778:	2b50      	cmp	r3, #80	@ 0x50
 800877a:	d03c      	beq.n	80087f6 <HAL_TIM_ConfigClockSource+0xfa>
 800877c:	2b50      	cmp	r3, #80	@ 0x50
 800877e:	d873      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008780:	2b40      	cmp	r3, #64	@ 0x40
 8008782:	d058      	beq.n	8008836 <HAL_TIM_ConfigClockSource+0x13a>
 8008784:	2b40      	cmp	r3, #64	@ 0x40
 8008786:	d86f      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008788:	2b30      	cmp	r3, #48	@ 0x30
 800878a:	d064      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x15a>
 800878c:	2b30      	cmp	r3, #48	@ 0x30
 800878e:	d86b      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008790:	2b20      	cmp	r3, #32
 8008792:	d060      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x15a>
 8008794:	2b20      	cmp	r3, #32
 8008796:	d867      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008798:	2b00      	cmp	r3, #0
 800879a:	d05c      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x15a>
 800879c:	2b10      	cmp	r3, #16
 800879e:	d05a      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x15a>
 80087a0:	e062      	b.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087b2:	f000 f974 	bl	8008a9e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	609a      	str	r2, [r3, #8]
      break;
 80087ce:	e04f      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087e0:	f000 f95d 	bl	8008a9e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087f2:	609a      	str	r2, [r3, #8]
      break;
 80087f4:	e03c      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008802:	461a      	mov	r2, r3
 8008804:	f000 f8d4 	bl	80089b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2150      	movs	r1, #80	@ 0x50
 800880e:	4618      	mov	r0, r3
 8008810:	f000 f92b 	bl	8008a6a <TIM_ITRx_SetConfig>
      break;
 8008814:	e02c      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008822:	461a      	mov	r2, r3
 8008824:	f000 f8f2 	bl	8008a0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2160      	movs	r1, #96	@ 0x60
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f91b 	bl	8008a6a <TIM_ITRx_SetConfig>
      break;
 8008834:	e01c      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008842:	461a      	mov	r2, r3
 8008844:	f000 f8b4 	bl	80089b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2140      	movs	r1, #64	@ 0x40
 800884e:	4618      	mov	r0, r3
 8008850:	f000 f90b 	bl	8008a6a <TIM_ITRx_SetConfig>
      break;
 8008854:	e00c      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4619      	mov	r1, r3
 8008860:	4610      	mov	r0, r2
 8008862:	f000 f902 	bl	8008a6a <TIM_ITRx_SetConfig>
      break;
 8008866:	e003      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	73fb      	strb	r3, [r7, #15]
      break;
 800886c:	e000      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800886e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr

0800889c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr

080088ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088b6:	bf00      	nop
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bc80      	pop	{r7}
 80088be:	4770      	bx	lr

080088c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr
	...

080088d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a2f      	ldr	r2, [pc, #188]	@ (80089a4 <TIM_Base_SetConfig+0xd0>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d00b      	beq.n	8008904 <TIM_Base_SetConfig+0x30>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088f2:	d007      	beq.n	8008904 <TIM_Base_SetConfig+0x30>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a2c      	ldr	r2, [pc, #176]	@ (80089a8 <TIM_Base_SetConfig+0xd4>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_Base_SetConfig+0x30>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a2b      	ldr	r2, [pc, #172]	@ (80089ac <TIM_Base_SetConfig+0xd8>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d108      	bne.n	8008916 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800890a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a22      	ldr	r2, [pc, #136]	@ (80089a4 <TIM_Base_SetConfig+0xd0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d00b      	beq.n	8008936 <TIM_Base_SetConfig+0x62>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008924:	d007      	beq.n	8008936 <TIM_Base_SetConfig+0x62>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a1f      	ldr	r2, [pc, #124]	@ (80089a8 <TIM_Base_SetConfig+0xd4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d003      	beq.n	8008936 <TIM_Base_SetConfig+0x62>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a1e      	ldr	r2, [pc, #120]	@ (80089ac <TIM_Base_SetConfig+0xd8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d108      	bne.n	8008948 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800893c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	4313      	orrs	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a0d      	ldr	r2, [pc, #52]	@ (80089a4 <TIM_Base_SetConfig+0xd0>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d103      	bne.n	800897c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f023 0201 	bic.w	r2, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	611a      	str	r2, [r3, #16]
  }
}
 800899a:	bf00      	nop
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	bc80      	pop	{r7}
 80089a2:	4770      	bx	lr
 80089a4:	40012c00 	.word	0x40012c00
 80089a8:	40000400 	.word	0x40000400
 80089ac:	40000800 	.word	0x40000800

080089b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	f023 0201 	bic.w	r2, r3, #1
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	011b      	lsls	r3, r3, #4
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f023 030a 	bic.w	r3, r3, #10
 80089ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	621a      	str	r2, [r3, #32]
}
 8008a02:	bf00      	nop
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bc80      	pop	{r7}
 8008a0a:	4770      	bx	lr

08008a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	f023 0210 	bic.w	r2, r3, #16
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	031b      	lsls	r3, r3, #12
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	621a      	str	r2, [r3, #32]
}
 8008a60:	bf00      	nop
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bc80      	pop	{r7}
 8008a68:	4770      	bx	lr

08008a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b085      	sub	sp, #20
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	f043 0307 	orr.w	r3, r3, #7
 8008a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	609a      	str	r2, [r3, #8]
}
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bc80      	pop	{r7}
 8008a9c:	4770      	bx	lr

08008a9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b087      	sub	sp, #28
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	607a      	str	r2, [r7, #4]
 8008aaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ab8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	021a      	lsls	r2, r3, #8
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	609a      	str	r2, [r3, #8]
}
 8008ad2:	bf00      	nop
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bc80      	pop	{r7}
 8008ada:	4770      	bx	lr

08008adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e046      	b.n	8008b82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a16      	ldr	r2, [pc, #88]	@ (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00e      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b40:	d009      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a12      	ldr	r2, [pc, #72]	@ (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d004      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a10      	ldr	r2, [pc, #64]	@ (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d10c      	bne.n	8008b70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr
 8008b8c:	40012c00 	.word	0x40012c00
 8008b90:	40000400 	.word	0x40000400
 8008b94:	40000800 	.word	0x40000800

08008b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr

08008baa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr

08008bbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e042      	b.n	8008c54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7fc f9dc 	bl	8004fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2224      	movs	r2, #36	@ 0x24
 8008bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 ff79 	bl	8009af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	691a      	ldr	r2, [r3, #16]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	695a      	ldr	r2, [r3, #20]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08a      	sub	sp, #40	@ 0x28
 8008c60:	af02      	add	r7, sp, #8
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b20      	cmp	r3, #32
 8008c7a:	d175      	bne.n	8008d68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <HAL_UART_Transmit+0x2c>
 8008c82:	88fb      	ldrh	r3, [r7, #6]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e06e      	b.n	8008d6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2221      	movs	r2, #33	@ 0x21
 8008c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c9a:	f7fc faf1 	bl	8005280 <HAL_GetTick>
 8008c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	88fa      	ldrh	r2, [r7, #6]
 8008ca4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	88fa      	ldrh	r2, [r7, #6]
 8008caa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cb4:	d108      	bne.n	8008cc8 <HAL_UART_Transmit+0x6c>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d104      	bne.n	8008cc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	61bb      	str	r3, [r7, #24]
 8008cc6:	e003      	b.n	8008cd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008cd0:	e02e      	b.n	8008d30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2180      	movs	r1, #128	@ 0x80
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 fc55 	bl	800958c <UART_WaitOnFlagUntilTimeout>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e03a      	b.n	8008d6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10b      	bne.n	8008d12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	61bb      	str	r3, [r7, #24]
 8008d10:	e007      	b.n	8008d22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	781a      	ldrb	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1cb      	bne.n	8008cd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2200      	movs	r2, #0
 8008d42:	2140      	movs	r1, #64	@ 0x40
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 fc21 	bl	800958c <UART_WaitOnFlagUntilTimeout>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2220      	movs	r2, #32
 8008d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e006      	b.n	8008d6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	e000      	b.n	8008d6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008d68:	2302      	movs	r3, #2
  }
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3720      	adds	r7, #32
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b08c      	sub	sp, #48	@ 0x30
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	d146      	bne.n	8008e1a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008d92:	88fb      	ldrh	r3, [r7, #6]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e03f      	b.n	8008e1c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008da8:	88fb      	ldrh	r3, [r7, #6]
 8008daa:	461a      	mov	r2, r3
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 fc46 	bl	8009640 <UART_Start_Receive_DMA>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d125      	bne.n	8008e0e <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	613b      	str	r3, [r7, #16]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	613b      	str	r3, [r7, #16]
 8008dd6:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	330c      	adds	r3, #12
 8008dde:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	617b      	str	r3, [r7, #20]
   return(result);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f043 0310 	orr.w	r3, r3, #16
 8008dee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	330c      	adds	r3, #12
 8008df6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008df8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dfa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	6a39      	ldr	r1, [r7, #32]
 8008dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e5      	bne.n	8008dd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8008e0c:	e002      	b.n	8008e14 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8008e14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e18:	e000      	b.n	8008e1c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8008e1a:	2302      	movs	r3, #2
  }
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3730      	adds	r7, #48	@ 0x30
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b0ba      	sub	sp, #232	@ 0xe8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e5a:	f003 030f 	and.w	r3, r3, #15
 8008e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10f      	bne.n	8008e8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e6e:	f003 0320 	and.w	r3, r3, #32
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d009      	beq.n	8008e8a <HAL_UART_IRQHandler+0x66>
 8008e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fd7a 	bl	800997c <UART_Receive_IT>
      return;
 8008e88:	e25b      	b.n	8009342 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 80de 	beq.w	8009050 <HAL_UART_IRQHandler+0x22c>
 8008e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d106      	bne.n	8008eae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ea4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 80d1 	beq.w	8009050 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00b      	beq.n	8008ed2 <HAL_UART_IRQHandler+0xae>
 8008eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eca:	f043 0201 	orr.w	r2, r3, #1
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed6:	f003 0304 	and.w	r3, r3, #4
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00b      	beq.n	8008ef6 <HAL_UART_IRQHandler+0xd2>
 8008ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d005      	beq.n	8008ef6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eee:	f043 0202 	orr.w	r2, r3, #2
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00b      	beq.n	8008f1a <HAL_UART_IRQHandler+0xf6>
 8008f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d005      	beq.n	8008f1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f12:	f043 0204 	orr.w	r2, r3, #4
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f1e:	f003 0308 	and.w	r3, r3, #8
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d011      	beq.n	8008f4a <HAL_UART_IRQHandler+0x126>
 8008f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f2a:	f003 0320 	and.w	r3, r3, #32
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d105      	bne.n	8008f3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f42:	f043 0208 	orr.w	r2, r3, #8
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 81f2 	beq.w	8009338 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f58:	f003 0320 	and.w	r3, r3, #32
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d008      	beq.n	8008f72 <HAL_UART_IRQHandler+0x14e>
 8008f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f64:	f003 0320 	and.w	r3, r3, #32
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fd05 	bl	800997c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bf14      	ite	ne
 8008f80:	2301      	movne	r3, #1
 8008f82:	2300      	moveq	r3, #0
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f8e:	f003 0308 	and.w	r3, r3, #8
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d103      	bne.n	8008f9e <HAL_UART_IRQHandler+0x17a>
 8008f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d04f      	beq.n	800903e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fc0f 	bl	80097c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d041      	beq.n	8009036 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3314      	adds	r3, #20
 8008fb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3314      	adds	r3, #20
 8008fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008fde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1d9      	bne.n	8008fb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d013      	beq.n	800902e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800900a:	4a7e      	ldr	r2, [pc, #504]	@ (8009204 <HAL_UART_IRQHandler+0x3e0>)
 800900c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009012:	4618      	mov	r0, r3
 8009014:	f7fd fa56 	bl	80064c4 <HAL_DMA_Abort_IT>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d016      	beq.n	800904c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902c:	e00e      	b.n	800904c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f9a5 	bl	800937e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009034:	e00a      	b.n	800904c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f9a1 	bl	800937e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800903c:	e006      	b.n	800904c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f99d 	bl	800937e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800904a:	e175      	b.n	8009338 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800904c:	bf00      	nop
    return;
 800904e:	e173      	b.n	8009338 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009054:	2b01      	cmp	r3, #1
 8009056:	f040 814f 	bne.w	80092f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800905a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800905e:	f003 0310 	and.w	r3, r3, #16
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 8148 	beq.w	80092f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800906c:	f003 0310 	and.w	r3, r3, #16
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8141 	beq.w	80092f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009076:	2300      	movs	r3, #0
 8009078:	60bb      	str	r3, [r7, #8]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	60bb      	str	r3, [r7, #8]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	60bb      	str	r3, [r7, #8]
 800908a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 80b6 	beq.w	8009208 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8145 	beq.w	800933c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090ba:	429a      	cmp	r2, r3
 80090bc:	f080 813e 	bcs.w	800933c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	f000 8088 	beq.w	80091e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	330c      	adds	r3, #12
 80090da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090e2:	e853 3f00 	ldrex	r3, [r3]
 80090e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	330c      	adds	r3, #12
 80090fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009100:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009104:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800910c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009110:	e841 2300 	strex	r3, r2, [r1]
 8009114:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1d9      	bne.n	80090d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3314      	adds	r3, #20
 8009126:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009128:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800912a:	e853 3f00 	ldrex	r3, [r3]
 800912e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009130:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009132:	f023 0301 	bic.w	r3, r3, #1
 8009136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3314      	adds	r3, #20
 8009140:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009144:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009148:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800914c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009156:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e1      	bne.n	8009120 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3314      	adds	r3, #20
 8009162:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800916c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800916e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009172:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3314      	adds	r3, #20
 800917c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009180:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009182:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009186:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800918e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e3      	bne.n	800915c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	330c      	adds	r3, #12
 80091a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091b4:	f023 0310 	bic.w	r3, r3, #16
 80091b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80091c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80091c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e3      	bne.n	80091a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fd f934 	bl	800644c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2202      	movs	r2, #2
 80091e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7f8 fdf6 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009200:	e09c      	b.n	800933c <HAL_UART_IRQHandler+0x518>
 8009202:	bf00      	nop
 8009204:	08009887 	.word	0x08009887
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009210:	b29b      	uxth	r3, r3
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800921c:	b29b      	uxth	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 808e 	beq.w	8009340 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 8089 	beq.w	8009340 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	330c      	adds	r3, #12
 8009234:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800923e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009244:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	330c      	adds	r3, #12
 800924e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009252:	647a      	str	r2, [r7, #68]	@ 0x44
 8009254:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e3      	bne.n	800922e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3314      	adds	r3, #20
 800926c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	623b      	str	r3, [r7, #32]
   return(result);
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	f023 0301 	bic.w	r3, r3, #1
 800927c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3314      	adds	r3, #20
 8009286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800928a:	633a      	str	r2, [r7, #48]	@ 0x30
 800928c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e3      	bne.n	8009266 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	330c      	adds	r3, #12
 80092b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 0310 	bic.w	r3, r3, #16
 80092c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	330c      	adds	r3, #12
 80092cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80092d0:	61fa      	str	r2, [r7, #28]
 80092d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d4:	69b9      	ldr	r1, [r7, #24]
 80092d6:	69fa      	ldr	r2, [r7, #28]
 80092d8:	e841 2300 	strex	r3, r2, [r1]
 80092dc:	617b      	str	r3, [r7, #20]
   return(result);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1e3      	bne.n	80092ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7f8 fd7b 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092f6:	e023      	b.n	8009340 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009300:	2b00      	cmp	r3, #0
 8009302:	d009      	beq.n	8009318 <HAL_UART_IRQHandler+0x4f4>
 8009304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800930c:	2b00      	cmp	r3, #0
 800930e:	d003      	beq.n	8009318 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 facc 	bl	80098ae <UART_Transmit_IT>
    return;
 8009316:	e014      	b.n	8009342 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800931c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00e      	beq.n	8009342 <HAL_UART_IRQHandler+0x51e>
 8009324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800932c:	2b00      	cmp	r3, #0
 800932e:	d008      	beq.n	8009342 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fb0b 	bl	800994c <UART_EndTransmit_IT>
    return;
 8009336:	e004      	b.n	8009342 <HAL_UART_IRQHandler+0x51e>
    return;
 8009338:	bf00      	nop
 800933a:	e002      	b.n	8009342 <HAL_UART_IRQHandler+0x51e>
      return;
 800933c:	bf00      	nop
 800933e:	e000      	b.n	8009342 <HAL_UART_IRQHandler+0x51e>
      return;
 8009340:	bf00      	nop
  }
}
 8009342:	37e8      	adds	r7, #232	@ 0xe8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	bc80      	pop	{r7}
 8009358:	4770      	bx	lr

0800935a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr

0800936c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	bc80      	pop	{r7}
 800937c:	4770      	bx	lr

0800937e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009386:	bf00      	nop
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	bc80      	pop	{r7}
 800938e:	4770      	bx	lr

08009390 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b09c      	sub	sp, #112	@ 0x70
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0320 	and.w	r3, r3, #32
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d172      	bne.n	8009492 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80093ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093ae:	2200      	movs	r2, #0
 80093b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	330c      	adds	r3, #12
 80093b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	330c      	adds	r3, #12
 80093d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80093d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80093d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e5      	bne.n	80093b2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3314      	adds	r3, #20
 80093ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f8:	f023 0301 	bic.w	r3, r3, #1
 80093fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80093fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3314      	adds	r3, #20
 8009404:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009406:	647a      	str	r2, [r7, #68]	@ 0x44
 8009408:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800940c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e5      	bne.n	80093e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800941a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3314      	adds	r3, #20
 8009420:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	623b      	str	r3, [r7, #32]
   return(result);
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009430:	663b      	str	r3, [r7, #96]	@ 0x60
 8009432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3314      	adds	r3, #20
 8009438:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800943a:	633a      	str	r2, [r7, #48]	@ 0x30
 800943c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e5      	bne.n	800941a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800944e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009450:	2220      	movs	r2, #32
 8009452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945a:	2b01      	cmp	r3, #1
 800945c:	d119      	bne.n	8009492 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800945e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	330c      	adds	r3, #12
 8009464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	e853 3f00 	ldrex	r3, [r3]
 800946c:	60fb      	str	r3, [r7, #12]
   return(result);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f023 0310 	bic.w	r3, r3, #16
 8009474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	330c      	adds	r3, #12
 800947c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800947e:	61fa      	str	r2, [r7, #28]
 8009480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009482:	69b9      	ldr	r1, [r7, #24]
 8009484:	69fa      	ldr	r2, [r7, #28]
 8009486:	e841 2300 	strex	r3, r2, [r1]
 800948a:	617b      	str	r3, [r7, #20]
   return(result);
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e5      	bne.n	800945e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009494:	2200      	movs	r2, #0
 8009496:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800949a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949c:	2b01      	cmp	r3, #1
 800949e:	d106      	bne.n	80094ae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094a4:	4619      	mov	r1, r3
 80094a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80094a8:	f7f8 fca0 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094ac:	e002      	b.n	80094b4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80094ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80094b0:	f7ff ff53 	bl	800935a <HAL_UART_RxCpltCallback>
}
 80094b4:	bf00      	nop
 80094b6:	3770      	adds	r7, #112	@ 0x70
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2201      	movs	r2, #1
 80094ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d108      	bne.n	80094ea <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094dc:	085b      	lsrs	r3, r3, #1
 80094de:	b29b      	uxth	r3, r3
 80094e0:	4619      	mov	r1, r3
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7f8 fc82 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094e8:	e002      	b.n	80094f0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f7ff ff3e 	bl	800936c <HAL_UART_RxHalfCpltCallback>
}
 80094f0:	bf00      	nop
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009500:	2300      	movs	r3, #0
 8009502:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009508:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009514:	2b00      	cmp	r3, #0
 8009516:	bf14      	ite	ne
 8009518:	2301      	movne	r3, #1
 800951a:	2300      	moveq	r3, #0
 800951c:	b2db      	uxtb	r3, r3
 800951e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009526:	b2db      	uxtb	r3, r3
 8009528:	2b21      	cmp	r3, #33	@ 0x21
 800952a:	d108      	bne.n	800953e <UART_DMAError+0x46>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	2200      	movs	r2, #0
 8009536:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009538:	68b8      	ldr	r0, [r7, #8]
 800953a:	f000 f91b 	bl	8009774 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009548:	2b00      	cmp	r3, #0
 800954a:	bf14      	ite	ne
 800954c:	2301      	movne	r3, #1
 800954e:	2300      	moveq	r3, #0
 8009550:	b2db      	uxtb	r3, r3
 8009552:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b22      	cmp	r3, #34	@ 0x22
 800955e:	d108      	bne.n	8009572 <UART_DMAError+0x7a>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d005      	beq.n	8009572 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2200      	movs	r2, #0
 800956a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800956c:	68b8      	ldr	r0, [r7, #8]
 800956e:	f000 f928 	bl	80097c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009576:	f043 0210 	orr.w	r2, r3, #16
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800957e:	68b8      	ldr	r0, [r7, #8]
 8009580:	f7ff fefd 	bl	800937e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	4613      	mov	r3, r2
 800959a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800959c:	e03b      	b.n	8009616 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a4:	d037      	beq.n	8009616 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095a6:	f7fb fe6b 	bl	8005280 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	6a3a      	ldr	r2, [r7, #32]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d302      	bcc.n	80095bc <UART_WaitOnFlagUntilTimeout+0x30>
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e03a      	b.n	8009636 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f003 0304 	and.w	r3, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d023      	beq.n	8009616 <UART_WaitOnFlagUntilTimeout+0x8a>
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2b80      	cmp	r3, #128	@ 0x80
 80095d2:	d020      	beq.n	8009616 <UART_WaitOnFlagUntilTimeout+0x8a>
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2b40      	cmp	r3, #64	@ 0x40
 80095d8:	d01d      	beq.n	8009616 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0308 	and.w	r3, r3, #8
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	d116      	bne.n	8009616 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80095e8:	2300      	movs	r3, #0
 80095ea:	617b      	str	r3, [r7, #20]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	617b      	str	r3, [r7, #20]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 f8df 	bl	80097c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2208      	movs	r2, #8
 8009608:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e00f      	b.n	8009636 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4013      	ands	r3, r2
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	429a      	cmp	r2, r3
 8009624:	bf0c      	ite	eq
 8009626:	2301      	moveq	r3, #1
 8009628:	2300      	movne	r3, #0
 800962a:	b2db      	uxtb	r3, r3
 800962c:	461a      	mov	r2, r3
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	429a      	cmp	r2, r3
 8009632:	d0b4      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b098      	sub	sp, #96	@ 0x60
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	4613      	mov	r3, r2
 800964c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	88fa      	ldrh	r2, [r7, #6]
 8009658:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2222      	movs	r2, #34	@ 0x22
 8009664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800966c:	4a3e      	ldr	r2, [pc, #248]	@ (8009768 <UART_Start_Receive_DMA+0x128>)
 800966e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009674:	4a3d      	ldr	r2, [pc, #244]	@ (800976c <UART_Start_Receive_DMA+0x12c>)
 8009676:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800967c:	4a3c      	ldr	r2, [pc, #240]	@ (8009770 <UART_Start_Receive_DMA+0x130>)
 800967e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009684:	2200      	movs	r2, #0
 8009686:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009688:	f107 0308 	add.w	r3, r7, #8
 800968c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3304      	adds	r3, #4
 8009698:	4619      	mov	r1, r3
 800969a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	f7fc fe74 	bl	800638c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80096a4:	2300      	movs	r3, #0
 80096a6:	613b      	str	r3, [r7, #16]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	613b      	str	r3, [r7, #16]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	613b      	str	r3, [r7, #16]
 80096b8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d019      	beq.n	80096f6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	330c      	adds	r3, #12
 80096c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	330c      	adds	r3, #12
 80096e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80096e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80096e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096ea:	e841 2300 	strex	r3, r2, [r1]
 80096ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e5      	bne.n	80096c2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3314      	adds	r3, #20
 80096fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009708:	f043 0301 	orr.w	r3, r3, #1
 800970c:	657b      	str	r3, [r7, #84]	@ 0x54
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3314      	adds	r3, #20
 8009714:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009716:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009718:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800971c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e5      	bne.n	80096f6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3314      	adds	r3, #20
 8009730:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	617b      	str	r3, [r7, #20]
   return(result);
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009740:	653b      	str	r3, [r7, #80]	@ 0x50
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3314      	adds	r3, #20
 8009748:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800974a:	627a      	str	r2, [r7, #36]	@ 0x24
 800974c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6a39      	ldr	r1, [r7, #32]
 8009750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	61fb      	str	r3, [r7, #28]
   return(result);
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e5      	bne.n	800972a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3760      	adds	r7, #96	@ 0x60
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	08009391 	.word	0x08009391
 800976c:	080094bd 	.word	0x080094bd
 8009770:	080094f9 	.word	0x080094f9

08009774 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009774:	b480      	push	{r7}
 8009776:	b089      	sub	sp, #36	@ 0x24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	330c      	adds	r3, #12
 8009782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	60bb      	str	r3, [r7, #8]
   return(result);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009792:	61fb      	str	r3, [r7, #28]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	330c      	adds	r3, #12
 800979a:	69fa      	ldr	r2, [r7, #28]
 800979c:	61ba      	str	r2, [r7, #24]
 800979e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6979      	ldr	r1, [r7, #20]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	613b      	str	r3, [r7, #16]
   return(result);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e5      	bne.n	800977c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80097b8:	bf00      	nop
 80097ba:	3724      	adds	r7, #36	@ 0x24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bc80      	pop	{r7}
 80097c0:	4770      	bx	lr

080097c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b095      	sub	sp, #84	@ 0x54
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	330c      	adds	r3, #12
 80097e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e5      	bne.n	80097ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3314      	adds	r3, #20
 8009804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	61fb      	str	r3, [r7, #28]
   return(result);
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	f023 0301 	bic.w	r3, r3, #1
 8009814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3314      	adds	r3, #20
 800981c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800981e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009820:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800982c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e5      	bne.n	80097fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009836:	2b01      	cmp	r3, #1
 8009838:	d119      	bne.n	800986e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	330c      	adds	r3, #12
 8009840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	60bb      	str	r3, [r7, #8]
   return(result);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f023 0310 	bic.w	r3, r3, #16
 8009850:	647b      	str	r3, [r7, #68]	@ 0x44
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	330c      	adds	r3, #12
 8009858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800985a:	61ba      	str	r2, [r7, #24]
 800985c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6979      	ldr	r1, [r7, #20]
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	613b      	str	r3, [r7, #16]
   return(result);
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e5      	bne.n	800983a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2220      	movs	r2, #32
 8009872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800987c:	bf00      	nop
 800987e:	3754      	adds	r7, #84	@ 0x54
 8009880:	46bd      	mov	sp, r7
 8009882:	bc80      	pop	{r7}
 8009884:	4770      	bx	lr

08009886 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f7ff fd6c 	bl	800937e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b085      	sub	sp, #20
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b21      	cmp	r3, #33	@ 0x21
 80098c0:	d13e      	bne.n	8009940 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ca:	d114      	bne.n	80098f6 <UART_Transmit_IT+0x48>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d110      	bne.n	80098f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	1c9a      	adds	r2, r3, #2
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	621a      	str	r2, [r3, #32]
 80098f4:	e008      	b.n	8009908 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	1c59      	adds	r1, r3, #1
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	6211      	str	r1, [r2, #32]
 8009900:	781a      	ldrb	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800990c:	b29b      	uxth	r3, r3
 800990e:	3b01      	subs	r3, #1
 8009910:	b29b      	uxth	r3, r3
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	4619      	mov	r1, r3
 8009916:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10f      	bne.n	800993c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800992a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800993a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	e000      	b.n	8009942 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009940:	2302      	movs	r3, #2
  }
}
 8009942:	4618      	mov	r0, r3
 8009944:	3714      	adds	r7, #20
 8009946:	46bd      	mov	sp, r7
 8009948:	bc80      	pop	{r7}
 800994a:	4770      	bx	lr

0800994c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009962:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2220      	movs	r2, #32
 8009968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff fceb 	bl	8009348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b08c      	sub	sp, #48	@ 0x30
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b22      	cmp	r3, #34	@ 0x22
 800998e:	f040 80ae 	bne.w	8009aee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800999a:	d117      	bne.n	80099cc <UART_Receive_IT+0x50>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d113      	bne.n	80099cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c4:	1c9a      	adds	r2, r3, #2
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80099ca:	e026      	b.n	8009a1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80099d2:	2300      	movs	r3, #0
 80099d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099de:	d007      	beq.n	80099f0 <UART_Receive_IT+0x74>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10a      	bne.n	80099fe <UART_Receive_IT+0x82>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d106      	bne.n	80099fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	e008      	b.n	8009a10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a14:	1c5a      	adds	r2, r3, #1
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	3b01      	subs	r3, #1
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4619      	mov	r1, r3
 8009a28:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d15d      	bne.n	8009aea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0220 	bic.w	r2, r2, #32
 8009a3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	695a      	ldr	r2, [r3, #20]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f022 0201 	bic.w	r2, r2, #1
 8009a5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2220      	movs	r2, #32
 8009a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d135      	bne.n	8009ae0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	330c      	adds	r3, #12
 8009a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f023 0310 	bic.w	r3, r3, #16
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	330c      	adds	r3, #12
 8009a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a9a:	623a      	str	r2, [r7, #32]
 8009a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9e:	69f9      	ldr	r1, [r7, #28]
 8009aa0:	6a3a      	ldr	r2, [r7, #32]
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1e5      	bne.n	8009a7a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0310 	and.w	r3, r3, #16
 8009ab8:	2b10      	cmp	r3, #16
 8009aba:	d10a      	bne.n	8009ad2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009abc:	2300      	movs	r3, #0
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	60fb      	str	r3, [r7, #12]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7f8 f987 	bl	8001dec <HAL_UARTEx_RxEventCallback>
 8009ade:	e002      	b.n	8009ae6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff fc3a 	bl	800935a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e002      	b.n	8009af0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e000      	b.n	8009af0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009aee:	2302      	movs	r3, #2
  }
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3730      	adds	r7, #48	@ 0x30
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	430a      	orrs	r2, r1
 8009b14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	689a      	ldr	r2, [r3, #8]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	695b      	ldr	r3, [r3, #20]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009b32:	f023 030c 	bic.w	r3, r3, #12
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	6812      	ldr	r2, [r2, #0]
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	699a      	ldr	r2, [r3, #24]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8009c0c <UART_SetConfig+0x114>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d103      	bne.n	8009b68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009b60:	f7fd fe74 	bl	800784c <HAL_RCC_GetPCLK2Freq>
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	e002      	b.n	8009b6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009b68:	f7fd fe5c 	bl	8007824 <HAL_RCC_GetPCLK1Freq>
 8009b6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	4613      	mov	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	009a      	lsls	r2, r3, #2
 8009b78:	441a      	add	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b84:	4a22      	ldr	r2, [pc, #136]	@ (8009c10 <UART_SetConfig+0x118>)
 8009b86:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	0119      	lsls	r1, r3, #4
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4613      	mov	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	009a      	lsls	r2, r3, #2
 8009b98:	441a      	add	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8009c10 <UART_SetConfig+0x118>)
 8009ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8009baa:	095b      	lsrs	r3, r3, #5
 8009bac:	2064      	movs	r0, #100	@ 0x64
 8009bae:	fb00 f303 	mul.w	r3, r0, r3
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	3332      	adds	r3, #50	@ 0x32
 8009bb8:	4a15      	ldr	r2, [pc, #84]	@ (8009c10 <UART_SetConfig+0x118>)
 8009bba:	fba2 2303 	umull	r2, r3, r2, r3
 8009bbe:	095b      	lsrs	r3, r3, #5
 8009bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bc4:	4419      	add	r1, r3
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	009a      	lsls	r2, r3, #2
 8009bd0:	441a      	add	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8009c10 <UART_SetConfig+0x118>)
 8009bde:	fba3 0302 	umull	r0, r3, r3, r2
 8009be2:	095b      	lsrs	r3, r3, #5
 8009be4:	2064      	movs	r0, #100	@ 0x64
 8009be6:	fb00 f303 	mul.w	r3, r0, r3
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	011b      	lsls	r3, r3, #4
 8009bee:	3332      	adds	r3, #50	@ 0x32
 8009bf0:	4a07      	ldr	r2, [pc, #28]	@ (8009c10 <UART_SetConfig+0x118>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	095b      	lsrs	r3, r3, #5
 8009bf8:	f003 020f 	and.w	r2, r3, #15
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	440a      	add	r2, r1
 8009c02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009c04:	bf00      	nop
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	40013800 	.word	0x40013800
 8009c10:	51eb851f 	.word	0x51eb851f

08009c14 <memset>:
 8009c14:	4603      	mov	r3, r0
 8009c16:	4402      	add	r2, r0
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d100      	bne.n	8009c1e <memset+0xa>
 8009c1c:	4770      	bx	lr
 8009c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c22:	e7f9      	b.n	8009c18 <memset+0x4>

08009c24 <strcat>:
 8009c24:	4602      	mov	r2, r0
 8009c26:	b510      	push	{r4, lr}
 8009c28:	7814      	ldrb	r4, [r2, #0]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	3201      	adds	r2, #1
 8009c2e:	2c00      	cmp	r4, #0
 8009c30:	d1fa      	bne.n	8009c28 <strcat+0x4>
 8009c32:	3b01      	subs	r3, #1
 8009c34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c38:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c3c:	2a00      	cmp	r2, #0
 8009c3e:	d1f9      	bne.n	8009c34 <strcat+0x10>
 8009c40:	bd10      	pop	{r4, pc}
	...

08009c44 <__libc_init_array>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	2600      	movs	r6, #0
 8009c48:	4d0c      	ldr	r5, [pc, #48]	@ (8009c7c <__libc_init_array+0x38>)
 8009c4a:	4c0d      	ldr	r4, [pc, #52]	@ (8009c80 <__libc_init_array+0x3c>)
 8009c4c:	1b64      	subs	r4, r4, r5
 8009c4e:	10a4      	asrs	r4, r4, #2
 8009c50:	42a6      	cmp	r6, r4
 8009c52:	d109      	bne.n	8009c68 <__libc_init_array+0x24>
 8009c54:	f000 f822 	bl	8009c9c <_init>
 8009c58:	2600      	movs	r6, #0
 8009c5a:	4d0a      	ldr	r5, [pc, #40]	@ (8009c84 <__libc_init_array+0x40>)
 8009c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8009c88 <__libc_init_array+0x44>)
 8009c5e:	1b64      	subs	r4, r4, r5
 8009c60:	10a4      	asrs	r4, r4, #2
 8009c62:	42a6      	cmp	r6, r4
 8009c64:	d105      	bne.n	8009c72 <__libc_init_array+0x2e>
 8009c66:	bd70      	pop	{r4, r5, r6, pc}
 8009c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c6c:	4798      	blx	r3
 8009c6e:	3601      	adds	r6, #1
 8009c70:	e7ee      	b.n	8009c50 <__libc_init_array+0xc>
 8009c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c76:	4798      	blx	r3
 8009c78:	3601      	adds	r6, #1
 8009c7a:	e7f2      	b.n	8009c62 <__libc_init_array+0x1e>
 8009c7c:	08009d8c 	.word	0x08009d8c
 8009c80:	08009d8c 	.word	0x08009d8c
 8009c84:	08009d8c 	.word	0x08009d8c
 8009c88:	08009d90 	.word	0x08009d90

08009c8c <strcpy>:
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c92:	f803 2b01 	strb.w	r2, [r3], #1
 8009c96:	2a00      	cmp	r2, #0
 8009c98:	d1f9      	bne.n	8009c8e <strcpy+0x2>
 8009c9a:	4770      	bx	lr

08009c9c <_init>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	bf00      	nop
 8009ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca2:	bc08      	pop	{r3}
 8009ca4:	469e      	mov	lr, r3
 8009ca6:	4770      	bx	lr

08009ca8 <_fini>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	bf00      	nop
 8009cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cae:	bc08      	pop	{r3}
 8009cb0:	469e      	mov	lr, r3
 8009cb2:	4770      	bx	lr
