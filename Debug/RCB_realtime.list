
RCB_realtime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009c3c  08009c3c  0000ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cec  08009cec  0000b040  2**0
                  CONTENTS
  4 .ARM          00000008  08009cec  08009cec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cf4  08009cf4  0000b040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cf4  08009cf4  0000acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cf8  08009cf8  0000acf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08009cfc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d0  20000040  08009d3c  0000b040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  08009d3c  0000b810  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014afe  00000000  00000000  0000b069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e2  00000000  00000000  0001fb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00023050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001013  00000000  00000000  000244e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019728  00000000  00000000  000254f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001733b  00000000  00000000  0003ec1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000938f9  00000000  00000000  00055f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e984f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e0  00000000  00000000  000e9894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000eef74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08009c24 	.word	0x08009c24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08009c24 	.word	0x08009c24

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <WIZCHIP_READ>:
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	4b22      	ldr	r3, [pc, #136]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000166:	68db      	ldr	r3, [r3, #12]
 8000168:	4798      	blx	r3
 800016a:	4b21      	ldr	r3, [pc, #132]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800016c:	695b      	ldr	r3, [r3, #20]
 800016e:	4798      	blx	r3
 8000170:	4b1f      	ldr	r3, [pc, #124]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000174:	2b00      	cmp	r3, #0
 8000176:	d003      	beq.n	8000180 <WIZCHIP_READ+0x24>
 8000178:	4b1d      	ldr	r3, [pc, #116]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800017a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800017c:	2b00      	cmp	r3, #0
 800017e:	d114      	bne.n	80001aa <WIZCHIP_READ+0x4e>
 8000180:	4b1b      	ldr	r3, [pc, #108]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000182:	6a1b      	ldr	r3, [r3, #32]
 8000184:	687a      	ldr	r2, [r7, #4]
 8000186:	0c12      	lsrs	r2, r2, #16
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	4610      	mov	r0, r2
 800018c:	4798      	blx	r3
 800018e:	4b18      	ldr	r3, [pc, #96]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000190:	6a1b      	ldr	r3, [r3, #32]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	0a12      	lsrs	r2, r2, #8
 8000196:	b2d2      	uxtb	r2, r2
 8000198:	4610      	mov	r0, r2
 800019a:	4798      	blx	r3
 800019c:	4b14      	ldr	r3, [pc, #80]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800019e:	6a1b      	ldr	r3, [r3, #32]
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	b2d2      	uxtb	r2, r2
 80001a4:	4610      	mov	r0, r2
 80001a6:	4798      	blx	r3
 80001a8:	e011      	b.n	80001ce <WIZCHIP_READ+0x72>
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	0c1b      	lsrs	r3, r3, #16
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	733b      	strb	r3, [r7, #12]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	0a1b      	lsrs	r3, r3, #8
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	737b      	strb	r3, [r7, #13]
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	73bb      	strb	r3, [r7, #14]
 80001c0:	4b0b      	ldr	r3, [pc, #44]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80001c4:	f107 020c 	add.w	r2, r7, #12
 80001c8:	2103      	movs	r1, #3
 80001ca:	4610      	mov	r0, r2
 80001cc:	4798      	blx	r3
 80001ce:	4b08      	ldr	r3, [pc, #32]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001d0:	69db      	ldr	r3, [r3, #28]
 80001d2:	4798      	blx	r3
 80001d4:	4603      	mov	r3, r0
 80001d6:	73fb      	strb	r3, [r7, #15]
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4798      	blx	r3
 80001de:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	4798      	blx	r3
 80001e4:	7bfb      	ldrb	r3, [r7, #15]
 80001e6:	4618      	mov	r0, r3
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000004 	.word	0x20000004

080001f4 <WIZCHIP_WRITE>:
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	460b      	mov	r3, r1
 80001fe:	70fb      	strb	r3, [r7, #3]
 8000200:	4b22      	ldr	r3, [pc, #136]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
 8000206:	4b21      	ldr	r3, [pc, #132]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4798      	blx	r3
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	607b      	str	r3, [r7, #4]
 8000214:	4b1d      	ldr	r3, [pc, #116]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000218:	2b00      	cmp	r3, #0
 800021a:	d119      	bne.n	8000250 <WIZCHIP_WRITE+0x5c>
 800021c:	4b1b      	ldr	r3, [pc, #108]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	0c12      	lsrs	r2, r2, #16
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4798      	blx	r3
 800022a:	4b18      	ldr	r3, [pc, #96]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800022c:	6a1b      	ldr	r3, [r3, #32]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	0a12      	lsrs	r2, r2, #8
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	4610      	mov	r0, r2
 8000236:	4798      	blx	r3
 8000238:	4b14      	ldr	r3, [pc, #80]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	4610      	mov	r0, r2
 8000242:	4798      	blx	r3
 8000244:	4b11      	ldr	r3, [pc, #68]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	78fa      	ldrb	r2, [r7, #3]
 800024a:	4610      	mov	r0, r2
 800024c:	4798      	blx	r3
 800024e:	e013      	b.n	8000278 <WIZCHIP_WRITE+0x84>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	0c1b      	lsrs	r3, r3, #16
 8000254:	b2db      	uxtb	r3, r3
 8000256:	733b      	strb	r3, [r7, #12]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	0a1b      	lsrs	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	737b      	strb	r3, [r7, #13]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	73bb      	strb	r3, [r7, #14]
 8000266:	78fb      	ldrb	r3, [r7, #3]
 8000268:	73fb      	strb	r3, [r7, #15]
 800026a:	4b08      	ldr	r3, [pc, #32]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800026c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800026e:	f107 020c 	add.w	r2, r7, #12
 8000272:	2104      	movs	r1, #4
 8000274:	4610      	mov	r0, r2
 8000276:	4798      	blx	r3
 8000278:	4b04      	ldr	r3, [pc, #16]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4798      	blx	r3
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	4798      	blx	r3
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000004 	.word	0x20000004

08000290 <WIZCHIP_READ_BUF>:
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	80fb      	strh	r3, [r7, #6]
 800029e:	4b2b      	ldr	r3, [pc, #172]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4798      	blx	r3
 80002a4:	4b29      	ldr	r3, [pc, #164]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4798      	blx	r3
 80002aa:	4b28      	ldr	r3, [pc, #160]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d003      	beq.n	80002ba <WIZCHIP_READ_BUF+0x2a>
 80002b2:	4b26      	ldr	r3, [pc, #152]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d126      	bne.n	8000308 <WIZCHIP_READ_BUF+0x78>
 80002ba:	4b24      	ldr	r3, [pc, #144]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002bc:	6a1b      	ldr	r3, [r3, #32]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	0c12      	lsrs	r2, r2, #16
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	4610      	mov	r0, r2
 80002c6:	4798      	blx	r3
 80002c8:	4b20      	ldr	r3, [pc, #128]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	0a12      	lsrs	r2, r2, #8
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	4610      	mov	r0, r2
 80002d4:	4798      	blx	r3
 80002d6:	4b1d      	ldr	r3, [pc, #116]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002d8:	6a1b      	ldr	r3, [r3, #32]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4798      	blx	r3
 80002e2:	2300      	movs	r3, #0
 80002e4:	82fb      	strh	r3, [r7, #22]
 80002e6:	e00a      	b.n	80002fe <WIZCHIP_READ_BUF+0x6e>
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	8afa      	ldrh	r2, [r7, #22]
 80002ee:	68b9      	ldr	r1, [r7, #8]
 80002f0:	188c      	adds	r4, r1, r2
 80002f2:	4798      	blx	r3
 80002f4:	4603      	mov	r3, r0
 80002f6:	7023      	strb	r3, [r4, #0]
 80002f8:	8afb      	ldrh	r3, [r7, #22]
 80002fa:	3301      	adds	r3, #1
 80002fc:	82fb      	strh	r3, [r7, #22]
 80002fe:	8afa      	ldrh	r2, [r7, #22]
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	429a      	cmp	r2, r3
 8000304:	d3f0      	bcc.n	80002e8 <WIZCHIP_READ_BUF+0x58>
 8000306:	e017      	b.n	8000338 <WIZCHIP_READ_BUF+0xa8>
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	b2db      	uxtb	r3, r3
 800030e:	743b      	strb	r3, [r7, #16]
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	0a1b      	lsrs	r3, r3, #8
 8000314:	b2db      	uxtb	r3, r3
 8000316:	747b      	strb	r3, [r7, #17]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	74bb      	strb	r3, [r7, #18]
 800031e:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 8000320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000322:	f107 0210 	add.w	r2, r7, #16
 8000326:	2103      	movs	r1, #3
 8000328:	4610      	mov	r0, r2
 800032a:	4798      	blx	r3
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 800032e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000330:	88fa      	ldrh	r2, [r7, #6]
 8000332:	4611      	mov	r1, r2
 8000334:	68b8      	ldr	r0, [r7, #8]
 8000336:	4798      	blx	r3
 8000338:	4b04      	ldr	r3, [pc, #16]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4798      	blx	r3
 800033e:	4b03      	ldr	r3, [pc, #12]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 8000340:	691b      	ldr	r3, [r3, #16]
 8000342:	4798      	blx	r3
 8000344:	bf00      	nop
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	bd90      	pop	{r4, r7, pc}
 800034c:	20000004 	.word	0x20000004

08000350 <WIZCHIP_WRITE_BUF>:
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	4613      	mov	r3, r2
 800035c:	80fb      	strh	r3, [r7, #6]
 800035e:	4b2b      	ldr	r3, [pc, #172]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	4798      	blx	r3
 8000364:	4b29      	ldr	r3, [pc, #164]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4798      	blx	r3
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000376:	2b00      	cmp	r3, #0
 8000378:	d126      	bne.n	80003c8 <WIZCHIP_WRITE_BUF+0x78>
 800037a:	4b24      	ldr	r3, [pc, #144]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 800037c:	6a1b      	ldr	r3, [r3, #32]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	0c12      	lsrs	r2, r2, #16
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	4610      	mov	r0, r2
 8000386:	4798      	blx	r3
 8000388:	4b20      	ldr	r3, [pc, #128]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	68fa      	ldr	r2, [r7, #12]
 800038e:	0a12      	lsrs	r2, r2, #8
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	4610      	mov	r0, r2
 8000394:	4798      	blx	r3
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000398:	6a1b      	ldr	r3, [r3, #32]
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	4610      	mov	r0, r2
 80003a0:	4798      	blx	r3
 80003a2:	2300      	movs	r3, #0
 80003a4:	82fb      	strh	r3, [r7, #22]
 80003a6:	e00a      	b.n	80003be <WIZCHIP_WRITE_BUF+0x6e>
 80003a8:	4b18      	ldr	r3, [pc, #96]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003aa:	6a1b      	ldr	r3, [r3, #32]
 80003ac:	8afa      	ldrh	r2, [r7, #22]
 80003ae:	68b9      	ldr	r1, [r7, #8]
 80003b0:	440a      	add	r2, r1
 80003b2:	7812      	ldrb	r2, [r2, #0]
 80003b4:	4610      	mov	r0, r2
 80003b6:	4798      	blx	r3
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	3301      	adds	r3, #1
 80003bc:	82fb      	strh	r3, [r7, #22]
 80003be:	8afa      	ldrh	r2, [r7, #22]
 80003c0:	88fb      	ldrh	r3, [r7, #6]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3f0      	bcc.n	80003a8 <WIZCHIP_WRITE_BUF+0x58>
 80003c6:	e017      	b.n	80003f8 <WIZCHIP_WRITE_BUF+0xa8>
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	743b      	strb	r3, [r7, #16]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	0a1b      	lsrs	r3, r3, #8
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	747b      	strb	r3, [r7, #17]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	74bb      	strb	r3, [r7, #18]
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003e2:	f107 0210 	add.w	r2, r7, #16
 80003e6:	2103      	movs	r1, #3
 80003e8:	4610      	mov	r0, r2
 80003ea:	4798      	blx	r3
 80003ec:	4b07      	ldr	r3, [pc, #28]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003f0:	88fa      	ldrh	r2, [r7, #6]
 80003f2:	4611      	mov	r1, r2
 80003f4:	68b8      	ldr	r0, [r7, #8]
 80003f6:	4798      	blx	r3
 80003f8:	4b04      	ldr	r3, [pc, #16]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4798      	blx	r3
 80003fe:	4b03      	ldr	r3, [pc, #12]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	4798      	blx	r3
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000004 	.word	0x20000004

08000410 <getSn_TX_FSR>:
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
 800041a:	2300      	movs	r3, #0
 800041c:	81fb      	strh	r3, [r7, #14]
 800041e:	2300      	movs	r3, #0
 8000420:	81bb      	strh	r3, [r7, #12]
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	3301      	adds	r3, #1
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fe94 	bl	800015c <WIZCHIP_READ>
 8000434:	4603      	mov	r3, r0
 8000436:	81bb      	strh	r3, [r7, #12]
 8000438:	89bb      	ldrh	r3, [r7, #12]
 800043a:	021b      	lsls	r3, r3, #8
 800043c:	b29c      	uxth	r4, r3
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	3301      	adds	r3, #1
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fe86 	bl	800015c <WIZCHIP_READ>
 8000450:	4603      	mov	r3, r0
 8000452:	4423      	add	r3, r4
 8000454:	81bb      	strh	r3, [r7, #12]
 8000456:	89bb      	ldrh	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d019      	beq.n	8000490 <getSn_TX_FSR+0x80>
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	3301      	adds	r3, #1
 8000462:	00db      	lsls	r3, r3, #3
 8000464:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fe77 	bl	800015c <WIZCHIP_READ>
 800046e:	4603      	mov	r3, r0
 8000470:	81fb      	strh	r3, [r7, #14]
 8000472:	89fb      	ldrh	r3, [r7, #14]
 8000474:	021b      	lsls	r3, r3, #8
 8000476:	b29c      	uxth	r4, r3
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	3301      	adds	r3, #1
 800047e:	00db      	lsls	r3, r3, #3
 8000480:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe69 	bl	800015c <WIZCHIP_READ>
 800048a:	4603      	mov	r3, r0
 800048c:	4423      	add	r3, r4
 800048e:	81fb      	strh	r3, [r7, #14]
 8000490:	89fa      	ldrh	r2, [r7, #14]
 8000492:	89bb      	ldrh	r3, [r7, #12]
 8000494:	429a      	cmp	r2, r3
 8000496:	d1c4      	bne.n	8000422 <getSn_TX_FSR+0x12>
 8000498:	89fb      	ldrh	r3, [r7, #14]
 800049a:	4618      	mov	r0, r3
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd90      	pop	{r4, r7, pc}

080004a2 <getSn_RX_RSR>:
 80004a2:	b590      	push	{r4, r7, lr}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	2300      	movs	r3, #0
 80004ae:	81fb      	strh	r3, [r7, #14]
 80004b0:	2300      	movs	r3, #0
 80004b2:	81bb      	strh	r3, [r7, #12]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	3301      	adds	r3, #1
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fe4b 	bl	800015c <WIZCHIP_READ>
 80004c6:	4603      	mov	r3, r0
 80004c8:	81bb      	strh	r3, [r7, #12]
 80004ca:	89bb      	ldrh	r3, [r7, #12]
 80004cc:	021b      	lsls	r3, r3, #8
 80004ce:	b29c      	uxth	r4, r3
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	3301      	adds	r3, #1
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fe3d 	bl	800015c <WIZCHIP_READ>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4423      	add	r3, r4
 80004e6:	81bb      	strh	r3, [r7, #12]
 80004e8:	89bb      	ldrh	r3, [r7, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d019      	beq.n	8000522 <getSn_RX_RSR+0x80>
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	3301      	adds	r3, #1
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe2e 	bl	800015c <WIZCHIP_READ>
 8000500:	4603      	mov	r3, r0
 8000502:	81fb      	strh	r3, [r7, #14]
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	b29c      	uxth	r4, r3
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	3301      	adds	r3, #1
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe20 	bl	800015c <WIZCHIP_READ>
 800051c:	4603      	mov	r3, r0
 800051e:	4423      	add	r3, r4
 8000520:	81fb      	strh	r3, [r7, #14]
 8000522:	89fa      	ldrh	r2, [r7, #14]
 8000524:	89bb      	ldrh	r3, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d1c4      	bne.n	80004b4 <getSn_RX_RSR+0x12>
 800052a:	89fb      	ldrh	r3, [r7, #14]
 800052c:	4618      	mov	r0, r3
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bd90      	pop	{r4, r7, pc}

08000534 <wiz_send_data>:
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	80bb      	strh	r3, [r7, #4]
 8000544:	2300      	movs	r3, #0
 8000546:	81fb      	strh	r3, [r7, #14]
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d046      	beq.n	80005e0 <wiz_send_data+0xac>
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	3301      	adds	r3, #1
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fdfc 	bl	800015c <WIZCHIP_READ>
 8000564:	4603      	mov	r3, r0
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	b29c      	uxth	r4, r3
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	3301      	adds	r3, #1
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fdf0 	bl	800015c <WIZCHIP_READ>
 800057c:	4603      	mov	r3, r0
 800057e:	4423      	add	r3, r4
 8000580:	81fb      	strh	r3, [r7, #14]
 8000582:	89fb      	ldrh	r3, [r7, #14]
 8000584:	021a      	lsls	r2, r3, #8
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	3302      	adds	r3, #2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4413      	add	r3, r2
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	461a      	mov	r2, r3
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	68b8      	ldr	r0, [r7, #8]
 800059a:	f7ff fed9 	bl	8000350 <WIZCHIP_WRITE_BUF>
 800059e:	89fa      	ldrh	r2, [r7, #14]
 80005a0:	88bb      	ldrh	r3, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	81fb      	strh	r3, [r7, #14]
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	3301      	adds	r3, #1
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80005b2:	461a      	mov	r2, r3
 80005b4:	89fb      	ldrh	r3, [r7, #14]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	4610      	mov	r0, r2
 80005c0:	f7ff fe18 	bl	80001f4 <WIZCHIP_WRITE>
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	3301      	adds	r3, #1
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80005d0:	461a      	mov	r2, r3
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	4610      	mov	r0, r2
 80005da:	f7ff fe0b 	bl	80001f4 <WIZCHIP_WRITE>
 80005de:	e000      	b.n	80005e2 <wiz_send_data+0xae>
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd90      	pop	{r4, r7, pc}

080005e8 <wiz_recv_data>:
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
 80005f8:	2300      	movs	r3, #0
 80005fa:	81fb      	strh	r3, [r7, #14]
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d046      	beq.n	8000694 <wiz_recv_data+0xac>
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	3301      	adds	r3, #1
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fda2 	bl	800015c <WIZCHIP_READ>
 8000618:	4603      	mov	r3, r0
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	b29c      	uxth	r4, r3
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	3301      	adds	r3, #1
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fd96 	bl	800015c <WIZCHIP_READ>
 8000630:	4603      	mov	r3, r0
 8000632:	4423      	add	r3, r4
 8000634:	81fb      	strh	r3, [r7, #14]
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	021a      	lsls	r2, r3, #8
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3303      	adds	r3, #3
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	4413      	add	r3, r2
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	461a      	mov	r2, r3
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	68b8      	ldr	r0, [r7, #8]
 800064e:	f7ff fe1f 	bl	8000290 <WIZCHIP_READ_BUF>
 8000652:	89fa      	ldrh	r2, [r7, #14]
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	81fb      	strh	r3, [r7, #14]
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	3301      	adds	r3, #1
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000666:	461a      	mov	r2, r3
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	b29b      	uxth	r3, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff fdbe 	bl	80001f4 <WIZCHIP_WRITE>
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3301      	adds	r3, #1
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8000684:	461a      	mov	r2, r3
 8000686:	89fb      	ldrh	r3, [r7, #14]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	4610      	mov	r0, r2
 800068e:	f7ff fdb1 	bl	80001f4 <WIZCHIP_WRITE>
 8000692:	e000      	b.n	8000696 <wiz_recv_data+0xae>
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <wizchip_select>:
#include "../Ethernet/wizchip_conf.h"

extern SPI_HandleTypeDef hspi1;

void wizchip_select(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2110      	movs	r1, #16
 80006a4:	4802      	ldr	r0, [pc, #8]	@ (80006b0 <wizchip_select+0x14>)
 80006a6:	f006 fc18 	bl	8006eda <HAL_GPIO_WritePin>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40010800 	.word	0x40010800

080006b4 <wizchip_deselect>:

void wizchip_deselect(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4802      	ldr	r0, [pc, #8]	@ (80006c8 <wizchip_deselect+0x14>)
 80006be:	f006 fc0c 	bl	8006eda <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010800 	.word	0x40010800

080006cc <wizchip_read>:

uint8_t wizchip_read(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80006d2:	1df9      	adds	r1, r7, #7
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2201      	movs	r2, #1
 80006da:	4804      	ldr	r0, [pc, #16]	@ (80006ec <wizchip_read+0x20>)
 80006dc:	f007 fa74 	bl	8007bc8 <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&hspi1, &rbuf, 1);
	return rbuf;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000d8 	.word	0x200000d8

080006f0 <wizchip_write>:

void wizchip_write(uint8_t b) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80006fa:	1df9      	adds	r1, r7, #7
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2201      	movs	r2, #1
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <wizchip_write+0x20>)
 8000704:	f007 f91c 	bl	8007940 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, &b, 1);
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000d8 	.word	0x200000d8

08000714 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, pBuf, len, 0xFFFFFFFF);
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4803      	ldr	r0, [pc, #12]	@ (8000738 <wizchip_readburst+0x24>)
 800072a:	f007 fa4d 	bl	8007bc8 <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&hspi1, pBuf, len);
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000d8 	.word	0x200000d8

0800073c <wizchip_writeburst>:

void wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, pBuf, len, 0xFFFFFFFF);
 8000748:	887a      	ldrh	r2, [r7, #2]
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <wizchip_writeburst+0x24>)
 8000752:	f007 f8f5 	bl	8007940 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, pBuf, len);
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000d8 	.word	0x200000d8

08000764 <W5500Init>:

void W5500Init()
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 800076a:	23ff      	movs	r3, #255	@ 0xff
 800076c:	75fb      	strb	r3, [r7, #23]
	uint8_t memsize[2][8] = {{16,0,0,0,0,0,0,0},{16,0,0,0,0,0,0,0}};
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <W5500Init+0x74>)
 8000770:	1d3c      	adds	r4, r7, #4
 8000772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	4817      	ldr	r0, [pc, #92]	@ (80007dc <W5500Init+0x78>)
 800077e:	f006 fbac 	bl	8006eda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2102      	movs	r1, #2
 8000786:	4816      	ldr	r0, [pc, #88]	@ (80007e0 <W5500Init+0x7c>)
 8000788:	f006 fba7 	bl	8006eda <HAL_GPIO_WritePin>
	while (tmp--);
 800078c:	bf00      	nop
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	75fa      	strb	r2, [r7, #23]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1fa      	bne.n	800078e <W5500Init+0x2a>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2102      	movs	r1, #2
 800079c:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <W5500Init+0x7c>)
 800079e:	f006 fb9c 	bl	8006eda <HAL_GPIO_WritePin>
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80007a2:	4910      	ldr	r1, [pc, #64]	@ (80007e4 <W5500Init+0x80>)
 80007a4:	4810      	ldr	r0, [pc, #64]	@ (80007e8 <W5500Init+0x84>)
 80007a6:	f000 fcb9 	bl	800111c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 80007aa:	4910      	ldr	r1, [pc, #64]	@ (80007ec <W5500Init+0x88>)
 80007ac:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <W5500Init+0x8c>)
 80007ae:	f000 fcd9 	bl	8001164 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 80007b2:	4910      	ldr	r1, [pc, #64]	@ (80007f4 <W5500Init+0x90>)
 80007b4:	4810      	ldr	r0, [pc, #64]	@ (80007f8 <W5500Init+0x94>)
 80007b6:	f000 fd01 	bl	80011bc <reg_wizchip_spiburst_cbfunc>
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fd28 	bl	8001214 <ctlwizchip>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ca:	d101      	bne.n	80007d0 <W5500Init+0x6c>
	{
		while (1);
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <W5500Init+0x68>
	}
}
 80007d0:	bf00      	nop
 80007d2:	371c      	adds	r7, #28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	08009c3c 	.word	0x08009c3c
 80007dc:	40010800 	.word	0x40010800
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	080006b5 	.word	0x080006b5
 80007e8:	0800069d 	.word	0x0800069d
 80007ec:	080006f1 	.word	0x080006f1
 80007f0:	080006cd 	.word	0x080006cd
 80007f4:	0800073d 	.word	0x0800073d
 80007f8:	08000715 	.word	0x08000715

080007fc <socket>:
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	4604      	mov	r4, r0
 8000804:	4608      	mov	r0, r1
 8000806:	4611      	mov	r1, r2
 8000808:	461a      	mov	r2, r3
 800080a:	4623      	mov	r3, r4
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	460b      	mov	r3, r1
 8000814:	80bb      	strh	r3, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	70fb      	strb	r3, [r7, #3]
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b08      	cmp	r3, #8
 800081e:	d902      	bls.n	8000826 <socket+0x2a>
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	e0ef      	b.n	8000a06 <socket+0x20a>
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d005      	beq.n	8000838 <socket+0x3c>
 800082c:	2b00      	cmp	r3, #0
 800082e:	dd11      	ble.n	8000854 <socket+0x58>
 8000830:	3b02      	subs	r3, #2
 8000832:	2b02      	cmp	r3, #2
 8000834:	d80e      	bhi.n	8000854 <socket+0x58>
 8000836:	e011      	b.n	800085c <socket+0x60>
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2204      	movs	r2, #4
 800083e:	4619      	mov	r1, r3
 8000840:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000844:	f7ff fd24 	bl	8000290 <WIZCHIP_READ_BUF>
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <socket+0x5e>
 800084e:	f06f 0302 	mvn.w	r3, #2
 8000852:	e0d8      	b.n	8000a06 <socket+0x20a>
 8000854:	f06f 0304 	mvn.w	r3, #4
 8000858:	e0d5      	b.n	8000a06 <socket+0x20a>
 800085a:	bf00      	nop
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <socket+0x70>
 8000866:	f06f 0305 	mvn.w	r3, #5
 800086a:	e0cc      	b.n	8000a06 <socket+0x20a>
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d028      	beq.n	80008c4 <socket+0xc8>
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d002      	beq.n	800087e <socket+0x82>
 8000878:	2b02      	cmp	r3, #2
 800087a:	d008      	beq.n	800088e <socket+0x92>
 800087c:	e022      	b.n	80008c4 <socket+0xc8>
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11a      	bne.n	80008be <socket+0xc2>
 8000888:	f06f 0305 	mvn.w	r3, #5
 800088c:	e0bb      	b.n	8000a06 <socket+0x20a>
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	f003 0320 	and.w	r3, r3, #32
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <socket+0xaa>
 8000898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db02      	blt.n	80008a6 <socket+0xaa>
 80008a0:	f06f 0305 	mvn.w	r3, #5
 80008a4:	e0af      	b.n	8000a06 <socket+0x20a>
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d008      	beq.n	80008c2 <socket+0xc6>
 80008b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db04      	blt.n	80008c2 <socket+0xc6>
 80008b8:	f06f 0305 	mvn.w	r3, #5
 80008bc:	e0a3      	b.n	8000a06 <socket+0x20a>
 80008be:	bf00      	nop
 80008c0:	e000      	b.n	80008c4 <socket+0xc8>
 80008c2:	bf00      	nop
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f8ac 	bl	8000a24 <close>
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	3301      	adds	r3, #1
 80008d2:	00d8      	lsls	r0, r3, #3
 80008d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008d8:	f023 030f 	bic.w	r3, r3, #15
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	f7ff fc83 	bl	80001f4 <WIZCHIP_WRITE>
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d110      	bne.n	8000916 <socket+0x11a>
 80008f4:	4b46      	ldr	r3, [pc, #280]	@ (8000a10 <socket+0x214>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	b291      	uxth	r1, r2
 80008fc:	4a44      	ldr	r2, [pc, #272]	@ (8000a10 <socket+0x214>)
 80008fe:	8011      	strh	r1, [r2, #0]
 8000900:	80bb      	strh	r3, [r7, #4]
 8000902:	4b43      	ldr	r3, [pc, #268]	@ (8000a10 <socket+0x214>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800090a:	4293      	cmp	r3, r2
 800090c:	d103      	bne.n	8000916 <socket+0x11a>
 800090e:	4b40      	ldr	r3, [pc, #256]	@ (8000a10 <socket+0x214>)
 8000910:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000914:	801a      	strh	r2, [r3, #0]
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	3301      	adds	r3, #1
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000922:	461a      	mov	r2, r3
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	0a1b      	lsrs	r3, r3, #8
 8000928:	b29b      	uxth	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4619      	mov	r1, r3
 800092e:	4610      	mov	r0, r2
 8000930:	f7ff fc60 	bl	80001f4 <WIZCHIP_WRITE>
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	3301      	adds	r3, #1
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000940:	461a      	mov	r2, r3
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f7ff fc53 	bl	80001f4 <WIZCHIP_WRITE>
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	3301      	adds	r3, #1
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc49 	bl	80001f4 <WIZCHIP_WRITE>
 8000962:	bf00      	nop
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	3301      	adds	r3, #1
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fbf3 	bl	800015c <WIZCHIP_READ>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f3      	bne.n	8000964 <socket+0x168>
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2201      	movs	r2, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	b21b      	sxth	r3, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	b21a      	sxth	r2, r3
 800098a:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <socket+0x218>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b21b      	sxth	r3, r3
 8000990:	4013      	ands	r3, r2
 8000992:	b21b      	sxth	r3, r3
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <socket+0x218>)
 8000998:	801a      	strh	r2, [r3, #0]
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	f003 0201 	and.w	r2, r3, #1
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <socket+0x218>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <socket+0x218>)
 80009b6:	801a      	strh	r2, [r3, #0]
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <socket+0x21c>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <socket+0x21c>)
 80009d4:	801a      	strh	r2, [r3, #0]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <socket+0x220>)
 80009da:	2100      	movs	r1, #0
 80009dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <socket+0x224>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	54d1      	strb	r1, [r2, r3]
 80009e8:	bf00      	nop
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	3301      	adds	r3, #1
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fbb0 	bl	800015c <WIZCHIP_READ>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f3      	beq.n	80009ea <socket+0x1ee>
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	2000005c 	.word	0x2000005c
 8000a18:	2000005e 	.word	0x2000005e
 8000a1c:	20000060 	.word	0x20000060
 8000a20:	20000074 	.word	0x20000074

08000a24 <close>:
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b08      	cmp	r3, #8
 8000a32:	d902      	bls.n	8000a3a <close+0x16>
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	e069      	b.n	8000b0e <close+0xea>
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	3301      	adds	r3, #1
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a46:	2110      	movs	r1, #16
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbd3 	bl	80001f4 <WIZCHIP_WRITE>
 8000a4e:	e009      	b.n	8000a64 <close+0x40>
 8000a50:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <close+0xf4>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d105      	bne.n	8000a64 <close+0x40>
 8000a58:	4b2f      	ldr	r3, [pc, #188]	@ (8000b18 <close+0xf4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	f06f 030c 	mvn.w	r3, #12
 8000a62:	e054      	b.n	8000b0e <close+0xea>
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	3301      	adds	r3, #1
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fb73 	bl	800015c <WIZCHIP_READ>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1e9      	bne.n	8000a50 <close+0x2c>
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	3301      	adds	r3, #1
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000a88:	211f      	movs	r1, #31
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fbb2 	bl	80001f4 <WIZCHIP_WRITE>
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2201      	movs	r2, #1
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <close+0xf8>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <close+0xf8>)
 8000aac:	801a      	strh	r2, [r3, #0]
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <close+0xfc>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <close+0xfc>)
 8000aca:	801a      	strh	r2, [r3, #0]
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	4a15      	ldr	r2, [pc, #84]	@ (8000b24 <close+0x100>)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <close+0x104>)
 8000ada:	2100      	movs	r1, #0
 8000adc:	54d1      	strb	r1, [r2, r3]
 8000ade:	e009      	b.n	8000af4 <close+0xd0>
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <close+0xf4>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d105      	bne.n	8000af4 <close+0xd0>
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <close+0xf4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	f06f 030c 	mvn.w	r3, #12
 8000af2:	e00c      	b.n	8000b0e <close+0xea>
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	3301      	adds	r3, #1
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fb2b 	bl	800015c <WIZCHIP_READ>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1e9      	bne.n	8000ae0 <close+0xbc>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000070 	.word	0x20000070
 8000b1c:	2000005c 	.word	0x2000005c
 8000b20:	2000005e 	.word	0x2000005e
 8000b24:	20000060 	.word	0x20000060
 8000b28:	20000074 	.word	0x20000074

08000b2c <connect>:
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	80bb      	strh	r3, [r7, #4]
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d902      	bls.n	8000b48 <connect+0x1c>
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e0da      	b.n	8000cfe <connect+0x1d2>
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fb03 	bl	800015c <WIZCHIP_READ>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f003 030f 	and.w	r3, r3, #15
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d002      	beq.n	8000b66 <connect+0x3a>
 8000b60:	f06f 0304 	mvn.w	r3, #4
 8000b64:	e0cb      	b.n	8000cfe <connect+0x1d2>
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff faf2 	bl	800015c <WIZCHIP_READ>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b13      	cmp	r3, #19
 8000b7c:	d002      	beq.n	8000b84 <connect+0x58>
 8000b7e:	f06f 0302 	mvn.w	r3, #2
 8000b82:	e0bc      	b.n	8000cfe <connect+0x1d2>
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	3201      	adds	r2, #1
 8000b92:	7812      	ldrb	r2, [r2, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	3202      	adds	r2, #2
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	3203      	adds	r2, #3
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bba:	d002      	beq.n	8000bc2 <connect+0x96>
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <connect+0x9c>
 8000bc2:	f06f 030b 	mvn.w	r3, #11
 8000bc6:	e09a      	b.n	8000cfe <connect+0x1d2>
 8000bc8:	88bb      	ldrh	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <connect+0xa8>
 8000bce:	f06f 030a 	mvn.w	r3, #10
 8000bd2:	e094      	b.n	8000cfe <connect+0x1d2>
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	3301      	adds	r3, #1
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8000be0:	2204      	movs	r2, #4
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fbb3 	bl	8000350 <WIZCHIP_WRITE_BUF>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	3301      	adds	r3, #1
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	4610      	mov	r0, r2
 8000c04:	f7ff faf6 	bl	80001f4 <WIZCHIP_WRITE>
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8000c14:	461a      	mov	r2, r3
 8000c16:	88bb      	ldrh	r3, [r7, #4]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	f7ff fae9 	bl	80001f4 <WIZCHIP_WRITE>
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	3301      	adds	r3, #1
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fadf 	bl	80001f4 <WIZCHIP_WRITE>
 8000c36:	e009      	b.n	8000c4c <connect+0x120>
 8000c38:	4b33      	ldr	r3, [pc, #204]	@ (8000d08 <connect+0x1dc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d105      	bne.n	8000c4c <connect+0x120>
 8000c40:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <connect+0x1dc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	f06f 030c 	mvn.w	r3, #12
 8000c4a:	e058      	b.n	8000cfe <connect+0x1d2>
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	3301      	adds	r3, #1
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fa7f 	bl	800015c <WIZCHIP_READ>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1e9      	bne.n	8000c38 <connect+0x10c>
 8000c64:	4b29      	ldr	r3, [pc, #164]	@ (8000d0c <connect+0x1e0>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	fa42 f303 	asr.w	r3, r2, r3
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d035      	beq.n	8000ce4 <connect+0x1b8>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e040      	b.n	8000cfe <connect+0x1d2>
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	3301      	adds	r3, #1
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fa67 	bl	800015c <WIZCHIP_READ>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00c      	beq.n	8000cb2 <connect+0x186>
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff faa4 	bl	80001f4 <WIZCHIP_WRITE>
 8000cac:	f06f 030c 	mvn.w	r3, #12
 8000cb0:	e025      	b.n	8000cfe <connect+0x1d2>
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fa4c 	bl	800015c <WIZCHIP_READ>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <connect+0x1a4>
 8000cca:	f06f 0303 	mvn.w	r3, #3
 8000cce:	e016      	b.n	8000cfe <connect+0x1d2>
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <connect+0x1dc>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d105      	bne.n	8000ce4 <connect+0x1b8>
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <connect+0x1dc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	f06f 030c 	mvn.w	r3, #12
 8000ce2:	e00c      	b.n	8000cfe <connect+0x1d2>
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3301      	adds	r3, #1
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fa33 	bl	800015c <WIZCHIP_READ>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b17      	cmp	r3, #23
 8000cfa:	d1bf      	bne.n	8000c7c <connect+0x150>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000070 	.word	0x20000070
 8000d0c:	2000005c 	.word	0x2000005c

08000d10 <send>:
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	80bb      	strh	r3, [r7, #4]
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	2300      	movs	r3, #0
 8000d26:	81bb      	strh	r3, [r7, #12]
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b08      	cmp	r3, #8
 8000d2c:	d902      	bls.n	8000d34 <send+0x24>
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e0dd      	b.n	8000ef0 <send+0x1e0>
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	3301      	adds	r3, #1
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fa0d 	bl	800015c <WIZCHIP_READ>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d002      	beq.n	8000d52 <send+0x42>
 8000d4c:	f06f 0304 	mvn.w	r3, #4
 8000d50:	e0ce      	b.n	8000ef0 <send+0x1e0>
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <send+0x4e>
 8000d58:	f06f 030d 	mvn.w	r3, #13
 8000d5c:	e0c8      	b.n	8000ef0 <send+0x1e0>
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	3301      	adds	r3, #1
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff f9f6 	bl	800015c <WIZCHIP_READ>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	2b17      	cmp	r3, #23
 8000d78:	d005      	beq.n	8000d86 <send+0x76>
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b1c      	cmp	r3, #28
 8000d7e:	d002      	beq.n	8000d86 <send+0x76>
 8000d80:	f06f 0306 	mvn.w	r3, #6
 8000d84:	e0b4      	b.n	8000ef0 <send+0x1e0>
 8000d86:	4b5c      	ldr	r3, [pc, #368]	@ (8000ef8 <send+0x1e8>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	fa42 f303 	asr.w	r3, r2, r3
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d039      	beq.n	8000e0e <send+0xfe>
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	3301      	adds	r3, #1
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff f9d8 	bl	800015c <WIZCHIP_READ>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f003 031f 	and.w	r3, r3, #31
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d019      	beq.n	8000df2 <send+0xe2>
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000dca:	2110      	movs	r1, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fa11 	bl	80001f4 <WIZCHIP_WRITE>
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	4b45      	ldr	r3, [pc, #276]	@ (8000ef8 <send+0x1e8>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4013      	ands	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b42      	ldr	r3, [pc, #264]	@ (8000ef8 <send+0x1e8>)
 8000dee:	801a      	strh	r2, [r3, #0]
 8000df0:	e00d      	b.n	8000e0e <send+0xfe>
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <send+0xfa>
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fe10 	bl	8000a24 <close>
 8000e04:	f06f 030c 	mvn.w	r3, #12
 8000e08:	e072      	b.n	8000ef0 <send+0x1e0>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e070      	b.n	8000ef0 <send+0x1e0>
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	3301      	adds	r3, #1
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff f99e 	bl	800015c <WIZCHIP_READ>
 8000e20:	4603      	mov	r3, r0
 8000e22:	029b      	lsls	r3, r3, #10
 8000e24:	81bb      	strh	r3, [r7, #12]
 8000e26:	88ba      	ldrh	r2, [r7, #4]
 8000e28:	89bb      	ldrh	r3, [r7, #12]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d901      	bls.n	8000e32 <send+0x122>
 8000e2e:	89bb      	ldrh	r3, [r7, #12]
 8000e30:	80bb      	strh	r3, [r7, #4]
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff faeb 	bl	8000410 <getSn_TX_FSR>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	81bb      	strh	r3, [r7, #12]
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	3301      	adds	r3, #1
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff f986 	bl	800015c <WIZCHIP_READ>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b17      	cmp	r3, #23
 8000e58:	d009      	beq.n	8000e6e <send+0x15e>
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b1c      	cmp	r3, #28
 8000e5e:	d006      	beq.n	8000e6e <send+0x15e>
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fdde 	bl	8000a24 <close>
 8000e68:	f06f 0306 	mvn.w	r3, #6
 8000e6c:	e040      	b.n	8000ef0 <send+0x1e0>
 8000e6e:	4b23      	ldr	r3, [pc, #140]	@ (8000efc <send+0x1ec>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	fa42 f303 	asr.w	r3, r2, r3
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <send+0x17e>
 8000e82:	88ba      	ldrh	r2, [r7, #4]
 8000e84:	89bb      	ldrh	r3, [r7, #12]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d901      	bls.n	8000e8e <send+0x17e>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e030      	b.n	8000ef0 <send+0x1e0>
 8000e8e:	88ba      	ldrh	r2, [r7, #4]
 8000e90:	89bb      	ldrh	r3, [r7, #12]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d900      	bls.n	8000e98 <send+0x188>
 8000e96:	e7cc      	b.n	8000e32 <send+0x122>
 8000e98:	bf00      	nop
 8000e9a:	88ba      	ldrh	r2, [r7, #4]
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fb47 	bl	8000534 <wiz_send_data>
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	3301      	adds	r3, #1
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff f99d 	bl	80001f4 <WIZCHIP_WRITE>
 8000eba:	bf00      	nop
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f947 	bl	800015c <WIZCHIP_READ>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f3      	bne.n	8000ebc <send+0x1ac>
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <send+0x1e8>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <send+0x1e8>)
 8000eec:	801a      	strh	r2, [r3, #0]
 8000eee:	88bb      	ldrh	r3, [r7, #4]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000005e 	.word	0x2000005e
 8000efc:	2000005c 	.word	0x2000005c

08000f00 <recv>:
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	80bb      	strh	r3, [r7, #4]
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	2300      	movs	r3, #0
 8000f16:	81bb      	strh	r3, [r7, #12]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d902      	bls.n	8000f24 <recv+0x24>
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e09b      	b.n	800105c <recv+0x15c>
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	3301      	adds	r3, #1
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f915 	bl	800015c <WIZCHIP_READ>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <recv+0x42>
 8000f3c:	f06f 0304 	mvn.w	r3, #4
 8000f40:	e08c      	b.n	800105c <recv+0x15c>
 8000f42:	88bb      	ldrh	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <recv+0x4e>
 8000f48:	f06f 030d 	mvn.w	r3, #13
 8000f4c:	e086      	b.n	800105c <recv+0x15c>
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	3301      	adds	r3, #1
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f8fe 	bl	800015c <WIZCHIP_READ>
 8000f60:	4603      	mov	r3, r0
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	81bb      	strh	r3, [r7, #12]
 8000f66:	89ba      	ldrh	r2, [r7, #12]
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d201      	bcs.n	8000f72 <recv+0x72>
 8000f6e:	89bb      	ldrh	r3, [r7, #12]
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fa94 	bl	80004a2 <getSn_RX_RSR>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	81bb      	strh	r3, [r7, #12]
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	3301      	adds	r3, #1
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f8e6 	bl	800015c <WIZCHIP_READ>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b17      	cmp	r3, #23
 8000f98:	d026      	beq.n	8000fe8 <recv+0xe8>
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b1c      	cmp	r3, #28
 8000f9e:	d11c      	bne.n	8000fda <recv+0xda>
 8000fa0:	89bb      	ldrh	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d133      	bne.n	800100e <recv+0x10e>
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa31 	bl	8000410 <getSn_TX_FSR>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461c      	mov	r4, r3
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f8cc 	bl	800015c <WIZCHIP_READ>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	029b      	lsls	r3, r3, #10
 8000fc8:	429c      	cmp	r4, r3
 8000fca:	d10d      	bne.n	8000fe8 <recv+0xe8>
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fd28 	bl	8000a24 <close>
 8000fd4:	f06f 0306 	mvn.w	r3, #6
 8000fd8:	e040      	b.n	800105c <recv+0x15c>
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fd21 	bl	8000a24 <close>
 8000fe2:	f06f 0306 	mvn.w	r3, #6
 8000fe6:	e039      	b.n	800105c <recv+0x15c>
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8001064 <recv+0x164>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	fa42 f303 	asr.w	r3, r2, r3
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <recv+0x106>
 8000ffc:	89bb      	ldrh	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <recv+0x106>
 8001002:	2300      	movs	r3, #0
 8001004:	e02a      	b.n	800105c <recv+0x15c>
 8001006:	89bb      	ldrh	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <recv+0x112>
 800100c:	e7b1      	b.n	8000f72 <recv+0x72>
 800100e:	bf00      	nop
 8001010:	e000      	b.n	8001014 <recv+0x114>
 8001012:	bf00      	nop
 8001014:	89ba      	ldrh	r2, [r7, #12]
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	d201      	bcs.n	8001020 <recv+0x120>
 800101c:	89bb      	ldrh	r3, [r7, #12]
 800101e:	80bb      	strh	r3, [r7, #4]
 8001020:	88ba      	ldrh	r2, [r7, #4]
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fade 	bl	80005e8 <wiz_recv_data>
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	3301      	adds	r3, #1
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001038:	2140      	movs	r1, #64	@ 0x40
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f8da 	bl	80001f4 <WIZCHIP_WRITE>
 8001040:	bf00      	nop
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	3301      	adds	r3, #1
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f884 	bl	800015c <WIZCHIP_READ>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f3      	bne.n	8001042 <recv+0x142>
 800105a:	88bb      	ldrh	r3, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	2000005c 	.word	0x2000005c

08001068 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	78fa      	ldrb	r2, [r7, #3]
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	2300      	movs	r3, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	807b      	strh	r3, [r7, #2]
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
	...

0800111c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <reg_wizchip_cs_cbfunc+0x16>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d106      	bne.n	8001140 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <reg_wizchip_cs_cbfunc+0x3c>)
 8001134:	4a09      	ldr	r2, [pc, #36]	@ (800115c <reg_wizchip_cs_cbfunc+0x40>)
 8001136:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <reg_wizchip_cs_cbfunc+0x3c>)
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <reg_wizchip_cs_cbfunc+0x44>)
 800113c:	619a      	str	r2, [r3, #24]
 800113e:	e006      	b.n	800114e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001140:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <reg_wizchip_cs_cbfunc+0x3c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001146:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <reg_wizchip_cs_cbfunc+0x3c>)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6193      	str	r3, [r2, #24]
   }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	20000004 	.word	0x20000004
 800115c:	08001081 	.word	0x08001081
 8001160:	0800108d 	.word	0x0800108d

08001164 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800116e:	bf00      	nop
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f9      	beq.n	8001170 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <reg_wizchip_spi_cbfunc+0x24>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d106      	bne.n	8001196 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <reg_wizchip_spi_cbfunc+0x4c>)
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <reg_wizchip_spi_cbfunc+0x50>)
 800118c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001190:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <reg_wizchip_spi_cbfunc+0x54>)
 8001192:	621a      	str	r2, [r3, #32]
 8001194:	e006      	b.n	80011a4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001196:	4a06      	ldr	r2, [pc, #24]	@ (80011b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <reg_wizchip_spi_cbfunc+0x4c>)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	6213      	str	r3, [r2, #32]
   }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000004 	.word	0x20000004
 80011b4:	080010cd 	.word	0x080010cd
 80011b8:	080010db 	.word	0x080010db

080011bc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80011c6:	bf00      	nop
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f9      	beq.n	80011c8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <reg_wizchip_spiburst_cbfunc+0x24>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d106      	bne.n	80011ee <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <reg_wizchip_spiburst_cbfunc+0x50>)
 80011e4:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011e8:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <reg_wizchip_spiburst_cbfunc+0x54>)
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80011ec:	e006      	b.n	80011fc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80011ee:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000004 	.word	0x20000004
 800120c:	080010ef 	.word	0x080010ef
 8001210:	08001105 	.word	0x08001105

08001214 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f200 80c5 	bhi.w	80013be <ctlwizchip+0x1aa>
 8001234:	a201      	add	r2, pc, #4	@ (adr r2, 800123c <ctlwizchip+0x28>)
 8001236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123a:	bf00      	nop
 800123c:	0800127d 	.word	0x0800127d
 8001240:	08001283 	.word	0x08001283
 8001244:	080012af 	.word	0x080012af
 8001248:	080012a3 	.word	0x080012a3
 800124c:	080012bd 	.word	0x080012bd
 8001250:	080012c9 	.word	0x080012c9
 8001254:	080012d7 	.word	0x080012d7
 8001258:	080012fd 	.word	0x080012fd
 800125c:	0800131f 	.word	0x0800131f
 8001260:	08001363 	.word	0x08001363
 8001264:	08001369 	.word	0x08001369
 8001268:	08001371 	.word	0x08001371
 800126c:	080013c5 	.word	0x080013c5
 8001270:	08001379 	.word	0x08001379
 8001274:	08001387 	.word	0x08001387
 8001278:	080013a3 	.word	0x080013a3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800127c:	f000 f8aa 	bl	80013d4 <wizchip_sw_reset>
         break;
 8001280:	e0a1      	b.n	80013c6 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3308      	adds	r3, #8
 8001290:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f8e7 	bl	800146c <wizchip_init>
 800129e:	4603      	mov	r3, r0
 80012a0:	e092      	b.n	80013c8 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f96c 	bl	8001584 <wizchip_clrinterrupt>
         break;
 80012ac:	e08b      	b.n	80013c6 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80012ae:	f000 f99d 	bl	80015ec <wizchip_getinterrupt>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	801a      	strh	r2, [r3, #0]
         break;
 80012ba:	e084      	b.n	80013c6 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f9b8 	bl	8001636 <wizchip_setinterruptmask>
         break;         
 80012c6:	e07e      	b.n	80013c6 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80012c8:	f000 f9d0 	bl	800166c <wizchip_getinterruptmask>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	801a      	strh	r2, [r3, #0]
         break;
 80012d4:	e077      	b.n	80013c6 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80012e6:	f7fe ff85 	bl	80001f4 <WIZCHIP_WRITE>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80012f6:	f7fe ff7d 	bl	80001f4 <WIZCHIP_WRITE>
         break;
 80012fa:	e064      	b.n	80013c6 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80012fc:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8001300:	f7fe ff2c 	bl	800015c <WIZCHIP_READ>
 8001304:	4603      	mov	r3, r0
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b29c      	uxth	r4, r3
 800130a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800130e:	f7fe ff25 	bl	800015c <WIZCHIP_READ>
 8001312:	4603      	mov	r3, r0
 8001314:	4423      	add	r3, r4
 8001316:	b29a      	uxth	r2, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	801a      	strh	r2, [r3, #0]
         break;
 800131c:	e053      	b.n	80013c6 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800131e:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <ctlwizchip+0x1bc>)
 8001320:	789a      	ldrb	r2, [r3, #2]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a29      	ldr	r2, [pc, #164]	@ (80013d0 <ctlwizchip+0x1bc>)
 800132c:	78d2      	ldrb	r2, [r2, #3]
 800132e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3302      	adds	r3, #2
 8001334:	4a26      	ldr	r2, [pc, #152]	@ (80013d0 <ctlwizchip+0x1bc>)
 8001336:	7912      	ldrb	r2, [r2, #4]
 8001338:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3303      	adds	r3, #3
 800133e:	4a24      	ldr	r2, [pc, #144]	@ (80013d0 <ctlwizchip+0x1bc>)
 8001340:	7952      	ldrb	r2, [r2, #5]
 8001342:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	3304      	adds	r3, #4
 8001348:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <ctlwizchip+0x1bc>)
 800134a:	7992      	ldrb	r2, [r2, #6]
 800134c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	3305      	adds	r3, #5
 8001352:	4a1f      	ldr	r2, [pc, #124]	@ (80013d0 <ctlwizchip+0x1bc>)
 8001354:	79d2      	ldrb	r2, [r2, #7]
 8001356:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	3306      	adds	r3, #6
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
         break;
 8001360:	e031      	b.n	80013c6 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8001362:	f000 f9d5 	bl	8001710 <wizphy_reset>
         break;
 8001366:	e02e      	b.n	80013c6 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	f000 f9f8 	bl	800175e <wizphy_setphyconf>
         break;
 800136e:	e02a      	b.n	80013c6 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f000 fa37 	bl	80017e4 <wizphy_getphyconf>
         break;
 8001376:	e026      	b.n	80013c6 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fa9b 	bl	80018b8 <wizphy_setphypmode>
 8001382:	4603      	mov	r3, r0
 8001384:	e020      	b.n	80013c8 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8001386:	f000 f9aa 	bl	80016de <wizphy_getphypmode>
 800138a:	4603      	mov	r3, r0
 800138c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800138e:	7dfb      	ldrb	r3, [r7, #23]
 8001390:	2bff      	cmp	r3, #255	@ 0xff
 8001392:	d102      	bne.n	800139a <ctlwizchip+0x186>
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	e016      	b.n	80013c8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	7dfa      	ldrb	r2, [r7, #23]
 800139e:	701a      	strb	r2, [r3, #0]
         break;
 80013a0:	e011      	b.n	80013c6 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80013a2:	f000 f986 	bl	80016b2 <wizphy_getphylink>
 80013a6:	4603      	mov	r3, r0
 80013a8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	2bff      	cmp	r3, #255	@ 0xff
 80013ae:	d102      	bne.n	80013b6 <ctlwizchip+0x1a2>
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	e008      	b.n	80013c8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	7dfa      	ldrb	r2, [r7, #23]
 80013ba:	701a      	strb	r2, [r3, #0]
         break;
 80013bc:	e003      	b.n	80013c6 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e001      	b.n	80013c8 <ctlwizchip+0x1b4>
         break;
 80013c4:	bf00      	nop
   }
   return 0;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	20000004 	.word	0x20000004

080013d4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2206      	movs	r2, #6
 80013de:	4619      	mov	r1, r3
 80013e0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80013e4:	f7fe ff54 	bl	8000290 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2204      	movs	r2, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013f4:	f7fe ff4c 	bl	8000290 <WIZCHIP_READ_BUF>
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2204      	movs	r2, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001404:	f7fe ff44 	bl	8000290 <WIZCHIP_READ_BUF>
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2204      	movs	r2, #4
 800140e:	4619      	mov	r1, r3
 8001410:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001414:	f7fe ff3c 	bl	8000290 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001418:	2180      	movs	r1, #128	@ 0x80
 800141a:	2000      	movs	r0, #0
 800141c:	f7fe feea 	bl	80001f4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001420:	2000      	movs	r0, #0
 8001422:	f7fe fe9b 	bl	800015c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2206      	movs	r2, #6
 800142a:	4619      	mov	r1, r3
 800142c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001430:	f7fe ff8e 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2204      	movs	r2, #4
 800143a:	4619      	mov	r1, r3
 800143c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001440:	f7fe ff86 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	2204      	movs	r2, #4
 800144a:	4619      	mov	r1, r3
 800144c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001450:	f7fe ff7e 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2204      	movs	r2, #4
 800145a:	4619      	mov	r1, r3
 800145c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001460:	f7fe ff76 	bl	8000350 <WIZCHIP_WRITE_BUF>
}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800147a:	f7ff ffab 	bl	80013d4 <wizchip_sw_reset>
   if(txsize)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d03b      	beq.n	80014fc <wizchip_init+0x90>
   {
      tmp = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e015      	b.n	80014ba <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	4413      	add	r3, r2
 800149c:	b2db      	uxtb	r3, r3
 800149e:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80014a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014a4:	2b10      	cmp	r3, #16
 80014a6:	dd02      	ble.n	80014ae <wizchip_init+0x42>
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	e066      	b.n	800157c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	2b07      	cmp	r3, #7
 80014c0:	dde5      	ble.n	800148e <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e015      	b.n	80014f4 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80014c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	3301      	adds	r3, #1
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80014d6:	4618      	mov	r0, r3
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7fe fe86 	bl	80001f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	dde5      	ble.n	80014c8 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d03b      	beq.n	800157a <wizchip_init+0x10e>
   {
      tmp = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e015      	b.n	8001538 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	4413      	add	r3, r2
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	7bbb      	ldrb	r3, [r7, #14]
 8001518:	4413      	add	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800151e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001522:	2b10      	cmp	r3, #16
 8001524:	dd02      	ble.n	800152c <wizchip_init+0xc0>
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e027      	b.n	800157c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800152c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153c:	2b07      	cmp	r3, #7
 800153e:	dde5      	ble.n	800150c <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e015      	b.n	8001572 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	3301      	adds	r3, #1
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001554:	4618      	mov	r0, r3
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	4413      	add	r3, r2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f7fe fe47 	bl	80001f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	3301      	adds	r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	2b07      	cmp	r3, #7
 8001578:	dde5      	ble.n	8001546 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b29b      	uxth	r3, r3
 8001598:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	f023 030f 	bic.w	r3, r3, #15
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80015a8:	f7fe fe24 	bl	80001f4 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e014      	b.n	80015dc <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80015b2:	7bba      	ldrb	r2, [r7, #14]
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	fa42 f303 	asr.w	r3, r2, r3
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <wizchip_clrinterrupt+0x52>
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	3301      	adds	r3, #1
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015ce:	211f      	movs	r1, #31
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe fe0f 	bl	80001f4 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	3301      	adds	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b07      	cmp	r3, #7
 80015e0:	d9e7      	bls.n	80015b2 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80015fe:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8001602:	f7fe fdab 	bl	800015c <WIZCHIP_READ>
 8001606:	4603      	mov	r3, r0
 8001608:	f023 030f 	bic.w	r3, r3, #15
 800160c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800160e:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8001612:	f7fe fda3 	bl	800015c <WIZCHIP_READ>
 8001616:	4603      	mov	r3, r0
 8001618:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b29a      	uxth	r2, r3
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	b29b      	uxth	r3, r3
 8001628:	4413      	add	r3, r2
 800162a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800162c:	88bb      	ldrh	r3, [r7, #4]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	b29b      	uxth	r3, r3
 800164a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	4619      	mov	r1, r3
 8001650:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001654:	f7fe fdce 	bl	80001f4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001658:	7bbb      	ldrb	r3, [r7, #14]
 800165a:	4619      	mov	r1, r3
 800165c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001660:	f7fe fdc8 	bl	80001f4 <WIZCHIP_WRITE>
#endif   
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800167e:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001682:	f7fe fd6b 	bl	800015c <WIZCHIP_READ>
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800168a:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800168e:	f7fe fd65 	bl	800015c <WIZCHIP_READ>
 8001692:	4603      	mov	r3, r0
 8001694:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800169a:	88bb      	ldrh	r3, [r7, #4]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b29a      	uxth	r2, r3
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80016a8:	88bb      	ldrh	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80016b8:	2300      	movs	r3, #0
 80016ba:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80016bc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016c0:	f7fe fd4c 	bl	800015c <WIZCHIP_READ>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80016ce:	2301      	movs	r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80016e8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016ec:	f7fe fd36 	bl	800015c <WIZCHIP_READ>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016f6:	2b30      	cmp	r3, #48	@ 0x30
 80016f8:	d102      	bne.n	8001700 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e001      	b.n	8001704 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8001700:	2300      	movs	r3, #0
 8001702:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8001716:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800171a:	f7fe fd1f 	bl	800015c <WIZCHIP_READ>
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001728:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001732:	f7fe fd5f 	bl	80001f4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8001736:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800173a:	f7fe fd0f 	bl	800015c <WIZCHIP_READ>
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001748:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001752:	f7fe fd4f 	bl	80001f4 <WIZCHIP_WRITE>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d104      	bne.n	800177c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	e003      	b.n	8001784 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001782:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d104      	bne.n	8001796 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e019      	b.n	80017ca <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	78db      	ldrb	r3, [r3, #3]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10d      	bne.n	80017ba <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	789b      	ldrb	r3, [r3, #2]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d104      	bne.n	80017b0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	f043 0318 	orr.w	r3, r3, #24
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e00c      	b.n	80017ca <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	e007      	b.n	80017ca <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	789b      	ldrb	r3, [r3, #2]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d103      	bne.n	80017ca <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017d2:	f7fe fd0f 	bl	80001f4 <WIZCHIP_WRITE>
   wizphy_reset();
 80017d6:	f7ff ff9b 	bl	8001710 <wizphy_reset>
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80017f0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017f4:	f7fe fcb2 	bl	800015c <WIZCHIP_READ>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	119b      	asrs	r3, r3, #6
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001812:	2b20      	cmp	r3, #32
 8001814:	d001      	beq.n	800181a <wizphy_getphyconf+0x36>
 8001816:	2b38      	cmp	r3, #56	@ 0x38
 8001818:	d103      	bne.n	8001822 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	705a      	strb	r2, [r3, #1]
         break;
 8001820:	e003      	b.n	800182a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	705a      	strb	r2, [r3, #1]
         break;
 8001828:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001830:	3b10      	subs	r3, #16
 8001832:	2b10      	cmp	r3, #16
 8001834:	bf8c      	ite	hi
 8001836:	2201      	movhi	r2, #1
 8001838:	2200      	movls	r2, #0
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	2a00      	cmp	r2, #0
 800183e:	d10f      	bne.n	8001860 <wizphy_getphyconf+0x7c>
 8001840:	4a1b      	ldr	r2, [pc, #108]	@ (80018b0 <wizphy_getphyconf+0xcc>)
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf14      	ite	ne
 800184e:	2301      	movne	r3, #1
 8001850:	2300      	moveq	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	709a      	strb	r2, [r3, #2]
         break;
 800185e:	e003      	b.n	8001868 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	709a      	strb	r2, [r3, #2]
         break;
 8001866:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800186e:	3b08      	subs	r3, #8
 8001870:	2b18      	cmp	r3, #24
 8001872:	bf8c      	ite	hi
 8001874:	2201      	movhi	r2, #1
 8001876:	2200      	movls	r2, #0
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	2a00      	cmp	r2, #0
 800187c:	d10f      	bne.n	800189e <wizphy_getphyconf+0xba>
 800187e:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <wizphy_getphyconf+0xd0>)
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf14      	ite	ne
 800188c:	2301      	movne	r3, #1
 800188e:	2300      	moveq	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	70da      	strb	r2, [r3, #3]
         break;
 800189c:	e003      	b.n	80018a6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	70da      	strb	r2, [r3, #3]
         break;
 80018a4:	bf00      	nop
   }
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	00010101 	.word	0x00010101
 80018b4:	01010001 	.word	0x01010001

080018b8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80018c6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018ca:	f7fe fc47 	bl	800015c <WIZCHIP_READ>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <wizphy_setphypmode+0x2a>
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	e030      	b.n	8001944 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80018e8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d104      	bne.n	80018fa <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e003      	b.n	8001902 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001900:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800190a:	f7fe fc73 	bl	80001f4 <WIZCHIP_WRITE>
   wizphy_reset();
 800190e:	f7ff feff 	bl	8001710 <wizphy_reset>
   tmp = getPHYCFGR();
 8001912:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001916:	f7fe fc21 	bl	800015c <WIZCHIP_READ>
 800191a:	4603      	mov	r3, r0
 800191c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d106      	bne.n	8001932 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <wizphy_setphypmode+0x88>
 800192e:	2300      	movs	r3, #0
 8001930:	e008      	b.n	8001944 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <wizphy_setphypmode+0x88>
 800193c:	2300      	movs	r3, #0
 800193e:	e001      	b.n	8001944 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2206      	movs	r2, #6
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800195e:	f7fe fcf7 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	330e      	adds	r3, #14
 8001966:	2204      	movs	r2, #4
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800196e:	f7fe fcef 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	330a      	adds	r3, #10
 8001976:	2204      	movs	r2, #4
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800197e:	f7fe fce7 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3306      	adds	r3, #6
 8001986:	2204      	movs	r2, #4
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800198e:	f7fe fcdf 	bl	8000350 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7c9a      	ldrb	r2, [r3, #18]
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <wizchip_setnetinfo+0x78>)
 8001998:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7cda      	ldrb	r2, [r3, #19]
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <wizchip_setnetinfo+0x78>)
 80019a0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7d1a      	ldrb	r2, [r3, #20]
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <wizchip_setnetinfo+0x78>)
 80019a8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7d5a      	ldrb	r2, [r3, #21]
 80019ae:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <wizchip_setnetinfo+0x78>)
 80019b0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7d9a      	ldrb	r2, [r3, #22]
 80019b6:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <wizchip_setnetinfo+0x7c>)
 80019b8:	701a      	strb	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000007c 	.word	0x2000007c
 80019c8:	20000080 	.word	0x20000080

080019cc <csLOW>:
#include "main.h"
#include "W25Qxx.h"

uint8_t tempBytes[4];
void csLOW(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019d6:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <csLOW+0x14>)
 80019d8:	f005 fa7f 	bl	8006eda <HAL_GPIO_WritePin>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40010c00 	.word	0x40010c00

080019e4 <csHIGH>:
void csHIGH(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ee:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <csHIGH+0x14>)
 80019f0:	f005 fa73 	bl	8006eda <HAL_GPIO_WritePin>
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40010c00 	.word	0x40010c00

080019fc <W25Q_delay>:
void W25Q_delay(uint32_t time)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f003 fc09 	bl	800521c <HAL_Delay>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <SPI_Write>:
void SPI_Write(uint8_t *data, uint16_t len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4803      	ldr	r0, [pc, #12]	@ (8001a38 <SPI_Write+0x24>)
 8001a2a:	f005 ff89 	bl	8007940 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&W25Q_SPI, data, len);
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000130 	.word	0x20000130

08001a3c <SPI_Read>:
void SPI_Read(uint8_t *data, uint16_t len)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <SPI_Read+0x24>)
 8001a52:	f006 f8b9 	bl	8007bc8 <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&W25Q_SPI, data, len);
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000130 	.word	0x20000130

08001a64 <W25Q_WaitForWriteEnd>:
//	uint8_t	ret;
//	HAL_SPI_TransmitReceive(&W25Q_SPI,&Data,&ret,1,100);
//	return ret;
//}
void W25Q_WaitForWriteEnd(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
	uint8_t w25q_stt;
	uint8_t tData = 0x05;
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	71bb      	strb	r3, [r7, #6]
	W25Q_delay(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f7ff ffc4 	bl	80019fc <W25Q_delay>

	csLOW();
 8001a74:	f7ff ffaa 	bl	80019cc <csLOW>
	HAL_SPI_Transmit(&W25Q_SPI, &tData, 1, 1000);
 8001a78:	1db9      	adds	r1, r7, #6
 8001a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7e:	2201      	movs	r2, #1
 8001a80:	480b      	ldr	r0, [pc, #44]	@ (8001ab0 <W25Q_WaitForWriteEnd+0x4c>)
 8001a82:	f005 ff5d 	bl	8007940 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&W25Q_SPI, &tData, 1);
	do
	{
		HAL_SPI_Receive(&W25Q_SPI, &w25q_stt, 1, 1000);
 8001a86:	1df9      	adds	r1, r7, #7
 8001a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <W25Q_WaitForWriteEnd+0x4c>)
 8001a90:	f006 f89a 	bl	8007bc8 <HAL_SPI_Receive>
//		HAL_SPI_Receive_DMA(&W25Q_SPI, &w25q_stt, 1);
		W25Q_delay(1);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff ffb1 	bl	80019fc <W25Q_delay>
	}
	while ((w25q_stt & 0x01) == 0x01);
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <W25Q_WaitForWriteEnd+0x22>
	csHIGH();
 8001aa4:	f7ff ff9e 	bl	80019e4 <csHIGH>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000130 	.word	0x20000130

08001ab4 <W25Q_Reset>:
void W25Q_Reset (void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x66; //  enable reset
 8001aba:	2366      	movs	r3, #102	@ 0x66
 8001abc:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99; //reset
 8001abe:	2399      	movs	r3, #153	@ 0x99
 8001ac0:	717b      	strb	r3, [r7, #5]
	csLOW();
 8001ac2:	f7ff ff83 	bl	80019cc <csLOW>
	HAL_SPI_Transmit(&W25Q_SPI, tData, 2, 1000);
 8001ac6:	1d39      	adds	r1, r7, #4
 8001ac8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001acc:	2202      	movs	r2, #2
 8001ace:	4804      	ldr	r0, [pc, #16]	@ (8001ae0 <W25Q_Reset+0x2c>)
 8001ad0:	f005 ff36 	bl	8007940 <HAL_SPI_Transmit>
	csHIGH();
 8001ad4:	f7ff ff86 	bl	80019e4 <csHIGH>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000130 	.word	0x20000130

08001ae4 <W25Q_FastRead>:
	}
	SPI_Read(rData, size);
	csHIGH();
}
void W25Q_FastRead(uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	460b      	mov	r3, r1
 8001af2:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	4413      	add	r3, r2
 8001afc:	61fb      	str	r3, [r7, #28]
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x0B;// enable fast read
 8001afe:	230b      	movs	r3, #11
 8001b00:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	763b      	strb	r3, [r7, #24]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;// LSB addr;
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		tData[5] = 0;
	}
	csLOW();
 8001b1c:	f7ff ff56 	bl	80019cc <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 5);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2105      	movs	r1, #5
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff74 	bl	8001a14 <SPI_Write>
	} else
	{
		SPI_Write(tData, 6);
	}
	SPI_Read(rData, size);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4619      	mov	r1, r3
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f7ff ff82 	bl	8001a3c <SPI_Read>
	csHIGH();
 8001b38:	f7ff ff54 	bl	80019e4 <csHIGH>
}
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <W25Q_FastRead_address>:

void W25Q_FastRead_address(uint32_t memAddr, uint32_t size, uint8_t *rData)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
	uint8_t tData[6];
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x0B;// enable fast read
 8001b50:	230b      	movs	r3, #11
 8001b52:	743b      	strb	r3, [r7, #16]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	747b      	strb	r3, [r7, #17]
		tData[2] = (memAddr>>8)&0xFF;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	74bb      	strb	r3, [r7, #18]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	74fb      	strb	r3, [r7, #19]
		tData[4] = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	753b      	strb	r3, [r7, #20]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;// LSB addr;
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		tData[5] = 0;
	}
	csLOW();
 8001b6e:	f7ff ff2d 	bl	80019cc <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 5);
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	2105      	movs	r1, #5
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff4b 	bl	8001a14 <SPI_Write>
	} else
	{
		SPI_Write(tData, 6);
	}
	SPI_Read(rData, size);
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff59 	bl	8001a3c <SPI_Read>
	csHIGH();
 8001b8a:	f7ff ff2b 	bl	80019e4 <csHIGH>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <write_enable>:


void write_enable(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06; // enable write
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001ba0:	f7ff ff14 	bl	80019cc <csLOW>
	SPI_Write(&tData, 1);
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff33 	bl	8001a14 <SPI_Write>
	csHIGH();
 8001bae:	f7ff ff19 	bl	80019e4 <csHIGH>
	W25Q_delay(1);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7ff ff22 	bl	80019fc <W25Q_delay>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <write_disable>:
void write_disable(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04; // disable write
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001bca:	f7ff feff 	bl	80019cc <csLOW>
	SPI_Write(&tData, 1);
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff1e 	bl	8001a14 <SPI_Write>
	csHIGH();
 8001bd8:	f7ff ff04 	bl	80019e4 <csHIGH>
	W25Q_delay(1);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff ff0d 	bl	80019fc <W25Q_delay>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <W25Q_EraseChip>:
{
	if ((size+offset)<4096) return size;
	else return 4096-offset;
}
void W25Q_EraseChip(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
	uint8_t tData = 0xC7;
 8001bf0:	23c7      	movs	r3, #199	@ 0xc7
 8001bf2:	71fb      	strb	r3, [r7, #7]
	write_enable();
 8001bf4:	f7ff ffcf 	bl	8001b96 <write_enable>
	csLOW();
 8001bf8:	f7ff fee8 	bl	80019cc <csLOW>
	SPI_Write(&tData, 1);
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	2101      	movs	r1, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff07 	bl	8001a14 <SPI_Write>
	csHIGH();
 8001c06:	f7ff feed 	bl	80019e4 <csHIGH>
	W25Q_WaitForWriteEnd();
 8001c0a:	f7ff ff2b 	bl	8001a64 <W25Q_WaitForWriteEnd>
	W25Q_delay(5);
 8001c0e:	2005      	movs	r0, #5
 8001c10:	f7ff fef4 	bl	80019fc <W25Q_delay>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <W25Q_Erase_Sector>:
void W25Q_Erase_Sector (uint16_t numsector)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256; // mỗi sector có 16 page * 256 byte
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	031b      	lsls	r3, r3, #12
 8001c2a:	617b      	str	r3, [r7, #20]
	W25Q_WaitForWriteEnd();
 8001c2c:	f7ff ff1a 	bl	8001a64 <W25Q_WaitForWriteEnd>
	write_enable();
 8001c30:	f7ff ffb1 	bl	8001b96 <write_enable>
	if (numBLOCK<512)
	{
		tData[0] = 0x20;//Erase sector
 8001c34:	2320      	movs	r3, #32
 8001c36:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	0c1b      	lsrs	r3, r3, #16
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	73fb      	strb	r3, [r7, #15]
		csLOW();
 8001c4e:	f7ff febd 	bl	80019cc <csLOW>
		SPI_Write(tData, 4);
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2104      	movs	r1, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fedb 	bl	8001a14 <SPI_Write>
		csHIGH();
 8001c5e:	f7ff fec1 	bl	80019e4 <csHIGH>
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		csLOW();
		SPI_Write(tData, 5);
		csHIGH();
	}
	W25Q_WaitForWriteEnd();
 8001c62:	f7ff feff 	bl	8001a64 <W25Q_WaitForWriteEnd>
	write_disable();
 8001c66:	f7ff ffab 	bl	8001bc0 <write_disable>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <W25Q_Read_Byte>:
		dataindx = dataindx + bytesRemaining;
		size = size - bytesRemaining;
	}
}
uint8_t W25Q_Read_Byte(uint32_t Addr)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
	uint8_t tData[5];
	uint8_t rData;
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x03;// enable read
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	743b      	strb	r3, [r7, #16]
		tData[1] = (Addr>>16)&0xFF;// MSB addr
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	747b      	strb	r3, [r7, #17]
		tData[2] = (Addr>>8)&0xFF;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	74bb      	strb	r3, [r7, #18]
		tData[3] = (Addr>>0)&0xFF;// LSB addr
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	74fb      	strb	r3, [r7, #19]
		tData[1] = (Addr>>24)&0xFF;// MSB addr
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;// LSB addr;
		tData[4] = (Addr>>0)&0xFF;// LSB addr
	}
	csLOW();
 8001c94:	f7ff fe9a 	bl	80019cc <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 4);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff feb8 	bl	8001a14 <SPI_Write>
	} else
	{
		SPI_Write(tData, 5);
	}
	SPI_Read(&rData, 1);
 8001ca4:	f107 030f 	add.w	r3, r7, #15
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fec6 	bl	8001a3c <SPI_Read>
	csHIGH();
 8001cb0:	f7ff fe98 	bl	80019e4 <csHIGH>
	return rData;
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <W25Q_Write_Nbytes>:
		W25Q_WaitForWriteEnd();
		write_disable();
	}
}
void W25Q_Write_Nbytes(uint32_t Addr, uint8_t *data, uint32_t len)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b0c8      	sub	sp, #288	@ 0x120
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cc8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ccc:	6018      	str	r0, [r3, #0]
 8001cce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cd2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001cd6:	6019      	str	r1, [r3, #0]
 8001cd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cdc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ce0:	601a      	str	r2, [r3, #0]
	uint8_t tData[266];
	uint8_t indx;
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x02;// enable read
 8001ce2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ce6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cea:	2202      	movs	r2, #2
 8001cec:	701a      	strb	r2, [r3, #0]
		tData[1] = (Addr>>16)&0xFF;// MSB addr
 8001cee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cf2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d04:	705a      	strb	r2, [r3, #1]
		tData[2] = (Addr>>8)&0xFF;
 8001d06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d1c:	709a      	strb	r2, [r3, #2]
		tData[3] = (Addr>>0)&0xFF;// LSB addr
 8001d1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d2e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d32:	70da      	strb	r2, [r3, #3]
		indx = 4;
 8001d34:	2304      	movs	r3, #4
 8001d36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;// LSB addr;
		tData[4] = (Addr>>0)&0xFF;// LSB addr
		indx = 5;
	}
	uint16_t bytestosend = len + indx;
 8001d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d44:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
	for (uint16_t i=0; i<len; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8001d58:	e018      	b.n	8001d8c <W25Q_Write_Nbytes+0xce>
	{
		tData[indx++] = data[i];
 8001d5a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d5e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d62:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	441a      	add	r2, r3
 8001d6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001d6e:	1c59      	adds	r1, r3, #1
 8001d70:	f887 111f 	strb.w	r1, [r7, #287]	@ 0x11f
 8001d74:	4619      	mov	r1, r3
 8001d76:	7812      	ldrb	r2, [r2, #0]
 8001d78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d80:	545a      	strb	r2, [r3, r1]
	for (uint16_t i=0; i<len; i++)
 8001d82:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d86:	3301      	adds	r3, #1
 8001d88:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8001d8c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d90:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d94:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d8dd      	bhi.n	8001d5a <W25Q_Write_Nbytes+0x9c>
	}
	if (W25Q_Read_Byte(Addr) == 0xFF)
 8001d9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001da2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	f7ff ff63 	bl	8001c72 <W25Q_Read_Byte>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2bff      	cmp	r3, #255	@ 0xff
 8001db0:	d12b      	bne.n	8001e0a <W25Q_Write_Nbytes+0x14c>
	{
		write_enable();
 8001db2:	f7ff fef0 	bl	8001b96 <write_enable>
		if (bytestosend > 250)
 8001db6:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8001dba:	2bfa      	cmp	r3, #250	@ 0xfa
 8001dbc:	d915      	bls.n	8001dea <W25Q_Write_Nbytes+0x12c>
		{
			csLOW();
 8001dbe:	f7ff fe05 	bl	80019cc <csLOW>
			SPI_Write(tData, 100);
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	2164      	movs	r1, #100	@ 0x64
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fe23 	bl	8001a14 <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	3364      	adds	r3, #100	@ 0x64
 8001dd4:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8001dd8:	3a64      	subs	r2, #100	@ 0x64
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fe18 	bl	8001a14 <SPI_Write>
			csHIGH();
 8001de4:	f7ff fdfe 	bl	80019e4 <csHIGH>
 8001de8:	e00b      	b.n	8001e02 <W25Q_Write_Nbytes+0x144>
		} else
		{
			csLOW();
 8001dea:	f7ff fdef 	bl	80019cc <csLOW>
			SPI_Write(tData, bytestosend);
 8001dee:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fe0b 	bl	8001a14 <SPI_Write>
			csHIGH();
 8001dfe:	f7ff fdf1 	bl	80019e4 <csHIGH>
		}
//		W25Q_delay(5);
		W25Q_WaitForWriteEnd();
 8001e02:	f7ff fe2f 	bl	8001a64 <W25Q_WaitForWriteEnd>
		write_disable();
 8001e06:	f7ff fedb 	bl	8001bc0 <write_disable>
	}
}
 8001e0a:	bf00      	nop
 8001e0c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == huart1.Instance)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b3d      	ldr	r3, [pc, #244]	@ (8001f1c <HAL_UARTEx_RxEventCallback+0x108>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d165      	bne.n	8001ef8 <HAL_UARTEx_RxEventCallback+0xe4>
	{
		heardbit_REB = HAL_GetTick(); // Heard bit from REB
 8001e2c:	f003 f9ec 	bl	8005208 <HAL_GetTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a3b      	ldr	r2, [pc, #236]	@ (8001f20 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001e34:	6013      	str	r3, [r2, #0]
		switch (uart_data[0])
 8001e36:	4b3b      	ldr	r3, [pc, #236]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b43      	cmp	r3, #67	@ 0x43
 8001e3c:	d03d      	beq.n	8001eba <HAL_UARTEx_RxEventCallback+0xa6>
 8001e3e:	2b44      	cmp	r3, #68	@ 0x44
 8001e40:	d15a      	bne.n	8001ef8 <HAL_UARTEx_RxEventCallback+0xe4>
		{
		case 0x44: //Data: D
			wcode = uart_data[1]<<24|uart_data[2]<<16|uart_data[3]<<8|uart_data[4];
 8001e42:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	061a      	lsls	r2, r3, #24
 8001e48:	4b36      	ldr	r3, [pc, #216]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001e4a:	789b      	ldrb	r3, [r3, #2]
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	4b34      	ldr	r3, [pc, #208]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001e52:	78db      	ldrb	r3, [r3, #3]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4313      	orrs	r3, r2
 8001e58:	4a32      	ldr	r2, [pc, #200]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001e5a:	7912      	ldrb	r2, [r2, #4]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <HAL_UARTEx_RxEventCallback+0x114>)
 8001e62:	601a      	str	r2, [r3, #0]
			if (!write_mode && !write_mode_somecard && !write_card_by_hand)
 8001e64:	4b31      	ldr	r3, [pc, #196]	@ (8001f2c <HAL_UARTEx_RxEventCallback+0x118>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d01b      	beq.n	8001eaa <HAL_UARTEx_RxEventCallback+0x96>
 8001e72:	4b2f      	ldr	r3, [pc, #188]	@ (8001f30 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d014      	beq.n	8001eaa <HAL_UARTEx_RxEventCallback+0x96>
 8001e80:	4b2c      	ldr	r3, [pc, #176]	@ (8001f34 <HAL_UARTEx_RxEventCallback+0x120>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f083 0301 	eor.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00d      	beq.n	8001eaa <HAL_UARTEx_RxEventCallback+0x96>
			{
				sendData_eth("D", wcode);
 8001e8e:	4b26      	ldr	r3, [pc, #152]	@ (8001f28 <HAL_UARTEx_RxEventCallback+0x114>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4828      	ldr	r0, [pc, #160]	@ (8001f38 <HAL_UARTEx_RxEventCallback+0x124>)
 8001e96:	f002 f8a9 	bl	8003fec <sendData_eth>
				isSendDataEth = true;
 8001e9a:	4b28      	ldr	r3, [pc, #160]	@ (8001f3c <HAL_UARTEx_RxEventCallback+0x128>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
				timeSendDataEth = HAL_GetTick();
 8001ea0:	f003 f9b2 	bl	8005208 <HAL_GetTick>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a26      	ldr	r2, [pc, #152]	@ (8001f40 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001ea8:	6013      	str	r3, [r2, #0]
			}
			if (write_card_by_hand)
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <HAL_UARTEx_RxEventCallback+0x120>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d021      	beq.n	8001ef6 <HAL_UARTEx_RxEventCallback+0xe2>
			{
				new_wcode = true;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <HAL_UARTEx_RxEventCallback+0x130>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001eb8:	e01d      	b.n	8001ef6 <HAL_UARTEx_RxEventCallback+0xe2>
		case 0x43://Comand: C
//			send_uart_to_REB = true;
			if (send_uart_to_REB)
 8001eba:	4b23      	ldr	r3, [pc, #140]	@ (8001f48 <HAL_UARTEx_RxEventCallback+0x134>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_UARTEx_RxEventCallback+0xc2>
			{
				send_uart_to_REB = false;
 8001ec2:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <HAL_UARTEx_RxEventCallback+0x134>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
				sendData_uart("I", send_uart);
 8001ec8:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <HAL_UARTEx_RxEventCallback+0x138>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4820      	ldr	r0, [pc, #128]	@ (8001f50 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001ed0:	f002 fa0e 	bl	80042f0 <sendData_uart>
 8001ed4:	e005      	b.n	8001ee2 <HAL_UARTEx_RxEventCallback+0xce>
			} else
			{
				sendData_uart("I", uart_bypass);
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <HAL_UARTEx_RxEventCallback+0x140>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	481c      	ldr	r0, [pc, #112]	@ (8001f50 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001ede:	f002 fa07 	bl	80042f0 <sendData_uart>
			}
//			time_send_uart = HAL_GetTick();
			bypass_from_REB = uart_data[4];
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001ee4:	791b      	ldrb	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf14      	ite	ne
 8001eea:	2301      	movne	r3, #1
 8001eec:	2300      	moveq	r3, #0
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_UARTEx_RxEventCallback+0x144>)
 8001ef2:	701a      	strb	r2, [r3, #0]
			break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0xe4>
			break;
 8001ef6:	bf00      	nop
		}
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 50);
 8001ef8:	2232      	movs	r2, #50	@ 0x32
 8001efa:	490a      	ldr	r1, [pc, #40]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001efc:	4807      	ldr	r0, [pc, #28]	@ (8001f1c <HAL_UARTEx_RxEventCallback+0x108>)
 8001efe:	f006 fefc 	bl	8008cfa <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001f02:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <HAL_UARTEx_RxEventCallback+0x148>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_UARTEx_RxEventCallback+0x148>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0204 	bic.w	r2, r2, #4
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000218 	.word	0x20000218
 8001f20:	200006c8 	.word	0x200006c8
 8001f24:	200002d8 	.word	0x200002d8
 8001f28:	200005a0 	.word	0x200005a0
 8001f2c:	2000073b 	.word	0x2000073b
 8001f30:	2000073a 	.word	0x2000073a
 8001f34:	20000743 	.word	0x20000743
 8001f38:	08009c4c 	.word	0x08009c4c
 8001f3c:	20000739 	.word	0x20000739
 8001f40:	200006cc 	.word	0x200006cc
 8001f44:	2000073f 	.word	0x2000073f
 8001f48:	20000747 	.word	0x20000747
 8001f4c:	20000590 	.word	0x20000590
 8001f50:	08009c50 	.word	0x08009c50
 8001f54:	20000030 	.word	0x20000030
 8001f58:	200006f4 	.word	0x200006f4
 8001f5c:	20000260 	.word	0x20000260

08001f60 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RST_Pin)
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	2b40      	cmp	r3, #64	@ 0x40
 8001f6e:	d145      	bne.n	8001ffc <HAL_GPIO_EXTI_Callback+0x9c>
	{
		HAL_Delay(20);
 8001f70:	2014      	movs	r0, #20
 8001f72:	f003 f953 	bl	800521c <HAL_Delay>
		if (HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin) == 0)
 8001f76:	2140      	movs	r1, #64	@ 0x40
 8001f78:	4822      	ldr	r0, [pc, #136]	@ (8002004 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f7a:	f004 ff97 	bl	8006eac <HAL_GPIO_ReadPin>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d13b      	bne.n	8001ffc <HAL_GPIO_EXTI_Callback+0x9c>
		{
			RST_set = true;
 8001f84:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
			RST_timer = HAL_GetTick();
 8001f8a:	f003 f93d 	bl	8005208 <HAL_GetTick>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a1e      	ldr	r2, [pc, #120]	@ (800200c <HAL_GPIO_EXTI_Callback+0xac>)
 8001f92:	6013      	str	r3, [r2, #0]
			count_RST = 2000;
 8001f94:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001f96:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001f9a:	601a      	str	r2, [r3, #0]
			while (!HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin))
 8001f9c:	e027      	b.n	8001fee <HAL_GPIO_EXTI_Callback+0x8e>
			{
				RST_timer_last = HAL_GetTick() - RST_timer;
 8001f9e:	f003 f933 	bl	8005208 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_GPIO_EXTI_Callback+0xac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	4a1a      	ldr	r2, [pc, #104]	@ (8002014 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001fac:	6013      	str	r3, [r2, #0]
//				if ((RST_timer_last > 5000) && (RST_timer_last < 10000))
//				{
//					count_RST = 500;
//				} else
				if (RST_timer_last > 10000)
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d902      	bls.n	8001fc0 <HAL_GPIO_EXTI_Callback+0x60>
				{
					count_RST = 100;
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001fbc:	2264      	movs	r2, #100	@ 0x64
 8001fbe:	601a      	str	r2, [r3, #0]
				}
				if (HAL_GetTick() - RST_timer_now > count_RST)
 8001fc0:	f003 f922 	bl	8005208 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	1ad2      	subs	r2, r2, r3
 8001fcc:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d909      	bls.n	8001fe8 <HAL_GPIO_EXTI_Callback+0x88>
				{
					RST_timer_now = HAL_GetTick();
 8001fd4:	f003 f918 	bl	8005208 <HAL_GetTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001fdc:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8001fde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fe2:	480e      	ldr	r0, [pc, #56]	@ (800201c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001fe4:	f004 ff91 	bl	8006f0a <HAL_GPIO_TogglePin>
				}
				HAL_Delay(10);
 8001fe8:	200a      	movs	r0, #10
 8001fea:	f003 f917 	bl	800521c <HAL_Delay>
			while (!HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin))
 8001fee:	2140      	movs	r1, #64	@ 0x40
 8001ff0:	4804      	ldr	r0, [pc, #16]	@ (8002004 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001ff2:	f004 ff5b 	bl	8006eac <HAL_GPIO_ReadPin>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0d0      	beq.n	8001f9e <HAL_GPIO_EXTI_Callback+0x3e>
			}
		}
	}
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40010c00 	.word	0x40010c00
 8002008:	20000745 	.word	0x20000745
 800200c:	200006d4 	.word	0x200006d4
 8002010:	200006e0 	.word	0x200006e0
 8002014:	200006dc 	.word	0x200006dc
 8002018:	200006d8 	.word	0x200006d8
 800201c:	40011000 	.word	0x40011000

08002020 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af02      	add	r7, sp, #8
 8002026:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b49      	ldr	r3, [pc, #292]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d169      	bne.n	8002108 <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		// calculator data
		if (counter_start < time_delay)
 8002034:	4b48      	ldr	r3, [pc, #288]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	4b48      	ldr	r3, [pc, #288]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d205      	bcs.n	800204c <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			counter_start++;
 8002040:	4b45      	ldr	r3, [pc, #276]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b43      	ldr	r3, [pc, #268]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800204a:	701a      	strb	r2, [r3, #0]
		}
		if (write_mode || write_mode_somecard || unlock_fire || bypass_from_Eth || bypass_from_REB || !REB_connected || !HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin))
 800204c:	4b44      	ldr	r3, [pc, #272]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d11d      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002054:	4b43      	ldr	r3, [pc, #268]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d119      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 800205c:	4b42      	ldr	r3, [pc, #264]	@ (8002168 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d115      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002064:	4b41      	ldr	r3, [pc, #260]	@ (800216c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d111      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 800206c:	4b40      	ldr	r3, [pc, #256]	@ (8002170 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10d      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002074:	4b3f      	ldr	r3, [pc, #252]	@ (8002174 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002082:	2104      	movs	r1, #4
 8002084:	483c      	ldr	r0, [pc, #240]	@ (8002178 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002086:	f004 ff11 	bl	8006eac <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d121      	bne.n	80020d4 <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
			data_MC2B[0] = 1;
 8002090:	4b3a      	ldr	r3, [pc, #232]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
			data_MC2B[1] = 0;
 8002096:	4b39      	ldr	r3, [pc, #228]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002098:	2200      	movs	r2, #0
 800209a:	705a      	strb	r2, [r3, #1]
			data_MC2B[2] = 0;
 800209c:	4b37      	ldr	r3, [pc, #220]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	709a      	strb	r2, [r3, #2]
			data_MC2B[3] = 0;
 80020a2:	4b36      	ldr	r3, [pc, #216]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	70da      	strb	r2, [r3, #3]
			data_MC2B[4] = 0;
 80020a8:	4b34      	ldr	r3, [pc, #208]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	711a      	strb	r2, [r3, #4]
			data_MC2B[5] = 0;
 80020ae:	4b33      	ldr	r3, [pc, #204]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	715a      	strb	r2, [r3, #5]
			data_MC2B[6] = 0;
 80020b4:	4b31      	ldr	r3, [pc, #196]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	719a      	strb	r2, [r3, #6]
			data_MC2B[7] = 0;
 80020ba:	4b30      	ldr	r3, [pc, #192]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	71da      	strb	r2, [r3, #7]
			HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, 1);
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020c6:	482e      	ldr	r0, [pc, #184]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80020c8:	f004 ff07 	bl	8006eda <HAL_GPIO_WritePin>
//			sendData_uart("I", 2);
			uart_bypass = 2;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020ce:	2202      	movs	r2, #2
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e013      	b.n	80020fc <HAL_TIM_PeriodElapsedCallback+0xdc>
//			send_uart_to_REB = true;
		} else
		{
			calculate_data_can(x, x_timer, data_MC2B, lock_default, time_delay, &counter_start);
 80020d4:	4b21      	ldr	r3, [pc, #132]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80020da:	9201      	str	r2, [sp, #4]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4b2a      	ldr	r3, [pc, #168]	@ (8002188 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80020e0:	4a26      	ldr	r2, [pc, #152]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020e2:	492a      	ldr	r1, [pc, #168]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80020e4:	482a      	ldr	r0, [pc, #168]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80020e6:	f002 fb42 	bl	800476e <calculate_data_can>
			HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020f0:	4823      	ldr	r0, [pc, #140]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80020f2:	f004 fef2 	bl	8006eda <HAL_GPIO_WritePin>
			uart_bypass = 3;
 80020f6:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020f8:	2203      	movs	r2, #3
 80020fa:	701a      	strb	r2, [r3, #0]
	//		send_uart_to_REB = true;
		}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader_MC2B, data_MC2B, &TxMailbox);
 80020fc:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80020fe:	4a1f      	ldr	r2, [pc, #124]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002100:	4925      	ldr	r1, [pc, #148]	@ (8002198 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002102:	4826      	ldr	r0, [pc, #152]	@ (800219c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002104:	f003 fad4 	bl	80056b0 <HAL_CAN_AddTxMessage>
//		sendData_uart("I", 3);
	}
	if (htim->Instance == htim3.Instance)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d11a      	bne.n	800214a <HAL_TIM_PeriodElapsedCallback+0x12a>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8002114:	4823      	ldr	r0, [pc, #140]	@ (80021a4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002116:	f004 ff6d 	bl	8006ff4 <HAL_IWDG_Refresh>
		if (HAL_GetTick() - timeBreak > 300)
 800211a:	f003 f875 	bl	8005208 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800212a:	d902      	bls.n	8002132 <HAL_TIM_PeriodElapsedCallback+0x112>
		{
			g_uart_request_exit = 1;
 800212c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
		}
		if (!RST_set)
 8002132:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <HAL_TIM_PeriodElapsedCallback+0x12a>
		{
			HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8002140:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002144:	480e      	ldr	r0, [pc, #56]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002146:	f004 fee0 	bl	8006f0a <HAL_GPIO_TogglePin>
//			wcode = 0x22222255;
//			isSendDataEth = true;
//			timeSendDataEth = HAL_GetTick();
//		}
	}
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000188 	.word	0x20000188
 8002158:	20000586 	.word	0x20000586
 800215c:	20000518 	.word	0x20000518
 8002160:	2000073b 	.word	0x2000073b
 8002164:	2000073a 	.word	0x2000073a
 8002168:	20000746 	.word	0x20000746
 800216c:	200006f5 	.word	0x200006f5
 8002170:	200006f4 	.word	0x200006f4
 8002174:	20000031 	.word	0x20000031
 8002178:	40010800 	.word	0x40010800
 800217c:	2000054c 	.word	0x2000054c
 8002180:	40011000 	.word	0x40011000
 8002184:	20000030 	.word	0x20000030
 8002188:	2000051c 	.word	0x2000051c
 800218c:	200005a8 	.word	0x200005a8
 8002190:	200006f8 	.word	0x200006f8
 8002194:	200005a4 	.word	0x200005a4
 8002198:	200002c0 	.word	0x200002c0
 800219c:	200000a4 	.word	0x200000a4
 80021a0:	200001d0 	.word	0x200001d0
 80021a4:	200000cc 	.word	0x200000cc
 80021a8:	200006d0 	.word	0x200006d0
 80021ac:	20000070 	.word	0x20000070
 80021b0:	20000745 	.word	0x20000745

080021b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80021be:	4a13      	ldr	r2, [pc, #76]	@ (800220c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80021c0:	2100      	movs	r1, #0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f003 fbbb 	bl	800593e <HAL_CAN_GetRxMessage>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
	    Error_Handler();
 80021ce:	f002 fd59 	bl	8004c84 <Error_Handler>
	}
	if (RxHeader.StdId == 0x740 && RxData[2] == 0x48)
 80021d2:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 80021da:	d110      	bne.n	80021fe <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 80021dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80021de:	789b      	ldrb	r3, [r3, #2]
 80021e0:	2b48      	cmp	r3, #72	@ 0x48
 80021e2:	d10c      	bne.n	80021fe <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	{
		if ((RxData[4] & 0x40) == 0x40)
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		{
			unlock_fire = true;
 80021f0:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
		} else
		{
			unlock_fire = false;
		}
	}
}
 80021f6:	e002      	b.n	80021fe <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
			unlock_fire = false;
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000588 	.word	0x20000588
 800220c:	200002a4 	.word	0x200002a4
 8002210:	20000746 	.word	0x20000746

08002214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002216:	b0b5      	sub	sp, #212	@ 0xd4
 8002218:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800221a:	f002 ff9d 	bl	8005158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800221e:	f001 fc1b 	bl	8003a58 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_DBGMCU_FREEZE_IWDG();
 8002222:	4b96      	ldr	r3, [pc, #600]	@ (800247c <main+0x268>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a95      	ldr	r2, [pc, #596]	@ (800247c <main+0x268>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222c:	6053      	str	r3, [r2, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222e:	f001 fdfb 	bl	8003e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8002232:	f001 fddb 	bl	8003dec <MX_DMA_Init>
  MX_CAN_Init();
 8002236:	f001 fc57 	bl	8003ae8 <MX_CAN_Init>
  MX_SPI1_Init();
 800223a:	f001 fca5 	bl	8003b88 <MX_SPI1_Init>
  MX_SPI2_Init();
 800223e:	f001 fcd9 	bl	8003bf4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002242:	f001 fda9 	bl	8003d98 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002246:	f001 fd59 	bl	8003cfc <MX_TIM3_Init>
  MX_IWDG_Init();
 800224a:	f001 fc83 	bl	8003b54 <MX_IWDG_Init>
  MX_TIM2_Init();
 800224e:	f001 fd07 	bl	8003c60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8002252:	488b      	ldr	r0, [pc, #556]	@ (8002480 <main+0x26c>)
 8002254:	f006 f8d4 	bl	8008400 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 50);
 8002258:	2232      	movs	r2, #50	@ 0x32
 800225a:	498a      	ldr	r1, [pc, #552]	@ (8002484 <main+0x270>)
 800225c:	488a      	ldr	r0, [pc, #552]	@ (8002488 <main+0x274>)
 800225e:	f006 fd4c 	bl	8008cfa <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002262:	4b8a      	ldr	r3, [pc, #552]	@ (800248c <main+0x278>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b88      	ldr	r3, [pc, #544]	@ (800248c <main+0x278>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0204 	bic.w	r2, r2, #4
 8002270:	601a      	str	r2, [r3, #0]
  TxHeader_MC2B.DLC = 8;
 8002272:	4b87      	ldr	r3, [pc, #540]	@ (8002490 <main+0x27c>)
 8002274:	2208      	movs	r2, #8
 8002276:	611a      	str	r2, [r3, #16]
  TxHeader_MC2B.ExtId = 0x47FF;
 8002278:	4b85      	ldr	r3, [pc, #532]	@ (8002490 <main+0x27c>)
 800227a:	f244 72ff 	movw	r2, #18431	@ 0x47ff
 800227e:	605a      	str	r2, [r3, #4]
  TxHeader_MC2B.IDE = CAN_ID_EXT;
 8002280:	4b83      	ldr	r3, [pc, #524]	@ (8002490 <main+0x27c>)
 8002282:	2204      	movs	r2, #4
 8002284:	609a      	str	r2, [r3, #8]
  TxHeader_MC2B.RTR = CAN_RTR_DATA;
 8002286:	4b82      	ldr	r3, [pc, #520]	@ (8002490 <main+0x27c>)
 8002288:	2200      	movs	r2, #0
 800228a:	60da      	str	r2, [r3, #12]
  TxHeader_MC2B.StdId = 0;
 800228c:	4b80      	ldr	r3, [pc, #512]	@ (8002490 <main+0x27c>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
  TxHeader_MC2B.TransmitGlobalTime = DISABLE;
 8002292:	4b7f      	ldr	r3, [pc, #508]	@ (8002490 <main+0x27c>)
 8002294:	2200      	movs	r2, #0
 8002296:	751a      	strb	r2, [r3, #20]

  flashRCB.TypeErase = FLASH_TYPEERASE_PAGES;
 8002298:	4b7e      	ldr	r3, [pc, #504]	@ (8002494 <main+0x280>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
  flashRCB.Banks = FLASH_BANK_1;
 800229e:	4b7d      	ldr	r3, [pc, #500]	@ (8002494 <main+0x280>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	605a      	str	r2, [r3, #4]
  flashRCB.PageAddress =  0x0800FC00;
 80022a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002494 <main+0x280>)
 80022a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002498 <main+0x284>)
 80022a8:	609a      	str	r2, [r3, #8]
  flashRCB.NbPages = 1;
 80022aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002494 <main+0x280>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	60da      	str	r2, [r3, #12]
  flashTime.TypeErase = FLASH_TYPEERASE_PAGES;
 80022b0:	4b7a      	ldr	r3, [pc, #488]	@ (800249c <main+0x288>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
  flashTime.Banks = FLASH_BANK_1;
 80022b6:	4b79      	ldr	r3, [pc, #484]	@ (800249c <main+0x288>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	605a      	str	r2, [r3, #4]
  flashTime.PageAddress =  0x0800F800;
 80022bc:	4b77      	ldr	r3, [pc, #476]	@ (800249c <main+0x288>)
 80022be:	4a78      	ldr	r2, [pc, #480]	@ (80024a0 <main+0x28c>)
 80022c0:	609a      	str	r2, [r3, #8]
  flashTime.NbPages = 1;
 80022c2:	4b76      	ldr	r3, [pc, #472]	@ (800249c <main+0x288>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	60da      	str	r2, [r3, #12]
  ip1 = *(uint32_t *)(0x0800FC00);
 80022c8:	4b73      	ldr	r3, [pc, #460]	@ (8002498 <main+0x284>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b75      	ldr	r3, [pc, #468]	@ (80024a4 <main+0x290>)
 80022d0:	701a      	strb	r2, [r3, #0]
  ip2 = *(uint32_t *)(0x0800FC04);
 80022d2:	4b75      	ldr	r3, [pc, #468]	@ (80024a8 <main+0x294>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	4b74      	ldr	r3, [pc, #464]	@ (80024ac <main+0x298>)
 80022da:	701a      	strb	r2, [r3, #0]
  ip3 = *(uint32_t *)(0x0800FC08);
 80022dc:	4b74      	ldr	r3, [pc, #464]	@ (80024b0 <main+0x29c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b74      	ldr	r3, [pc, #464]	@ (80024b4 <main+0x2a0>)
 80022e4:	701a      	strb	r2, [r3, #0]
  ip4 = *(uint32_t *)(0x0800FC0C);
 80022e6:	4b74      	ldr	r3, [pc, #464]	@ (80024b8 <main+0x2a4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b73      	ldr	r3, [pc, #460]	@ (80024bc <main+0x2a8>)
 80022ee:	701a      	strb	r2, [r3, #0]
  port_client = *(uint32_t *)(0x0800FC10);
 80022f0:	4b73      	ldr	r3, [pc, #460]	@ (80024c0 <main+0x2ac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	4b73      	ldr	r3, [pc, #460]	@ (80024c4 <main+0x2b0>)
 80022f8:	801a      	strh	r2, [r3, #0]
  ip_server1 = *(uint32_t *)(0x0800FC14);
 80022fa:	4b73      	ldr	r3, [pc, #460]	@ (80024c8 <main+0x2b4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b72      	ldr	r3, [pc, #456]	@ (80024cc <main+0x2b8>)
 8002302:	701a      	strb	r2, [r3, #0]
  ip_server2 = *(uint32_t *)(0x0800FC18);
 8002304:	4b72      	ldr	r3, [pc, #456]	@ (80024d0 <main+0x2bc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b72      	ldr	r3, [pc, #456]	@ (80024d4 <main+0x2c0>)
 800230c:	701a      	strb	r2, [r3, #0]
  ip_server3 = *(uint32_t *)(0x0800FC1C);
 800230e:	4b72      	ldr	r3, [pc, #456]	@ (80024d8 <main+0x2c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b71      	ldr	r3, [pc, #452]	@ (80024dc <main+0x2c8>)
 8002316:	701a      	strb	r2, [r3, #0]
  ip_server4 = *(uint32_t *)(0x0800FC20);
 8002318:	4b71      	ldr	r3, [pc, #452]	@ (80024e0 <main+0x2cc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b71      	ldr	r3, [pc, #452]	@ (80024e4 <main+0x2d0>)
 8002320:	701a      	strb	r2, [r3, #0]
  port_server = *(uint32_t *)(0x0800FC24);
 8002322:	4b71      	ldr	r3, [pc, #452]	@ (80024e8 <main+0x2d4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29a      	uxth	r2, r3
 8002328:	4b70      	ldr	r3, [pc, #448]	@ (80024ec <main+0x2d8>)
 800232a:	801a      	strh	r2, [r3, #0]
  time_delay = *(uint32_t *)(0x0800FC28);
 800232c:	4b70      	ldr	r3, [pc, #448]	@ (80024f0 <main+0x2dc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b70      	ldr	r3, [pc, #448]	@ (80024f4 <main+0x2e0>)
 8002334:	701a      	strb	r2, [r3, #0]
  elevator_mode = *(uint32_t *)(0x0800FC2C);
 8002336:	4b70      	ldr	r3, [pc, #448]	@ (80024f8 <main+0x2e4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b6f      	ldr	r3, [pc, #444]	@ (80024fc <main+0x2e8>)
 800233e:	701a      	strb	r2, [r3, #0]
  lock_default_1 = *(uint32_t *)(0x0800FC30);
 8002340:	4b6f      	ldr	r3, [pc, #444]	@ (8002500 <main+0x2ec>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6f      	ldr	r2, [pc, #444]	@ (8002504 <main+0x2f0>)
 8002346:	6013      	str	r3, [r2, #0]
  lock_default_2 = *(uint32_t *)(0x0800FC34);
 8002348:	4b6f      	ldr	r3, [pc, #444]	@ (8002508 <main+0x2f4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6f      	ldr	r2, [pc, #444]	@ (800250c <main+0x2f8>)
 800234e:	6013      	str	r3, [r2, #0]
  dateNow = *(uint32_t *)(0x0800F800);
 8002350:	4b53      	ldr	r3, [pc, #332]	@ (80024a0 <main+0x28c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4b6e      	ldr	r3, [pc, #440]	@ (8002510 <main+0x2fc>)
 8002358:	701a      	strb	r2, [r3, #0]
  monthNow = *(uint32_t *)(0x0800F804);
 800235a:	4b6e      	ldr	r3, [pc, #440]	@ (8002514 <main+0x300>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b6d      	ldr	r3, [pc, #436]	@ (8002518 <main+0x304>)
 8002362:	701a      	strb	r2, [r3, #0]
  yearNow = *(uint32_t *)(0x0800F808);
 8002364:	4b6d      	ldr	r3, [pc, #436]	@ (800251c <main+0x308>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	b29a      	uxth	r2, r3
 800236a:	4b6d      	ldr	r3, [pc, #436]	@ (8002520 <main+0x30c>)
 800236c:	801a      	strh	r2, [r3, #0]
  hourNow = *(uint32_t *)(0x0800F80C);
 800236e:	4b6d      	ldr	r3, [pc, #436]	@ (8002524 <main+0x310>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b6c      	ldr	r3, [pc, #432]	@ (8002528 <main+0x314>)
 8002376:	701a      	strb	r2, [r3, #0]
  minuteNow = *(uint32_t *)(0x0800F810);
 8002378:	4b6c      	ldr	r3, [pc, #432]	@ (800252c <main+0x318>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b6c      	ldr	r3, [pc, #432]	@ (8002530 <main+0x31c>)
 8002380:	701a      	strb	r2, [r3, #0]
  timeNow = mktime(yearNow, monthNow, dateNow, hourNow, minuteNow);
 8002382:	4b67      	ldr	r3, [pc, #412]	@ (8002520 <main+0x30c>)
 8002384:	8818      	ldrh	r0, [r3, #0]
 8002386:	4b64      	ldr	r3, [pc, #400]	@ (8002518 <main+0x304>)
 8002388:	7819      	ldrb	r1, [r3, #0]
 800238a:	4b61      	ldr	r3, [pc, #388]	@ (8002510 <main+0x2fc>)
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	4b66      	ldr	r3, [pc, #408]	@ (8002528 <main+0x314>)
 8002390:	781c      	ldrb	r4, [r3, #0]
 8002392:	4b67      	ldr	r3, [pc, #412]	@ (8002530 <main+0x31c>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4623      	mov	r3, r4
 800239a:	f002 fbef 	bl	8004b7c <mktime>
 800239e:	4603      	mov	r3, r0
 80023a0:	4a64      	ldr	r2, [pc, #400]	@ (8002534 <main+0x320>)
 80023a2:	6013      	str	r3, [r2, #0]
  if (ip1 == 0xFF) ip1 = 192;
 80023a4:	4b3f      	ldr	r3, [pc, #252]	@ (80024a4 <main+0x290>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2bff      	cmp	r3, #255	@ 0xff
 80023aa:	d102      	bne.n	80023b2 <main+0x19e>
 80023ac:	4b3d      	ldr	r3, [pc, #244]	@ (80024a4 <main+0x290>)
 80023ae:	22c0      	movs	r2, #192	@ 0xc0
 80023b0:	701a      	strb	r2, [r3, #0]
  if (ip2 == 0xFF) ip2 = 168;
 80023b2:	4b3e      	ldr	r3, [pc, #248]	@ (80024ac <main+0x298>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2bff      	cmp	r3, #255	@ 0xff
 80023b8:	d102      	bne.n	80023c0 <main+0x1ac>
 80023ba:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <main+0x298>)
 80023bc:	22a8      	movs	r2, #168	@ 0xa8
 80023be:	701a      	strb	r2, [r3, #0]
  if (ip3 == 0xFF) ip3 = 0;
 80023c0:	4b3c      	ldr	r3, [pc, #240]	@ (80024b4 <main+0x2a0>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2bff      	cmp	r3, #255	@ 0xff
 80023c6:	d102      	bne.n	80023ce <main+0x1ba>
 80023c8:	4b3a      	ldr	r3, [pc, #232]	@ (80024b4 <main+0x2a0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
  if (ip4 == 0xFF) ip4 = 72;
 80023ce:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <main+0x2a8>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2bff      	cmp	r3, #255	@ 0xff
 80023d4:	d102      	bne.n	80023dc <main+0x1c8>
 80023d6:	4b39      	ldr	r3, [pc, #228]	@ (80024bc <main+0x2a8>)
 80023d8:	2248      	movs	r2, #72	@ 0x48
 80023da:	701a      	strb	r2, [r3, #0]
  if (port_client == 0xFFFF) port_client = 0;
 80023dc:	4b39      	ldr	r3, [pc, #228]	@ (80024c4 <main+0x2b0>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d102      	bne.n	80023ee <main+0x1da>
 80023e8:	4b36      	ldr	r3, [pc, #216]	@ (80024c4 <main+0x2b0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	801a      	strh	r2, [r3, #0]
  if (ip_server1 == 0xFF) ip_server1 = 192;
 80023ee:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <main+0x2b8>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2bff      	cmp	r3, #255	@ 0xff
 80023f4:	d102      	bne.n	80023fc <main+0x1e8>
 80023f6:	4b35      	ldr	r3, [pc, #212]	@ (80024cc <main+0x2b8>)
 80023f8:	22c0      	movs	r2, #192	@ 0xc0
 80023fa:	701a      	strb	r2, [r3, #0]
  if (ip_server2 == 0xFF) ip_server2 = 168;
 80023fc:	4b35      	ldr	r3, [pc, #212]	@ (80024d4 <main+0x2c0>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2bff      	cmp	r3, #255	@ 0xff
 8002402:	d102      	bne.n	800240a <main+0x1f6>
 8002404:	4b33      	ldr	r3, [pc, #204]	@ (80024d4 <main+0x2c0>)
 8002406:	22a8      	movs	r2, #168	@ 0xa8
 8002408:	701a      	strb	r2, [r3, #0]
  if (ip_server3 == 0xFF) ip_server3 = 0;
 800240a:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <main+0x2c8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2bff      	cmp	r3, #255	@ 0xff
 8002410:	d102      	bne.n	8002418 <main+0x204>
 8002412:	4b32      	ldr	r3, [pc, #200]	@ (80024dc <main+0x2c8>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
  if (ip_server4 == 0xFF) ip_server4 = 2;
 8002418:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <main+0x2d0>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2bff      	cmp	r3, #255	@ 0xff
 800241e:	d102      	bne.n	8002426 <main+0x212>
 8002420:	4b30      	ldr	r3, [pc, #192]	@ (80024e4 <main+0x2d0>)
 8002422:	2202      	movs	r2, #2
 8002424:	701a      	strb	r2, [r3, #0]
  if (port_server == 0xFFFF) port_server = 6000;
 8002426:	4b31      	ldr	r3, [pc, #196]	@ (80024ec <main+0x2d8>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800242e:	4293      	cmp	r3, r2
 8002430:	d103      	bne.n	800243a <main+0x226>
 8002432:	4b2e      	ldr	r3, [pc, #184]	@ (80024ec <main+0x2d8>)
 8002434:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002438:	801a      	strh	r2, [r3, #0]
  if (time_delay == 0xFF) time_delay = 1;
 800243a:	4b2e      	ldr	r3, [pc, #184]	@ (80024f4 <main+0x2e0>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2bff      	cmp	r3, #255	@ 0xff
 8002440:	d102      	bne.n	8002448 <main+0x234>
 8002442:	4b2c      	ldr	r3, [pc, #176]	@ (80024f4 <main+0x2e0>)
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
  if (elevator_mode == 0xFF) elevator_mode = 0;
 8002448:	4b2c      	ldr	r3, [pc, #176]	@ (80024fc <main+0x2e8>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2bff      	cmp	r3, #255	@ 0xff
 800244e:	d102      	bne.n	8002456 <main+0x242>
 8002450:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <main+0x2e8>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
//  if (lock_default_1 == 0xFFFFFFFF) lock_default_1 = 0;
//  if (lock_default_2 == 0xFFFFFFFF) lock_default_2 = 0;
  lock_default[0] = lock_default_1 & 0xFF;
 8002456:	4b2b      	ldr	r3, [pc, #172]	@ (8002504 <main+0x2f0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b36      	ldr	r3, [pc, #216]	@ (8002538 <main+0x324>)
 800245e:	701a      	strb	r2, [r3, #0]
  lock_default[1] = (lock_default_1>>8) & 0xFF;
 8002460:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <main+0x2f0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b33      	ldr	r3, [pc, #204]	@ (8002538 <main+0x324>)
 800246a:	705a      	strb	r2, [r3, #1]
  lock_default[2] = (lock_default_1>>16) & 0xFF;
 800246c:	4b25      	ldr	r3, [pc, #148]	@ (8002504 <main+0x2f0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <main+0x324>)
 8002476:	709a      	strb	r2, [r3, #2]
 8002478:	e060      	b.n	800253c <main+0x328>
 800247a:	bf00      	nop
 800247c:	e0042000 	.word	0xe0042000
 8002480:	200001d0 	.word	0x200001d0
 8002484:	200002d8 	.word	0x200002d8
 8002488:	20000218 	.word	0x20000218
 800248c:	20000260 	.word	0x20000260
 8002490:	200002c0 	.word	0x200002c0
 8002494:	20000084 	.word	0x20000084
 8002498:	0800fc00 	.word	0x0800fc00
 800249c:	20000094 	.word	0x20000094
 80024a0:	0800f800 	.word	0x0800f800
 80024a4:	20000524 	.word	0x20000524
 80024a8:	0800fc04 	.word	0x0800fc04
 80024ac:	20000525 	.word	0x20000525
 80024b0:	0800fc08 	.word	0x0800fc08
 80024b4:	20000526 	.word	0x20000526
 80024b8:	0800fc0c 	.word	0x0800fc0c
 80024bc:	20000527 	.word	0x20000527
 80024c0:	0800fc10 	.word	0x0800fc10
 80024c4:	20000598 	.word	0x20000598
 80024c8:	0800fc14 	.word	0x0800fc14
 80024cc:	20000528 	.word	0x20000528
 80024d0:	0800fc18 	.word	0x0800fc18
 80024d4:	20000529 	.word	0x20000529
 80024d8:	0800fc1c 	.word	0x0800fc1c
 80024dc:	2000052a 	.word	0x2000052a
 80024e0:	0800fc20 	.word	0x0800fc20
 80024e4:	2000052b 	.word	0x2000052b
 80024e8:	0800fc24 	.word	0x0800fc24
 80024ec:	20000596 	.word	0x20000596
 80024f0:	0800fc28 	.word	0x0800fc28
 80024f4:	20000518 	.word	0x20000518
 80024f8:	0800fc2c 	.word	0x0800fc2c
 80024fc:	2000054a 	.word	0x2000054a
 8002500:	0800fc30 	.word	0x0800fc30
 8002504:	200006bc 	.word	0x200006bc
 8002508:	0800fc34 	.word	0x0800fc34
 800250c:	200006c0 	.word	0x200006c0
 8002510:	20000591 	.word	0x20000591
 8002514:	0800f804 	.word	0x0800f804
 8002518:	20000592 	.word	0x20000592
 800251c:	0800f808 	.word	0x0800f808
 8002520:	2000059a 	.word	0x2000059a
 8002524:	0800f80c 	.word	0x0800f80c
 8002528:	20000593 	.word	0x20000593
 800252c:	0800f810 	.word	0x0800f810
 8002530:	20000594 	.word	0x20000594
 8002534:	200006e8 	.word	0x200006e8
 8002538:	2000051c 	.word	0x2000051c
  lock_default[3] = (lock_default_1>>24) & 0xFF;
 800253c:	4b9a      	ldr	r3, [pc, #616]	@ (80027a8 <main+0x594>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e1b      	lsrs	r3, r3, #24
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b99      	ldr	r3, [pc, #612]	@ (80027ac <main+0x598>)
 8002546:	70da      	strb	r2, [r3, #3]
  lock_default[4] = lock_default_2 & 0xFF;
 8002548:	4b99      	ldr	r3, [pc, #612]	@ (80027b0 <main+0x59c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b97      	ldr	r3, [pc, #604]	@ (80027ac <main+0x598>)
 8002550:	711a      	strb	r2, [r3, #4]
  lock_default[5] = (lock_default_2>>8) & 0xFF;
 8002552:	4b97      	ldr	r3, [pc, #604]	@ (80027b0 <main+0x59c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b94      	ldr	r3, [pc, #592]	@ (80027ac <main+0x598>)
 800255c:	715a      	strb	r2, [r3, #5]
  lock_default[6] = (lock_default_2>>16) & 0xFF;
 800255e:	4b94      	ldr	r3, [pc, #592]	@ (80027b0 <main+0x59c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0c1b      	lsrs	r3, r3, #16
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b91      	ldr	r3, [pc, #580]	@ (80027ac <main+0x598>)
 8002568:	719a      	strb	r2, [r3, #6]
  lock_default[7] = (lock_default_2>>24) & 0xFF;
 800256a:	4b91      	ldr	r3, [pc, #580]	@ (80027b0 <main+0x59c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0e1b      	lsrs	r3, r3, #24
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4b8e      	ldr	r3, [pc, #568]	@ (80027ac <main+0x598>)
 8002574:	71da      	strb	r2, [r3, #7]
  server_ip[0] = ip_server1;
 8002576:	4b8f      	ldr	r3, [pc, #572]	@ (80027b4 <main+0x5a0>)
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	4b8f      	ldr	r3, [pc, #572]	@ (80027b8 <main+0x5a4>)
 800257c:	701a      	strb	r2, [r3, #0]
  server_ip[1] = ip_server2;
 800257e:	4b8f      	ldr	r3, [pc, #572]	@ (80027bc <main+0x5a8>)
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	4b8d      	ldr	r3, [pc, #564]	@ (80027b8 <main+0x5a4>)
 8002584:	705a      	strb	r2, [r3, #1]
  server_ip[2] = ip_server3;
 8002586:	4b8e      	ldr	r3, [pc, #568]	@ (80027c0 <main+0x5ac>)
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	4b8b      	ldr	r3, [pc, #556]	@ (80027b8 <main+0x5a4>)
 800258c:	709a      	strb	r2, [r3, #2]
  server_ip[3] = ip_server4;
 800258e:	4b8d      	ldr	r3, [pc, #564]	@ (80027c4 <main+0x5b0>)
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	4b89      	ldr	r3, [pc, #548]	@ (80027b8 <main+0x5a4>)
 8002594:	70da      	strb	r2, [r3, #3]

  W25Q_Reset();
 8002596:	f7ff fa8d 	bl	8001ab4 <W25Q_Reset>
//  W25Q_EraseChip();
  while(user.STT!=0xFFFFFFFF)
 800259a:	e012      	b.n	80025c2 <main+0x3ae>
  {
	  W25Q_FastRead_address(number_card*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&user);
 800259c:	4b8a      	ldr	r3, [pc, #552]	@ (80027c8 <main+0x5b4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	015b      	lsls	r3, r3, #5
 80025a2:	4a8a      	ldr	r2, [pc, #552]	@ (80027cc <main+0x5b8>)
 80025a4:	2120      	movs	r1, #32
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff facc 	bl	8001b44 <W25Q_FastRead_address>
	  if (user.STT -1 == number_card)
 80025ac:	4b87      	ldr	r3, [pc, #540]	@ (80027cc <main+0x5b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	1e5a      	subs	r2, r3, #1
 80025b2:	4b85      	ldr	r3, [pc, #532]	@ (80027c8 <main+0x5b4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d103      	bne.n	80025c2 <main+0x3ae>
	  {
		  number_card = user.STT;
 80025ba:	4b84      	ldr	r3, [pc, #528]	@ (80027cc <main+0x5b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a82      	ldr	r2, [pc, #520]	@ (80027c8 <main+0x5b4>)
 80025c0:	6013      	str	r3, [r2, #0]
  while(user.STT!=0xFFFFFFFF)
 80025c2:	4b82      	ldr	r3, [pc, #520]	@ (80027cc <main+0x5b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d1e7      	bne.n	800259c <main+0x388>
	  }
  }
  while(user_before.STT!=0xFFFFFFFF)
 80025cc:	e014      	b.n	80025f8 <main+0x3e4>
  {
	  W25Q_FastRead_address(number_card_old*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&user_before);
 80025ce:	4b80      	ldr	r3, [pc, #512]	@ (80027d0 <main+0x5bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	4a7e      	ldr	r2, [pc, #504]	@ (80027d4 <main+0x5c0>)
 80025da:	2120      	movs	r1, #32
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fab1 	bl	8001b44 <W25Q_FastRead_address>
	  if (user_before.STT -1 == number_card_old)
 80025e2:	4b7c      	ldr	r3, [pc, #496]	@ (80027d4 <main+0x5c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	4b79      	ldr	r3, [pc, #484]	@ (80027d0 <main+0x5bc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d103      	bne.n	80025f8 <main+0x3e4>
	  {
		  number_card_old = user_before.STT;
 80025f0:	4b78      	ldr	r3, [pc, #480]	@ (80027d4 <main+0x5c0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a76      	ldr	r2, [pc, #472]	@ (80027d0 <main+0x5bc>)
 80025f6:	6013      	str	r3, [r2, #0]
  while(user_before.STT!=0xFFFFFFFF)
 80025f8:	4b76      	ldr	r3, [pc, #472]	@ (80027d4 <main+0x5c0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d1e5      	bne.n	80025ce <main+0x3ba>
	  }
  }
  if (number_card_old > 0)
 8002602:	4b73      	ldr	r3, [pc, #460]	@ (80027d0 <main+0x5bc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d01a      	beq.n	8002640 <main+0x42c>
  {
	  for (uint32_t i=0; i<(number_card_old*sizeof(user_info_t)/Sector +2); i++)
 800260a:	2300      	movs	r3, #0
 800260c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002610:	e00d      	b.n	800262e <main+0x41a>
	  {
		  W25Q_Erase_Sector(i + Block32/0x1000);
 8002612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002616:	b29b      	uxth	r3, r3
 8002618:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800261c:	b29b      	uxth	r3, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fafc 	bl	8001c1c <W25Q_Erase_Sector>
	  for (uint32_t i=0; i<(number_card_old*sizeof(user_info_t)/Sector +2); i++)
 8002624:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002628:	3301      	adds	r3, #1
 800262a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800262e:	4b68      	ldr	r3, [pc, #416]	@ (80027d0 <main+0x5bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	015b      	lsls	r3, r3, #5
 8002634:	0b1b      	lsrs	r3, r3, #12
 8002636:	3302      	adds	r3, #2
 8002638:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800263c:	429a      	cmp	r2, r3
 800263e:	d3e8      	bcc.n	8002612 <main+0x3fe>
	  }
  }
  wiz_NetInfo gWIZNETINFO = {
 8002640:	2300      	movs	r3, #0
 8002642:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8002646:	231c      	movs	r3, #28
 8002648:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800264c:	2316      	movs	r3, #22
 800264e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 8002652:	f002 fe07 	bl	8005264 <HAL_GetUIDw0>
 8002656:	4603      	mov	r3, r0
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b5f      	ldr	r3, [pc, #380]	@ (80027d8 <main+0x5c4>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4053      	eors	r3, r2
 8002660:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 8002662:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 8002666:	f002 fe07 	bl	8005278 <HAL_GetUIDw1>
 800266a:	4603      	mov	r3, r0
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b5a      	ldr	r3, [pc, #360]	@ (80027d8 <main+0x5c4>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4053      	eors	r3, r2
 8002674:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 8002676:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 800267a:	f002 fe07 	bl	800528c <HAL_GetUIDw2>
 800267e:	4603      	mov	r3, r0
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4b55      	ldr	r3, [pc, #340]	@ (80027d8 <main+0x5c4>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4053      	eors	r3, r2
 8002688:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 800268a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 800268e:	4b53      	ldr	r3, [pc, #332]	@ (80027dc <main+0x5c8>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8002696:	4b52      	ldr	r3, [pc, #328]	@ (80027e0 <main+0x5cc>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800269e:	4b51      	ldr	r3, [pc, #324]	@ (80027e4 <main+0x5d0>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 80026a6:	4b4c      	ldr	r3, [pc, #304]	@ (80027d8 <main+0x5c4>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 80026ae:	4a4e      	ldr	r2, [pc, #312]	@ (80027e8 <main+0x5d4>)
 80026b0:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80026b4:	6810      	ldr	r0, [r2, #0]
 80026b6:	6018      	str	r0, [r3, #0]
 80026b8:	4a4c      	ldr	r2, [pc, #304]	@ (80027ec <main+0x5d8>)
 80026ba:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 80026be:	6810      	ldr	r0, [r2, #0]
 80026c0:	6018      	str	r0, [r3, #0]
 80026c2:	4a4b      	ldr	r2, [pc, #300]	@ (80027f0 <main+0x5dc>)
 80026c4:	f107 0376 	add.w	r3, r7, #118	@ 0x76
 80026c8:	6810      	ldr	r0, [r2, #0]
 80026ca:	6018      	str	r0, [r3, #0]
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
  		  .ip = {ip1,ip2,ip3,ip4},
  		  .sn = {255, 255, 255, 0},
  		  .gw = {192, 168, 0, 1},
  		  .dns = {168, 126, 63, 1},
  		  .dhcp = NETINFO_STATIC};
  W5500Init();
 80026d2:	f7fe f847 	bl	8000764 <W5500Init>
  HAL_Delay(2000);
 80026d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80026da:	f002 fd9f 	bl	800521c <HAL_Delay>
  wizchip_setnetinfo(&gWIZNETINFO);
 80026de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f932 	bl	800194c <wizchip_setnetinfo>
//  socket(SOCK_NUM, Sn_MR_TCP, port_client, SF_TCP_NODELAY);
//  connect(SOCK_NUM, server_ip, port_server);
  Set_speed_can(elevator_mode);
 80026e8:	4b42      	ldr	r3, [pc, #264]	@ (80027f4 <main+0x5e0>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 f9b1 	bl	8004a54 <Set_speed_can>
  HAL_TIM_Base_Start_IT(&htim2);
 80026f2:	4841      	ldr	r0, [pc, #260]	@ (80027f8 <main+0x5e4>)
 80026f4:	f005 fe84 	bl	8008400 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lenData = getSn_RX_RSR(SOCK_NUM);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fd fed2 	bl	80004a2 <getSn_RX_RSR>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <main+0x5e8>)
 8002704:	601a      	str	r2, [r3, #0]
	  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 8002706:	2000      	movs	r0, #0
 8002708:	f7fd fecb 	bl	80004a2 <getSn_RX_RSR>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	4b3a      	ldr	r3, [pc, #232]	@ (80027fc <main+0x5e8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	f041 8161 	bne.w	80039dc <main+0x17c8>
	  {
		  if (lenData > 512)
 800271a:	4b38      	ldr	r3, [pc, #224]	@ (80027fc <main+0x5e8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002722:	d903      	bls.n	800272c <main+0x518>
		  {
			  save_time();
 8002724:	f001 ff04 	bl	8004530 <save_time>
			  HAL_NVIC_SystemReset();
 8002728:	f003 fd89 	bl	800623e <HAL_NVIC_SystemReset>
		  }
		  if (lenData > 0)
 800272c:	4b33      	ldr	r3, [pc, #204]	@ (80027fc <main+0x5e8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 815a 	beq.w	80029ea <main+0x7d6>
		  {
			  recv(SOCK_NUM, buf, lenData);
 8002736:	4b31      	ldr	r3, [pc, #196]	@ (80027fc <main+0x5e8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	4930      	ldr	r1, [pc, #192]	@ (8002800 <main+0x5ec>)
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe fbdd 	bl	8000f00 <recv>
			  switch (buf[0])
 8002746:	4b2e      	ldr	r3, [pc, #184]	@ (8002800 <main+0x5ec>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	3b44      	subs	r3, #68	@ 0x44
 800274c:	2b13      	cmp	r3, #19
 800274e:	f200 814c 	bhi.w	80029ea <main+0x7d6>
 8002752:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <main+0x544>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	08002887 	.word	0x08002887
 800275c:	080029eb 	.word	0x080029eb
 8002760:	080029eb 	.word	0x080029eb
 8002764:	080029eb 	.word	0x080029eb
 8002768:	08002805 	.word	0x08002805
 800276c:	080029eb 	.word	0x080029eb
 8002770:	080029eb 	.word	0x080029eb
 8002774:	080029eb 	.word	0x080029eb
 8002778:	080029eb 	.word	0x080029eb
 800277c:	080029eb 	.word	0x080029eb
 8002780:	080029eb 	.word	0x080029eb
 8002784:	080029eb 	.word	0x080029eb
 8002788:	080029eb 	.word	0x080029eb
 800278c:	080029eb 	.word	0x080029eb
 8002790:	080028ef 	.word	0x080028ef
 8002794:	080028bb 	.word	0x080028bb
 8002798:	080029eb 	.word	0x080029eb
 800279c:	080029eb 	.word	0x080029eb
 80027a0:	080029eb 	.word	0x080029eb
 80027a4:	08002933 	.word	0x08002933
 80027a8:	200006bc 	.word	0x200006bc
 80027ac:	2000051c 	.word	0x2000051c
 80027b0:	200006c0 	.word	0x200006c0
 80027b4:	20000528 	.word	0x20000528
 80027b8:	20000514 	.word	0x20000514
 80027bc:	20000529 	.word	0x20000529
 80027c0:	2000052a 	.word	0x2000052a
 80027c4:	2000052b 	.word	0x2000052b
 80027c8:	200006a8 	.word	0x200006a8
 80027cc:	20000748 	.word	0x20000748
 80027d0:	200006b8 	.word	0x200006b8
 80027d4:	20000768 	.word	0x20000768
 80027d8:	20000527 	.word	0x20000527
 80027dc:	20000524 	.word	0x20000524
 80027e0:	20000525 	.word	0x20000525
 80027e4:	20000526 	.word	0x20000526
 80027e8:	08009c80 	.word	0x08009c80
 80027ec:	08009c84 	.word	0x08009c84
 80027f0:	08009c88 	.word	0x08009c88
 80027f4:	2000054a 	.word	0x2000054a
 80027f8:	20000188 	.word	0x20000188
 80027fc:	200006b4 	.word	0x200006b4
 8002800:	2000030c 	.word	0x2000030c
			  {
			  case 0x48:
				  connected = HAL_GetTick();
 8002804:	f002 fd00 	bl	8005208 <HAL_GetTick>
 8002808:	4603      	mov	r3, r0
 800280a:	4aa3      	ldr	r2, [pc, #652]	@ (8002a98 <main+0x884>)
 800280c:	6013      	str	r3, [r2, #0]
				  yearNow = (buf[3]<<8) | buf[4];
 800280e:	4ba3      	ldr	r3, [pc, #652]	@ (8002a9c <main+0x888>)
 8002810:	78db      	ldrb	r3, [r3, #3]
 8002812:	b21b      	sxth	r3, r3
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	b21a      	sxth	r2, r3
 8002818:	4ba0      	ldr	r3, [pc, #640]	@ (8002a9c <main+0x888>)
 800281a:	791b      	ldrb	r3, [r3, #4]
 800281c:	b21b      	sxth	r3, r3
 800281e:	4313      	orrs	r3, r2
 8002820:	b21b      	sxth	r3, r3
 8002822:	b29a      	uxth	r2, r3
 8002824:	4b9e      	ldr	r3, [pc, #632]	@ (8002aa0 <main+0x88c>)
 8002826:	801a      	strh	r2, [r3, #0]
				  monthNow = buf[2];
 8002828:	4b9c      	ldr	r3, [pc, #624]	@ (8002a9c <main+0x888>)
 800282a:	789a      	ldrb	r2, [r3, #2]
 800282c:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa4 <main+0x890>)
 800282e:	701a      	strb	r2, [r3, #0]
				  hourNow = buf[5];
 8002830:	4b9a      	ldr	r3, [pc, #616]	@ (8002a9c <main+0x888>)
 8002832:	795a      	ldrb	r2, [r3, #5]
 8002834:	4b9c      	ldr	r3, [pc, #624]	@ (8002aa8 <main+0x894>)
 8002836:	701a      	strb	r2, [r3, #0]
				  minuteNow = buf[6];
 8002838:	4b98      	ldr	r3, [pc, #608]	@ (8002a9c <main+0x888>)
 800283a:	799a      	ldrb	r2, [r3, #6]
 800283c:	4b9b      	ldr	r3, [pc, #620]	@ (8002aac <main+0x898>)
 800283e:	701a      	strb	r2, [r3, #0]
				  if (buf[1] != dateNow)
 8002840:	4b96      	ldr	r3, [pc, #600]	@ (8002a9c <main+0x888>)
 8002842:	785a      	ldrb	r2, [r3, #1]
 8002844:	4b9a      	ldr	r3, [pc, #616]	@ (8002ab0 <main+0x89c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d006      	beq.n	800285a <main+0x646>
				  {
					  dateNow = buf[1];
 800284c:	4b93      	ldr	r3, [pc, #588]	@ (8002a9c <main+0x888>)
 800284e:	785a      	ldrb	r2, [r3, #1]
 8002850:	4b97      	ldr	r3, [pc, #604]	@ (8002ab0 <main+0x89c>)
 8002852:	701a      	strb	r2, [r3, #0]
					  save_time();
 8002854:	f001 fe6c 	bl	8004530 <save_time>
 8002858:	e003      	b.n	8002862 <main+0x64e>
				  } else
				  {
					  dateNow = buf[1];
 800285a:	4b90      	ldr	r3, [pc, #576]	@ (8002a9c <main+0x888>)
 800285c:	785a      	ldrb	r2, [r3, #1]
 800285e:	4b94      	ldr	r3, [pc, #592]	@ (8002ab0 <main+0x89c>)
 8002860:	701a      	strb	r2, [r3, #0]
				  }
				  timeNow = mktime(yearNow, monthNow, dateNow, hourNow, minuteNow);
 8002862:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa0 <main+0x88c>)
 8002864:	8818      	ldrh	r0, [r3, #0]
 8002866:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa4 <main+0x890>)
 8002868:	7819      	ldrb	r1, [r3, #0]
 800286a:	4b91      	ldr	r3, [pc, #580]	@ (8002ab0 <main+0x89c>)
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa8 <main+0x894>)
 8002870:	781c      	ldrb	r4, [r3, #0]
 8002872:	4b8e      	ldr	r3, [pc, #568]	@ (8002aac <main+0x898>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	4623      	mov	r3, r4
 800287a:	f002 f97f 	bl	8004b7c <mktime>
 800287e:	4603      	mov	r3, r0
 8002880:	4a8c      	ldr	r2, [pc, #560]	@ (8002ab4 <main+0x8a0>)
 8002882:	6013      	str	r3, [r2, #0]
				  break;
 8002884:	e0b1      	b.n	80029ea <main+0x7d6>
			  case 0x44://data: D
				  Ethernet_received = true;
 8002886:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab8 <main+0x8a4>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
				  for (uint8_t i =0; i<9; i++)
 800288c:	2300      	movs	r3, #0
 800288e:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8002892:	e00d      	b.n	80028b0 <main+0x69c>
				  {
					  Ethernet_received_data[i] = buf[i+1];
 8002894:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800289e:	497f      	ldr	r1, [pc, #508]	@ (8002a9c <main+0x888>)
 80028a0:	5c89      	ldrb	r1, [r1, r2]
 80028a2:	4a86      	ldr	r2, [pc, #536]	@ (8002abc <main+0x8a8>)
 80028a4:	54d1      	strb	r1, [r2, r3]
				  for (uint8_t i =0; i<9; i++)
 80028a6:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80028b0:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d9ed      	bls.n	8002894 <main+0x680>
				  }
				  break;
 80028b8:	e097      	b.n	80029ea <main+0x7d6>
			  case 0x53://setting: S
				  Ethernet_setting = true;
 80028ba:	4b81      	ldr	r3, [pc, #516]	@ (8002ac0 <main+0x8ac>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
				  for (uint8_t i =0; i<23; i++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 80028c6:	e00d      	b.n	80028e4 <main+0x6d0>
				  {
					  Ethernet_setting_data[i] = buf[i+1];
 80028c8:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80028d2:	4972      	ldr	r1, [pc, #456]	@ (8002a9c <main+0x888>)
 80028d4:	5c89      	ldrb	r1, [r1, r2]
 80028d6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ac4 <main+0x8b0>)
 80028d8:	54d1      	strb	r1, [r2, r3]
				  for (uint8_t i =0; i<23; i++)
 80028da:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80028de:	3301      	adds	r3, #1
 80028e0:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 80028e4:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80028e8:	2b16      	cmp	r3, #22
 80028ea:	d9ed      	bls.n	80028c8 <main+0x6b4>
				  }
				  break;
 80028ec:	e07d      	b.n	80029ea <main+0x7d6>
			  case 0x52:// reset board R: 0; read data: 1
				  if (buf[1] == 2)
 80028ee:	4b6b      	ldr	r3, [pc, #428]	@ (8002a9c <main+0x888>)
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d108      	bne.n	8002908 <main+0x6f4>
				  {
					  send_card_to_pc = true;
 80028f6:	4b74      	ldr	r3, [pc, #464]	@ (8002ac8 <main+0x8b4>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 80028fc:	f002 fc84 	bl	8005208 <HAL_GetTick>
 8002900:	4603      	mov	r3, r0
 8002902:	4a72      	ldr	r2, [pc, #456]	@ (8002acc <main+0x8b8>)
 8002904:	6013      	str	r3, [r2, #0]
				  } else
				  {
					  Ethernet_read_and_reset = true;
					  Ethernet_read_and_reset_data = buf[1];
				  }
				  break;
 8002906:	e070      	b.n	80029ea <main+0x7d6>
				  } else if (buf[1] == 3)
 8002908:	4b64      	ldr	r3, [pc, #400]	@ (8002a9c <main+0x888>)
 800290a:	785b      	ldrb	r3, [r3, #1]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d108      	bne.n	8002922 <main+0x70e>
					  send_card_done = true;
 8002910:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad0 <main+0x8bc>)
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002916:	f002 fc77 	bl	8005208 <HAL_GetTick>
 800291a:	4603      	mov	r3, r0
 800291c:	4a6b      	ldr	r2, [pc, #428]	@ (8002acc <main+0x8b8>)
 800291e:	6013      	str	r3, [r2, #0]
				  break;
 8002920:	e063      	b.n	80029ea <main+0x7d6>
					  Ethernet_read_and_reset = true;
 8002922:	4b6c      	ldr	r3, [pc, #432]	@ (8002ad4 <main+0x8c0>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
					  Ethernet_read_and_reset_data = buf[1];
 8002928:	4b5c      	ldr	r3, [pc, #368]	@ (8002a9c <main+0x888>)
 800292a:	785a      	ldrb	r2, [r3, #1]
 800292c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad8 <main+0x8c4>)
 800292e:	701a      	strb	r2, [r3, #0]
				  break;
 8002930:	e05b      	b.n	80029ea <main+0x7d6>
			  case 0x57: // W
				  switch (buf[1])
 8002932:	4b5a      	ldr	r3, [pc, #360]	@ (8002a9c <main+0x888>)
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	3b41      	subs	r3, #65	@ 0x41
 8002938:	2b19      	cmp	r3, #25
 800293a:	d855      	bhi.n	80029e8 <main+0x7d4>
 800293c:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <main+0x730>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	080029c5 	.word	0x080029c5
 8002948:	080029e9 	.word	0x080029e9
 800294c:	080029e9 	.word	0x080029e9
 8002950:	080029e9 	.word	0x080029e9
 8002954:	080029b3 	.word	0x080029b3
 8002958:	080029e9 	.word	0x080029e9
 800295c:	080029e9 	.word	0x080029e9
 8002960:	080029d7 	.word	0x080029d7
 8002964:	080029e9 	.word	0x080029e9
 8002968:	080029e9 	.word	0x080029e9
 800296c:	080029e9 	.word	0x080029e9
 8002970:	080029e9 	.word	0x080029e9
 8002974:	080029e9 	.word	0x080029e9
 8002978:	080029e9 	.word	0x080029e9
 800297c:	080029e9 	.word	0x080029e9
 8002980:	080029e9 	.word	0x080029e9
 8002984:	080029e9 	.word	0x080029e9
 8002988:	080029e9 	.word	0x080029e9
 800298c:	080029e9 	.word	0x080029e9
 8002990:	080029e9 	.word	0x080029e9
 8002994:	080029e9 	.word	0x080029e9
 8002998:	080029e9 	.word	0x080029e9
 800299c:	080029e9 	.word	0x080029e9
 80029a0:	080029e9 	.word	0x080029e9
 80029a4:	080029e9 	.word	0x080029e9
 80029a8:	080029ad 	.word	0x080029ad
				  {
				  case 0x5A:// E: errase
					  W25Q_EraseChip();
 80029ac:	f7ff f91d 	bl	8001bea <W25Q_EraseChip>
					  break;
 80029b0:	e01a      	b.n	80029e8 <main+0x7d4>
				  case 0x45:// E: errase
					  write_mode = true;
 80029b2:	4b4a      	ldr	r3, [pc, #296]	@ (8002adc <main+0x8c8>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 80029b8:	f002 fc26 	bl	8005208 <HAL_GetTick>
 80029bc:	4603      	mov	r3, r0
 80029be:	4a43      	ldr	r2, [pc, #268]	@ (8002acc <main+0x8b8>)
 80029c0:	6013      	str	r3, [r2, #0]
					  break;
 80029c2:	e011      	b.n	80029e8 <main+0x7d4>
				  case 0x41:// A: add card
					  write_mode_somecard = true;
 80029c4:	4b46      	ldr	r3, [pc, #280]	@ (8002ae0 <main+0x8cc>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 80029ca:	f002 fc1d 	bl	8005208 <HAL_GetTick>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4a3e      	ldr	r2, [pc, #248]	@ (8002acc <main+0x8b8>)
 80029d2:	6013      	str	r3, [r2, #0]
					  break;
 80029d4:	e008      	b.n	80029e8 <main+0x7d4>
				  case 0x48:// H: add card by hand
					  write_card_by_hand = true;
 80029d6:	4b43      	ldr	r3, [pc, #268]	@ (8002ae4 <main+0x8d0>)
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 80029dc:	f002 fc14 	bl	8005208 <HAL_GetTick>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4a3a      	ldr	r2, [pc, #232]	@ (8002acc <main+0x8b8>)
 80029e4:	6013      	str	r3, [r2, #0]
					  break;
 80029e6:	bf00      	nop
				  }
				  break;
 80029e8:	bf00      	nop
	  } else
	  {
		  continue;
	  }

	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 80029ea:	483f      	ldr	r0, [pc, #252]	@ (8002ae8 <main+0x8d4>)
 80029ec:	f002 ff73 	bl	80058d6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <main+0x7fc>
	  {
		  if (HAL_CAN_AbortTxRequest(&hcan, TxMailbox) != HAL_OK)
 80029f6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aec <main+0x8d8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	483a      	ldr	r0, [pc, #232]	@ (8002ae8 <main+0x8d4>)
 80029fe:	f002 ff26 	bl	800584e <HAL_CAN_AbortTxRequest>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <main+0x7fc>
		  {
			  save_time();
 8002a08:	f001 fd92 	bl	8004530 <save_time>
			  HAL_NVIC_SystemReset();
 8002a0c:	f003 fc17 	bl	800623e <HAL_NVIC_SystemReset>
		  }
	  }

	  // check connection Ethernet
	  if (keepalive == SOCK_ESTABLISHED && (abs(HAL_GetTick() - connected) < Timeout_heartbit))
 8002a10:	4b37      	ldr	r3, [pc, #220]	@ (8002af0 <main+0x8dc>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b17      	cmp	r3, #23
 8002a16:	d110      	bne.n	8002a3a <main+0x826>
 8002a18:	f002 fbf6 	bl	8005208 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a98 <main+0x884>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bfb8      	it	lt
 8002a28:	425b      	neglt	r3, r3
 8002a2a:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	dc03      	bgt.n	8002a3a <main+0x826>
	  {
		  Ethernet_connected = true;
 8002a32:	4b30      	ldr	r3, [pc, #192]	@ (8002af4 <main+0x8e0>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e002      	b.n	8002a40 <main+0x82c>
	  } else
	  {
		  Ethernet_connected = false;// false
 8002a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002af4 <main+0x8e0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
	  }
	  // check connection REB
	  if (abs(HAL_GetTick() - heardbit_REB) > Timeout_heartbit)
 8002a40:	f002 fbe2 	bl	8005208 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b2c      	ldr	r3, [pc, #176]	@ (8002af8 <main+0x8e4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bfb8      	it	lt
 8002a50:	425b      	neglt	r3, r3
 8002a52:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002a56:	4293      	cmp	r3, r2
 8002a58:	dd03      	ble.n	8002a62 <main+0x84e>
	  {
		  REB_connected = false;// false
 8002a5a:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <main+0x8e8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e002      	b.n	8002a68 <main+0x854>
	  } else
	  {
		  REB_connected = true;
 8002a62:	4b26      	ldr	r3, [pc, #152]	@ (8002afc <main+0x8e8>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
	  }
	  //// received data from Ethernet
	  if (Ethernet_received)// 0x44
 8002a68:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <main+0x8a4>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d05c      	beq.n	8002b2a <main+0x916>
	  {
		  Ethernet_received = false;
 8002a70:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <main+0x8a4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_received_data[0])
 8002a76:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <main+0x8a8>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <main+0x870>
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d044      	beq.n	8002b0c <main+0x8f8>
 8002a82:	e052      	b.n	8002b2a <main+0x916>
		  {
		  case 0:
			  send_uart = 0;
 8002a84:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <main+0x8ec>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <main+0x8f0>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
			  isSendDataEth = false;
 8002a90:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <main+0x8f4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
			  break;
 8002a96:	e048      	b.n	8002b2a <main+0x916>
 8002a98:	200006ac 	.word	0x200006ac
 8002a9c:	2000030c 	.word	0x2000030c
 8002aa0:	2000059a 	.word	0x2000059a
 8002aa4:	20000592 	.word	0x20000592
 8002aa8:	20000593 	.word	0x20000593
 8002aac:	20000594 	.word	0x20000594
 8002ab0:	20000591 	.word	0x20000591
 8002ab4:	200006e8 	.word	0x200006e8
 8002ab8:	20000740 	.word	0x20000740
 8002abc:	20000560 	.word	0x20000560
 8002ac0:	20000741 	.word	0x20000741
 8002ac4:	2000056c 	.word	0x2000056c
 8002ac8:	2000073d 	.word	0x2000073d
 8002acc:	200006b0 	.word	0x200006b0
 8002ad0:	2000073e 	.word	0x2000073e
 8002ad4:	20000744 	.word	0x20000744
 8002ad8:	20000585 	.word	0x20000585
 8002adc:	2000073b 	.word	0x2000073b
 8002ae0:	2000073a 	.word	0x2000073a
 8002ae4:	20000743 	.word	0x20000743
 8002ae8:	200000a4 	.word	0x200000a4
 8002aec:	200005a4 	.word	0x200005a4
 8002af0:	2000055c 	.word	0x2000055c
 8002af4:	20000738 	.word	0x20000738
 8002af8:	200006c8 	.word	0x200006c8
 8002afc:	20000031 	.word	0x20000031
 8002b00:	20000590 	.word	0x20000590
 8002b04:	20000747 	.word	0x20000747
 8002b08:	20000739 	.word	0x20000739
		  case 1: // data ok
			  new_card_update(&Ethernet_received_data[1], x, x_timer);
 8002b0c:	4a92      	ldr	r2, [pc, #584]	@ (8002d58 <main+0xb44>)
 8002b0e:	4993      	ldr	r1, [pc, #588]	@ (8002d5c <main+0xb48>)
 8002b10:	4893      	ldr	r0, [pc, #588]	@ (8002d60 <main+0xb4c>)
 8002b12:	f001 fdc1 	bl	8004698 <new_card_update>
			  send_uart = 1;
 8002b16:	4b93      	ldr	r3, [pc, #588]	@ (8002d64 <main+0xb50>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 8002b1c:	4b92      	ldr	r3, [pc, #584]	@ (8002d68 <main+0xb54>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
			  isSendDataEth = false;
 8002b22:	4b92      	ldr	r3, [pc, #584]	@ (8002d6c <main+0xb58>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
			  break;
 8002b28:	bf00      	nop
		  }
	  }

	  // Nếu không nhận được Data từ server sau khi gửi mã thẻ, thì xử lý offline

	  if (isSendDataEth)
 8002b2a:	4b90      	ldr	r3, [pc, #576]	@ (8002d6c <main+0xb58>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d074      	beq.n	8002c1c <main+0xa08>
	  {
		  if (!Ethernet_connected || ((HAL_GetTick() - timeSendDataEth) > 500))
 8002b32:	4b8f      	ldr	r3, [pc, #572]	@ (8002d70 <main+0xb5c>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	f083 0301 	eor.w	r3, r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d108      	bne.n	8002b52 <main+0x93e>
 8002b40:	f002 fb62 	bl	8005208 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b8b      	ldr	r3, [pc, #556]	@ (8002d74 <main+0xb60>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b50:	d964      	bls.n	8002c1c <main+0xa08>
		  {
			  isSendDataEth = false;
 8002b52:	4b86      	ldr	r3, [pc, #536]	@ (8002d6c <main+0xb58>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
			  compare_user = binary_search(number_card, wcode);
 8002b58:	4b87      	ldr	r3, [pc, #540]	@ (8002d78 <main+0xb64>)
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	4b87      	ldr	r3, [pc, #540]	@ (8002d7c <main+0xb68>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4c87      	ldr	r4, [pc, #540]	@ (8002d80 <main+0xb6c>)
 8002b62:	463b      	mov	r3, r7
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 fd49 	bl	80045fc <binary_search>
 8002b6a:	4625      	mov	r5, r4
 8002b6c:	463c      	mov	r4, r7
 8002b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			  if (compare_user.STT > 0 && compare_user.STT <= number_card)
 8002b7a:	4b81      	ldr	r3, [pc, #516]	@ (8002d80 <main+0xb6c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d046      	beq.n	8002c10 <main+0x9fc>
 8002b82:	4b7f      	ldr	r3, [pc, #508]	@ (8002d80 <main+0xb6c>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b7c      	ldr	r3, [pc, #496]	@ (8002d78 <main+0xb64>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d840      	bhi.n	8002c10 <main+0x9fc>
			  {
				  timeBegin = mktime(compare_user.beginYear, compare_user.beginMonth, compare_user.beginDate, compare_user.beginHour, compare_user.beginMinute);
 8002b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d80 <main+0xb6c>)
 8002b90:	8a18      	ldrh	r0, [r3, #16]
 8002b92:	4b7b      	ldr	r3, [pc, #492]	@ (8002d80 <main+0xb6c>)
 8002b94:	7c99      	ldrb	r1, [r3, #18]
 8002b96:	4b7a      	ldr	r3, [pc, #488]	@ (8002d80 <main+0xb6c>)
 8002b98:	7cda      	ldrb	r2, [r3, #19]
 8002b9a:	4b79      	ldr	r3, [pc, #484]	@ (8002d80 <main+0xb6c>)
 8002b9c:	7d1c      	ldrb	r4, [r3, #20]
 8002b9e:	4b78      	ldr	r3, [pc, #480]	@ (8002d80 <main+0xb6c>)
 8002ba0:	7d5b      	ldrb	r3, [r3, #21]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	4623      	mov	r3, r4
 8002ba6:	f001 ffe9 	bl	8004b7c <mktime>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4a75      	ldr	r2, [pc, #468]	@ (8002d84 <main+0xb70>)
 8002bae:	6013      	str	r3, [r2, #0]
				  timeEnd = mktime(compare_user.endYear, compare_user.endMonth, compare_user.endDate, compare_user.endHour, compare_user.endMinute);
 8002bb0:	4b73      	ldr	r3, [pc, #460]	@ (8002d80 <main+0xb6c>)
 8002bb2:	8ad8      	ldrh	r0, [r3, #22]
 8002bb4:	4b72      	ldr	r3, [pc, #456]	@ (8002d80 <main+0xb6c>)
 8002bb6:	7e19      	ldrb	r1, [r3, #24]
 8002bb8:	4b71      	ldr	r3, [pc, #452]	@ (8002d80 <main+0xb6c>)
 8002bba:	7e5a      	ldrb	r2, [r3, #25]
 8002bbc:	4b70      	ldr	r3, [pc, #448]	@ (8002d80 <main+0xb6c>)
 8002bbe:	7e9c      	ldrb	r4, [r3, #26]
 8002bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d80 <main+0xb6c>)
 8002bc2:	7edb      	ldrb	r3, [r3, #27]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	4623      	mov	r3, r4
 8002bc8:	f001 ffd8 	bl	8004b7c <mktime>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4a6e      	ldr	r2, [pc, #440]	@ (8002d88 <main+0xb74>)
 8002bd0:	6013      	str	r3, [r2, #0]
				  if ((timeBegin <= timeNow) && (timeNow <= timeEnd))
 8002bd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002d84 <main+0xb70>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d8c <main+0xb78>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d811      	bhi.n	8002c02 <main+0x9ee>
 8002bde:	4b6b      	ldr	r3, [pc, #428]	@ (8002d8c <main+0xb78>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b69      	ldr	r3, [pc, #420]	@ (8002d88 <main+0xb74>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d80b      	bhi.n	8002c02 <main+0x9ee>
				  {
					  new_card_update(compare_user.permis, x, x_timer);
 8002bea:	4a5b      	ldr	r2, [pc, #364]	@ (8002d58 <main+0xb44>)
 8002bec:	495b      	ldr	r1, [pc, #364]	@ (8002d5c <main+0xb48>)
 8002bee:	4868      	ldr	r0, [pc, #416]	@ (8002d90 <main+0xb7c>)
 8002bf0:	f001 fd52 	bl	8004698 <new_card_update>
					  send_uart = 1;
 8002bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8002d64 <main+0xb50>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
					  send_uart_to_REB = true;
 8002bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8002d68 <main+0xb54>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
				  if ((timeBegin <= timeNow) && (timeNow <= timeEnd))
 8002c00:	e00c      	b.n	8002c1c <main+0xa08>
				  } else
				  {
					  send_uart = 0;
 8002c02:	4b58      	ldr	r3, [pc, #352]	@ (8002d64 <main+0xb50>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
					  send_uart_to_REB = true;
 8002c08:	4b57      	ldr	r3, [pc, #348]	@ (8002d68 <main+0xb54>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
				  if ((timeBegin <= timeNow) && (timeNow <= timeEnd))
 8002c0e:	e005      	b.n	8002c1c <main+0xa08>
				  }
			  } else
			  {
				  send_uart = 0;
 8002c10:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <main+0xb50>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
				  send_uart_to_REB = true;
 8002c16:	4b54      	ldr	r3, [pc, #336]	@ (8002d68 <main+0xb54>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	  //// setting from PC Ethernet
	  if (Ethernet_setting) // 0x53
 8002c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8002d94 <main+0xb80>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8085 	beq.w	8002d30 <main+0xb1c>
	  {
		  Ethernet_setting = false;
 8002c26:	4b5b      	ldr	r3, [pc, #364]	@ (8002d94 <main+0xb80>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_setting_data[0])
 8002c2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002d98 <main+0xb84>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <main+0xa26>
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d071      	beq.n	8002d1c <main+0xb08>
 8002c38:	e07a      	b.n	8002d30 <main+0xb1c>
		  {
		  case 0:// setting board
			  ip1 = Ethernet_setting_data[1];
 8002c3a:	4b57      	ldr	r3, [pc, #348]	@ (8002d98 <main+0xb84>)
 8002c3c:	785a      	ldrb	r2, [r3, #1]
 8002c3e:	4b57      	ldr	r3, [pc, #348]	@ (8002d9c <main+0xb88>)
 8002c40:	701a      	strb	r2, [r3, #0]
			  ip2 = Ethernet_setting_data[2];
 8002c42:	4b55      	ldr	r3, [pc, #340]	@ (8002d98 <main+0xb84>)
 8002c44:	789a      	ldrb	r2, [r3, #2]
 8002c46:	4b56      	ldr	r3, [pc, #344]	@ (8002da0 <main+0xb8c>)
 8002c48:	701a      	strb	r2, [r3, #0]
			  ip3 = Ethernet_setting_data[3];
 8002c4a:	4b53      	ldr	r3, [pc, #332]	@ (8002d98 <main+0xb84>)
 8002c4c:	78da      	ldrb	r2, [r3, #3]
 8002c4e:	4b55      	ldr	r3, [pc, #340]	@ (8002da4 <main+0xb90>)
 8002c50:	701a      	strb	r2, [r3, #0]
			  ip4 = Ethernet_setting_data[4];
 8002c52:	4b51      	ldr	r3, [pc, #324]	@ (8002d98 <main+0xb84>)
 8002c54:	791a      	ldrb	r2, [r3, #4]
 8002c56:	4b54      	ldr	r3, [pc, #336]	@ (8002da8 <main+0xb94>)
 8002c58:	701a      	strb	r2, [r3, #0]
			  port_client = Ethernet_setting_data[5]<<8|Ethernet_setting_data[6];
 8002c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d98 <main+0xb84>)
 8002c5c:	795b      	ldrb	r3, [r3, #5]
 8002c5e:	b21b      	sxth	r3, r3
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	b21a      	sxth	r2, r3
 8002c64:	4b4c      	ldr	r3, [pc, #304]	@ (8002d98 <main+0xb84>)
 8002c66:	799b      	ldrb	r3, [r3, #6]
 8002c68:	b21b      	sxth	r3, r3
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	b21b      	sxth	r3, r3
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b4e      	ldr	r3, [pc, #312]	@ (8002dac <main+0xb98>)
 8002c72:	801a      	strh	r2, [r3, #0]
			  ip_server1 = Ethernet_setting_data[7];
 8002c74:	4b48      	ldr	r3, [pc, #288]	@ (8002d98 <main+0xb84>)
 8002c76:	79da      	ldrb	r2, [r3, #7]
 8002c78:	4b4d      	ldr	r3, [pc, #308]	@ (8002db0 <main+0xb9c>)
 8002c7a:	701a      	strb	r2, [r3, #0]
			  ip_server2 = Ethernet_setting_data[8];
 8002c7c:	4b46      	ldr	r3, [pc, #280]	@ (8002d98 <main+0xb84>)
 8002c7e:	7a1a      	ldrb	r2, [r3, #8]
 8002c80:	4b4c      	ldr	r3, [pc, #304]	@ (8002db4 <main+0xba0>)
 8002c82:	701a      	strb	r2, [r3, #0]
			  ip_server3 = Ethernet_setting_data[9];
 8002c84:	4b44      	ldr	r3, [pc, #272]	@ (8002d98 <main+0xb84>)
 8002c86:	7a5a      	ldrb	r2, [r3, #9]
 8002c88:	4b4b      	ldr	r3, [pc, #300]	@ (8002db8 <main+0xba4>)
 8002c8a:	701a      	strb	r2, [r3, #0]
			  ip_server4 = Ethernet_setting_data[10];
 8002c8c:	4b42      	ldr	r3, [pc, #264]	@ (8002d98 <main+0xb84>)
 8002c8e:	7a9a      	ldrb	r2, [r3, #10]
 8002c90:	4b4a      	ldr	r3, [pc, #296]	@ (8002dbc <main+0xba8>)
 8002c92:	701a      	strb	r2, [r3, #0]
			  port_server = Ethernet_setting_data[11]<<8|Ethernet_setting_data[12];
 8002c94:	4b40      	ldr	r3, [pc, #256]	@ (8002d98 <main+0xb84>)
 8002c96:	7adb      	ldrb	r3, [r3, #11]
 8002c98:	b21b      	sxth	r3, r3
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	b21a      	sxth	r2, r3
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d98 <main+0xb84>)
 8002ca0:	7b1b      	ldrb	r3, [r3, #12]
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	b21b      	sxth	r3, r3
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	4b45      	ldr	r3, [pc, #276]	@ (8002dc0 <main+0xbac>)
 8002cac:	801a      	strh	r2, [r3, #0]
			  time_delay = Ethernet_setting_data[13];
 8002cae:	4b3a      	ldr	r3, [pc, #232]	@ (8002d98 <main+0xb84>)
 8002cb0:	7b5a      	ldrb	r2, [r3, #13]
 8002cb2:	4b44      	ldr	r3, [pc, #272]	@ (8002dc4 <main+0xbb0>)
 8002cb4:	701a      	strb	r2, [r3, #0]
			  elevator_mode = Ethernet_setting_data[14];
 8002cb6:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <main+0xb84>)
 8002cb8:	7b9a      	ldrb	r2, [r3, #14]
 8002cba:	4b43      	ldr	r3, [pc, #268]	@ (8002dc8 <main+0xbb4>)
 8002cbc:	701a      	strb	r2, [r3, #0]
			  lock_default_1 = Ethernet_setting_data[15]|(Ethernet_setting_data[16]<<8)|(Ethernet_setting_data[17]<<16)|(Ethernet_setting_data[18]<<24);
 8002cbe:	4b36      	ldr	r3, [pc, #216]	@ (8002d98 <main+0xb84>)
 8002cc0:	7bdb      	ldrb	r3, [r3, #15]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b34      	ldr	r3, [pc, #208]	@ (8002d98 <main+0xb84>)
 8002cc6:	7c1b      	ldrb	r3, [r3, #16]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <main+0xb84>)
 8002cce:	7c5b      	ldrb	r3, [r3, #17]
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	4b30      	ldr	r3, [pc, #192]	@ (8002d98 <main+0xb84>)
 8002cd6:	7c9b      	ldrb	r3, [r3, #18]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <main+0xbb8>)
 8002ce0:	601a      	str	r2, [r3, #0]
			  lock_default_2 = Ethernet_setting_data[19]|(Ethernet_setting_data[20]<<8)|(Ethernet_setting_data[21]<<16)|(Ethernet_setting_data[22]<<24);
 8002ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d98 <main+0xb84>)
 8002ce4:	7cdb      	ldrb	r3, [r3, #19]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d98 <main+0xb84>)
 8002cea:	7d1b      	ldrb	r3, [r3, #20]
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	4b29      	ldr	r3, [pc, #164]	@ (8002d98 <main+0xb84>)
 8002cf2:	7d5b      	ldrb	r3, [r3, #21]
 8002cf4:	041b      	lsls	r3, r3, #16
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	4b27      	ldr	r3, [pc, #156]	@ (8002d98 <main+0xb84>)
 8002cfa:	7d9b      	ldrb	r3, [r3, #22]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b33      	ldr	r3, [pc, #204]	@ (8002dd0 <main+0xbbc>)
 8002d04:	601a      	str	r2, [r3, #0]
			  save_data();
 8002d06:	f001 fb1f 	bl	8004348 <save_data>
			  save_time();
 8002d0a:	f001 fc11 	bl	8004530 <save_time>
			  sendString("S", "OK");
 8002d0e:	4931      	ldr	r1, [pc, #196]	@ (8002dd4 <main+0xbc0>)
 8002d10:	4831      	ldr	r0, [pc, #196]	@ (8002dd8 <main+0xbc4>)
 8002d12:	f001 f9ab 	bl	800406c <sendString>
			  HAL_NVIC_SystemReset();
 8002d16:	f003 fa92 	bl	800623e <HAL_NVIC_SystemReset>
			  break;
 8002d1a:	e009      	b.n	8002d30 <main+0xb1c>
		  case 1:// bypass mode
			  bypass_from_Eth = Ethernet_setting_data[1];
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d98 <main+0xb84>)
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf14      	ite	ne
 8002d24:	2301      	movne	r3, #1
 8002d26:	2300      	moveq	r3, #0
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ddc <main+0xbc8>)
 8002d2c:	701a      	strb	r2, [r3, #0]
			  break;
 8002d2e:	bf00      	nop
		  }
	  }
	  /// reset or conmand read data from PC
	  if (Ethernet_read_and_reset)// 0x52
 8002d30:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <main+0xbcc>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80d3 	beq.w	8002ee0 <main+0xccc>
	  {
		  Ethernet_read_and_reset = false;
 8002d3a:	4b29      	ldr	r3, [pc, #164]	@ (8002de0 <main+0xbcc>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_read_and_reset_data)
 8002d40:	4b28      	ldr	r3, [pc, #160]	@ (8002de4 <main+0xbd0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <main+0xb3a>
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d04d      	beq.n	8002de8 <main+0xbd4>
 8002d4c:	e0c8      	b.n	8002ee0 <main+0xccc>
		  {
		  case 0:
			  save_time();
 8002d4e:	f001 fbef 	bl	8004530 <save_time>
			  HAL_NVIC_SystemReset();
 8002d52:	f003 fa74 	bl	800623e <HAL_NVIC_SystemReset>
			  break;
 8002d56:	e0c3      	b.n	8002ee0 <main+0xccc>
 8002d58:	200005a8 	.word	0x200005a8
 8002d5c:	200006f8 	.word	0x200006f8
 8002d60:	20000561 	.word	0x20000561
 8002d64:	20000590 	.word	0x20000590
 8002d68:	20000747 	.word	0x20000747
 8002d6c:	20000739 	.word	0x20000739
 8002d70:	20000738 	.word	0x20000738
 8002d74:	200006cc 	.word	0x200006cc
 8002d78:	200006a8 	.word	0x200006a8
 8002d7c:	200005a0 	.word	0x200005a0
 8002d80:	20000788 	.word	0x20000788
 8002d84:	200006ec 	.word	0x200006ec
 8002d88:	200006f0 	.word	0x200006f0
 8002d8c:	200006e8 	.word	0x200006e8
 8002d90:	20000790 	.word	0x20000790
 8002d94:	20000741 	.word	0x20000741
 8002d98:	2000056c 	.word	0x2000056c
 8002d9c:	20000524 	.word	0x20000524
 8002da0:	20000525 	.word	0x20000525
 8002da4:	20000526 	.word	0x20000526
 8002da8:	20000527 	.word	0x20000527
 8002dac:	20000598 	.word	0x20000598
 8002db0:	20000528 	.word	0x20000528
 8002db4:	20000529 	.word	0x20000529
 8002db8:	2000052a 	.word	0x2000052a
 8002dbc:	2000052b 	.word	0x2000052b
 8002dc0:	20000596 	.word	0x20000596
 8002dc4:	20000518 	.word	0x20000518
 8002dc8:	2000054a 	.word	0x2000054a
 8002dcc:	200006bc 	.word	0x200006bc
 8002dd0:	200006c0 	.word	0x200006c0
 8002dd4:	08009c54 	.word	0x08009c54
 8002dd8:	08009c58 	.word	0x08009c58
 8002ddc:	200006f5 	.word	0x200006f5
 8002de0:	20000744 	.word	0x20000744
 8002de4:	20000585 	.word	0x20000585
		  case 1:
			  data_info[0] = ip1;
 8002de8:	4b9a      	ldr	r3, [pc, #616]	@ (8003054 <main+0xe40>)
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	4b9a      	ldr	r3, [pc, #616]	@ (8003058 <main+0xe44>)
 8002dee:	701a      	strb	r2, [r3, #0]
			  data_info[1] = ip2;
 8002df0:	4b9a      	ldr	r3, [pc, #616]	@ (800305c <main+0xe48>)
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	4b98      	ldr	r3, [pc, #608]	@ (8003058 <main+0xe44>)
 8002df6:	705a      	strb	r2, [r3, #1]
			  data_info[2] = ip3;
 8002df8:	4b99      	ldr	r3, [pc, #612]	@ (8003060 <main+0xe4c>)
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	4b96      	ldr	r3, [pc, #600]	@ (8003058 <main+0xe44>)
 8002dfe:	709a      	strb	r2, [r3, #2]
			  data_info[3] = ip4;
 8002e00:	4b98      	ldr	r3, [pc, #608]	@ (8003064 <main+0xe50>)
 8002e02:	781a      	ldrb	r2, [r3, #0]
 8002e04:	4b94      	ldr	r3, [pc, #592]	@ (8003058 <main+0xe44>)
 8002e06:	70da      	strb	r2, [r3, #3]
			  data_info[4] = port_client>>8;
 8002e08:	4b97      	ldr	r3, [pc, #604]	@ (8003068 <main+0xe54>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b91      	ldr	r3, [pc, #580]	@ (8003058 <main+0xe44>)
 8002e14:	711a      	strb	r2, [r3, #4]
			  data_info[5] = port_client & 0xFF;
 8002e16:	4b94      	ldr	r3, [pc, #592]	@ (8003068 <main+0xe54>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b8e      	ldr	r3, [pc, #568]	@ (8003058 <main+0xe44>)
 8002e1e:	715a      	strb	r2, [r3, #5]
			  data_info[6] = ip_server1;
 8002e20:	4b92      	ldr	r3, [pc, #584]	@ (800306c <main+0xe58>)
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	4b8c      	ldr	r3, [pc, #560]	@ (8003058 <main+0xe44>)
 8002e26:	719a      	strb	r2, [r3, #6]
			  data_info[7] = ip_server2;
 8002e28:	4b91      	ldr	r3, [pc, #580]	@ (8003070 <main+0xe5c>)
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	4b8a      	ldr	r3, [pc, #552]	@ (8003058 <main+0xe44>)
 8002e2e:	71da      	strb	r2, [r3, #7]
			  data_info[8] = ip_server3;
 8002e30:	4b90      	ldr	r3, [pc, #576]	@ (8003074 <main+0xe60>)
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	4b88      	ldr	r3, [pc, #544]	@ (8003058 <main+0xe44>)
 8002e36:	721a      	strb	r2, [r3, #8]
			  data_info[9] = ip_server4;
 8002e38:	4b8f      	ldr	r3, [pc, #572]	@ (8003078 <main+0xe64>)
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	4b86      	ldr	r3, [pc, #536]	@ (8003058 <main+0xe44>)
 8002e3e:	725a      	strb	r2, [r3, #9]
			  data_info[10] = port_server>>8;
 8002e40:	4b8e      	ldr	r3, [pc, #568]	@ (800307c <main+0xe68>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4b83      	ldr	r3, [pc, #524]	@ (8003058 <main+0xe44>)
 8002e4c:	729a      	strb	r2, [r3, #10]
			  data_info[11] = port_server & 0xFF;
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800307c <main+0xe68>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	4b80      	ldr	r3, [pc, #512]	@ (8003058 <main+0xe44>)
 8002e56:	72da      	strb	r2, [r3, #11]
			  data_info[12] = time_delay;
 8002e58:	4b89      	ldr	r3, [pc, #548]	@ (8003080 <main+0xe6c>)
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003058 <main+0xe44>)
 8002e5e:	731a      	strb	r2, [r3, #12]
			  data_info[13] = elevator_mode;
 8002e60:	4b88      	ldr	r3, [pc, #544]	@ (8003084 <main+0xe70>)
 8002e62:	781a      	ldrb	r2, [r3, #0]
 8002e64:	4b7c      	ldr	r3, [pc, #496]	@ (8003058 <main+0xe44>)
 8002e66:	735a      	strb	r2, [r3, #13]
			  data_info[14] = number_card>>24&0xFF;
 8002e68:	4b87      	ldr	r3, [pc, #540]	@ (8003088 <main+0xe74>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0e1b      	lsrs	r3, r3, #24
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	4b79      	ldr	r3, [pc, #484]	@ (8003058 <main+0xe44>)
 8002e72:	739a      	strb	r2, [r3, #14]
			  data_info[15] = number_card>>16&0xFF;
 8002e74:	4b84      	ldr	r3, [pc, #528]	@ (8003088 <main+0xe74>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	4b76      	ldr	r3, [pc, #472]	@ (8003058 <main+0xe44>)
 8002e7e:	73da      	strb	r2, [r3, #15]
			  data_info[16] = number_card>>8&0xFF;
 8002e80:	4b81      	ldr	r3, [pc, #516]	@ (8003088 <main+0xe74>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	4b73      	ldr	r3, [pc, #460]	@ (8003058 <main+0xe44>)
 8002e8a:	741a      	strb	r2, [r3, #16]
			  data_info[17] = number_card&0xFF;
 8002e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003088 <main+0xe74>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b71      	ldr	r3, [pc, #452]	@ (8003058 <main+0xe44>)
 8002e94:	745a      	strb	r2, [r3, #17]
			  data_info[18] = lock_default[0];
 8002e96:	4b7d      	ldr	r3, [pc, #500]	@ (800308c <main+0xe78>)
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8003058 <main+0xe44>)
 8002e9c:	749a      	strb	r2, [r3, #18]
			  data_info[19] = lock_default[1];
 8002e9e:	4b7b      	ldr	r3, [pc, #492]	@ (800308c <main+0xe78>)
 8002ea0:	785a      	ldrb	r2, [r3, #1]
 8002ea2:	4b6d      	ldr	r3, [pc, #436]	@ (8003058 <main+0xe44>)
 8002ea4:	74da      	strb	r2, [r3, #19]
			  data_info[20] = lock_default[2];
 8002ea6:	4b79      	ldr	r3, [pc, #484]	@ (800308c <main+0xe78>)
 8002ea8:	789a      	ldrb	r2, [r3, #2]
 8002eaa:	4b6b      	ldr	r3, [pc, #428]	@ (8003058 <main+0xe44>)
 8002eac:	751a      	strb	r2, [r3, #20]
			  data_info[21] = lock_default[3];
 8002eae:	4b77      	ldr	r3, [pc, #476]	@ (800308c <main+0xe78>)
 8002eb0:	78da      	ldrb	r2, [r3, #3]
 8002eb2:	4b69      	ldr	r3, [pc, #420]	@ (8003058 <main+0xe44>)
 8002eb4:	755a      	strb	r2, [r3, #21]
			  data_info[22] = lock_default[4];
 8002eb6:	4b75      	ldr	r3, [pc, #468]	@ (800308c <main+0xe78>)
 8002eb8:	791a      	ldrb	r2, [r3, #4]
 8002eba:	4b67      	ldr	r3, [pc, #412]	@ (8003058 <main+0xe44>)
 8002ebc:	759a      	strb	r2, [r3, #22]
			  data_info[23] = lock_default[5];
 8002ebe:	4b73      	ldr	r3, [pc, #460]	@ (800308c <main+0xe78>)
 8002ec0:	795a      	ldrb	r2, [r3, #5]
 8002ec2:	4b65      	ldr	r3, [pc, #404]	@ (8003058 <main+0xe44>)
 8002ec4:	75da      	strb	r2, [r3, #23]
			  data_info[24] = lock_default[6];
 8002ec6:	4b71      	ldr	r3, [pc, #452]	@ (800308c <main+0xe78>)
 8002ec8:	799a      	ldrb	r2, [r3, #6]
 8002eca:	4b63      	ldr	r3, [pc, #396]	@ (8003058 <main+0xe44>)
 8002ecc:	761a      	strb	r2, [r3, #24]
			  data_info[25] = lock_default[7];
 8002ece:	4b6f      	ldr	r3, [pc, #444]	@ (800308c <main+0xe78>)
 8002ed0:	79da      	ldrb	r2, [r3, #7]
 8002ed2:	4b61      	ldr	r3, [pc, #388]	@ (8003058 <main+0xe44>)
 8002ed4:	765a      	strb	r2, [r3, #25]
			  sendData_eth_info("R", data_info);
 8002ed6:	4960      	ldr	r1, [pc, #384]	@ (8003058 <main+0xe44>)
 8002ed8:	486d      	ldr	r0, [pc, #436]	@ (8003090 <main+0xe7c>)
 8002eda:	f001 f91d 	bl	8004118 <sendData_eth_info>
			  break;
 8002ede:	bf00      	nop
		  }
	  }
	  //// send data to PC, to keep alive connection
	  if (!add_card_uart && (abs(HAL_GetTick() - time_check) > 5000))
 8002ee0:	4b6c      	ldr	r3, [pc, #432]	@ (8003094 <main+0xe80>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	f083 0301 	eor.w	r3, r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80ad 	beq.w	800304a <main+0xe36>
 8002ef0:	f002 f98a 	bl	8005208 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b68      	ldr	r3, [pc, #416]	@ (8003098 <main+0xe84>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bfb8      	it	lt
 8002f00:	425b      	neglt	r3, r3
 8002f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	f340 809f 	ble.w	800304a <main+0xe36>
	  {
		  keepalive = reconect_eth(SOCK_NUM);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f001 fd0f 	bl	8004930 <reconect_eth>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b61      	ldr	r3, [pc, #388]	@ (800309c <main+0xe88>)
 8002f18:	701a      	strb	r2, [r3, #0]
		  if (keepalive == SOCK_ESTABLISHED)
 8002f1a:	4b60      	ldr	r3, [pc, #384]	@ (800309c <main+0xe88>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b17      	cmp	r3, #23
 8002f20:	f040 8093 	bne.w	800304a <main+0xe36>
		  {
			  c[0] = 0x48;
 8002f24:	4b5e      	ldr	r3, [pc, #376]	@ (80030a0 <main+0xe8c>)
 8002f26:	2248      	movs	r2, #72	@ 0x48
 8002f28:	701a      	strb	r2, [r3, #0]
			  if (unlock_fire)
 8002f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80030a4 <main+0xe90>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <main+0xd26>
			  {
				  c[1] = 0x46;//F
 8002f32:	4b5b      	ldr	r3, [pc, #364]	@ (80030a0 <main+0xe8c>)
 8002f34:	2246      	movs	r2, #70	@ 0x46
 8002f36:	705a      	strb	r2, [r3, #1]
 8002f38:	e033      	b.n	8002fa2 <main+0xd8e>
			  } else if (bypass_from_Eth)
 8002f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80030a8 <main+0xe94>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <main+0xd36>
			  {
				  c[1] = 0x50;//P
 8002f42:	4b57      	ldr	r3, [pc, #348]	@ (80030a0 <main+0xe8c>)
 8002f44:	2250      	movs	r2, #80	@ 0x50
 8002f46:	705a      	strb	r2, [r3, #1]
 8002f48:	e02b      	b.n	8002fa2 <main+0xd8e>
			  } else if (bypass_from_REB)
 8002f4a:	4b58      	ldr	r3, [pc, #352]	@ (80030ac <main+0xe98>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <main+0xd46>
			  {
				  c[1] = 0x45;//E
 8002f52:	4b53      	ldr	r3, [pc, #332]	@ (80030a0 <main+0xe8c>)
 8002f54:	2245      	movs	r2, #69	@ 0x45
 8002f56:	705a      	strb	r2, [r3, #1]
 8002f58:	e023      	b.n	8002fa2 <main+0xd8e>
			  } else if (!REB_connected)
 8002f5a:	4b55      	ldr	r3, [pc, #340]	@ (80030b0 <main+0xe9c>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	f083 0301 	eor.w	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <main+0xd5c>
			  {
				  c[1] = 0x44;//D
 8002f68:	4b4d      	ldr	r3, [pc, #308]	@ (80030a0 <main+0xe8c>)
 8002f6a:	2244      	movs	r2, #68	@ 0x44
 8002f6c:	705a      	strb	r2, [r3, #1]
 8002f6e:	e018      	b.n	8002fa2 <main+0xd8e>
			  } else if (!HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin))
 8002f70:	2104      	movs	r1, #4
 8002f72:	4850      	ldr	r0, [pc, #320]	@ (80030b4 <main+0xea0>)
 8002f74:	f003 ff9a 	bl	8006eac <HAL_GPIO_ReadPin>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d103      	bne.n	8002f86 <main+0xd72>
			  {
				  c[1] = 0x43;//C
 8002f7e:	4b48      	ldr	r3, [pc, #288]	@ (80030a0 <main+0xe8c>)
 8002f80:	2243      	movs	r2, #67	@ 0x43
 8002f82:	705a      	strb	r2, [r3, #1]
 8002f84:	e00d      	b.n	8002fa2 <main+0xd8e>
			  } else if (!Ethernet_connected)
 8002f86:	4b4c      	ldr	r3, [pc, #304]	@ (80030b8 <main+0xea4>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	f083 0301 	eor.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <main+0xd88>
			  {
				  c[1] = 0x4F;//o
 8002f94:	4b42      	ldr	r3, [pc, #264]	@ (80030a0 <main+0xe8c>)
 8002f96:	224f      	movs	r2, #79	@ 0x4f
 8002f98:	705a      	strb	r2, [r3, #1]
 8002f9a:	e002      	b.n	8002fa2 <main+0xd8e>
			  } else
			  {
				  c[1] = 0x52;//r
 8002f9c:	4b40      	ldr	r3, [pc, #256]	@ (80030a0 <main+0xe8c>)
 8002f9e:	2252      	movs	r2, #82	@ 0x52
 8002fa0:	705a      	strb	r2, [r3, #1]
			  }
			  c[2] = dateNow;
 8002fa2:	4b46      	ldr	r3, [pc, #280]	@ (80030bc <main+0xea8>)
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80030a0 <main+0xe8c>)
 8002fa8:	709a      	strb	r2, [r3, #2]
			  c[3] = monthNow;
 8002faa:	4b45      	ldr	r3, [pc, #276]	@ (80030c0 <main+0xeac>)
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	4b3c      	ldr	r3, [pc, #240]	@ (80030a0 <main+0xe8c>)
 8002fb0:	70da      	strb	r2, [r3, #3]
			  c[4] = yearNow>>8;
 8002fb2:	4b44      	ldr	r3, [pc, #272]	@ (80030c4 <main+0xeb0>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	4b38      	ldr	r3, [pc, #224]	@ (80030a0 <main+0xe8c>)
 8002fbe:	711a      	strb	r2, [r3, #4]
			  c[5] = yearNow&0xFF;
 8002fc0:	4b40      	ldr	r3, [pc, #256]	@ (80030c4 <main+0xeb0>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <main+0xe8c>)
 8002fc8:	715a      	strb	r2, [r3, #5]
			  c[6] = hourNow;
 8002fca:	4b3f      	ldr	r3, [pc, #252]	@ (80030c8 <main+0xeb4>)
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	4b34      	ldr	r3, [pc, #208]	@ (80030a0 <main+0xe8c>)
 8002fd0:	719a      	strb	r2, [r3, #6]
			  c[7] = minuteNow;
 8002fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80030cc <main+0xeb8>)
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	4b32      	ldr	r3, [pc, #200]	@ (80030a0 <main+0xe8c>)
 8002fd8:	71da      	strb	r2, [r3, #7]
			  send(SOCK_NUM, c, 8);
 8002fda:	2208      	movs	r2, #8
 8002fdc:	4930      	ldr	r1, [pc, #192]	@ (80030a0 <main+0xe8c>)
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7fd fe96 	bl	8000d10 <send>
		  }
	  }

	  while (send_card_to_pc)
 8002fe4:	e031      	b.n	800304a <main+0xe36>
	  {
		  HAL_Delay(500);
 8002fe6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002fea:	f002 f917 	bl	800521c <HAL_Delay>
		  for (uint32_t i=0; i< number_card; i++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ff4:	e01c      	b.n	8003030 <main+0xe1c>
		  {
			  W25Q_FastRead_address(i*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&send_user);
 8002ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ffa:	015b      	lsls	r3, r3, #5
 8002ffc:	4a34      	ldr	r2, [pc, #208]	@ (80030d0 <main+0xebc>)
 8002ffe:	2120      	movs	r1, #32
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe fd9f 	bl	8001b44 <W25Q_FastRead_address>
			  sendData_eth_CardID ("X", send_user);
 8003006:	4e32      	ldr	r6, [pc, #200]	@ (80030d0 <main+0xebc>)
 8003008:	466d      	mov	r5, sp
 800300a:	f106 040c 	add.w	r4, r6, #12
 800300e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	602b      	str	r3, [r5, #0]
 8003016:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800301a:	482e      	ldr	r0, [pc, #184]	@ (80030d4 <main+0xec0>)
 800301c:	f001 f8ae 	bl	800417c <sendData_eth_CardID>
			  HAL_Delay(100);
 8003020:	2064      	movs	r0, #100	@ 0x64
 8003022:	f002 f8fb 	bl	800521c <HAL_Delay>
		  for (uint32_t i=0; i< number_card; i++)
 8003026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800302a:	3301      	adds	r3, #1
 800302c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003030:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <main+0xe74>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003038:	429a      	cmp	r2, r3
 800303a:	d3dc      	bcc.n	8002ff6 <main+0xde2>
		  }
		  send_u8_eth("X", 1);
 800303c:	2101      	movs	r1, #1
 800303e:	4825      	ldr	r0, [pc, #148]	@ (80030d4 <main+0xec0>)
 8003040:	f000 fffa 	bl	8004038 <send_u8_eth>
		  send_card_to_pc = false;
 8003044:	4b24      	ldr	r3, [pc, #144]	@ (80030d8 <main+0xec4>)
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
	  while (send_card_to_pc)
 800304a:	4b23      	ldr	r3, [pc, #140]	@ (80030d8 <main+0xec4>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1c9      	bne.n	8002fe6 <main+0xdd2>
	  }
	  while (write_mode)
 8003052:	e195      	b.n	8003380 <main+0x116c>
 8003054:	20000524 	.word	0x20000524
 8003058:	2000052c 	.word	0x2000052c
 800305c:	20000525 	.word	0x20000525
 8003060:	20000526 	.word	0x20000526
 8003064:	20000527 	.word	0x20000527
 8003068:	20000598 	.word	0x20000598
 800306c:	20000528 	.word	0x20000528
 8003070:	20000529 	.word	0x20000529
 8003074:	2000052a 	.word	0x2000052a
 8003078:	2000052b 	.word	0x2000052b
 800307c:	20000596 	.word	0x20000596
 8003080:	20000518 	.word	0x20000518
 8003084:	2000054a 	.word	0x2000054a
 8003088:	200006a8 	.word	0x200006a8
 800308c:	2000051c 	.word	0x2000051c
 8003090:	08009c5c 	.word	0x08009c5c
 8003094:	20000742 	.word	0x20000742
 8003098:	200006c4 	.word	0x200006c4
 800309c:	2000055c 	.word	0x2000055c
 80030a0:	20000554 	.word	0x20000554
 80030a4:	20000746 	.word	0x20000746
 80030a8:	200006f5 	.word	0x200006f5
 80030ac:	200006f4 	.word	0x200006f4
 80030b0:	20000031 	.word	0x20000031
 80030b4:	40010800 	.word	0x40010800
 80030b8:	20000738 	.word	0x20000738
 80030bc:	20000591 	.word	0x20000591
 80030c0:	20000592 	.word	0x20000592
 80030c4:	2000059a 	.word	0x2000059a
 80030c8:	20000593 	.word	0x20000593
 80030cc:	20000594 	.word	0x20000594
 80030d0:	200007c8 	.word	0x200007c8
 80030d4:	08009c60 	.word	0x08009c60
 80030d8:	2000073d 	.word	0x2000073d
	  {
		  HAL_Delay(1000);
 80030dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030e0:	f002 f89c 	bl	800521c <HAL_Delay>
		  uint32_t totalCard = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		  sendString("W", "EOK");
 80030ea:	49a8      	ldr	r1, [pc, #672]	@ (800338c <main+0x1178>)
 80030ec:	48a8      	ldr	r0, [pc, #672]	@ (8003390 <main+0x117c>)
 80030ee:	f000 ffbd 	bl	800406c <sendString>
		  time_break = HAL_GetTick();
 80030f2:	f002 f889 	bl	8005208 <HAL_GetTick>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4aa6      	ldr	r2, [pc, #664]	@ (8003394 <main+0x1180>)
 80030fa:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 80030fc:	4ba6      	ldr	r3, [pc, #664]	@ (8003398 <main+0x1184>)
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd f9cd 	bl	80004a2 <getSn_RX_RSR>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	4ba3      	ldr	r3, [pc, #652]	@ (800339c <main+0x1188>)
 800310e:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 8003110:	2000      	movs	r0, #0
 8003112:	f7fd f9c6 	bl	80004a2 <getSn_RX_RSR>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	4ba0      	ldr	r3, [pc, #640]	@ (800339c <main+0x1188>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	f040 812c 	bne.w	800337c <main+0x1168>
			  {
				  if (lenData > 500)
 8003124:	4b9d      	ldr	r3, [pc, #628]	@ (800339c <main+0x1188>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800312c:	d903      	bls.n	8003136 <main+0xf22>
				  {
					  save_time();
 800312e:	f001 f9ff 	bl	8004530 <save_time>
					  HAL_NVIC_SystemReset();
 8003132:	f003 f884 	bl	800623e <HAL_NVIC_SystemReset>
				  }
				  if (!add_card_uart && (lenData > 0))
 8003136:	4b9a      	ldr	r3, [pc, #616]	@ (80033a0 <main+0x118c>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	f083 0301 	eor.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8104 	beq.w	800334e <main+0x113a>
 8003146:	4b95      	ldr	r3, [pc, #596]	@ (800339c <main+0x1188>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80ff 	beq.w	800334e <main+0x113a>
				  {
					  recv(SOCK_NUM, buf, lenData);
 8003150:	4b92      	ldr	r3, [pc, #584]	@ (800339c <main+0x1188>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	4992      	ldr	r1, [pc, #584]	@ (80033a4 <main+0x1190>)
 800315a:	2000      	movs	r0, #0
 800315c:	f7fd fed0 	bl	8000f00 <recv>
					  if (buf[0] == 0x57)
 8003160:	4b90      	ldr	r3, [pc, #576]	@ (80033a4 <main+0x1190>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b57      	cmp	r3, #87	@ 0x57
 8003166:	f040 80f2 	bne.w	800334e <main+0x113a>
					  {
						  if (buf[1] == 0x44)
 800316a:	4b8e      	ldr	r3, [pc, #568]	@ (80033a4 <main+0x1190>)
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	2b44      	cmp	r3, #68	@ 0x44
 8003170:	f040 8089 	bne.w	8003286 <main+0x1072>
						  {
							  totalCard++;
 8003174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003178:	3301      	adds	r3, #1
 800317a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							  write_user.STT = totalCard;
 800317e:	4a8a      	ldr	r2, [pc, #552]	@ (80033a8 <main+0x1194>)
 8003180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003184:	6013      	str	r3, [r2, #0]
							  write_user.cardID =  buf[2]<<24|buf[3]<<16|buf[4]<<8|buf[5];
 8003186:	4b87      	ldr	r3, [pc, #540]	@ (80033a4 <main+0x1190>)
 8003188:	789b      	ldrb	r3, [r3, #2]
 800318a:	061a      	lsls	r2, r3, #24
 800318c:	4b85      	ldr	r3, [pc, #532]	@ (80033a4 <main+0x1190>)
 800318e:	78db      	ldrb	r3, [r3, #3]
 8003190:	041b      	lsls	r3, r3, #16
 8003192:	431a      	orrs	r2, r3
 8003194:	4b83      	ldr	r3, [pc, #524]	@ (80033a4 <main+0x1190>)
 8003196:	791b      	ldrb	r3, [r3, #4]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	4313      	orrs	r3, r2
 800319c:	4a81      	ldr	r2, [pc, #516]	@ (80033a4 <main+0x1190>)
 800319e:	7952      	ldrb	r2, [r2, #5]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b80      	ldr	r3, [pc, #512]	@ (80033a8 <main+0x1194>)
 80031a6:	605a      	str	r2, [r3, #4]
							  write_user.permis[0] = buf[6];
 80031a8:	4b7e      	ldr	r3, [pc, #504]	@ (80033a4 <main+0x1190>)
 80031aa:	799a      	ldrb	r2, [r3, #6]
 80031ac:	4b7e      	ldr	r3, [pc, #504]	@ (80033a8 <main+0x1194>)
 80031ae:	721a      	strb	r2, [r3, #8]
							  write_user.permis[1] = buf[7];
 80031b0:	4b7c      	ldr	r3, [pc, #496]	@ (80033a4 <main+0x1190>)
 80031b2:	79da      	ldrb	r2, [r3, #7]
 80031b4:	4b7c      	ldr	r3, [pc, #496]	@ (80033a8 <main+0x1194>)
 80031b6:	725a      	strb	r2, [r3, #9]
							  write_user.permis[2] = buf[8];
 80031b8:	4b7a      	ldr	r3, [pc, #488]	@ (80033a4 <main+0x1190>)
 80031ba:	7a1a      	ldrb	r2, [r3, #8]
 80031bc:	4b7a      	ldr	r3, [pc, #488]	@ (80033a8 <main+0x1194>)
 80031be:	729a      	strb	r2, [r3, #10]
							  write_user.permis[3] = buf[9];
 80031c0:	4b78      	ldr	r3, [pc, #480]	@ (80033a4 <main+0x1190>)
 80031c2:	7a5a      	ldrb	r2, [r3, #9]
 80031c4:	4b78      	ldr	r3, [pc, #480]	@ (80033a8 <main+0x1194>)
 80031c6:	72da      	strb	r2, [r3, #11]
							  write_user.permis[4] = buf[10];
 80031c8:	4b76      	ldr	r3, [pc, #472]	@ (80033a4 <main+0x1190>)
 80031ca:	7a9a      	ldrb	r2, [r3, #10]
 80031cc:	4b76      	ldr	r3, [pc, #472]	@ (80033a8 <main+0x1194>)
 80031ce:	731a      	strb	r2, [r3, #12]
							  write_user.permis[5] = buf[11];
 80031d0:	4b74      	ldr	r3, [pc, #464]	@ (80033a4 <main+0x1190>)
 80031d2:	7ada      	ldrb	r2, [r3, #11]
 80031d4:	4b74      	ldr	r3, [pc, #464]	@ (80033a8 <main+0x1194>)
 80031d6:	735a      	strb	r2, [r3, #13]
							  write_user.permis[6] = buf[12];
 80031d8:	4b72      	ldr	r3, [pc, #456]	@ (80033a4 <main+0x1190>)
 80031da:	7b1a      	ldrb	r2, [r3, #12]
 80031dc:	4b72      	ldr	r3, [pc, #456]	@ (80033a8 <main+0x1194>)
 80031de:	739a      	strb	r2, [r3, #14]
							  write_user.permis[7] = buf[13];
 80031e0:	4b70      	ldr	r3, [pc, #448]	@ (80033a4 <main+0x1190>)
 80031e2:	7b5a      	ldrb	r2, [r3, #13]
 80031e4:	4b70      	ldr	r3, [pc, #448]	@ (80033a8 <main+0x1194>)
 80031e6:	73da      	strb	r2, [r3, #15]
							  write_user.beginDate = buf[14];
 80031e8:	4b6e      	ldr	r3, [pc, #440]	@ (80033a4 <main+0x1190>)
 80031ea:	7b9a      	ldrb	r2, [r3, #14]
 80031ec:	4b6e      	ldr	r3, [pc, #440]	@ (80033a8 <main+0x1194>)
 80031ee:	74da      	strb	r2, [r3, #19]
							  write_user.beginMonth = buf[15];
 80031f0:	4b6c      	ldr	r3, [pc, #432]	@ (80033a4 <main+0x1190>)
 80031f2:	7bda      	ldrb	r2, [r3, #15]
 80031f4:	4b6c      	ldr	r3, [pc, #432]	@ (80033a8 <main+0x1194>)
 80031f6:	749a      	strb	r2, [r3, #18]
							  write_user.beginYear = buf[16]<<8 | buf[17];
 80031f8:	4b6a      	ldr	r3, [pc, #424]	@ (80033a4 <main+0x1190>)
 80031fa:	7c1b      	ldrb	r3, [r3, #16]
 80031fc:	b21b      	sxth	r3, r3
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	b21a      	sxth	r2, r3
 8003202:	4b68      	ldr	r3, [pc, #416]	@ (80033a4 <main+0x1190>)
 8003204:	7c5b      	ldrb	r3, [r3, #17]
 8003206:	b21b      	sxth	r3, r3
 8003208:	4313      	orrs	r3, r2
 800320a:	b21b      	sxth	r3, r3
 800320c:	b29a      	uxth	r2, r3
 800320e:	4b66      	ldr	r3, [pc, #408]	@ (80033a8 <main+0x1194>)
 8003210:	821a      	strh	r2, [r3, #16]
							  write_user.beginHour = buf[18];
 8003212:	4b64      	ldr	r3, [pc, #400]	@ (80033a4 <main+0x1190>)
 8003214:	7c9a      	ldrb	r2, [r3, #18]
 8003216:	4b64      	ldr	r3, [pc, #400]	@ (80033a8 <main+0x1194>)
 8003218:	751a      	strb	r2, [r3, #20]
							  write_user.beginMinute = buf[19];
 800321a:	4b62      	ldr	r3, [pc, #392]	@ (80033a4 <main+0x1190>)
 800321c:	7cda      	ldrb	r2, [r3, #19]
 800321e:	4b62      	ldr	r3, [pc, #392]	@ (80033a8 <main+0x1194>)
 8003220:	755a      	strb	r2, [r3, #21]
							  write_user.endDate = buf[20];
 8003222:	4b60      	ldr	r3, [pc, #384]	@ (80033a4 <main+0x1190>)
 8003224:	7d1a      	ldrb	r2, [r3, #20]
 8003226:	4b60      	ldr	r3, [pc, #384]	@ (80033a8 <main+0x1194>)
 8003228:	765a      	strb	r2, [r3, #25]
							  write_user.endMonth = buf[21];
 800322a:	4b5e      	ldr	r3, [pc, #376]	@ (80033a4 <main+0x1190>)
 800322c:	7d5a      	ldrb	r2, [r3, #21]
 800322e:	4b5e      	ldr	r3, [pc, #376]	@ (80033a8 <main+0x1194>)
 8003230:	761a      	strb	r2, [r3, #24]
							  write_user.endYear = buf[22]<<8 | buf[23];
 8003232:	4b5c      	ldr	r3, [pc, #368]	@ (80033a4 <main+0x1190>)
 8003234:	7d9b      	ldrb	r3, [r3, #22]
 8003236:	b21b      	sxth	r3, r3
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	b21a      	sxth	r2, r3
 800323c:	4b59      	ldr	r3, [pc, #356]	@ (80033a4 <main+0x1190>)
 800323e:	7ddb      	ldrb	r3, [r3, #23]
 8003240:	b21b      	sxth	r3, r3
 8003242:	4313      	orrs	r3, r2
 8003244:	b21b      	sxth	r3, r3
 8003246:	b29a      	uxth	r2, r3
 8003248:	4b57      	ldr	r3, [pc, #348]	@ (80033a8 <main+0x1194>)
 800324a:	82da      	strh	r2, [r3, #22]
							  write_user.endHour = buf[24];
 800324c:	4b55      	ldr	r3, [pc, #340]	@ (80033a4 <main+0x1190>)
 800324e:	7e1a      	ldrb	r2, [r3, #24]
 8003250:	4b55      	ldr	r3, [pc, #340]	@ (80033a8 <main+0x1194>)
 8003252:	769a      	strb	r2, [r3, #26]
							  write_user.endMinute = buf[25];
 8003254:	4b53      	ldr	r3, [pc, #332]	@ (80033a4 <main+0x1190>)
 8003256:	7e5a      	ldrb	r2, [r3, #25]
 8003258:	4b53      	ldr	r3, [pc, #332]	@ (80033a8 <main+0x1194>)
 800325a:	76da      	strb	r2, [r3, #27]
							  W25Q_Write_Nbytes((totalCard-1)*sizeof(user_info_t) + Block32, (uint8_t *)&write_user, sizeof(user_info_t));
 800325c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003260:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003264:	33ff      	adds	r3, #255	@ 0xff
 8003266:	015b      	lsls	r3, r3, #5
 8003268:	2220      	movs	r2, #32
 800326a:	494f      	ldr	r1, [pc, #316]	@ (80033a8 <main+0x1194>)
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe fd26 	bl	8001cbe <W25Q_Write_Nbytes>
							  sendString("W", "DOK");
 8003272:	494e      	ldr	r1, [pc, #312]	@ (80033ac <main+0x1198>)
 8003274:	4846      	ldr	r0, [pc, #280]	@ (8003390 <main+0x117c>)
 8003276:	f000 fef9 	bl	800406c <sendString>
							  time_break = HAL_GetTick();
 800327a:	f001 ffc5 	bl	8005208 <HAL_GetTick>
 800327e:	4603      	mov	r3, r0
 8003280:	4a44      	ldr	r2, [pc, #272]	@ (8003394 <main+0x1180>)
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e063      	b.n	800334e <main+0x113a>
						  } else if (buf[1] == 0x43)
 8003286:	4b47      	ldr	r3, [pc, #284]	@ (80033a4 <main+0x1190>)
 8003288:	785b      	ldrb	r3, [r3, #1]
 800328a:	2b43      	cmp	r3, #67	@ 0x43
 800328c:	d15f      	bne.n	800334e <main+0x113a>
						  {
							  write_done = true;
 800328e:	4b48      	ldr	r3, [pc, #288]	@ (80033b0 <main+0x119c>)
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
				  }
			  } else
			  {
				  continue;
			  }
			  while (write_done)
 8003294:	e05b      	b.n	800334e <main+0x113a>
			  {
				  for (uint8_t i=0; i<(number_card)*sizeof(user_info_t)/Sector+1; i++)
 8003296:	2300      	movs	r3, #0
 8003298:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800329c:	e00a      	b.n	80032b4 <main+0x10a0>
				  {
					  W25Q_Erase_Sector(i);
 800329e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fcb9 	bl	8001c1c <W25Q_Erase_Sector>
				  for (uint8_t i=0; i<(number_card)*sizeof(user_info_t)/Sector+1; i++)
 80032aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80032ae:	3301      	adds	r3, #1
 80032b0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80032b4:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 80032b8:	4b3e      	ldr	r3, [pc, #248]	@ (80033b4 <main+0x11a0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	015b      	lsls	r3, r3, #5
 80032be:	0b1b      	lsrs	r3, r3, #12
 80032c0:	3301      	adds	r3, #1
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d3eb      	bcc.n	800329e <main+0x108a>
				  }
				  for (uint32_t i = 0; i<totalCard; i++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032cc:	e016      	b.n	80032fc <main+0x10e8>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t)+ Block32, sizeof(user_info_t), (uint8_t *)&send_user);
 80032ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032d2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80032d6:	015b      	lsls	r3, r3, #5
 80032d8:	4a37      	ldr	r2, [pc, #220]	@ (80033b8 <main+0x11a4>)
 80032da:	2120      	movs	r1, #32
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fc31 	bl	8001b44 <W25Q_FastRead_address>
					  W25Q_Write_Nbytes(i*sizeof(user_info_t), (uint8_t *)&send_user, sizeof(user_info_t));
 80032e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032e6:	015b      	lsls	r3, r3, #5
 80032e8:	2220      	movs	r2, #32
 80032ea:	4933      	ldr	r1, [pc, #204]	@ (80033b8 <main+0x11a4>)
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fce6 	bl	8001cbe <W25Q_Write_Nbytes>
				  for (uint32_t i = 0; i<totalCard; i++)
 80032f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032f6:	3301      	adds	r3, #1
 80032f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032fc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003304:	429a      	cmp	r2, r3
 8003306:	d3e2      	bcc.n	80032ce <main+0x10ba>
				  }
				  for (uint32_t i=0; i<((totalCard*sizeof(user_info_t)/Sector)+1); i++)
 8003308:	2300      	movs	r3, #0
 800330a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800330e:	e00d      	b.n	800332c <main+0x1118>
				  {
					  W25Q_Erase_Sector(i + Block32/0x1000);
 8003310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003314:	b29b      	uxth	r3, r3
 8003316:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800331a:	b29b      	uxth	r3, r3
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fc7d 	bl	8001c1c <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((totalCard*sizeof(user_info_t)/Sector)+1); i++)
 8003322:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003326:	3301      	adds	r3, #1
 8003328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800332c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003330:	015b      	lsls	r3, r3, #5
 8003332:	0b1b      	lsrs	r3, r3, #12
 8003334:	3301      	adds	r3, #1
 8003336:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800333a:	429a      	cmp	r2, r3
 800333c:	d3e8      	bcc.n	8003310 <main+0x10fc>
				  }
				  sendString("W", "COK");
 800333e:	491f      	ldr	r1, [pc, #124]	@ (80033bc <main+0x11a8>)
 8003340:	4813      	ldr	r0, [pc, #76]	@ (8003390 <main+0x117c>)
 8003342:	f000 fe93 	bl	800406c <sendString>
				  save_time();
 8003346:	f001 f8f3 	bl	8004530 <save_time>
				  HAL_NVIC_SystemReset();
 800334a:	f002 ff78 	bl	800623e <HAL_NVIC_SystemReset>
			  while (write_done)
 800334e:	4b18      	ldr	r3, [pc, #96]	@ (80033b0 <main+0x119c>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d19f      	bne.n	8003296 <main+0x1082>
			  }

			  if ((abs(HAL_GetTick() - time_break) > Timeout_online))
 8003356:	f001 ff57 	bl	8005208 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <main+0x1180>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	bfb8      	it	lt
 8003366:	425b      	neglt	r3, r3
 8003368:	f242 7210 	movw	r2, #10000	@ 0x2710
 800336c:	4293      	cmp	r3, r2
 800336e:	f77f aec8 	ble.w	8003102 <main+0xeee>
			  {
				  save_time();
 8003372:	f001 f8dd 	bl	8004530 <save_time>
				  HAL_NVIC_SystemReset();
 8003376:	f002 ff62 	bl	800623e <HAL_NVIC_SystemReset>
 800337a:	e6c2      	b.n	8003102 <main+0xeee>
				  continue;
 800337c:	bf00      	nop
			  lenData = getSn_RX_RSR(SOCK_NUM);
 800337e:	e6c0      	b.n	8003102 <main+0xeee>
	  while (write_mode)
 8003380:	4b0f      	ldr	r3, [pc, #60]	@ (80033c0 <main+0x11ac>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f47f aea9 	bne.w	80030dc <main+0xec8>
			  }
		  }
	  }
	  while (write_mode_somecard)
 800338a:	e277      	b.n	800387c <main+0x1668>
 800338c:	08009c64 	.word	0x08009c64
 8003390:	08009c68 	.word	0x08009c68
 8003394:	200006b0 	.word	0x200006b0
 8003398:	200006f5 	.word	0x200006f5
 800339c:	200006b4 	.word	0x200006b4
 80033a0:	20000742 	.word	0x20000742
 80033a4:	2000030c 	.word	0x2000030c
 80033a8:	200007a8 	.word	0x200007a8
 80033ac:	08009c6c 	.word	0x08009c6c
 80033b0:	2000073c 	.word	0x2000073c
 80033b4:	200006a8 	.word	0x200006a8
 80033b8:	200007c8 	.word	0x200007c8
 80033bc:	08009c70 	.word	0x08009c70
 80033c0:	2000073b 	.word	0x2000073b
	  {
		  HAL_Delay(1000);
 80033c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033c8:	f001 ff28 	bl	800521c <HAL_Delay>
		  uint32_t add_card = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  sendString("W", "AOK");
 80033d2:	49a7      	ldr	r1, [pc, #668]	@ (8003670 <main+0x145c>)
 80033d4:	48a7      	ldr	r0, [pc, #668]	@ (8003674 <main+0x1460>)
 80033d6:	f000 fe49 	bl	800406c <sendString>
		  time_break = HAL_GetTick();
 80033da:	f001 ff15 	bl	8005208 <HAL_GetTick>
 80033de:	4603      	mov	r3, r0
 80033e0:	4aa5      	ldr	r2, [pc, #660]	@ (8003678 <main+0x1464>)
 80033e2:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 80033e4:	4ba5      	ldr	r3, [pc, #660]	@ (800367c <main+0x1468>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7fd f859 	bl	80004a2 <getSn_RX_RSR>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	4ba2      	ldr	r3, [pc, #648]	@ (8003680 <main+0x146c>)
 80033f6:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 80033f8:	2000      	movs	r0, #0
 80033fa:	f7fd f852 	bl	80004a2 <getSn_RX_RSR>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	4b9f      	ldr	r3, [pc, #636]	@ (8003680 <main+0x146c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	f040 8236 	bne.w	8003878 <main+0x1664>
			  {
				  if (lenData > 512)
 800340c:	4b9c      	ldr	r3, [pc, #624]	@ (8003680 <main+0x146c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003414:	d903      	bls.n	800341e <main+0x120a>
				  {
					  save_time();
 8003416:	f001 f88b 	bl	8004530 <save_time>
					  HAL_NVIC_SystemReset();
 800341a:	f002 ff10 	bl	800623e <HAL_NVIC_SystemReset>
				  }
				  if (!add_card_uart && (lenData > 0))
 800341e:	4b99      	ldr	r3, [pc, #612]	@ (8003684 <main+0x1470>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	f083 0301 	eor.w	r3, r3, #1
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 820d 	beq.w	8003848 <main+0x1634>
 800342e:	4b94      	ldr	r3, [pc, #592]	@ (8003680 <main+0x146c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8208 	beq.w	8003848 <main+0x1634>
				  {
					  recv(SOCK_NUM, buf, lenData);
 8003438:	4b91      	ldr	r3, [pc, #580]	@ (8003680 <main+0x146c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	4991      	ldr	r1, [pc, #580]	@ (8003688 <main+0x1474>)
 8003442:	2000      	movs	r0, #0
 8003444:	f7fd fd5c 	bl	8000f00 <recv>
					  if (buf[0] == 0x57)
 8003448:	4b8f      	ldr	r3, [pc, #572]	@ (8003688 <main+0x1474>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b57      	cmp	r3, #87	@ 0x57
 800344e:	f040 81fb 	bne.w	8003848 <main+0x1634>
					  {
						  if (buf[1] == 0x44)
 8003452:	4b8d      	ldr	r3, [pc, #564]	@ (8003688 <main+0x1474>)
 8003454:	785b      	ldrb	r3, [r3, #1]
 8003456:	2b44      	cmp	r3, #68	@ 0x44
 8003458:	f040 808b 	bne.w	8003572 <main+0x135e>
						  {
							  add_card++;
 800345c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003460:	3301      	adds	r3, #1
 8003462:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							  write_user.STT++;
 8003466:	4b89      	ldr	r3, [pc, #548]	@ (800368c <main+0x1478>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3301      	adds	r3, #1
 800346c:	4a87      	ldr	r2, [pc, #540]	@ (800368c <main+0x1478>)
 800346e:	6013      	str	r3, [r2, #0]
							  write_user.cardID =  buf[2]<<24|buf[3]<<16|buf[4]<<8|buf[5];
 8003470:	4b85      	ldr	r3, [pc, #532]	@ (8003688 <main+0x1474>)
 8003472:	789b      	ldrb	r3, [r3, #2]
 8003474:	061a      	lsls	r2, r3, #24
 8003476:	4b84      	ldr	r3, [pc, #528]	@ (8003688 <main+0x1474>)
 8003478:	78db      	ldrb	r3, [r3, #3]
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	431a      	orrs	r2, r3
 800347e:	4b82      	ldr	r3, [pc, #520]	@ (8003688 <main+0x1474>)
 8003480:	791b      	ldrb	r3, [r3, #4]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	4313      	orrs	r3, r2
 8003486:	4a80      	ldr	r2, [pc, #512]	@ (8003688 <main+0x1474>)
 8003488:	7952      	ldrb	r2, [r2, #5]
 800348a:	4313      	orrs	r3, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4b7f      	ldr	r3, [pc, #508]	@ (800368c <main+0x1478>)
 8003490:	605a      	str	r2, [r3, #4]
							  write_user.permis[0] = buf[6];
 8003492:	4b7d      	ldr	r3, [pc, #500]	@ (8003688 <main+0x1474>)
 8003494:	799a      	ldrb	r2, [r3, #6]
 8003496:	4b7d      	ldr	r3, [pc, #500]	@ (800368c <main+0x1478>)
 8003498:	721a      	strb	r2, [r3, #8]
							  write_user.permis[1] = buf[7];
 800349a:	4b7b      	ldr	r3, [pc, #492]	@ (8003688 <main+0x1474>)
 800349c:	79da      	ldrb	r2, [r3, #7]
 800349e:	4b7b      	ldr	r3, [pc, #492]	@ (800368c <main+0x1478>)
 80034a0:	725a      	strb	r2, [r3, #9]
							  write_user.permis[2] = buf[8];
 80034a2:	4b79      	ldr	r3, [pc, #484]	@ (8003688 <main+0x1474>)
 80034a4:	7a1a      	ldrb	r2, [r3, #8]
 80034a6:	4b79      	ldr	r3, [pc, #484]	@ (800368c <main+0x1478>)
 80034a8:	729a      	strb	r2, [r3, #10]
							  write_user.permis[3] = buf[9];
 80034aa:	4b77      	ldr	r3, [pc, #476]	@ (8003688 <main+0x1474>)
 80034ac:	7a5a      	ldrb	r2, [r3, #9]
 80034ae:	4b77      	ldr	r3, [pc, #476]	@ (800368c <main+0x1478>)
 80034b0:	72da      	strb	r2, [r3, #11]
							  write_user.permis[4] = buf[10];
 80034b2:	4b75      	ldr	r3, [pc, #468]	@ (8003688 <main+0x1474>)
 80034b4:	7a9a      	ldrb	r2, [r3, #10]
 80034b6:	4b75      	ldr	r3, [pc, #468]	@ (800368c <main+0x1478>)
 80034b8:	731a      	strb	r2, [r3, #12]
							  write_user.permis[5] = buf[11];
 80034ba:	4b73      	ldr	r3, [pc, #460]	@ (8003688 <main+0x1474>)
 80034bc:	7ada      	ldrb	r2, [r3, #11]
 80034be:	4b73      	ldr	r3, [pc, #460]	@ (800368c <main+0x1478>)
 80034c0:	735a      	strb	r2, [r3, #13]
							  write_user.permis[6] = buf[12];
 80034c2:	4b71      	ldr	r3, [pc, #452]	@ (8003688 <main+0x1474>)
 80034c4:	7b1a      	ldrb	r2, [r3, #12]
 80034c6:	4b71      	ldr	r3, [pc, #452]	@ (800368c <main+0x1478>)
 80034c8:	739a      	strb	r2, [r3, #14]
							  write_user.permis[7] = buf[13];
 80034ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003688 <main+0x1474>)
 80034cc:	7b5a      	ldrb	r2, [r3, #13]
 80034ce:	4b6f      	ldr	r3, [pc, #444]	@ (800368c <main+0x1478>)
 80034d0:	73da      	strb	r2, [r3, #15]
							  write_user.beginDate = buf[14];
 80034d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003688 <main+0x1474>)
 80034d4:	7b9a      	ldrb	r2, [r3, #14]
 80034d6:	4b6d      	ldr	r3, [pc, #436]	@ (800368c <main+0x1478>)
 80034d8:	74da      	strb	r2, [r3, #19]
							  write_user.beginMonth = buf[15];
 80034da:	4b6b      	ldr	r3, [pc, #428]	@ (8003688 <main+0x1474>)
 80034dc:	7bda      	ldrb	r2, [r3, #15]
 80034de:	4b6b      	ldr	r3, [pc, #428]	@ (800368c <main+0x1478>)
 80034e0:	749a      	strb	r2, [r3, #18]
							  write_user.beginYear = buf[16]<<8 | buf[17];
 80034e2:	4b69      	ldr	r3, [pc, #420]	@ (8003688 <main+0x1474>)
 80034e4:	7c1b      	ldrb	r3, [r3, #16]
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	b21a      	sxth	r2, r3
 80034ec:	4b66      	ldr	r3, [pc, #408]	@ (8003688 <main+0x1474>)
 80034ee:	7c5b      	ldrb	r3, [r3, #17]
 80034f0:	b21b      	sxth	r3, r3
 80034f2:	4313      	orrs	r3, r2
 80034f4:	b21b      	sxth	r3, r3
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	4b64      	ldr	r3, [pc, #400]	@ (800368c <main+0x1478>)
 80034fa:	821a      	strh	r2, [r3, #16]
							  write_user.beginHour = buf[18];
 80034fc:	4b62      	ldr	r3, [pc, #392]	@ (8003688 <main+0x1474>)
 80034fe:	7c9a      	ldrb	r2, [r3, #18]
 8003500:	4b62      	ldr	r3, [pc, #392]	@ (800368c <main+0x1478>)
 8003502:	751a      	strb	r2, [r3, #20]
							  write_user.beginMinute = buf[19];
 8003504:	4b60      	ldr	r3, [pc, #384]	@ (8003688 <main+0x1474>)
 8003506:	7cda      	ldrb	r2, [r3, #19]
 8003508:	4b60      	ldr	r3, [pc, #384]	@ (800368c <main+0x1478>)
 800350a:	755a      	strb	r2, [r3, #21]
							  write_user.endDate = buf[20];
 800350c:	4b5e      	ldr	r3, [pc, #376]	@ (8003688 <main+0x1474>)
 800350e:	7d1a      	ldrb	r2, [r3, #20]
 8003510:	4b5e      	ldr	r3, [pc, #376]	@ (800368c <main+0x1478>)
 8003512:	765a      	strb	r2, [r3, #25]
							  write_user.endMonth = buf[21];
 8003514:	4b5c      	ldr	r3, [pc, #368]	@ (8003688 <main+0x1474>)
 8003516:	7d5a      	ldrb	r2, [r3, #21]
 8003518:	4b5c      	ldr	r3, [pc, #368]	@ (800368c <main+0x1478>)
 800351a:	761a      	strb	r2, [r3, #24]
							  write_user.endYear = buf[22]<<8 | buf[23];
 800351c:	4b5a      	ldr	r3, [pc, #360]	@ (8003688 <main+0x1474>)
 800351e:	7d9b      	ldrb	r3, [r3, #22]
 8003520:	b21b      	sxth	r3, r3
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	b21a      	sxth	r2, r3
 8003526:	4b58      	ldr	r3, [pc, #352]	@ (8003688 <main+0x1474>)
 8003528:	7ddb      	ldrb	r3, [r3, #23]
 800352a:	b21b      	sxth	r3, r3
 800352c:	4313      	orrs	r3, r2
 800352e:	b21b      	sxth	r3, r3
 8003530:	b29a      	uxth	r2, r3
 8003532:	4b56      	ldr	r3, [pc, #344]	@ (800368c <main+0x1478>)
 8003534:	82da      	strh	r2, [r3, #22]
							  write_user.endHour = buf[24];
 8003536:	4b54      	ldr	r3, [pc, #336]	@ (8003688 <main+0x1474>)
 8003538:	7e1a      	ldrb	r2, [r3, #24]
 800353a:	4b54      	ldr	r3, [pc, #336]	@ (800368c <main+0x1478>)
 800353c:	769a      	strb	r2, [r3, #26]
							  write_user.endMinute = buf[25];
 800353e:	4b52      	ldr	r3, [pc, #328]	@ (8003688 <main+0x1474>)
 8003540:	7e5a      	ldrb	r2, [r3, #25]
 8003542:	4b52      	ldr	r3, [pc, #328]	@ (800368c <main+0x1478>)
 8003544:	76da      	strb	r2, [r3, #27]
							  W25Q_Write_Nbytes((add_card-1)*sizeof(user_info_t) + Block63, (uint8_t *)&write_user, sizeof(user_info_t));
 8003546:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800354a:	f503 33fb 	add.w	r3, r3, #128512	@ 0x1f600
 800354e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003552:	015b      	lsls	r3, r3, #5
 8003554:	2220      	movs	r2, #32
 8003556:	494d      	ldr	r1, [pc, #308]	@ (800368c <main+0x1478>)
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fbb0 	bl	8001cbe <W25Q_Write_Nbytes>
							  sendString("W", "DOK");
 800355e:	494c      	ldr	r1, [pc, #304]	@ (8003690 <main+0x147c>)
 8003560:	4844      	ldr	r0, [pc, #272]	@ (8003674 <main+0x1460>)
 8003562:	f000 fd83 	bl	800406c <sendString>
							  time_break = HAL_GetTick();
 8003566:	f001 fe4f 	bl	8005208 <HAL_GetTick>
 800356a:	4603      	mov	r3, r0
 800356c:	4a42      	ldr	r2, [pc, #264]	@ (8003678 <main+0x1464>)
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	e16a      	b.n	8003848 <main+0x1634>
						  } else if (buf[1] == 0x43)
 8003572:	4b45      	ldr	r3, [pc, #276]	@ (8003688 <main+0x1474>)
 8003574:	785b      	ldrb	r3, [r3, #1]
 8003576:	2b43      	cmp	r3, #67	@ 0x43
 8003578:	f040 8166 	bne.w	8003848 <main+0x1634>
						  {
							  write_done = true;
 800357c:	4b45      	ldr	r3, [pc, #276]	@ (8003694 <main+0x1480>)
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
				  }
			  } else
			  {
				  continue;
			  }
			  while (write_done)
 8003582:	e161      	b.n	8003848 <main+0x1634>
			  {
				  // ghi các thẻ hiện tại vào bộ nhớ đệm từ Block 33
				  for (uint32_t i = 0; i<number_card; i++)
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800358a:	e016      	b.n	80035ba <main+0x13a6>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&send_user);
 800358c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003590:	015b      	lsls	r3, r3, #5
 8003592:	4a41      	ldr	r2, [pc, #260]	@ (8003698 <main+0x1484>)
 8003594:	2120      	movs	r1, #32
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fad4 	bl	8001b44 <W25Q_FastRead_address>
					  W25Q_Write_Nbytes(i*sizeof(user_info_t) + Block32, (uint8_t *)&send_user, sizeof(user_info_t));
 800359c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035a0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80035a4:	015b      	lsls	r3, r3, #5
 80035a6:	2220      	movs	r2, #32
 80035a8:	493b      	ldr	r1, [pc, #236]	@ (8003698 <main+0x1484>)
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fb87 	bl	8001cbe <W25Q_Write_Nbytes>
				  for (uint32_t i = 0; i<number_card; i++)
 80035b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035b4:	3301      	adds	r3, #1
 80035b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035ba:	4b38      	ldr	r3, [pc, #224]	@ (800369c <main+0x1488>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d3e2      	bcc.n	800358c <main+0x1378>
				  }
				  // xóa bộ nhớ ban đầu
				  for (uint8_t i=0; i<(number_card*sizeof(user_info_t)/Sector+1); i++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 80035cc:	e00a      	b.n	80035e4 <main+0x13d0>
				  {
					  W25Q_Erase_Sector(i);
 80035ce:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe fb21 	bl	8001c1c <W25Q_Erase_Sector>
				  for (uint8_t i=0; i<(number_card*sizeof(user_info_t)/Sector+1); i++)
 80035da:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80035de:	3301      	adds	r3, #1
 80035e0:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 80035e4:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 80035e8:	4b2c      	ldr	r3, [pc, #176]	@ (800369c <main+0x1488>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	015b      	lsls	r3, r3, #5
 80035ee:	0b1b      	lsrs	r3, r3, #12
 80035f0:	3301      	adds	r3, #1
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d3eb      	bcc.n	80035ce <main+0x13ba>
				  }
				  uint32_t i = 0, j = 0, k = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  user_info_t old_user, new_user;

				  while (i < number_card && j < add_card)
 8003608:	e086      	b.n	8003718 <main+0x1504>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&old_user);
 800360a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800360e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003612:	015b      	lsls	r3, r3, #5
 8003614:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003618:	2120      	movs	r1, #32
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fa92 	bl	8001b44 <W25Q_FastRead_address>
					  W25Q_FastRead_address(j*sizeof(user_info_t) + Block63, sizeof(user_info_t), (uint8_t *)&new_user);
 8003620:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003624:	f503 33fc 	add.w	r3, r3, #129024	@ 0x1f800
 8003628:	015b      	lsls	r3, r3, #5
 800362a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800362e:	2120      	movs	r1, #32
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fa87 	bl	8001b44 <W25Q_FastRead_address>
					  if (old_user.cardID < new_user.cardID)
 8003636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800363a:	429a      	cmp	r2, r3
 800363c:	d230      	bcs.n	80036a0 <main+0x148c>
					  {
						  old_user.STT = k + 1;
 800363e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003642:	3301      	adds	r3, #1
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&old_user, sizeof(user_info_t));
 8003646:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003650:	2220      	movs	r2, #32
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fb33 	bl	8001cbe <W25Q_Write_Nbytes>
						  i++; // Dịch chỉ số của mảng đã lấy
 8003658:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800365c:	3301      	adds	r3, #1
 800365e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						  k++;
 8003662:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003666:	3301      	adds	r3, #1
 8003668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800366c:	e054      	b.n	8003718 <main+0x1504>
 800366e:	bf00      	nop
 8003670:	08009c74 	.word	0x08009c74
 8003674:	08009c68 	.word	0x08009c68
 8003678:	200006b0 	.word	0x200006b0
 800367c:	200006f5 	.word	0x200006f5
 8003680:	200006b4 	.word	0x200006b4
 8003684:	20000742 	.word	0x20000742
 8003688:	2000030c 	.word	0x2000030c
 800368c:	200007a8 	.word	0x200007a8
 8003690:	08009c6c 	.word	0x08009c6c
 8003694:	2000073c 	.word	0x2000073c
 8003698:	200007c8 	.word	0x200007c8
 800369c:	200006a8 	.word	0x200006a8
					  } else if (old_user.cardID > new_user.cardID)
 80036a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d917      	bls.n	80036d8 <main+0x14c4>
					  {
						  new_user.STT = k + 1;
 80036a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ac:	3301      	adds	r3, #1
 80036ae:	647b      	str	r3, [r7, #68]	@ 0x44
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 80036b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036b4:	015b      	lsls	r3, r3, #5
 80036b6:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80036ba:	2220      	movs	r2, #32
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe fafe 	bl	8001cbe <W25Q_Write_Nbytes>
						  j++; // Dịch chỉ số của mảng đã lấy
 80036c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036c6:	3301      	adds	r3, #1
 80036c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						  k++;
 80036cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036d0:	3301      	adds	r3, #1
 80036d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036d6:	e01f      	b.n	8003718 <main+0x1504>
					  } else if (old_user.cardID == new_user.cardID)
 80036d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036dc:	429a      	cmp	r2, r3
 80036de:	d11b      	bne.n	8003718 <main+0x1504>
					  {
						  new_user.STT = k + 1;
 80036e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036e4:	3301      	adds	r3, #1
 80036e6:	647b      	str	r3, [r7, #68]	@ 0x44
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 80036e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ec:	015b      	lsls	r3, r3, #5
 80036ee:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80036f2:	2220      	movs	r2, #32
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe fae2 	bl	8001cbe <W25Q_Write_Nbytes>
						  j++; // Dịch chỉ số của mảng đã lấy
 80036fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036fe:	3301      	adds	r3, #1
 8003700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						  i++;
 8003704:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003708:	3301      	adds	r3, #1
 800370a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						  k++;
 800370e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003712:	3301      	adds	r3, #1
 8003714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (i < number_card && j < add_card)
 8003718:	4bb2      	ldr	r3, [pc, #712]	@ (80039e4 <main+0x17d0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003720:	429a      	cmp	r2, r3
 8003722:	d229      	bcs.n	8003778 <main+0x1564>
 8003724:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003728:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800372c:	429a      	cmp	r2, r3
 800372e:	f4ff af6c 	bcc.w	800360a <main+0x13f6>
					  }
				  }
				  while (i < number_card)
 8003732:	e021      	b.n	8003778 <main+0x1564>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&old_user);
 8003734:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003738:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800373c:	015b      	lsls	r3, r3, #5
 800373e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003742:	2120      	movs	r1, #32
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe f9fd 	bl	8001b44 <W25Q_FastRead_address>
					  old_user.STT = k + 1;
 800374a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800374e:	3301      	adds	r3, #1
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
					  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&old_user, sizeof(user_info_t));
 8003752:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003756:	015b      	lsls	r3, r3, #5
 8003758:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800375c:	2220      	movs	r2, #32
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe faad 	bl	8001cbe <W25Q_Write_Nbytes>
					  i++;
 8003764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003768:	3301      	adds	r3, #1
 800376a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					  k++;
 800376e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003772:	3301      	adds	r3, #1
 8003774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (i < number_card)
 8003778:	4b9a      	ldr	r3, [pc, #616]	@ (80039e4 <main+0x17d0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003780:	429a      	cmp	r2, r3
 8003782:	d3d7      	bcc.n	8003734 <main+0x1520>
				  }
				  while (j < add_card)
 8003784:	e021      	b.n	80037ca <main+0x15b6>
				  {
					  W25Q_FastRead_address(j*sizeof(user_info_t) + Block63, sizeof(user_info_t), (uint8_t *)&new_user);
 8003786:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800378a:	f503 33fc 	add.w	r3, r3, #129024	@ 0x1f800
 800378e:	015b      	lsls	r3, r3, #5
 8003790:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8003794:	2120      	movs	r1, #32
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe f9d4 	bl	8001b44 <W25Q_FastRead_address>
					  new_user.STT = k + 1;
 800379c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037a0:	3301      	adds	r3, #1
 80037a2:	647b      	str	r3, [r7, #68]	@ 0x44
					  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 80037a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037a8:	015b      	lsls	r3, r3, #5
 80037aa:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80037ae:	2220      	movs	r2, #32
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fa84 	bl	8001cbe <W25Q_Write_Nbytes>
					  j++;
 80037b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037ba:	3301      	adds	r3, #1
 80037bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
					  k++;
 80037c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037c4:	3301      	adds	r3, #1
 80037c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (j < add_card)
 80037ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80037ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d3d7      	bcc.n	8003786 <main+0x1572>
				  }
				  for (uint32_t i=0; i<((number_card*sizeof(user_info_t)/Sector)+1); i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037dc:	e00d      	b.n	80037fa <main+0x15e6>
				  {
					  W25Q_Erase_Sector(i + Block32/0x1000);
 80037de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe fa16 	bl	8001c1c <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((number_card*sizeof(user_info_t)/Sector)+1); i++)
 80037f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037f4:	3301      	adds	r3, #1
 80037f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037fa:	4b7a      	ldr	r3, [pc, #488]	@ (80039e4 <main+0x17d0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	015b      	lsls	r3, r3, #5
 8003800:	0b1b      	lsrs	r3, r3, #12
 8003802:	3301      	adds	r3, #1
 8003804:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003808:	429a      	cmp	r2, r3
 800380a:	d3e8      	bcc.n	80037de <main+0x15ca>
				  }
				  for (uint32_t i=0; i<((add_card*sizeof(user_info_t)/Sector)+1); i++)
 800380c:	2300      	movs	r3, #0
 800380e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003810:	e00a      	b.n	8003828 <main+0x1614>
				  {
					  W25Q_Erase_Sector(i + Block63/0x1000);
 8003812:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003814:	b29b      	uxth	r3, r3
 8003816:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800381a:	b29b      	uxth	r3, r3
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe f9fd 	bl	8001c1c <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((add_card*sizeof(user_info_t)/Sector)+1); i++)
 8003822:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003824:	3301      	adds	r3, #1
 8003826:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003828:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800382c:	015b      	lsls	r3, r3, #5
 800382e:	0b1b      	lsrs	r3, r3, #12
 8003830:	3301      	adds	r3, #1
 8003832:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003834:	429a      	cmp	r2, r3
 8003836:	d3ec      	bcc.n	8003812 <main+0x15fe>
				  }
				  sendString("W", "COK");
 8003838:	496b      	ldr	r1, [pc, #428]	@ (80039e8 <main+0x17d4>)
 800383a:	486c      	ldr	r0, [pc, #432]	@ (80039ec <main+0x17d8>)
 800383c:	f000 fc16 	bl	800406c <sendString>
				  save_time();
 8003840:	f000 fe76 	bl	8004530 <save_time>
				  HAL_NVIC_SystemReset();
 8003844:	f002 fcfb 	bl	800623e <HAL_NVIC_SystemReset>
			  while (write_done)
 8003848:	4b69      	ldr	r3, [pc, #420]	@ (80039f0 <main+0x17dc>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f47f ae99 	bne.w	8003584 <main+0x1370>
			  }

			  if (abs(HAL_GetTick() - time_break) > Timeout_online)
 8003852:	f001 fcd9 	bl	8005208 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	4b66      	ldr	r3, [pc, #408]	@ (80039f4 <main+0x17e0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	bfb8      	it	lt
 8003862:	425b      	neglt	r3, r3
 8003864:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003868:	4293      	cmp	r3, r2
 800386a:	f77f adbe 	ble.w	80033ea <main+0x11d6>
			  {
				  save_time();
 800386e:	f000 fe5f 	bl	8004530 <save_time>
				  HAL_NVIC_SystemReset();
 8003872:	f002 fce4 	bl	800623e <HAL_NVIC_SystemReset>
 8003876:	e5b8      	b.n	80033ea <main+0x11d6>
				  continue;
 8003878:	bf00      	nop
			  lenData = getSn_RX_RSR(SOCK_NUM);
 800387a:	e5b6      	b.n	80033ea <main+0x11d6>
	  while (write_mode_somecard)
 800387c:	4b5e      	ldr	r3, [pc, #376]	@ (80039f8 <main+0x17e4>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f47f ad9f 	bne.w	80033c4 <main+0x11b0>
			  }
		  }
	  }
	  while (write_card_by_hand)
 8003886:	e060      	b.n	800394a <main+0x1736>
	  {
		  sendString("W", "HOK");
 8003888:	495c      	ldr	r1, [pc, #368]	@ (80039fc <main+0x17e8>)
 800388a:	4858      	ldr	r0, [pc, #352]	@ (80039ec <main+0x17d8>)
 800388c:	f000 fbee 	bl	800406c <sendString>
		  time_break = HAL_GetTick();
 8003890:	f001 fcba 	bl	8005208 <HAL_GetTick>
 8003894:	4603      	mov	r3, r0
 8003896:	4a57      	ldr	r2, [pc, #348]	@ (80039f4 <main+0x17e0>)
 8003898:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 800389a:	4b59      	ldr	r3, [pc, #356]	@ (8003a00 <main+0x17ec>)
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7fc fdfe 	bl	80004a2 <getSn_RX_RSR>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b56      	ldr	r3, [pc, #344]	@ (8003a04 <main+0x17f0>)
 80038ac:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 80038ae:	2000      	movs	r0, #0
 80038b0:	f7fc fdf7 	bl	80004a2 <getSn_RX_RSR>
 80038b4:	4603      	mov	r3, r0
 80038b6:	461a      	mov	r2, r3
 80038b8:	4b52      	ldr	r3, [pc, #328]	@ (8003a04 <main+0x17f0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d120      	bne.n	8003902 <main+0x16ee>
			  {
				  if (lenData > 512)
 80038c0:	4b50      	ldr	r3, [pc, #320]	@ (8003a04 <main+0x17f0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c8:	d903      	bls.n	80038d2 <main+0x16be>
				  {
					  save_time();
 80038ca:	f000 fe31 	bl	8004530 <save_time>
					  HAL_NVIC_SystemReset();
 80038ce:	f002 fcb6 	bl	800623e <HAL_NVIC_SystemReset>
				  }
				  if (lenData > 0)
 80038d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003a04 <main+0x17f0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d013      	beq.n	8003902 <main+0x16ee>
				  {
					  recv(SOCK_NUM, buf, lenData);
 80038da:	4b4a      	ldr	r3, [pc, #296]	@ (8003a04 <main+0x17f0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	4949      	ldr	r1, [pc, #292]	@ (8003a08 <main+0x17f4>)
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7fd fb0b 	bl	8000f00 <recv>
					  if (buf[0] == 0x57)
 80038ea:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <main+0x17f4>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b57      	cmp	r3, #87	@ 0x57
 80038f0:	d107      	bne.n	8003902 <main+0x16ee>
					  {
						  if (buf[1] == 0x43)
 80038f2:	4b45      	ldr	r3, [pc, #276]	@ (8003a08 <main+0x17f4>)
 80038f4:	785b      	ldrb	r3, [r3, #1]
 80038f6:	2b43      	cmp	r3, #67	@ 0x43
 80038f8:	d103      	bne.n	8003902 <main+0x16ee>
						  {
							  save_time();
 80038fa:	f000 fe19 	bl	8004530 <save_time>
							  HAL_NVIC_SystemReset();
 80038fe:	f002 fc9e 	bl	800623e <HAL_NVIC_SystemReset>
						  }
					  }
				  }
			  }
			  if (new_wcode)
 8003902:	4b42      	ldr	r3, [pc, #264]	@ (8003a0c <main+0x17f8>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <main+0x1712>
			  {
				  new_wcode = false;
 800390a:	4b40      	ldr	r3, [pc, #256]	@ (8003a0c <main+0x17f8>)
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
				  sendData_eth("H", wcode);
 8003910:	4b3f      	ldr	r3, [pc, #252]	@ (8003a10 <main+0x17fc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4619      	mov	r1, r3
 8003916:	483f      	ldr	r0, [pc, #252]	@ (8003a14 <main+0x1800>)
 8003918:	f000 fb68 	bl	8003fec <sendData_eth>
				  time_break = HAL_GetTick();
 800391c:	f001 fc74 	bl	8005208 <HAL_GetTick>
 8003920:	4603      	mov	r3, r0
 8003922:	4a34      	ldr	r2, [pc, #208]	@ (80039f4 <main+0x17e0>)
 8003924:	6013      	str	r3, [r2, #0]
			  }
			  if (abs(HAL_GetTick() - time_break) > Timeout_online)
 8003926:	f001 fc6f 	bl	8005208 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	4b31      	ldr	r3, [pc, #196]	@ (80039f4 <main+0x17e0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfb8      	it	lt
 8003936:	425b      	neglt	r3, r3
 8003938:	f242 7210 	movw	r2, #10000	@ 0x2710
 800393c:	4293      	cmp	r3, r2
 800393e:	ddaf      	ble.n	80038a0 <main+0x168c>
			  {
				  save_time();
 8003940:	f000 fdf6 	bl	8004530 <save_time>
				  HAL_NVIC_SystemReset();
 8003944:	f002 fc7b 	bl	800623e <HAL_NVIC_SystemReset>
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003948:	e7aa      	b.n	80038a0 <main+0x168c>
	  while (write_card_by_hand)
 800394a:	4b33      	ldr	r3, [pc, #204]	@ (8003a18 <main+0x1804>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d19a      	bne.n	8003888 <main+0x1674>
			  }
		  }
	  }
	  if (RST_set)
 8003952:	4b32      	ldr	r3, [pc, #200]	@ (8003a1c <main+0x1808>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d032      	beq.n	80039c0 <main+0x17ac>
	  {
		  if (RST_timer_last > 10000)
 800395a:	4b31      	ldr	r3, [pc, #196]	@ (8003a20 <main+0x180c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003962:	4293      	cmp	r3, r2
 8003964:	d92a      	bls.n	80039bc <main+0x17a8>
		  {
			  ip1 = 192;
 8003966:	4b2f      	ldr	r3, [pc, #188]	@ (8003a24 <main+0x1810>)
 8003968:	22c0      	movs	r2, #192	@ 0xc0
 800396a:	701a      	strb	r2, [r3, #0]
			  ip2 = 168;
 800396c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a28 <main+0x1814>)
 800396e:	22a8      	movs	r2, #168	@ 0xa8
 8003970:	701a      	strb	r2, [r3, #0]
			  ip3 = 0;
 8003972:	4b2e      	ldr	r3, [pc, #184]	@ (8003a2c <main+0x1818>)
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
			  ip4 = 72;
 8003978:	4b2d      	ldr	r3, [pc, #180]	@ (8003a30 <main+0x181c>)
 800397a:	2248      	movs	r2, #72	@ 0x48
 800397c:	701a      	strb	r2, [r3, #0]
			  ip_server1 = 192;
 800397e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a34 <main+0x1820>)
 8003980:	22c0      	movs	r2, #192	@ 0xc0
 8003982:	701a      	strb	r2, [r3, #0]
			  ip_server2 = 168;
 8003984:	4b2c      	ldr	r3, [pc, #176]	@ (8003a38 <main+0x1824>)
 8003986:	22a8      	movs	r2, #168	@ 0xa8
 8003988:	701a      	strb	r2, [r3, #0]
			  ip_server3 = 0;
 800398a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a3c <main+0x1828>)
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
			  ip_server4 = 2;
 8003990:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <main+0x182c>)
 8003992:	2202      	movs	r2, #2
 8003994:	701a      	strb	r2, [r3, #0]
			  port_server = 6000;
 8003996:	4b2b      	ldr	r3, [pc, #172]	@ (8003a44 <main+0x1830>)
 8003998:	f241 7270 	movw	r2, #6000	@ 0x1770
 800399c:	801a      	strh	r2, [r3, #0]
			  port_client = 0;
 800399e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a48 <main+0x1834>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	801a      	strh	r2, [r3, #0]
			  time_delay = 1;
 80039a4:	4b29      	ldr	r3, [pc, #164]	@ (8003a4c <main+0x1838>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
			  elevator_mode = 0;
 80039aa:	4b29      	ldr	r3, [pc, #164]	@ (8003a50 <main+0x183c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
			  W25Q_EraseChip();
 80039b0:	f7fe f91b 	bl	8001bea <W25Q_EraseChip>
			  save_data();
 80039b4:	f000 fcc8 	bl	8004348 <save_data>
			  save_time();
 80039b8:	f000 fdba 	bl	8004530 <save_time>
		  }
		  HAL_NVIC_SystemReset();
 80039bc:	f002 fc3f 	bl	800623e <HAL_NVIC_SystemReset>
	  }
	  if (counter_reset == 700)
 80039c0:	4b24      	ldr	r3, [pc, #144]	@ (8003a54 <main+0x1840>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80039c8:	d103      	bne.n	80039d2 <main+0x17be>
	  {
		  save_time();
 80039ca:	f000 fdb1 	bl	8004530 <save_time>
		  HAL_NVIC_SystemReset();
 80039ce:	f002 fc36 	bl	800623e <HAL_NVIC_SystemReset>
	  }
	  HAL_Delay(10);
 80039d2:	200a      	movs	r0, #10
 80039d4:	f001 fc22 	bl	800521c <HAL_Delay>
 80039d8:	f7fe be8e 	b.w	80026f8 <main+0x4e4>
		  continue;
 80039dc:	bf00      	nop
	  lenData = getSn_RX_RSR(SOCK_NUM);
 80039de:	f7fe be8b 	b.w	80026f8 <main+0x4e4>
 80039e2:	bf00      	nop
 80039e4:	200006a8 	.word	0x200006a8
 80039e8:	08009c70 	.word	0x08009c70
 80039ec:	08009c68 	.word	0x08009c68
 80039f0:	2000073c 	.word	0x2000073c
 80039f4:	200006b0 	.word	0x200006b0
 80039f8:	2000073a 	.word	0x2000073a
 80039fc:	08009c78 	.word	0x08009c78
 8003a00:	200006f5 	.word	0x200006f5
 8003a04:	200006b4 	.word	0x200006b4
 8003a08:	2000030c 	.word	0x2000030c
 8003a0c:	2000073f 	.word	0x2000073f
 8003a10:	200005a0 	.word	0x200005a0
 8003a14:	08009c7c 	.word	0x08009c7c
 8003a18:	20000743 	.word	0x20000743
 8003a1c:	20000745 	.word	0x20000745
 8003a20:	200006dc 	.word	0x200006dc
 8003a24:	20000524 	.word	0x20000524
 8003a28:	20000525 	.word	0x20000525
 8003a2c:	20000526 	.word	0x20000526
 8003a30:	20000527 	.word	0x20000527
 8003a34:	20000528 	.word	0x20000528
 8003a38:	20000529 	.word	0x20000529
 8003a3c:	2000052a 	.word	0x2000052a
 8003a40:	2000052b 	.word	0x2000052b
 8003a44:	20000596 	.word	0x20000596
 8003a48:	20000598 	.word	0x20000598
 8003a4c:	20000518 	.word	0x20000518
 8003a50:	2000054a 	.word	0x2000054a
 8003a54:	200006e4 	.word	0x200006e4

08003a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b090      	sub	sp, #64	@ 0x40
 8003a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a5e:	f107 0318 	add.w	r3, r7, #24
 8003a62:	2228      	movs	r2, #40	@ 0x28
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f006 f898 	bl	8009b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	609a      	str	r2, [r3, #8]
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003a7a:	2309      	movs	r3, #9
 8003a7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003a84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a92:	2302      	movs	r3, #2
 8003a94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003a9c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aa2:	f107 0318 	add.w	r3, r7, #24
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 fab4 	bl	8007014 <HAL_RCC_OscConfig>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003ab2:	f001 f8e7 	bl	8004c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ab6:	230f      	movs	r3, #15
 8003ab8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aba:	2302      	movs	r3, #2
 8003abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ac2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 fd21 	bl	8007518 <HAL_RCC_ClockConfig>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003adc:	f001 f8d2 	bl	8004c84 <Error_Handler>
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	3740      	adds	r7, #64	@ 0x40
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003aec:	4b17      	ldr	r3, [pc, #92]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003aee:	4a18      	ldr	r2, [pc, #96]	@ (8003b50 <MX_CAN_Init+0x68>)
 8003af0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 60;
 8003af2:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003af4:	223c      	movs	r2, #60	@ 0x3c
 8003af6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003af8:	4b14      	ldr	r3, [pc, #80]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003afe:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8003b04:	4b11      	ldr	r3, [pc, #68]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003b06:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8003b0a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003b0e:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8003b12:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003b14:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003b26:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003b2c:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003b38:	4804      	ldr	r0, [pc, #16]	@ (8003b4c <MX_CAN_Init+0x64>)
 8003b3a:	f001 fbb1 	bl	80052a0 <HAL_CAN_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003b44:	f001 f89e 	bl	8004c84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200000a4 	.word	0x200000a4
 8003b50:	40006400 	.word	0x40006400

08003b54 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003b58:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <MX_IWDG_Init+0x2c>)
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <MX_IWDG_Init+0x30>)
 8003b5c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003b5e:	4b08      	ldr	r3, [pc, #32]	@ (8003b80 <MX_IWDG_Init+0x2c>)
 8003b60:	2204      	movs	r2, #4
 8003b62:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1874;
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <MX_IWDG_Init+0x2c>)
 8003b66:	f240 7252 	movw	r2, #1874	@ 0x752
 8003b6a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003b6c:	4804      	ldr	r0, [pc, #16]	@ (8003b80 <MX_IWDG_Init+0x2c>)
 8003b6e:	f003 f9fd 	bl	8006f6c <HAL_IWDG_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003b78:	f001 f884 	bl	8004c84 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	200000cc 	.word	0x200000cc
 8003b84:	40003000 	.word	0x40003000

08003b88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003b8e:	4a18      	ldr	r2, [pc, #96]	@ (8003bf0 <MX_SPI1_Init+0x68>)
 8003b90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b92:	4b16      	ldr	r3, [pc, #88]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003b94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b9a:	4b14      	ldr	r3, [pc, #80]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ba0:	4b12      	ldr	r3, [pc, #72]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ba6:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bac:	4b0f      	ldr	r3, [pc, #60]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003bba:	4b0c      	ldr	r3, [pc, #48]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bc6:	4b09      	ldr	r3, [pc, #36]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bcc:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bd2:	4b06      	ldr	r3, [pc, #24]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003bd4:	220a      	movs	r2, #10
 8003bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bd8:	4804      	ldr	r0, [pc, #16]	@ (8003bec <MX_SPI1_Init+0x64>)
 8003bda:	f003 fe2d 	bl	8007838 <HAL_SPI_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003be4:	f001 f84e 	bl	8004c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200000d8 	.word	0x200000d8
 8003bf0:	40013000 	.word	0x40013000

08003bf4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003bf8:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003bfa:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <MX_SPI2_Init+0x68>)
 8003bfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003bfe:	4b16      	ldr	r3, [pc, #88]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c06:	4b14      	ldr	r3, [pc, #80]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c0c:	4b12      	ldr	r3, [pc, #72]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c12:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c18:	4b0f      	ldr	r3, [pc, #60]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c26:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c32:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c38:	4b07      	ldr	r3, [pc, #28]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c40:	220a      	movs	r2, #10
 8003c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c44:	4804      	ldr	r0, [pc, #16]	@ (8003c58 <MX_SPI2_Init+0x64>)
 8003c46:	f003 fdf7 	bl	8007838 <HAL_SPI_Init>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c50:	f001 f818 	bl	8004c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000130 	.word	0x20000130
 8003c5c:	40003800 	.word	0x40003800

08003c60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c66:	f107 0308 	add.w	r3, r7, #8
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	605a      	str	r2, [r3, #4]
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c74:	463b      	mov	r3, r7
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf8 <MX_TIM2_Init+0x98>)
 8003c7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8003c84:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf8 <MX_TIM2_Init+0x98>)
 8003c86:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003c8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf8 <MX_TIM2_Init+0x98>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003c92:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <MX_TIM2_Init+0x98>)
 8003c94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003c98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c9a:	4b17      	ldr	r3, [pc, #92]	@ (8003cf8 <MX_TIM2_Init+0x98>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca0:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <MX_TIM2_Init+0x98>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ca6:	4814      	ldr	r0, [pc, #80]	@ (8003cf8 <MX_TIM2_Init+0x98>)
 8003ca8:	f004 fb5b 	bl	8008362 <HAL_TIM_Base_Init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003cb2:	f000 ffe7 	bl	8004c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	480d      	ldr	r0, [pc, #52]	@ (8003cf8 <MX_TIM2_Init+0x98>)
 8003cc4:	f004 fcde 	bl	8008684 <HAL_TIM_ConfigClockSource>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003cce:	f000 ffd9 	bl	8004c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cda:	463b      	mov	r3, r7
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4806      	ldr	r0, [pc, #24]	@ (8003cf8 <MX_TIM2_Init+0x98>)
 8003ce0:	f004 fec0 	bl	8008a64 <HAL_TIMEx_MasterConfigSynchronization>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003cea:	f000 ffcb 	bl	8004c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003cee:	bf00      	nop
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000188 	.word	0x20000188

08003cfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d02:	f107 0308 	add.w	r3, r7, #8
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
 8003d0c:	609a      	str	r2, [r3, #8]
 8003d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d10:	463b      	mov	r3, r7
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <MX_TIM3_Init+0x94>)
 8003d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d94 <MX_TIM3_Init+0x98>)
 8003d1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000;
 8003d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d90 <MX_TIM3_Init+0x94>)
 8003d20:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003d24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d26:	4b1a      	ldr	r3, [pc, #104]	@ (8003d90 <MX_TIM3_Init+0x94>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	@ (8003d90 <MX_TIM3_Init+0x94>)
 8003d2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d34:	4b16      	ldr	r3, [pc, #88]	@ (8003d90 <MX_TIM3_Init+0x94>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d3a:	4b15      	ldr	r3, [pc, #84]	@ (8003d90 <MX_TIM3_Init+0x94>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d40:	4813      	ldr	r0, [pc, #76]	@ (8003d90 <MX_TIM3_Init+0x94>)
 8003d42:	f004 fb0e 	bl	8008362 <HAL_TIM_Base_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003d4c:	f000 ff9a 	bl	8004c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d56:	f107 0308 	add.w	r3, r7, #8
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	480c      	ldr	r0, [pc, #48]	@ (8003d90 <MX_TIM3_Init+0x94>)
 8003d5e:	f004 fc91 	bl	8008684 <HAL_TIM_ConfigClockSource>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003d68:	f000 ff8c 	bl	8004c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d74:	463b      	mov	r3, r7
 8003d76:	4619      	mov	r1, r3
 8003d78:	4805      	ldr	r0, [pc, #20]	@ (8003d90 <MX_TIM3_Init+0x94>)
 8003d7a:	f004 fe73 	bl	8008a64 <HAL_TIMEx_MasterConfigSynchronization>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003d84:	f000 ff7e 	bl	8004c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003d88:	bf00      	nop
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	200001d0 	.word	0x200001d0
 8003d94:	40000400 	.word	0x40000400

08003d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d9c:	4b11      	ldr	r3, [pc, #68]	@ (8003de4 <MX_USART1_UART_Init+0x4c>)
 8003d9e:	4a12      	ldr	r2, [pc, #72]	@ (8003de8 <MX_USART1_UART_Init+0x50>)
 8003da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003da2:	4b10      	ldr	r3, [pc, #64]	@ (8003de4 <MX_USART1_UART_Init+0x4c>)
 8003da4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003daa:	4b0e      	ldr	r3, [pc, #56]	@ (8003de4 <MX_USART1_UART_Init+0x4c>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <MX_USART1_UART_Init+0x4c>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <MX_USART1_UART_Init+0x4c>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003dbc:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <MX_USART1_UART_Init+0x4c>)
 8003dbe:	220c      	movs	r2, #12
 8003dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dc2:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <MX_USART1_UART_Init+0x4c>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dc8:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <MX_USART1_UART_Init+0x4c>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dce:	4805      	ldr	r0, [pc, #20]	@ (8003de4 <MX_USART1_UART_Init+0x4c>)
 8003dd0:	f004 feb8 	bl	8008b44 <HAL_UART_Init>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003dda:	f000 ff53 	bl	8004c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000218 	.word	0x20000218
 8003de8:	40013800 	.word	0x40013800

08003dec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003df2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <MX_DMA_Init+0x38>)
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	4a0b      	ldr	r2, [pc, #44]	@ (8003e24 <MX_DMA_Init+0x38>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6153      	str	r3, [r2, #20]
 8003dfe:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <MX_DMA_Init+0x38>)
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	200f      	movs	r0, #15
 8003e10:	f002 f9eb 	bl	80061ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003e14:	200f      	movs	r0, #15
 8003e16:	f002 fa04 	bl	8006222 <HAL_NVIC_EnableIRQ>

}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000

08003e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2e:	f107 0310 	add.w	r3, r7, #16
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	609a      	str	r2, [r3, #8]
 8003e3a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e3c:	4b66      	ldr	r3, [pc, #408]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	4a65      	ldr	r2, [pc, #404]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e42:	f043 0310 	orr.w	r3, r3, #16
 8003e46:	6193      	str	r3, [r2, #24]
 8003e48:	4b63      	ldr	r3, [pc, #396]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e54:	4b60      	ldr	r3, [pc, #384]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	4a5f      	ldr	r2, [pc, #380]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e5a:	f043 0320 	orr.w	r3, r3, #32
 8003e5e:	6193      	str	r3, [r2, #24]
 8003e60:	4b5d      	ldr	r3, [pc, #372]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	4a59      	ldr	r2, [pc, #356]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e72:	f043 0304 	orr.w	r3, r3, #4
 8003e76:	6193      	str	r3, [r2, #24]
 8003e78:	4b57      	ldr	r3, [pc, #348]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e84:	4b54      	ldr	r3, [pc, #336]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	4a53      	ldr	r2, [pc, #332]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e8a:	f043 0308 	orr.w	r3, r3, #8
 8003e8e:	6193      	str	r3, [r2, #24]
 8003e90:	4b51      	ldr	r3, [pc, #324]	@ (8003fd8 <MX_GPIO_Init+0x1b0>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_STT_Pin|LED_STT_ETH_Pin|LED_BP_Pin, GPIO_PIN_RESET);
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8003ea2:	484e      	ldr	r0, [pc, #312]	@ (8003fdc <MX_GPIO_Init+0x1b4>)
 8003ea4:	f003 f819 	bl	8006eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	2110      	movs	r1, #16
 8003eac:	484c      	ldr	r0, [pc, #304]	@ (8003fe0 <MX_GPIO_Init+0x1b8>)
 8003eae:	f003 f814 	bl	8006eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|S_OUT2_Pin|S_OUT1_Pin, GPIO_PIN_RESET);
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2132      	movs	r1, #50	@ 0x32
 8003eb6:	484b      	ldr	r0, [pc, #300]	@ (8003fe4 <MX_GPIO_Init+0x1bc>)
 8003eb8:	f003 f80f 	bl	8006eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_SET);
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ec2:	4848      	ldr	r0, [pc, #288]	@ (8003fe4 <MX_GPIO_Init+0x1bc>)
 8003ec4:	f003 f809 	bl	8006eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ece:	4844      	ldr	r0, [pc, #272]	@ (8003fe0 <MX_GPIO_Init+0x1b8>)
 8003ed0:	f003 f803 	bl	8006eda <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STT_Pin LED_STT_ETH_Pin LED_BP_Pin */
  GPIO_InitStruct.Pin = LED_STT_Pin|LED_STT_ETH_Pin|LED_BP_Pin;
 8003ed4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eda:	2301      	movs	r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee6:	f107 0310 	add.w	r3, r7, #16
 8003eea:	4619      	mov	r1, r3
 8003eec:	483b      	ldr	r0, [pc, #236]	@ (8003fdc <MX_GPIO_Init+0x1b4>)
 8003eee:	f002 fe59 	bl	8006ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BYPASS_Pin */
  GPIO_InitStruct.Pin = BYPASS_Pin;
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003efa:	2301      	movs	r3, #1
 8003efc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BYPASS_GPIO_Port, &GPIO_InitStruct);
 8003efe:	f107 0310 	add.w	r3, r7, #16
 8003f02:	4619      	mov	r1, r3
 8003f04:	4836      	ldr	r0, [pc, #216]	@ (8003fe0 <MX_GPIO_Init+0x1b8>)
 8003f06:	f002 fe4d 	bl	8006ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8003f0a:	2310      	movs	r3, #16
 8003f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f16:	2303      	movs	r3, #3
 8003f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8003f1a:	f107 0310 	add.w	r3, r7, #16
 8003f1e:	4619      	mov	r1, r3
 8003f20:	482f      	ldr	r0, [pc, #188]	@ (8003fe0 <MX_GPIO_Init+0x1b8>)
 8003f22:	f002 fe3f 	bl	8006ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f26:	2301      	movs	r3, #1
 8003f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe8 <MX_GPIO_Init+0x1c0>)
 8003f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f32:	f107 0310 	add.w	r3, r7, #16
 8003f36:	4619      	mov	r1, r3
 8003f38:	482a      	ldr	r0, [pc, #168]	@ (8003fe4 <MX_GPIO_Init+0x1bc>)
 8003f3a:	f002 fe33 	bl	8006ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 S_OUT2_Pin S_OUT1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|S_OUT2_Pin|S_OUT1_Pin;
 8003f3e:	2332      	movs	r3, #50	@ 0x32
 8003f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f42:	2301      	movs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4e:	f107 0310 	add.w	r3, r7, #16
 8003f52:	4619      	mov	r1, r3
 8003f54:	4823      	ldr	r0, [pc, #140]	@ (8003fe4 <MX_GPIO_Init+0x1bc>)
 8003f56:	f002 fe25 	bl	8006ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_W25_Pin */
  GPIO_InitStruct.Pin = CS_W25_Pin;
 8003f5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_W25_GPIO_Port, &GPIO_InitStruct);
 8003f6c:	f107 0310 	add.w	r3, r7, #16
 8003f70:	4619      	mov	r1, r3
 8003f72:	481c      	ldr	r0, [pc, #112]	@ (8003fe4 <MX_GPIO_Init+0x1bc>)
 8003f74:	f002 fe16 	bl	8006ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DE_Pin */
  GPIO_InitStruct.Pin = DE_Pin;
 8003f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f86:	2302      	movs	r3, #2
 8003f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 8003f8a:	f107 0310 	add.w	r3, r7, #16
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4813      	ldr	r0, [pc, #76]	@ (8003fe0 <MX_GPIO_Init+0x1b8>)
 8003f92:	f002 fe07 	bl	8006ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8003f96:	2340      	movs	r3, #64	@ 0x40
 8003f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f9a:	4b13      	ldr	r3, [pc, #76]	@ (8003fe8 <MX_GPIO_Init+0x1c0>)
 8003f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8003fa2:	f107 0310 	add.w	r3, r7, #16
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	480e      	ldr	r0, [pc, #56]	@ (8003fe4 <MX_GPIO_Init+0x1bc>)
 8003faa:	f002 fdfb 	bl	8006ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	2006      	movs	r0, #6
 8003fb4:	f002 f919 	bl	80061ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003fb8:	2006      	movs	r0, #6
 8003fba:	f002 f932 	bl	8006222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2107      	movs	r1, #7
 8003fc2:	2017      	movs	r0, #23
 8003fc4:	f002 f911 	bl	80061ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003fc8:	2017      	movs	r0, #23
 8003fca:	f002 f92a 	bl	8006222 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003fce:	bf00      	nop
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40011000 	.word	0x40011000
 8003fe0:	40010800 	.word	0x40010800
 8003fe4:	40010c00 	.word	0x40010c00
 8003fe8:	10210000 	.word	0x10210000

08003fec <sendData_eth>:

/* USER CODE BEGIN 4 */
void sendData_eth (char *CMD, uint32_t data)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	uint8_t cmd[7];
	cmd[0] = CMD[0];
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	723b      	strb	r3, [r7, #8]
	cmd[1] = data>>24&0xFF;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	0e1b      	lsrs	r3, r3, #24
 8004000:	b2db      	uxtb	r3, r3
 8004002:	727b      	strb	r3, [r7, #9]
	cmd[2] = data>>16&0xFF;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	0c1b      	lsrs	r3, r3, #16
 8004008:	b2db      	uxtb	r3, r3
 800400a:	72bb      	strb	r3, [r7, #10]
	cmd[3] = data>>8&0xFF;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b2db      	uxtb	r3, r3
 8004012:	72fb      	strb	r3, [r7, #11]
	cmd[4] = data&0xFF;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	733b      	strb	r3, [r7, #12]
	cmd[5] = 0x0D;
 800401a:	230d      	movs	r3, #13
 800401c:	737b      	strb	r3, [r7, #13]
	cmd[6] = 0x0A;
 800401e:	230a      	movs	r3, #10
 8004020:	73bb      	strb	r3, [r7, #14]
	send(SOCK_NUM,(uint8_t *) cmd, 7);
 8004022:	f107 0308 	add.w	r3, r7, #8
 8004026:	2207      	movs	r2, #7
 8004028:	4619      	mov	r1, r3
 800402a:	2000      	movs	r0, #0
 800402c:	f7fc fe70 	bl	8000d10 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <send_u8_eth>:
void send_u8_eth (char *CMD, uint8_t data)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
//	char buf[10] = {0};
	uint8_t cmd[4];
	cmd[0] = CMD[0];
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	733b      	strb	r3, [r7, #12]
	cmd[1] = data;
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	737b      	strb	r3, [r7, #13]
	cmd[2] = 0x0D;
 800404e:	230d      	movs	r3, #13
 8004050:	73bb      	strb	r3, [r7, #14]
	cmd[3] = 0x0A;
 8004052:	230a      	movs	r3, #10
 8004054:	73fb      	strb	r3, [r7, #15]
	send(SOCK_NUM,(uint8_t *) cmd, 4);
 8004056:	f107 030c 	add.w	r3, r7, #12
 800405a:	2204      	movs	r2, #4
 800405c:	4619      	mov	r1, r3
 800405e:	2000      	movs	r0, #0
 8004060:	f7fc fe56 	bl	8000d10 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <sendString>:
void sendString (char *CMD, char *data)
{
 800406c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
 8004078:	466b      	mov	r3, sp
 800407a:	461e      	mov	r6, r3
//	char buf[10] = {0};
	char cmd[strlen(data) + 3];
 800407c:	6838      	ldr	r0, [r7, #0]
 800407e:	f7fc f865 	bl	800014c <strlen>
 8004082:	4603      	mov	r3, r0
 8004084:	1cd9      	adds	r1, r3, #3
 8004086:	460b      	mov	r3, r1
 8004088:	3b01      	subs	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	2300      	movs	r3, #0
 800408e:	4688      	mov	r8, r1
 8004090:	4699      	mov	r9, r3
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800409e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040a6:	2300      	movs	r3, #0
 80040a8:	460c      	mov	r4, r1
 80040aa:	461d      	mov	r5, r3
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	00eb      	lsls	r3, r5, #3
 80040b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ba:	00e2      	lsls	r2, r4, #3
 80040bc:	1dcb      	adds	r3, r1, #7
 80040be:	08db      	lsrs	r3, r3, #3
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	ebad 0d03 	sub.w	sp, sp, r3
 80040c6:	466b      	mov	r3, sp
 80040c8:	3300      	adds	r3, #0
 80040ca:	60bb      	str	r3, [r7, #8]
	strcpy(cmd,CMD);
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	68b8      	ldr	r0, [r7, #8]
 80040d0:	f005 fda0 	bl	8009c14 <strcpy>
	strcat(cmd, data);
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	68b8      	ldr	r0, [r7, #8]
 80040d8:	f005 fd68 	bl	8009bac <strcat>
	strcat(cmd, "\r\n");
 80040dc:	68b8      	ldr	r0, [r7, #8]
 80040de:	f7fc f835 	bl	800014c <strlen>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461a      	mov	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4413      	add	r3, r2
 80040ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004114 <sendString+0xa8>)
 80040ec:	8811      	ldrh	r1, [r2, #0]
 80040ee:	7892      	ldrb	r2, [r2, #2]
 80040f0:	8019      	strh	r1, [r3, #0]
 80040f2:	709a      	strb	r2, [r3, #2]
//	cmd[1] = (data&0xFF000000)>>24;
//	cmd[2] = (data&0x00FF0000)>>16;
//	cmd[3] = (data&0x0000FF00)>>8;
//	cmd[4] = (data&0x000000FF)>>0;
	send(SOCK_NUM,(uint8_t *) cmd, strlen(cmd));
 80040f4:	68b8      	ldr	r0, [r7, #8]
 80040f6:	f7fc f829 	bl	800014c <strlen>
 80040fa:	4603      	mov	r3, r0
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	2000      	movs	r0, #0
 8004104:	f7fc fe04 	bl	8000d10 <send>
 8004108:	46b5      	mov	sp, r6
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004114:	08009c8c 	.word	0x08009c8c

08004118 <sendData_eth_info>:
void sendData_eth_info (char *CMD, uint8_t *data)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	@ 0x28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
	char cx[29];
//	strcpy(cx,CMD);
//	strcat(cx, data);
	cx[0] = CMD[0];
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	723b      	strb	r3, [r7, #8]
	for (uint8_t i=0; i<26; i++)
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800412e:	e010      	b.n	8004152 <sendData_eth_info+0x3a>
	{
		cx[i+1] = data[i];
 8004130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	441a      	add	r2, r3
 8004138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800413c:	3301      	adds	r3, #1
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	3328      	adds	r3, #40	@ 0x28
 8004142:	443b      	add	r3, r7
 8004144:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (uint8_t i=0; i<26; i++)
 8004148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800414c:	3301      	adds	r3, #1
 800414e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004156:	2b19      	cmp	r3, #25
 8004158:	d9ea      	bls.n	8004130 <sendData_eth_info+0x18>
	}
	cx[27] = 0x0D;
 800415a:	230d      	movs	r3, #13
 800415c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	cx[28] = 0x0A;
 8004160:	230a      	movs	r3, #10
 8004162:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	send(SOCK_NUM,(uint8_t *) cx, 29);
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	221d      	movs	r2, #29
 800416c:	4619      	mov	r1, r3
 800416e:	2000      	movs	r0, #0
 8004170:	f7fc fdce 	bl	8000d10 <send>
}
 8004174:	bf00      	nop
 8004176:	3728      	adds	r7, #40	@ 0x28
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <sendData_eth_CardID>:
void sendData_eth_CardID (char *CMD, user_info_t user)
{
 800417c:	b084      	sub	sp, #16
 800417e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800418c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004190:	466b      	mov	r3, sp
 8004192:	461e      	mov	r6, r3
	uint8_t size = sizeof(user_info_t);
 8004194:	2320      	movs	r3, #32
 8004196:	75fb      	strb	r3, [r7, #23]
	uint8_t cx[size];
 8004198:	7df9      	ldrb	r1, [r7, #23]
 800419a:	460b      	mov	r3, r1
 800419c:	3b01      	subs	r3, #1
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	b2cb      	uxtb	r3, r1
 80041a2:	2200      	movs	r2, #0
 80041a4:	4698      	mov	r8, r3
 80041a6:	4691      	mov	r9, r2
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041bc:	b2cb      	uxtb	r3, r1
 80041be:	2200      	movs	r2, #0
 80041c0:	461c      	mov	r4, r3
 80041c2:	4615      	mov	r5, r2
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	00eb      	lsls	r3, r5, #3
 80041ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d2:	00e2      	lsls	r2, r4, #3
 80041d4:	460b      	mov	r3, r1
 80041d6:	3307      	adds	r3, #7
 80041d8:	08db      	lsrs	r3, r3, #3
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	ebad 0d03 	sub.w	sp, sp, r3
 80041e0:	466b      	mov	r3, sp
 80041e2:	3300      	adds	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
	cx[0] = CMD[0];
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	781a      	ldrb	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	701a      	strb	r2, [r3, #0]
	cx[1] = 2;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2202      	movs	r2, #2
 80041f2:	705a      	strb	r2, [r3, #1]
	cx[2] = user.cardID>>24&0xFF;
 80041f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f6:	0e1b      	lsrs	r3, r3, #24
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	709a      	strb	r2, [r3, #2]
	cx[3] = user.cardID>>16&0xFF;
 80041fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	b2da      	uxtb	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	70da      	strb	r2, [r3, #3]
	cx[4] = user.cardID>>8&0xFF;
 8004208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800420a:	0a1b      	lsrs	r3, r3, #8
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	711a      	strb	r2, [r3, #4]
	cx[5] = user.cardID&0xFF;
 8004212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	715a      	strb	r2, [r3, #5]
	cx[6] = user.permis[0];
 800421a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	719a      	strb	r2, [r3, #6]
	cx[7] = user.permis[1];
 8004222:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	71da      	strb	r2, [r3, #7]
	cx[8] = user.permis[2];
 800422a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	721a      	strb	r2, [r3, #8]
	cx[9] = user.permis[3];
 8004232:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	725a      	strb	r2, [r3, #9]
	cx[10] = user.permis[4];
 800423a:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	729a      	strb	r2, [r3, #10]
	cx[11] = user.permis[5];
 8004242:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	72da      	strb	r2, [r3, #11]
	cx[12] = user.permis[6];
 800424a:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	731a      	strb	r2, [r3, #12]
	cx[13] = user.permis[7];
 8004252:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	735a      	strb	r2, [r3, #13]
	cx[14] = user.beginDate;
 800425a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	739a      	strb	r2, [r3, #14]
	cx[15] = user.beginMonth;
 8004262:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	73da      	strb	r2, [r3, #15]
	cx[16] = user.beginYear>>8&0xFF;
 800426a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	b29b      	uxth	r3, r3
 8004272:	b2da      	uxtb	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	741a      	strb	r2, [r3, #16]
	cx[17] = user.beginYear&0xFF;
 8004278:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	745a      	strb	r2, [r3, #17]
	cx[18] = user.beginHour;
 8004282:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	749a      	strb	r2, [r3, #18]
	cx[19] = user.beginMinute;
 800428a:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	74da      	strb	r2, [r3, #19]
	cx[20] = user.endDate;
 8004292:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	751a      	strb	r2, [r3, #20]
	cx[21] = user.endMonth;
 800429a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	755a      	strb	r2, [r3, #21]
	cx[22] = user.endYear>>8&0xFF;
 80042a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	759a      	strb	r2, [r3, #22]
	cx[23] = user.endYear&0xFF;
 80042b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	75da      	strb	r2, [r3, #23]
	cx[24] = user.endHour;
 80042ba:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	761a      	strb	r2, [r3, #24]
	cx[25] = user.endMinute;
 80042c2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	765a      	strb	r2, [r3, #25]
	cx[26] = 0x0D;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	220d      	movs	r2, #13
 80042ce:	769a      	strb	r2, [r3, #26]
	cx[27] = 0x0A;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	220a      	movs	r2, #10
 80042d4:	76da      	strb	r2, [r3, #27]
	send(SOCK_NUM,(uint8_t *) cx, 28);
 80042d6:	221c      	movs	r2, #28
 80042d8:	68f9      	ldr	r1, [r7, #12]
 80042da:	2000      	movs	r0, #0
 80042dc:	f7fc fd18 	bl	8000d10 <send>
 80042e0:	46b5      	mov	sp, r6
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042ec:	b004      	add	sp, #16
 80042ee:	4770      	bx	lr

080042f0 <sendData_uart>:

void sendData_uart (char *CMD, uint8_t data)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
	char cmd[4];
	cmd[0] = CMD[0];
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	733b      	strb	r3, [r7, #12]
	cmd[1] = data;
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	737b      	strb	r3, [r7, #13]
	cmd[2] = 0x0D;
 8004306:	230d      	movs	r3, #13
 8004308:	73bb      	strb	r3, [r7, #14]
	cmd[3] = 0x0A;
 800430a:	230a      	movs	r3, #10
 800430c:	73fb      	strb	r3, [r7, #15]
//	strcpy(cmd,CMD);
//	strcat(cmd,data);
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 800430e:	2201      	movs	r2, #1
 8004310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004314:	480a      	ldr	r0, [pc, #40]	@ (8004340 <sendData_uart+0x50>)
 8004316:	f002 fde0 	bl	8006eda <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,(uint8_t *) cmd, 4, 500);
 800431a:	f107 010c 	add.w	r1, r7, #12
 800431e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004322:	2204      	movs	r2, #4
 8004324:	4807      	ldr	r0, [pc, #28]	@ (8004344 <sendData_uart+0x54>)
 8004326:	f004 fc5d 	bl	8008be4 <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 800432a:	2200      	movs	r2, #0
 800432c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004330:	4803      	ldr	r0, [pc, #12]	@ (8004340 <sendData_uart+0x50>)
 8004332:	f002 fdd2 	bl	8006eda <HAL_GPIO_WritePin>
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40010800 	.word	0x40010800
 8004344:	20000218 	.word	0x20000218

08004348 <save_data>:
void save_data()
{
 8004348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800434c:	b096      	sub	sp, #88	@ 0x58
 800434e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8004350:	f002 fa98 	bl	8006884 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&flashRCB, &SectorError);
 8004354:	4958      	ldr	r1, [pc, #352]	@ (80044b8 <save_data+0x170>)
 8004356:	4859      	ldr	r0, [pc, #356]	@ (80044bc <save_data+0x174>)
 8004358:	f002 fb7c 	bl	8006a54 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC00, ip1);
 800435c:	4b58      	ldr	r3, [pc, #352]	@ (80044c0 <save_data+0x178>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2200      	movs	r2, #0
 8004364:	461c      	mov	r4, r3
 8004366:	4615      	mov	r5, r2
 8004368:	4622      	mov	r2, r4
 800436a:	462b      	mov	r3, r5
 800436c:	4955      	ldr	r1, [pc, #340]	@ (80044c4 <save_data+0x17c>)
 800436e:	2002      	movs	r0, #2
 8004370:	f002 fa18 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC04, ip2);
 8004374:	4b54      	ldr	r3, [pc, #336]	@ (80044c8 <save_data+0x180>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2200      	movs	r2, #0
 800437c:	4698      	mov	r8, r3
 800437e:	4691      	mov	r9, r2
 8004380:	4642      	mov	r2, r8
 8004382:	464b      	mov	r3, r9
 8004384:	4951      	ldr	r1, [pc, #324]	@ (80044cc <save_data+0x184>)
 8004386:	2002      	movs	r0, #2
 8004388:	f002 fa0c 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC08, ip3);
 800438c:	4b50      	ldr	r3, [pc, #320]	@ (80044d0 <save_data+0x188>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2200      	movs	r2, #0
 8004394:	469a      	mov	sl, r3
 8004396:	4693      	mov	fp, r2
 8004398:	4652      	mov	r2, sl
 800439a:	465b      	mov	r3, fp
 800439c:	494d      	ldr	r1, [pc, #308]	@ (80044d4 <save_data+0x18c>)
 800439e:	2002      	movs	r0, #2
 80043a0:	f002 fa00 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC0C, ip4);
 80043a4:	4b4c      	ldr	r3, [pc, #304]	@ (80044d8 <save_data+0x190>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2200      	movs	r2, #0
 80043ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80043ae:	657a      	str	r2, [r7, #84]	@ 0x54
 80043b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043b4:	4949      	ldr	r1, [pc, #292]	@ (80044dc <save_data+0x194>)
 80043b6:	2002      	movs	r0, #2
 80043b8:	f002 f9f4 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC10, port_client);
 80043bc:	4b48      	ldr	r3, [pc, #288]	@ (80044e0 <save_data+0x198>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2200      	movs	r2, #0
 80043c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80043c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043cc:	4945      	ldr	r1, [pc, #276]	@ (80044e4 <save_data+0x19c>)
 80043ce:	2002      	movs	r0, #2
 80043d0:	f002 f9e8 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC14, ip_server1);
 80043d4:	4b44      	ldr	r3, [pc, #272]	@ (80044e8 <save_data+0x1a0>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2200      	movs	r2, #0
 80043dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043de:	647a      	str	r2, [r7, #68]	@ 0x44
 80043e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043e4:	4941      	ldr	r1, [pc, #260]	@ (80044ec <save_data+0x1a4>)
 80043e6:	2002      	movs	r0, #2
 80043e8:	f002 f9dc 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC18, ip_server2);
 80043ec:	4b40      	ldr	r3, [pc, #256]	@ (80044f0 <save_data+0x1a8>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2200      	movs	r2, #0
 80043f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043fc:	493d      	ldr	r1, [pc, #244]	@ (80044f4 <save_data+0x1ac>)
 80043fe:	2002      	movs	r0, #2
 8004400:	f002 f9d0 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC1C, ip_server3);
 8004404:	4b3c      	ldr	r3, [pc, #240]	@ (80044f8 <save_data+0x1b0>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2200      	movs	r2, #0
 800440c:	633b      	str	r3, [r7, #48]	@ 0x30
 800440e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004410:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004414:	4939      	ldr	r1, [pc, #228]	@ (80044fc <save_data+0x1b4>)
 8004416:	2002      	movs	r0, #2
 8004418:	f002 f9c4 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC20, ip_server4);
 800441c:	4b38      	ldr	r3, [pc, #224]	@ (8004500 <save_data+0x1b8>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2200      	movs	r2, #0
 8004424:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800442c:	4935      	ldr	r1, [pc, #212]	@ (8004504 <save_data+0x1bc>)
 800442e:	2002      	movs	r0, #2
 8004430:	f002 f9b8 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC24, port_server);
 8004434:	4b34      	ldr	r3, [pc, #208]	@ (8004508 <save_data+0x1c0>)
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	2200      	movs	r2, #0
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004440:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004444:	4931      	ldr	r1, [pc, #196]	@ (800450c <save_data+0x1c4>)
 8004446:	2002      	movs	r0, #2
 8004448:	f002 f9ac 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC28, time_delay);
 800444c:	4b30      	ldr	r3, [pc, #192]	@ (8004510 <save_data+0x1c8>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2200      	movs	r2, #0
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	61fa      	str	r2, [r7, #28]
 8004458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800445c:	492d      	ldr	r1, [pc, #180]	@ (8004514 <save_data+0x1cc>)
 800445e:	2002      	movs	r0, #2
 8004460:	f002 f9a0 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC2C, elevator_mode);
 8004464:	4b2c      	ldr	r3, [pc, #176]	@ (8004518 <save_data+0x1d0>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2200      	movs	r2, #0
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	617a      	str	r2, [r7, #20]
 8004470:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004474:	4929      	ldr	r1, [pc, #164]	@ (800451c <save_data+0x1d4>)
 8004476:	2002      	movs	r0, #2
 8004478:	f002 f994 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC30, lock_default_1);
 800447c:	4b28      	ldr	r3, [pc, #160]	@ (8004520 <save_data+0x1d8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	60fa      	str	r2, [r7, #12]
 8004486:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800448a:	4926      	ldr	r1, [pc, #152]	@ (8004524 <save_data+0x1dc>)
 800448c:	2002      	movs	r0, #2
 800448e:	f002 f989 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC34, lock_default_2);
 8004492:	4b25      	ldr	r3, [pc, #148]	@ (8004528 <save_data+0x1e0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a0:	4922      	ldr	r1, [pc, #136]	@ (800452c <save_data+0x1e4>)
 80044a2:	2002      	movs	r0, #2
 80044a4:	f002 f97e 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80044a8:	f002 fa12 	bl	80068d0 <HAL_FLASH_Lock>
}
 80044ac:	bf00      	nop
 80044ae:	3758      	adds	r7, #88	@ 0x58
 80044b0:	46bd      	mov	sp, r7
 80044b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b6:	bf00      	nop
 80044b8:	2000059c 	.word	0x2000059c
 80044bc:	20000084 	.word	0x20000084
 80044c0:	20000524 	.word	0x20000524
 80044c4:	0800fc00 	.word	0x0800fc00
 80044c8:	20000525 	.word	0x20000525
 80044cc:	0800fc04 	.word	0x0800fc04
 80044d0:	20000526 	.word	0x20000526
 80044d4:	0800fc08 	.word	0x0800fc08
 80044d8:	20000527 	.word	0x20000527
 80044dc:	0800fc0c 	.word	0x0800fc0c
 80044e0:	20000598 	.word	0x20000598
 80044e4:	0800fc10 	.word	0x0800fc10
 80044e8:	20000528 	.word	0x20000528
 80044ec:	0800fc14 	.word	0x0800fc14
 80044f0:	20000529 	.word	0x20000529
 80044f4:	0800fc18 	.word	0x0800fc18
 80044f8:	2000052a 	.word	0x2000052a
 80044fc:	0800fc1c 	.word	0x0800fc1c
 8004500:	2000052b 	.word	0x2000052b
 8004504:	0800fc20 	.word	0x0800fc20
 8004508:	20000596 	.word	0x20000596
 800450c:	0800fc24 	.word	0x0800fc24
 8004510:	20000518 	.word	0x20000518
 8004514:	0800fc28 	.word	0x0800fc28
 8004518:	2000054a 	.word	0x2000054a
 800451c:	0800fc2c 	.word	0x0800fc2c
 8004520:	200006bc 	.word	0x200006bc
 8004524:	0800fc30 	.word	0x0800fc30
 8004528:	200006c0 	.word	0x200006c0
 800452c:	0800fc34 	.word	0x0800fc34

08004530 <save_time>:
void save_time()
{
 8004530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8004538:	f002 f9a4 	bl	8006884 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&flashTime, &SectorError);
 800453c:	4923      	ldr	r1, [pc, #140]	@ (80045cc <save_time+0x9c>)
 800453e:	4824      	ldr	r0, [pc, #144]	@ (80045d0 <save_time+0xa0>)
 8004540:	f002 fa88 	bl	8006a54 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F800, dateNow);
 8004544:	4b23      	ldr	r3, [pc, #140]	@ (80045d4 <save_time+0xa4>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2200      	movs	r2, #0
 800454c:	461c      	mov	r4, r3
 800454e:	4615      	mov	r5, r2
 8004550:	4622      	mov	r2, r4
 8004552:	462b      	mov	r3, r5
 8004554:	4920      	ldr	r1, [pc, #128]	@ (80045d8 <save_time+0xa8>)
 8004556:	2002      	movs	r0, #2
 8004558:	f002 f924 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F804, monthNow);
 800455c:	4b1f      	ldr	r3, [pc, #124]	@ (80045dc <save_time+0xac>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2200      	movs	r2, #0
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	60fa      	str	r2, [r7, #12]
 8004568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800456c:	491c      	ldr	r1, [pc, #112]	@ (80045e0 <save_time+0xb0>)
 800456e:	2002      	movs	r0, #2
 8004570:	f002 f918 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F808, yearNow);
 8004574:	4b1b      	ldr	r3, [pc, #108]	@ (80045e4 <save_time+0xb4>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	2200      	movs	r2, #0
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004584:	4918      	ldr	r1, [pc, #96]	@ (80045e8 <save_time+0xb8>)
 8004586:	2002      	movs	r0, #2
 8004588:	f002 f90c 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F80C, hourNow);
 800458c:	4b17      	ldr	r3, [pc, #92]	@ (80045ec <save_time+0xbc>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2200      	movs	r2, #0
 8004594:	469a      	mov	sl, r3
 8004596:	4693      	mov	fp, r2
 8004598:	4652      	mov	r2, sl
 800459a:	465b      	mov	r3, fp
 800459c:	4914      	ldr	r1, [pc, #80]	@ (80045f0 <save_time+0xc0>)
 800459e:	2002      	movs	r0, #2
 80045a0:	f002 f900 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F810, minuteNow);
 80045a4:	4b13      	ldr	r3, [pc, #76]	@ (80045f4 <save_time+0xc4>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2200      	movs	r2, #0
 80045ac:	4698      	mov	r8, r3
 80045ae:	4691      	mov	r9, r2
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	4910      	ldr	r1, [pc, #64]	@ (80045f8 <save_time+0xc8>)
 80045b6:	2002      	movs	r0, #2
 80045b8:	f002 f8f4 	bl	80067a4 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80045bc:	f002 f988 	bl	80068d0 <HAL_FLASH_Lock>
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ca:	bf00      	nop
 80045cc:	2000059c 	.word	0x2000059c
 80045d0:	20000094 	.word	0x20000094
 80045d4:	20000591 	.word	0x20000591
 80045d8:	0800f800 	.word	0x0800f800
 80045dc:	20000592 	.word	0x20000592
 80045e0:	0800f804 	.word	0x0800f804
 80045e4:	2000059a 	.word	0x2000059a
 80045e8:	0800f808 	.word	0x0800f808
 80045ec:	20000593 	.word	0x20000593
 80045f0:	0800f80c 	.word	0x0800f80c
 80045f4:	20000594 	.word	0x20000594
 80045f8:	0800f810 	.word	0x0800f810

080045fc <binary_search>:

user_info_t binary_search(uint32_t Number_card, uint32_t code)
{
 80045fc:	b5b0      	push	{r4, r5, r7, lr}
 80045fe:	b090      	sub	sp, #64	@ 0x40
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
	uint32_t low = 1, high = Number_card;
 8004608:	2301      	movs	r3, #1
 800460a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	63bb      	str	r3, [r7, #56]	@ 0x38
	user_info_t user_compare;

    while (low <= high)
 8004610:	e02e      	b.n	8004670 <binary_search+0x74>
    {
    	uint32_t mid = (low + high) / 2;
 8004612:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	4413      	add	r3, r2
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	637b      	str	r3, [r7, #52]	@ 0x34
		W25Q_FastRead((mid-1)/16, ((mid-1)%16)*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&user_compare);
 800461c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461e:	3b01      	subs	r3, #1
 8004620:	0918      	lsrs	r0, r3, #4
 8004622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004624:	3b01      	subs	r3, #1
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	b2db      	uxtb	r3, r3
 800462e:	015b      	lsls	r3, r3, #5
 8004630:	b2d9      	uxtb	r1, r3
 8004632:	f107 0314 	add.w	r3, r7, #20
 8004636:	2220      	movs	r2, #32
 8004638:	f7fd fa54 	bl	8001ae4 <W25Q_FastRead>
        if (user_compare.cardID == code)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d10a      	bne.n	800465a <binary_search+0x5e>
        {
            return user_compare;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	461d      	mov	r5, r3
 8004648:	f107 0414 	add.w	r4, r7, #20
 800464c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800464e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004650:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004654:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004658:	e01a      	b.n	8004690 <binary_search+0x94>
        } else if (user_compare.cardID < code) {
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d903      	bls.n	800466a <binary_search+0x6e>
            low = mid + 1;
 8004662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004664:	3301      	adds	r3, #1
 8004666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004668:	e002      	b.n	8004670 <binary_search+0x74>
        } else {
            high = mid - 1;
 800466a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466c:	3b01      	subs	r3, #1
 800466e:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (low <= high)
 8004670:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004674:	429a      	cmp	r2, r3
 8004676:	d9cc      	bls.n	8004612 <binary_search+0x16>
        }
    }
    user_compare.STT = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
    return user_compare;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	461d      	mov	r5, r3
 8004680:	f107 0414 	add.w	r4, r7, #20
 8004684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004688:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800468c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	3740      	adds	r7, #64	@ 0x40
 8004694:	46bd      	mov	sp, r7
 8004696:	bdb0      	pop	{r4, r5, r7, pc}

08004698 <new_card_update>:
void new_card_update(uint8_t *data, bool *input, uint32_t *input_timer)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
	for (uint8_t i=0; i<8; i++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	75fb      	strb	r3, [r7, #23]
 80046a8:	e02b      	b.n	8004702 <new_card_update+0x6a>
	{
		for (uint8_t j=0; j<8; j++)
 80046aa:	2300      	movs	r3, #0
 80046ac:	75bb      	strb	r3, [r7, #22]
 80046ae:	e022      	b.n	80046f6 <new_card_update+0x5e>
		{
			if((data[i]>>j)&0x01)//2 + i
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	7dbb      	ldrb	r3, [r7, #22]
 80046bc:	fa42 f303 	asr.w	r3, r2, r3
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d013      	beq.n	80046f0 <new_card_update+0x58>
			{
				input[i*8+j] = true;
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	00da      	lsls	r2, r3, #3
 80046cc:	7dbb      	ldrb	r3, [r7, #22]
 80046ce:	4413      	add	r3, r2
 80046d0:	461a      	mov	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4413      	add	r3, r2
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
				input_timer[i*8+j] = HAL_GetTick();
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	00da      	lsls	r2, r3, #3
 80046de:	7dbb      	ldrb	r3, [r7, #22]
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	18d4      	adds	r4, r2, r3
 80046e8:	f000 fd8e 	bl	8005208 <HAL_GetTick>
 80046ec:	4603      	mov	r3, r0
 80046ee:	6023      	str	r3, [r4, #0]
		for (uint8_t j=0; j<8; j++)
 80046f0:	7dbb      	ldrb	r3, [r7, #22]
 80046f2:	3301      	adds	r3, #1
 80046f4:	75bb      	strb	r3, [r7, #22]
 80046f6:	7dbb      	ldrb	r3, [r7, #22]
 80046f8:	2b07      	cmp	r3, #7
 80046fa:	d9d9      	bls.n	80046b0 <new_card_update+0x18>
	for (uint8_t i=0; i<8; i++)
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	3301      	adds	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b07      	cmp	r3, #7
 8004706:	d9d0      	bls.n	80046aa <new_card_update+0x12>
			}
		}
	}
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}

08004712 <shift_left_1bit>:
void shift_left_1bit( uint8_t input[8], uint8_t output[8])
{
 8004712:	b480      	push	{r7}
 8004714:	b087      	sub	sp, #28
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
    uint8_t carry = 0;  // Khởi tạo carry ban đầu
 800471c:	2300      	movs	r3, #0
 800471e:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 8; i++)
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	e01a      	b.n	800475c <shift_left_1bit+0x4a>
    {
        // Lấy bit MSB của byte hiện tại trước khi dịch
        uint8_t new_carry = (input[i] >> 7) & 0x01;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4413      	add	r3, r2
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	09db      	lsrs	r3, r3, #7
 8004730:	73fb      	strb	r3, [r7, #15]
        // Dịch trái 1 bit và kết hợp với carry từ byte trước
        output[i] = (input[i] << 1) | carry;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	4413      	add	r3, r2
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	b25b      	sxtb	r3, r3
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	b25a      	sxtb	r2, r3
 8004740:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004744:	4313      	orrs	r3, r2
 8004746:	b259      	sxtb	r1, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	4413      	add	r3, r2
 800474e:	b2ca      	uxtb	r2, r1
 8004750:	701a      	strb	r2, [r3, #0]
        // Cập nhật carry cho byte tiếp theo
        carry = new_carry;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 8; i++)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3301      	adds	r3, #1
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b07      	cmp	r3, #7
 8004760:	dde1      	ble.n	8004726 <shift_left_1bit+0x14>
    }
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <calculate_data_can>:
void calculate_data_can(bool *input, uint32_t *input_timer, uint8_t *data_can, uint8_t *lock_df, uint8_t delay_time, uint8_t *counter_start)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b088      	sub	sp, #32
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
	uint8_t data[8] = {0};
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	605a      	str	r2, [r3, #4]
	if (*counter_start < delay_time)
 8004786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800478e:	429a      	cmp	r2, r3
 8004790:	d948      	bls.n	8004824 <calculate_data_can+0xb6>
	{
		for (uint8_t i=0; i<8; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	77fb      	strb	r3, [r7, #31]
 8004796:	e040      	b.n	800481a <calculate_data_can+0xac>
		{
			for (uint8_t j=0; j<8; j++)
 8004798:	2300      	movs	r3, #0
 800479a:	77bb      	strb	r3, [r7, #30]
 800479c:	e031      	b.n	8004802 <calculate_data_can+0x94>
			{
				if (input_timer[i*8+j] == 0)
 800479e:	7ffb      	ldrb	r3, [r7, #31]
 80047a0:	00da      	lsls	r2, r3, #3
 80047a2:	7fbb      	ldrb	r3, [r7, #30]
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	4413      	add	r3, r2
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d11f      	bne.n	80047f2 <calculate_data_can+0x84>
				{
					if ((lock_df[i]>>j)&0x01)
 80047b2:	7ffb      	ldrb	r3, [r7, #31]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	7fbb      	ldrb	r3, [r7, #30]
 80047be:	fa42 f303 	asr.w	r3, r2, r3
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d009      	beq.n	80047de <calculate_data_can+0x70>
					{
						input[i*8+j] = true;
 80047ca:	7ffb      	ldrb	r3, [r7, #31]
 80047cc:	00da      	lsls	r2, r3, #3
 80047ce:	7fbb      	ldrb	r3, [r7, #30]
 80047d0:	4413      	add	r3, r2
 80047d2:	461a      	mov	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	2201      	movs	r2, #1
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	e00e      	b.n	80047fc <calculate_data_can+0x8e>
					} else
					{
						input[i*8+j] = false;
 80047de:	7ffb      	ldrb	r3, [r7, #31]
 80047e0:	00da      	lsls	r2, r3, #3
 80047e2:	7fbb      	ldrb	r3, [r7, #30]
 80047e4:	4413      	add	r3, r2
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e004      	b.n	80047fc <calculate_data_can+0x8e>
					}
				} else
				{
					*counter_start = delay_time;
 80047f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80047f8:	701a      	strb	r2, [r3, #0]
					break;
 80047fa:	e005      	b.n	8004808 <calculate_data_can+0x9a>
			for (uint8_t j=0; j<8; j++)
 80047fc:	7fbb      	ldrb	r3, [r7, #30]
 80047fe:	3301      	adds	r3, #1
 8004800:	77bb      	strb	r3, [r7, #30]
 8004802:	7fbb      	ldrb	r3, [r7, #30]
 8004804:	2b07      	cmp	r3, #7
 8004806:	d9ca      	bls.n	800479e <calculate_data_can+0x30>
				}
			}
			if (*counter_start == delay_time) break;
 8004808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004810:	429a      	cmp	r2, r3
 8004812:	d006      	beq.n	8004822 <calculate_data_can+0xb4>
		for (uint8_t i=0; i<8; i++)
 8004814:	7ffb      	ldrb	r3, [r7, #31]
 8004816:	3301      	adds	r3, #1
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	7ffb      	ldrb	r3, [r7, #31]
 800481c:	2b07      	cmp	r3, #7
 800481e:	d9bb      	bls.n	8004798 <calculate_data_can+0x2a>
 8004820:	e000      	b.n	8004824 <calculate_data_can+0xb6>
			if (*counter_start == delay_time) break;
 8004822:	bf00      	nop
		}
	}
	if (*counter_start >= delay_time)
 8004824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800482c:	429a      	cmp	r2, r3
 800482e:	d848      	bhi.n	80048c2 <calculate_data_can+0x154>
	{
		for (uint8_t i=0; i<8; i++)
 8004830:	2300      	movs	r3, #0
 8004832:	777b      	strb	r3, [r7, #29]
 8004834:	e042      	b.n	80048bc <calculate_data_can+0x14e>
		{
			for (uint8_t j=0; j<8; j++)
 8004836:	2300      	movs	r3, #0
 8004838:	773b      	strb	r3, [r7, #28]
 800483a:	e039      	b.n	80048b0 <calculate_data_can+0x142>
			{
				if (((lock_df[i]>>j)&0x01) && (abs(HAL_GetTick() - input_timer[i*8+j]) > delay_time*1000))
 800483c:	7f7b      	ldrb	r3, [r7, #29]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	4413      	add	r3, r2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	7f3b      	ldrb	r3, [r7, #28]
 8004848:	fa42 f303 	asr.w	r3, r2, r3
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d021      	beq.n	8004898 <calculate_data_can+0x12a>
 8004854:	f000 fcd8 	bl	8005208 <HAL_GetTick>
 8004858:	4601      	mov	r1, r0
 800485a:	7f7b      	ldrb	r3, [r7, #29]
 800485c:	00da      	lsls	r2, r3, #3
 800485e:	7f3b      	ldrb	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	4413      	add	r3, r2
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	1acb      	subs	r3, r1, r3
 800486c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004870:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004874:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004878:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	429a      	cmp	r2, r3
 8004882:	dd09      	ble.n	8004898 <calculate_data_can+0x12a>
				{
					input[i*8+j] = true;
 8004884:	7f7b      	ldrb	r3, [r7, #29]
 8004886:	00da      	lsls	r2, r3, #3
 8004888:	7f3b      	ldrb	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	461a      	mov	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	2201      	movs	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e008      	b.n	80048aa <calculate_data_can+0x13c>
				} else
				{
					input[i*8+j] = false;
 8004898:	7f7b      	ldrb	r3, [r7, #29]
 800489a:	00da      	lsls	r2, r3, #3
 800489c:	7f3b      	ldrb	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	461a      	mov	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]
			for (uint8_t j=0; j<8; j++)
 80048aa:	7f3b      	ldrb	r3, [r7, #28]
 80048ac:	3301      	adds	r3, #1
 80048ae:	773b      	strb	r3, [r7, #28]
 80048b0:	7f3b      	ldrb	r3, [r7, #28]
 80048b2:	2b07      	cmp	r3, #7
 80048b4:	d9c2      	bls.n	800483c <calculate_data_can+0xce>
		for (uint8_t i=0; i<8; i++)
 80048b6:	7f7b      	ldrb	r3, [r7, #29]
 80048b8:	3301      	adds	r3, #1
 80048ba:	777b      	strb	r3, [r7, #29]
 80048bc:	7f7b      	ldrb	r3, [r7, #29]
 80048be:	2b07      	cmp	r3, #7
 80048c0:	d9b9      	bls.n	8004836 <calculate_data_can+0xc8>
				}
			}
		}
	}
	for (uint8_t i=0; i<8; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	76fb      	strb	r3, [r7, #27]
 80048c6:	e026      	b.n	8004916 <calculate_data_can+0x1a8>
	{
		for (uint8_t j=0; j<8; j++)
 80048c8:	2300      	movs	r3, #0
 80048ca:	76bb      	strb	r3, [r7, #26]
 80048cc:	e01d      	b.n	800490a <calculate_data_can+0x19c>
		{
			data[i] |= input[i*8+j]<<j;
 80048ce:	7efb      	ldrb	r3, [r7, #27]
 80048d0:	3320      	adds	r3, #32
 80048d2:	443b      	add	r3, r7
 80048d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80048d8:	b25a      	sxtb	r2, r3
 80048da:	7efb      	ldrb	r3, [r7, #27]
 80048dc:	00d9      	lsls	r1, r3, #3
 80048de:	7ebb      	ldrb	r3, [r7, #26]
 80048e0:	440b      	add	r3, r1
 80048e2:	4619      	mov	r1, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	440b      	add	r3, r1
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	4619      	mov	r1, r3
 80048ec:	7ebb      	ldrb	r3, [r7, #26]
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	b25b      	sxtb	r3, r3
 80048f4:	4313      	orrs	r3, r2
 80048f6:	b25a      	sxtb	r2, r3
 80048f8:	7efb      	ldrb	r3, [r7, #27]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	3320      	adds	r3, #32
 80048fe:	443b      	add	r3, r7
 8004900:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t j=0; j<8; j++)
 8004904:	7ebb      	ldrb	r3, [r7, #26]
 8004906:	3301      	adds	r3, #1
 8004908:	76bb      	strb	r3, [r7, #26]
 800490a:	7ebb      	ldrb	r3, [r7, #26]
 800490c:	2b07      	cmp	r3, #7
 800490e:	d9de      	bls.n	80048ce <calculate_data_can+0x160>
	for (uint8_t i=0; i<8; i++)
 8004910:	7efb      	ldrb	r3, [r7, #27]
 8004912:	3301      	adds	r3, #1
 8004914:	76fb      	strb	r3, [r7, #27]
 8004916:	7efb      	ldrb	r3, [r7, #27]
 8004918:	2b07      	cmp	r3, #7
 800491a:	d9d5      	bls.n	80048c8 <calculate_data_can+0x15a>
		}
	}
	shift_left_1bit(data, data_can);
 800491c:	f107 0310 	add.w	r3, r7, #16
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fef5 	bl	8004712 <shift_left_1bit>
}
 8004928:	bf00      	nop
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <reconect_eth>:
uint8_t reconect_eth(uint8_t sn)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	71fb      	strb	r3, [r7, #7]
//	bool linkport = false;
	uint8_t Status_SN;
	Status_SN = getSn_SR(sn);
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	3301      	adds	r3, #1
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004946:	4618      	mov	r0, r3
 8004948:	f7fb fc08 	bl	800015c <WIZCHIP_READ>
 800494c:	4603      	mov	r3, r0
 800494e:	73fb      	strb	r3, [r7, #15]
	time_check = HAL_GetTick();
 8004950:	f000 fc5a 	bl	8005208 <HAL_GetTick>
 8004954:	4603      	mov	r3, r0
 8004956:	4a38      	ldr	r2, [pc, #224]	@ (8004a38 <reconect_eth+0x108>)
 8004958:	6013      	str	r3, [r2, #0]
	if (Status_SN == SOCK_CLOSE_WAIT || wizphy_getphylink() == PHY_LINK_OFF)
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b1c      	cmp	r3, #28
 800495e:	d004      	beq.n	800496a <reconect_eth+0x3a>
 8004960:	f7fc fea7 	bl	80016b2 <wizphy_getphylink>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d115      	bne.n	8004996 <reconect_eth+0x66>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_RESET);
 800496a:	2200      	movs	r2, #0
 800496c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004970:	4832      	ldr	r0, [pc, #200]	@ (8004a3c <reconect_eth+0x10c>)
 8004972:	f002 fab2 	bl	8006eda <HAL_GPIO_WritePin>
		timeBreak = HAL_GetTick();
 8004976:	f000 fc47 	bl	8005208 <HAL_GetTick>
 800497a:	4603      	mov	r3, r0
 800497c:	4a30      	ldr	r2, [pc, #192]	@ (8004a40 <reconect_eth+0x110>)
 800497e:	6013      	str	r3, [r2, #0]
		close(sn);
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fc f84e 	bl	8000a24 <close>
		time_check -= 5000;
 8004988:	4b2b      	ldr	r3, [pc, #172]	@ (8004a38 <reconect_eth+0x108>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 8004990:	3b08      	subs	r3, #8
 8004992:	4a29      	ldr	r2, [pc, #164]	@ (8004a38 <reconect_eth+0x108>)
 8004994:	6013      	str	r3, [r2, #0]
	}
	if (wizphy_getphylink() == PHY_LINK_ON && Status_SN == SOCK_CLOSED)
 8004996:	f7fc fe8c 	bl	80016b2 <wizphy_getphylink>
 800499a:	4603      	mov	r3, r0
 800499c:	2b01      	cmp	r3, #1
 800499e:	d126      	bne.n	80049ee <reconect_eth+0xbe>
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d123      	bne.n	80049ee <reconect_eth+0xbe>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_RESET);
 80049a6:	2200      	movs	r2, #0
 80049a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049ac:	4823      	ldr	r0, [pc, #140]	@ (8004a3c <reconect_eth+0x10c>)
 80049ae:	f002 fa94 	bl	8006eda <HAL_GPIO_WritePin>
		timeBreak = HAL_GetTick();
 80049b2:	f000 fc29 	bl	8005208 <HAL_GetTick>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4a21      	ldr	r2, [pc, #132]	@ (8004a40 <reconect_eth+0x110>)
 80049ba:	6013      	str	r3, [r2, #0]
		socket(sn, Sn_MR_TCP, port_client, SF_TCP_NODELAY);
 80049bc:	4b21      	ldr	r3, [pc, #132]	@ (8004a44 <reconect_eth+0x114>)
 80049be:	881a      	ldrh	r2, [r3, #0]
 80049c0:	79f8      	ldrb	r0, [r7, #7]
 80049c2:	2320      	movs	r3, #32
 80049c4:	2101      	movs	r1, #1
 80049c6:	f7fb ff19 	bl	80007fc <socket>
		connect(sn, server_ip, port_server);
 80049ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004a48 <reconect_eth+0x118>)
 80049cc:	881a      	ldrh	r2, [r3, #0]
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	491e      	ldr	r1, [pc, #120]	@ (8004a4c <reconect_eth+0x11c>)
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fc f8aa 	bl	8000b2c <connect>
		counter_reset++;
 80049d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a50 <reconect_eth+0x120>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	4a1c      	ldr	r2, [pc, #112]	@ (8004a50 <reconect_eth+0x120>)
 80049e0:	6013      	str	r3, [r2, #0]
		time_check -= 4000;
 80049e2:	4b15      	ldr	r3, [pc, #84]	@ (8004a38 <reconect_eth+0x108>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 80049ea:	4a13      	ldr	r2, [pc, #76]	@ (8004a38 <reconect_eth+0x108>)
 80049ec:	6013      	str	r3, [r2, #0]
	}
	Status_SN = getSn_SR(sn);
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	3301      	adds	r3, #1
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fb fbae 	bl	800015c <WIZCHIP_READ>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]
	if (Status_SN == SOCK_ESTABLISHED)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b17      	cmp	r3, #23
 8004a08:	d105      	bne.n	8004a16 <reconect_eth+0xe6>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_SET);
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a10:	480a      	ldr	r0, [pc, #40]	@ (8004a3c <reconect_eth+0x10c>)
 8004a12:	f002 fa62 	bl	8006eda <HAL_GPIO_WritePin>
	}
	Status_SN = getSn_SR(sn);
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fb fb9a 	bl	800015c <WIZCHIP_READ>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]
	return Status_SN;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	200006c4 	.word	0x200006c4
 8004a3c:	40011000 	.word	0x40011000
 8004a40:	200006d0 	.word	0x200006d0
 8004a44:	20000598 	.word	0x20000598
 8004a48:	20000596 	.word	0x20000596
 8004a4c:	20000514 	.word	0x20000514
 8004a50:	200006e4 	.word	0x200006e4

08004a54 <Set_speed_can>:

void Set_speed_can(uint8_t speed)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	@ 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
	if (speed == 0)// 100kps
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <Set_speed_can+0x28>
	{
		hcan.Init.Prescaler = 30;
 8004a64:	4b2c      	ldr	r3, [pc, #176]	@ (8004b18 <Set_speed_can+0xc4>)
 8004a66:	221e      	movs	r2, #30
 8004a68:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b18 <Set_speed_can+0xc4>)
 8004a6c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8004a70:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004a72:	4b29      	ldr	r3, [pc, #164]	@ (8004b18 <Set_speed_can+0xc4>)
 8004a74:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004a78:	615a      	str	r2, [r3, #20]
 8004a7a:	e01c      	b.n	8004ab6 <Set_speed_can+0x62>
	} else if (speed == 1)// 50kps
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10b      	bne.n	8004a9a <Set_speed_can+0x46>
	{
		hcan.Init.Prescaler = 40;
 8004a82:	4b25      	ldr	r3, [pc, #148]	@ (8004b18 <Set_speed_can+0xc4>)
 8004a84:	2228      	movs	r2, #40	@ 0x28
 8004a86:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8004a88:	4b23      	ldr	r3, [pc, #140]	@ (8004b18 <Set_speed_can+0xc4>)
 8004a8a:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8004a8e:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8004a90:	4b21      	ldr	r3, [pc, #132]	@ (8004b18 <Set_speed_can+0xc4>)
 8004a92:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004a96:	615a      	str	r2, [r3, #20]
 8004a98:	e00d      	b.n	8004ab6 <Set_speed_can+0x62>
	} else if (speed == 2)// 25kps
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d10a      	bne.n	8004ab6 <Set_speed_can+0x62>
	{
		hcan.Init.Prescaler = 60;
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b18 <Set_speed_can+0xc4>)
 8004aa2:	223c      	movs	r2, #60	@ 0x3c
 8004aa4:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8004aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b18 <Set_speed_can+0xc4>)
 8004aa8:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8004aac:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8004aae:	4b1a      	ldr	r3, [pc, #104]	@ (8004b18 <Set_speed_can+0xc4>)
 8004ab0:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8004ab4:	615a      	str	r2, [r3, #20]
	}
	hcan.Init.AutoRetransmission = ENABLE;
 8004ab6:	4b18      	ldr	r3, [pc, #96]	@ (8004b18 <Set_speed_can+0xc4>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	76da      	strb	r2, [r3, #27]
	hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8004abc:	4b16      	ldr	r3, [pc, #88]	@ (8004b18 <Set_speed_can+0xc4>)
 8004abe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ac2:	60da      	str	r2, [r3, #12]
	HAL_CAN_Init(&hcan);
 8004ac4:	4814      	ldr	r0, [pc, #80]	@ (8004b18 <Set_speed_can+0xc4>)
 8004ac6:	f000 fbeb 	bl	80052a0 <HAL_CAN_Init>

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8004aca:	2301      	movs	r3, #1
 8004acc:	62bb      	str	r3, [r7, #40]	@ 0x28
	canfilterconfig.FilterBank = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterIdHigh = 0x740<<5;
 8004ad6:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 8004ada:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterIdLow = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8004b1c <Set_speed_can+0xc8>)
 8004ae2:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdLow = 6;
 8004ae4:	2306      	movs	r3, #6
 8004ae6:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004aec:	2301      	movs	r3, #1
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24
	canfilterconfig.SlaveStartFilterBank = 13;
 8004af0:	230d      	movs	r3, #13
 8004af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8004af4:	f107 0308 	add.w	r3, r7, #8
 8004af8:	4619      	mov	r1, r3
 8004afa:	4807      	ldr	r0, [pc, #28]	@ (8004b18 <Set_speed_can+0xc4>)
 8004afc:	f000 fccb 	bl	8005496 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 8004b00:	4805      	ldr	r0, [pc, #20]	@ (8004b18 <Set_speed_can+0xc4>)
 8004b02:	f000 fd91 	bl	8005628 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004b06:	2102      	movs	r1, #2
 8004b08:	4803      	ldr	r0, [pc, #12]	@ (8004b18 <Set_speed_can+0xc4>)
 8004b0a:	f001 f839 	bl	8005b80 <HAL_CAN_ActivateNotification>
}
 8004b0e:	bf00      	nop
 8004b10:	3730      	adds	r7, #48	@ 0x30
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200000a4 	.word	0x200000a4
 8004b1c:	0001ffe0 	.word	0x0001ffe0

08004b20 <is_leap_year>:


// Hàm kiểm tra năm nhuận
static uint8_t is_leap_year(uint16_t year)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	80fb      	strh	r3, [r7, #6]
    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <is_leap_year+0x2e>
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	4a0f      	ldr	r2, [pc, #60]	@ (8004b78 <is_leap_year+0x58>)
 8004b3a:	fba2 1203 	umull	r1, r2, r2, r3
 8004b3e:	0952      	lsrs	r2, r2, #5
 8004b40:	2164      	movs	r1, #100	@ 0x64
 8004b42:	fb01 f202 	mul.w	r2, r1, r2
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10c      	bne.n	8004b68 <is_leap_year+0x48>
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	4a09      	ldr	r2, [pc, #36]	@ (8004b78 <is_leap_year+0x58>)
 8004b52:	fba2 1203 	umull	r1, r2, r2, r3
 8004b56:	09d2      	lsrs	r2, r2, #7
 8004b58:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004b5c:	fb01 f202 	mul.w	r2, r1, r2
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <is_leap_year+0x4c>
    {
        return 1;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <is_leap_year+0x4e>
    }
    return 0;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	51eb851f 	.word	0x51eb851f

08004b7c <mktime>:

// Hàm tùy chỉnh tương tự mktime
uint32_t mktime(uint16_t year, uint8_t month, uint8_t date, uint8_t hour, uint8_t minute)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4604      	mov	r4, r0
 8004b84:	4608      	mov	r0, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	80fb      	strh	r3, [r7, #6]
 8004b8e:	4603      	mov	r3, r0
 8004b90:	717b      	strb	r3, [r7, #5]
 8004b92:	460b      	mov	r3, r1
 8004b94:	713b      	strb	r3, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	70fb      	strb	r3, [r7, #3]
	uint32_t time = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    // 1. Cộng dồn số giây từ các năm đã qua
    // Giả sử epoch là 1/1/2000
	if (year >= EPOCH_YEAR)
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	f240 72e3 	movw	r2, #2019	@ 0x7e3
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d91b      	bls.n	8004be0 <mktime+0x64>
	{
		for (i = EPOCH_YEAR; i < year; i++) {
 8004ba8:	f240 73e4 	movw	r3, #2020	@ 0x7e4
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	e012      	b.n	8004bd6 <mktime+0x5a>
			time += (uint32_t)(365 + is_leap_year(i)) * 24 * 60;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ffb3 	bl	8004b20 <is_leap_year>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
		for (i = EPOCH_YEAR; i < year; i++) {
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d3e8      	bcc.n	8004bb0 <mktime+0x34>
 8004bde:	e001      	b.n	8004be4 <mktime+0x68>
		}
	} else
	{
		return 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e048      	b.n	8004c76 <mktime+0xfa>
	}
    // 2. Cộng dồn số giây từ các tháng đã qua trong năm hiện tại
	if (month >= 1 && month <= 12)
 8004be4:	797b      	ldrb	r3, [r7, #5]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d029      	beq.n	8004c3e <mktime+0xc2>
 8004bea:	797b      	ldrb	r3, [r7, #5]
 8004bec:	2b0c      	cmp	r3, #12
 8004bee:	d826      	bhi.n	8004c3e <mktime+0xc2>
	{
		for (i = 0; i < month - 1; i++) {
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	e00e      	b.n	8004c14 <mktime+0x98>
			time += (uint32_t)days_in_month[i] * 24 * 60;
 8004bf6:	4a22      	ldr	r2, [pc, #136]	@ (8004c80 <mktime+0x104>)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < month - 1; i++) {
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	797b      	ldrb	r3, [r7, #5]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d3ea      	bcc.n	8004bf6 <mktime+0x7a>
			// Cộng thêm một ngày nếu là tháng 2 của năm nhuận
		}
		 if (month > 2 && is_leap_year(year))
 8004c20:	797b      	ldrb	r3, [r7, #5]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d90d      	bls.n	8004c42 <mktime+0xc6>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff ff79 	bl	8004b20 <is_leap_year>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d006      	beq.n	8004c42 <mktime+0xc6>
		 {
			 time += 24 * 60;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8004c3a:	60fb      	str	r3, [r7, #12]
		 if (month > 2 && is_leap_year(year))
 8004c3c:	e001      	b.n	8004c42 <mktime+0xc6>
		 }
	} else
	{
		return 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e019      	b.n	8004c76 <mktime+0xfa>
		 if (month > 2 && is_leap_year(year))
 8004c42:	bf00      	nop
	}

    // 3. Cộng dồn số giây từ các ngày, giờ, phút và giây
    time += (uint32_t)(date - 1) * 24 * 60;
 8004c44:	793b      	ldrb	r3, [r7, #4]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
    time += (uint32_t)hour * 60;
 8004c58:	78fa      	ldrb	r2, [r7, #3]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	461a      	mov	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
    time += (uint32_t)minute;
 8004c6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
    return time;
 8004c74:	68fb      	ldr	r3, [r7, #12]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd90      	pop	{r4, r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	08009c90 	.word	0x08009c90

08004c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c88:	b672      	cpsid	i
}
 8004c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c8c:	bf00      	nop
 8004c8e:	e7fd      	b.n	8004c8c <Error_Handler+0x8>

08004c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004c96:	4b15      	ldr	r3, [pc, #84]	@ (8004cec <HAL_MspInit+0x5c>)
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	4a14      	ldr	r2, [pc, #80]	@ (8004cec <HAL_MspInit+0x5c>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	6193      	str	r3, [r2, #24]
 8004ca2:	4b12      	ldr	r3, [pc, #72]	@ (8004cec <HAL_MspInit+0x5c>)
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cae:	4b0f      	ldr	r3, [pc, #60]	@ (8004cec <HAL_MspInit+0x5c>)
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8004cec <HAL_MspInit+0x5c>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cb8:	61d3      	str	r3, [r2, #28]
 8004cba:	4b0c      	ldr	r3, [pc, #48]	@ (8004cec <HAL_MspInit+0x5c>)
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	607b      	str	r3, [r7, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <HAL_MspInit+0x60>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	4a04      	ldr	r2, [pc, #16]	@ (8004cf0 <HAL_MspInit+0x60>)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	40010000 	.word	0x40010000

08004cf4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfc:	f107 0310 	add.w	r3, r7, #16
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a20      	ldr	r2, [pc, #128]	@ (8004d90 <HAL_CAN_MspInit+0x9c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d139      	bne.n	8004d88 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004d14:	4b1f      	ldr	r3, [pc, #124]	@ (8004d94 <HAL_CAN_MspInit+0xa0>)
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	4a1e      	ldr	r2, [pc, #120]	@ (8004d94 <HAL_CAN_MspInit+0xa0>)
 8004d1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d1e:	61d3      	str	r3, [r2, #28]
 8004d20:	4b1c      	ldr	r3, [pc, #112]	@ (8004d94 <HAL_CAN_MspInit+0xa0>)
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2c:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <HAL_CAN_MspInit+0xa0>)
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	4a18      	ldr	r2, [pc, #96]	@ (8004d94 <HAL_CAN_MspInit+0xa0>)
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	6193      	str	r3, [r2, #24]
 8004d38:	4b16      	ldr	r3, [pc, #88]	@ (8004d94 <HAL_CAN_MspInit+0xa0>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004d44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d52:	f107 0310 	add.w	r3, r7, #16
 8004d56:	4619      	mov	r1, r3
 8004d58:	480f      	ldr	r0, [pc, #60]	@ (8004d98 <HAL_CAN_MspInit+0xa4>)
 8004d5a:	f001 ff23 	bl	8006ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d64:	2302      	movs	r3, #2
 8004d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6c:	f107 0310 	add.w	r3, r7, #16
 8004d70:	4619      	mov	r1, r3
 8004d72:	4809      	ldr	r0, [pc, #36]	@ (8004d98 <HAL_CAN_MspInit+0xa4>)
 8004d74:	f001 ff16 	bl	8006ba4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2103      	movs	r1, #3
 8004d7c:	2014      	movs	r0, #20
 8004d7e:	f001 fa34 	bl	80061ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004d82:	2014      	movs	r0, #20
 8004d84:	f001 fa4d 	bl	8006222 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8004d88:	bf00      	nop
 8004d8a:	3720      	adds	r7, #32
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40006400 	.word	0x40006400
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40010800 	.word	0x40010800

08004d9c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	@ 0x28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004da4:	f107 0318 	add.w	r3, r7, #24
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	605a      	str	r2, [r3, #4]
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a37      	ldr	r2, [pc, #220]	@ (8004e94 <HAL_SPI_MspInit+0xf8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d130      	bne.n	8004e1e <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004dbc:	4b36      	ldr	r3, [pc, #216]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	4a35      	ldr	r2, [pc, #212]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004dc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004dc6:	6193      	str	r3, [r2, #24]
 8004dc8:	4b33      	ldr	r3, [pc, #204]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd4:	4b30      	ldr	r3, [pc, #192]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004dda:	f043 0304 	orr.w	r3, r3, #4
 8004dde:	6193      	str	r3, [r2, #24]
 8004de0:	4b2d      	ldr	r3, [pc, #180]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004dec:	23a0      	movs	r3, #160	@ 0xa0
 8004dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df0:	2302      	movs	r3, #2
 8004df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004df4:	2303      	movs	r3, #3
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df8:	f107 0318 	add.w	r3, r7, #24
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4827      	ldr	r0, [pc, #156]	@ (8004e9c <HAL_SPI_MspInit+0x100>)
 8004e00:	f001 fed0 	bl	8006ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e04:	2340      	movs	r3, #64	@ 0x40
 8004e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e10:	f107 0318 	add.w	r3, r7, #24
 8004e14:	4619      	mov	r1, r3
 8004e16:	4821      	ldr	r0, [pc, #132]	@ (8004e9c <HAL_SPI_MspInit+0x100>)
 8004e18:	f001 fec4 	bl	8006ba4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004e1c:	e036      	b.n	8004e8c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea0 <HAL_SPI_MspInit+0x104>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d131      	bne.n	8004e8c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e28:	4b1b      	ldr	r3, [pc, #108]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e32:	61d3      	str	r3, [r2, #28]
 8004e34:	4b18      	ldr	r3, [pc, #96]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e40:	4b15      	ldr	r3, [pc, #84]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	4a14      	ldr	r2, [pc, #80]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004e46:	f043 0308 	orr.w	r3, r3, #8
 8004e4a:	6193      	str	r3, [r2, #24]
 8004e4c:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <HAL_SPI_MspInit+0xfc>)
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004e58:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8004e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e62:	2303      	movs	r3, #3
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e66:	f107 0318 	add.w	r3, r7, #24
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	480d      	ldr	r0, [pc, #52]	@ (8004ea4 <HAL_SPI_MspInit+0x108>)
 8004e6e:	f001 fe99 	bl	8006ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004e72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e80:	f107 0318 	add.w	r3, r7, #24
 8004e84:	4619      	mov	r1, r3
 8004e86:	4807      	ldr	r0, [pc, #28]	@ (8004ea4 <HAL_SPI_MspInit+0x108>)
 8004e88:	f001 fe8c 	bl	8006ba4 <HAL_GPIO_Init>
}
 8004e8c:	bf00      	nop
 8004e8e:	3728      	adds	r7, #40	@ 0x28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40013000 	.word	0x40013000
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40010800 	.word	0x40010800
 8004ea0:	40003800 	.word	0x40003800
 8004ea4:	40010c00 	.word	0x40010c00

08004ea8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb8:	d114      	bne.n	8004ee4 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004eba:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <HAL_TIM_Base_MspInit+0x78>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	4a18      	ldr	r2, [pc, #96]	@ (8004f20 <HAL_TIM_Base_MspInit+0x78>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	61d3      	str	r3, [r2, #28]
 8004ec6:	4b16      	ldr	r3, [pc, #88]	@ (8004f20 <HAL_TIM_Base_MspInit+0x78>)
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2104      	movs	r1, #4
 8004ed6:	201c      	movs	r0, #28
 8004ed8:	f001 f987 	bl	80061ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004edc:	201c      	movs	r0, #28
 8004ede:	f001 f9a0 	bl	8006222 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004ee2:	e018      	b.n	8004f16 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f24 <HAL_TIM_Base_MspInit+0x7c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d113      	bne.n	8004f16 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004eee:	4b0c      	ldr	r3, [pc, #48]	@ (8004f20 <HAL_TIM_Base_MspInit+0x78>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8004f20 <HAL_TIM_Base_MspInit+0x78>)
 8004ef4:	f043 0302 	orr.w	r3, r3, #2
 8004ef8:	61d3      	str	r3, [r2, #28]
 8004efa:	4b09      	ldr	r3, [pc, #36]	@ (8004f20 <HAL_TIM_Base_MspInit+0x78>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	60bb      	str	r3, [r7, #8]
 8004f04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004f06:	2200      	movs	r2, #0
 8004f08:	2105      	movs	r1, #5
 8004f0a:	201d      	movs	r0, #29
 8004f0c:	f001 f96d 	bl	80061ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f10:	201d      	movs	r0, #29
 8004f12:	f001 f986 	bl	8006222 <HAL_NVIC_EnableIRQ>
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40000400 	.word	0x40000400

08004f28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f30:	f107 0310 	add.w	r3, r7, #16
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
 8004f3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a33      	ldr	r2, [pc, #204]	@ (8005010 <HAL_UART_MspInit+0xe8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d15f      	bne.n	8005008 <HAL_UART_MspInit+0xe0>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f48:	4b32      	ldr	r3, [pc, #200]	@ (8005014 <HAL_UART_MspInit+0xec>)
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	4a31      	ldr	r2, [pc, #196]	@ (8005014 <HAL_UART_MspInit+0xec>)
 8004f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f52:	6193      	str	r3, [r2, #24]
 8004f54:	4b2f      	ldr	r3, [pc, #188]	@ (8005014 <HAL_UART_MspInit+0xec>)
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f60:	4b2c      	ldr	r3, [pc, #176]	@ (8005014 <HAL_UART_MspInit+0xec>)
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	4a2b      	ldr	r2, [pc, #172]	@ (8005014 <HAL_UART_MspInit+0xec>)
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	6193      	str	r3, [r2, #24]
 8004f6c:	4b29      	ldr	r3, [pc, #164]	@ (8005014 <HAL_UART_MspInit+0xec>)
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f82:	2303      	movs	r3, #3
 8004f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f86:	f107 0310 	add.w	r3, r7, #16
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4822      	ldr	r0, [pc, #136]	@ (8005018 <HAL_UART_MspInit+0xf0>)
 8004f8e:	f001 fe09 	bl	8006ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa0:	f107 0310 	add.w	r3, r7, #16
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	481c      	ldr	r0, [pc, #112]	@ (8005018 <HAL_UART_MspInit+0xf0>)
 8004fa8:	f001 fdfc 	bl	8006ba4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004fac:	4b1b      	ldr	r3, [pc, #108]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004fae:	4a1c      	ldr	r2, [pc, #112]	@ (8005020 <HAL_UART_MspInit+0xf8>)
 8004fb0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fb8:	4b18      	ldr	r3, [pc, #96]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fbe:	4b17      	ldr	r3, [pc, #92]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004fc0:	2280      	movs	r2, #128	@ 0x80
 8004fc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fc4:	4b15      	ldr	r3, [pc, #84]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fca:	4b14      	ldr	r3, [pc, #80]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004fd0:	4b12      	ldr	r3, [pc, #72]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004fd6:	4b11      	ldr	r3, [pc, #68]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004fdc:	480f      	ldr	r0, [pc, #60]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004fde:	f001 f93f 	bl	8006260 <HAL_DMA_Init>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8004fe8:	f7ff fe4c 	bl	8004c84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a0b      	ldr	r2, [pc, #44]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800501c <HAL_UART_MspInit+0xf4>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2102      	movs	r1, #2
 8004ffc:	2025      	movs	r0, #37	@ 0x25
 8004ffe:	f001 f8f4 	bl	80061ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005002:	2025      	movs	r0, #37	@ 0x25
 8005004:	f001 f90d 	bl	8006222 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005008:	bf00      	nop
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40013800 	.word	0x40013800
 8005014:	40021000 	.word	0x40021000
 8005018:	40010800 	.word	0x40010800
 800501c:	20000260 	.word	0x20000260
 8005020:	40020058 	.word	0x40020058

08005024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <NMI_Handler+0x4>

0800502c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005030:	bf00      	nop
 8005032:	e7fd      	b.n	8005030 <HardFault_Handler+0x4>

08005034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005038:	bf00      	nop
 800503a:	e7fd      	b.n	8005038 <MemManage_Handler+0x4>

0800503c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005040:	bf00      	nop
 8005042:	e7fd      	b.n	8005040 <BusFault_Handler+0x4>

08005044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <UsageFault_Handler+0x4>

0800504c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800505c:	bf00      	nop
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr

08005064 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005074:	f000 f8b6 	bl	80051e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005078:	bf00      	nop
 800507a:	bd80      	pop	{r7, pc}

0800507c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005080:	2001      	movs	r0, #1
 8005082:	f001 ff5b 	bl	8006f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005090:	4802      	ldr	r0, [pc, #8]	@ (800509c <DMA1_Channel5_IRQHandler+0x10>)
 8005092:	f001 fa53 	bl	800653c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000260 	.word	0x20000260

080050a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80050a4:	4802      	ldr	r0, [pc, #8]	@ (80050b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80050a6:	f000 fd90 	bl	8005bca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80050aa:	bf00      	nop
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	200000a4 	.word	0x200000a4

080050b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RST_Pin);
 80050b8:	2040      	movs	r0, #64	@ 0x40
 80050ba:	f001 ff3f 	bl	8006f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80050be:	bf00      	nop
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80050c8:	4802      	ldr	r0, [pc, #8]	@ (80050d4 <TIM2_IRQHandler+0x10>)
 80050ca:	f003 f9eb 	bl	80084a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80050ce:	bf00      	nop
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000188 	.word	0x20000188

080050d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80050dc:	4802      	ldr	r0, [pc, #8]	@ (80050e8 <TIM3_IRQHandler+0x10>)
 80050de:	f003 f9e1 	bl	80084a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80050e2:	bf00      	nop
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	200001d0 	.word	0x200001d0

080050ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80050f0:	4802      	ldr	r0, [pc, #8]	@ (80050fc <USART1_IRQHandler+0x10>)
 80050f2:	f003 fe5b 	bl	8008dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000218 	.word	0x20000218

08005100 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005104:	bf00      	nop
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800510c:	f7ff fff8 	bl	8005100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005110:	480b      	ldr	r0, [pc, #44]	@ (8005140 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005112:	490c      	ldr	r1, [pc, #48]	@ (8005144 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005114:	4a0c      	ldr	r2, [pc, #48]	@ (8005148 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005118:	e002      	b.n	8005120 <LoopCopyDataInit>

0800511a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800511a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800511c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800511e:	3304      	adds	r3, #4

08005120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005124:	d3f9      	bcc.n	800511a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005126:	4a09      	ldr	r2, [pc, #36]	@ (800514c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005128:	4c09      	ldr	r4, [pc, #36]	@ (8005150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800512a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800512c:	e001      	b.n	8005132 <LoopFillZerobss>

0800512e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800512e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005130:	3204      	adds	r2, #4

08005132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005134:	d3fb      	bcc.n	800512e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005136:	f004 fd49 	bl	8009bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800513a:	f7fd f86b 	bl	8002214 <main>
  bx lr
 800513e:	4770      	bx	lr
  ldr r0, =_sdata
 8005140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005144:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8005148:	08009cfc 	.word	0x08009cfc
  ldr r2, =_sbss
 800514c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8005150:	20000810 	.word	0x20000810

08005154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005154:	e7fe      	b.n	8005154 <ADC1_2_IRQHandler>
	...

08005158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800515c:	4b08      	ldr	r3, [pc, #32]	@ (8005180 <HAL_Init+0x28>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a07      	ldr	r2, [pc, #28]	@ (8005180 <HAL_Init+0x28>)
 8005162:	f043 0310 	orr.w	r3, r3, #16
 8005166:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005168:	2003      	movs	r0, #3
 800516a:	f001 f833 	bl	80061d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800516e:	2006      	movs	r0, #6
 8005170:	f000 f808 	bl	8005184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005174:	f7ff fd8c 	bl	8004c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40022000 	.word	0x40022000

08005184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800518c:	4b12      	ldr	r3, [pc, #72]	@ (80051d8 <HAL_InitTick+0x54>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b12      	ldr	r3, [pc, #72]	@ (80051dc <HAL_InitTick+0x58>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	4619      	mov	r1, r3
 8005196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800519a:	fbb3 f3f1 	udiv	r3, r3, r1
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 f84f 	bl	8006246 <HAL_SYSTICK_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e00e      	b.n	80051d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b0f      	cmp	r3, #15
 80051b6:	d80a      	bhi.n	80051ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051b8:	2200      	movs	r2, #0
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	f001 f813 	bl	80061ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051c4:	4a06      	ldr	r2, [pc, #24]	@ (80051e0 <HAL_InitTick+0x5c>)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e000      	b.n	80051d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000034 	.word	0x20000034
 80051dc:	2000003c 	.word	0x2000003c
 80051e0:	20000038 	.word	0x20000038

080051e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051e8:	4b05      	ldr	r3, [pc, #20]	@ (8005200 <HAL_IncTick+0x1c>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <HAL_IncTick+0x20>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4413      	add	r3, r2
 80051f4:	4a03      	ldr	r2, [pc, #12]	@ (8005204 <HAL_IncTick+0x20>)
 80051f6:	6013      	str	r3, [r2, #0]
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr
 8005200:	2000003c 	.word	0x2000003c
 8005204:	200007e8 	.word	0x200007e8

08005208 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return uwTick;
 800520c:	4b02      	ldr	r3, [pc, #8]	@ (8005218 <HAL_GetTick+0x10>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr
 8005218:	200007e8 	.word	0x200007e8

0800521c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005224:	f7ff fff0 	bl	8005208 <HAL_GetTick>
 8005228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d005      	beq.n	8005242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <HAL_Delay+0x44>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005242:	bf00      	nop
 8005244:	f7ff ffe0 	bl	8005208 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	429a      	cmp	r2, r3
 8005252:	d8f7      	bhi.n	8005244 <HAL_Delay+0x28>
  {
  }
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	2000003c 	.word	0x2000003c

08005264 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8005268:	4b02      	ldr	r3, [pc, #8]	@ (8005274 <HAL_GetUIDw0+0x10>)
 800526a:	681b      	ldr	r3, [r3, #0]
}
 800526c:	4618      	mov	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr
 8005274:	1ffff7e8 	.word	0x1ffff7e8

08005278 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800527c:	4b02      	ldr	r3, [pc, #8]	@ (8005288 <HAL_GetUIDw1+0x10>)
 800527e:	681b      	ldr	r3, [r3, #0]
}
 8005280:	4618      	mov	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr
 8005288:	1ffff7ec 	.word	0x1ffff7ec

0800528c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005290:	4b02      	ldr	r3, [pc, #8]	@ (800529c <HAL_GetUIDw2+0x10>)
 8005292:	681b      	ldr	r3, [r3, #0]
}
 8005294:	4618      	mov	r0, r3
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	1ffff7f0 	.word	0x1ffff7f0

080052a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e0ed      	b.n	800548e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d102      	bne.n	80052c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fd18 	bl	8004cf4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052d4:	f7ff ff98 	bl	8005208 <HAL_GetTick>
 80052d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80052da:	e012      	b.n	8005302 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052dc:	f7ff ff94 	bl	8005208 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b0a      	cmp	r3, #10
 80052e8:	d90b      	bls.n	8005302 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2205      	movs	r2, #5
 80052fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e0c5      	b.n	800548e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0e5      	beq.n	80052dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0202 	bic.w	r2, r2, #2
 800531e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005320:	f7ff ff72 	bl	8005208 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005326:	e012      	b.n	800534e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005328:	f7ff ff6e 	bl	8005208 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b0a      	cmp	r3, #10
 8005334:	d90b      	bls.n	800534e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2205      	movs	r2, #5
 8005346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e09f      	b.n	800548e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e5      	bne.n	8005328 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	7e1b      	ldrb	r3, [r3, #24]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d108      	bne.n	8005376 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e007      	b.n	8005386 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005384:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	7e5b      	ldrb	r3, [r3, #25]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d108      	bne.n	80053a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e007      	b.n	80053b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7e9b      	ldrb	r3, [r3, #26]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d108      	bne.n	80053ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0220 	orr.w	r2, r2, #32
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e007      	b.n	80053da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0220 	bic.w	r2, r2, #32
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7edb      	ldrb	r3, [r3, #27]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d108      	bne.n	80053f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0210 	bic.w	r2, r2, #16
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e007      	b.n	8005404 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0210 	orr.w	r2, r2, #16
 8005402:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	7f1b      	ldrb	r3, [r3, #28]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d108      	bne.n	800541e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0208 	orr.w	r2, r2, #8
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e007      	b.n	800542e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0208 	bic.w	r2, r2, #8
 800542c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	7f5b      	ldrb	r3, [r3, #29]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d108      	bne.n	8005448 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0204 	orr.w	r2, r2, #4
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e007      	b.n	8005458 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0204 	bic.w	r2, r2, #4
 8005456:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	ea42 0103 	orr.w	r1, r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	1e5a      	subs	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005496:	b480      	push	{r7}
 8005498:	b087      	sub	sp, #28
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80054ae:	7cfb      	ldrb	r3, [r7, #19]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d003      	beq.n	80054bc <HAL_CAN_ConfigFilter+0x26>
 80054b4:	7cfb      	ldrb	r3, [r7, #19]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	f040 80aa 	bne.w	8005610 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80054c2:	f043 0201 	orr.w	r2, r3, #1
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2201      	movs	r2, #1
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	401a      	ands	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d123      	bne.n	800553e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	43db      	mvns	r3, r3
 8005500:	401a      	ands	r2, r3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005518:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	3248      	adds	r2, #72	@ 0x48
 800551e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005532:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005534:	6979      	ldr	r1, [r7, #20]
 8005536:	3348      	adds	r3, #72	@ 0x48
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	440b      	add	r3, r1
 800553c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d122      	bne.n	800558c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	431a      	orrs	r2, r3
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005566:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3248      	adds	r2, #72	@ 0x48
 800556c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005580:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005582:	6979      	ldr	r1, [r7, #20]
 8005584:	3348      	adds	r3, #72	@ 0x48
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	440b      	add	r3, r1
 800558a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d109      	bne.n	80055a8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	43db      	mvns	r3, r3
 800559e:	401a      	ands	r2, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80055a6:	e007      	b.n	80055b8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	43db      	mvns	r3, r3
 80055ca:	401a      	ands	r2, r3
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80055d2:	e007      	b.n	80055e4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	431a      	orrs	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d107      	bne.n	80055fc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005602:	f023 0201 	bic.w	r2, r3, #1
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e006      	b.n	800561e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005614:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b01      	cmp	r3, #1
 800563a:	d12e      	bne.n	800569a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005654:	f7ff fdd8 	bl	8005208 <HAL_GetTick>
 8005658:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800565a:	e012      	b.n	8005682 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800565c:	f7ff fdd4 	bl	8005208 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b0a      	cmp	r3, #10
 8005668:	d90b      	bls.n	8005682 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2205      	movs	r2, #5
 800567a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e012      	b.n	80056a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	e006      	b.n	80056a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
  }
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b089      	sub	sp, #36	@ 0x24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d003      	beq.n	80056dc <HAL_CAN_AddTxMessage+0x2c>
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	f040 80ad 	bne.w	8005836 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8095 	beq.w	8005826 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	0e1b      	lsrs	r3, r3, #24
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005706:	2201      	movs	r2, #1
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	409a      	lsls	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10d      	bne.n	8005734 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	6809      	ldr	r1, [r1, #0]
 8005726:	431a      	orrs	r2, r3
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	3318      	adds	r3, #24
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	440b      	add	r3, r1
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e00f      	b.n	8005754 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800573e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005744:	68f9      	ldr	r1, [r7, #12]
 8005746:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005748:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	3318      	adds	r3, #24
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	440b      	add	r3, r1
 8005752:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6819      	ldr	r1, [r3, #0]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3318      	adds	r3, #24
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	440b      	add	r3, r1
 8005764:	3304      	adds	r3, #4
 8005766:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	7d1b      	ldrb	r3, [r3, #20]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d111      	bne.n	8005794 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3318      	adds	r3, #24
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	4413      	add	r3, r2
 800577c:	3304      	adds	r3, #4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	6811      	ldr	r1, [r2, #0]
 8005784:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	3318      	adds	r3, #24
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	440b      	add	r3, r1
 8005790:	3304      	adds	r3, #4
 8005792:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3307      	adds	r3, #7
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	061a      	lsls	r2, r3, #24
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3306      	adds	r3, #6
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	041b      	lsls	r3, r3, #16
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3305      	adds	r3, #5
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	4313      	orrs	r3, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	3204      	adds	r2, #4
 80057b4:	7812      	ldrb	r2, [r2, #0]
 80057b6:	4610      	mov	r0, r2
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	6811      	ldr	r1, [r2, #0]
 80057bc:	ea43 0200 	orr.w	r2, r3, r0
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	440b      	add	r3, r1
 80057c6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80057ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3303      	adds	r3, #3
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	061a      	lsls	r2, r3, #24
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3302      	adds	r3, #2
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3301      	adds	r3, #1
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	4313      	orrs	r3, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	7812      	ldrb	r2, [r2, #0]
 80057ec:	4610      	mov	r0, r2
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	6811      	ldr	r1, [r2, #0]
 80057f2:	ea43 0200 	orr.w	r2, r3, r0
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	440b      	add	r3, r1
 80057fc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005800:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	3318      	adds	r3, #24
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	4413      	add	r3, r2
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	6811      	ldr	r1, [r2, #0]
 8005814:	f043 0201 	orr.w	r2, r3, #1
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	3318      	adds	r3, #24
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	440b      	add	r3, r1
 8005820:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e00e      	b.n	8005844 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e006      	b.n	8005844 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
  }
}
 8005844:	4618      	mov	r0, r3
 8005846:	3724      	adds	r7, #36	@ 0x24
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800585e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d002      	beq.n	800586c <HAL_CAN_AbortTxRequest+0x1e>
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d128      	bne.n	80058be <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005884:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800589e:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80058b8:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	e006      	b.n	80058cc <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
  }
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058e8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80058ea:	7afb      	ldrb	r3, [r7, #11]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d002      	beq.n	80058f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80058f0:	7afb      	ldrb	r3, [r7, #11]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d11d      	bne.n	8005932 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005932:	68fb      	ldr	r3, [r7, #12]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005952:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005954:	7dfb      	ldrb	r3, [r7, #23]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d003      	beq.n	8005962 <HAL_CAN_GetRxMessage+0x24>
 800595a:	7dfb      	ldrb	r3, [r7, #23]
 800595c:	2b02      	cmp	r3, #2
 800595e:	f040 8103 	bne.w	8005b68 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10e      	bne.n	8005986 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d116      	bne.n	80059a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e0f7      	b.n	8005b76 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d107      	bne.n	80059a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e0e8      	b.n	8005b76 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	331b      	adds	r3, #27
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	4413      	add	r3, r2
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0204 	and.w	r2, r3, #4
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10c      	bne.n	80059dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	331b      	adds	r3, #27
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	4413      	add	r3, r2
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	0d5b      	lsrs	r3, r3, #21
 80059d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e00b      	b.n	80059f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	331b      	adds	r3, #27
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	4413      	add	r3, r2
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	08db      	lsrs	r3, r3, #3
 80059ec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	331b      	adds	r3, #27
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	4413      	add	r3, r2
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0202 	and.w	r2, r3, #2
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	331b      	adds	r3, #27
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	4413      	add	r3, r2
 8005a16:	3304      	adds	r3, #4
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2208      	movs	r2, #8
 8005a26:	611a      	str	r2, [r3, #16]
 8005a28:	e00b      	b.n	8005a42 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	331b      	adds	r3, #27
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	4413      	add	r3, r2
 8005a36:	3304      	adds	r3, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 020f 	and.w	r2, r3, #15
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	331b      	adds	r3, #27
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3304      	adds	r3, #4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	0a1b      	lsrs	r3, r3, #8
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	331b      	adds	r3, #27
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	4413      	add	r3, r2
 8005a66:	3304      	adds	r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	0c1b      	lsrs	r3, r3, #16
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	0a1a      	lsrs	r2, r3, #8
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	0c1a      	lsrs	r2, r3, #16
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	0e1a      	lsrs	r2, r3, #24
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	3303      	adds	r3, #3
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	0a1a      	lsrs	r2, r3, #8
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	3305      	adds	r3, #5
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	0c1a      	lsrs	r2, r3, #16
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	3306      	adds	r3, #6
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	0e1a      	lsrs	r2, r3, #24
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	3307      	adds	r3, #7
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d108      	bne.n	8005b54 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0220 	orr.w	r2, r2, #32
 8005b50:	60da      	str	r2, [r3, #12]
 8005b52:	e007      	b.n	8005b64 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0220 	orr.w	r2, r2, #32
 8005b62:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e006      	b.n	8005b76 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
  }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr

08005b80 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b90:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d002      	beq.n	8005b9e <HAL_CAN_ActivateNotification+0x1e>
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d109      	bne.n	8005bb2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6959      	ldr	r1, [r3, #20]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e006      	b.n	8005bc0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
  }
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b08a      	sub	sp, #40	@ 0x28
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d07c      	beq.n	8005d0a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d023      	beq.n	8005c62 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f983 	bl	8005f38 <HAL_CAN_TxMailbox0CompleteCallback>
 8005c32:	e016      	b.n	8005c62 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c46:	e00c      	b.n	8005c62 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5a:	e002      	b.n	8005c62 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f986 	bl	8005f6e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d024      	beq.n	8005cb6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f962 	bl	8005f4a <HAL_CAN_TxMailbox1CompleteCallback>
 8005c86:	e016      	b.n	8005cb6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c9a:	e00c      	b.n	8005cb6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cae:	e002      	b.n	8005cb6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f965 	bl	8005f80 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d024      	beq.n	8005d0a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005cc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f941 	bl	8005f5c <HAL_CAN_TxMailbox2CompleteCallback>
 8005cda:	e016      	b.n	8005d0a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cee:	e00c      	b.n	8005d0a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d02:	e002      	b.n	8005d0a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f944 	bl	8005f92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00c      	beq.n	8005d2e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d007      	beq.n	8005d2e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2210      	movs	r2, #16
 8005d2c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d006      	beq.n	8005d50 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2208      	movs	r2, #8
 8005d48:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f92a 	bl	8005fa4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7fc fa23 	bl	80021b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00c      	beq.n	8005d92 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2210      	movs	r2, #16
 8005d90:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d006      	beq.n	8005db4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2208      	movs	r2, #8
 8005dac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f90a 	bl	8005fc8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f8f2 	bl	8005fb6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f003 0310 	and.w	r3, r3, #16
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d006      	beq.n	8005df4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2210      	movs	r2, #16
 8005dec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8f3 	bl	8005fda <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d006      	beq.n	8005e16 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2208      	movs	r2, #8
 8005e0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f8eb 	bl	8005fec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d07b      	beq.n	8005f18 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d072      	beq.n	8005f10 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	f043 0304 	orr.w	r3, r3, #4
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d043      	beq.n	8005f10 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d03e      	beq.n	8005f10 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e98:	2b60      	cmp	r3, #96	@ 0x60
 8005e9a:	d02b      	beq.n	8005ef4 <HAL_CAN_IRQHandler+0x32a>
 8005e9c:	2b60      	cmp	r3, #96	@ 0x60
 8005e9e:	d82e      	bhi.n	8005efe <HAL_CAN_IRQHandler+0x334>
 8005ea0:	2b50      	cmp	r3, #80	@ 0x50
 8005ea2:	d022      	beq.n	8005eea <HAL_CAN_IRQHandler+0x320>
 8005ea4:	2b50      	cmp	r3, #80	@ 0x50
 8005ea6:	d82a      	bhi.n	8005efe <HAL_CAN_IRQHandler+0x334>
 8005ea8:	2b40      	cmp	r3, #64	@ 0x40
 8005eaa:	d019      	beq.n	8005ee0 <HAL_CAN_IRQHandler+0x316>
 8005eac:	2b40      	cmp	r3, #64	@ 0x40
 8005eae:	d826      	bhi.n	8005efe <HAL_CAN_IRQHandler+0x334>
 8005eb0:	2b30      	cmp	r3, #48	@ 0x30
 8005eb2:	d010      	beq.n	8005ed6 <HAL_CAN_IRQHandler+0x30c>
 8005eb4:	2b30      	cmp	r3, #48	@ 0x30
 8005eb6:	d822      	bhi.n	8005efe <HAL_CAN_IRQHandler+0x334>
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d002      	beq.n	8005ec2 <HAL_CAN_IRQHandler+0x2f8>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d005      	beq.n	8005ecc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005ec0:	e01d      	b.n	8005efe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	f043 0308 	orr.w	r3, r3, #8
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005eca:	e019      	b.n	8005f00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ece:	f043 0310 	orr.w	r3, r3, #16
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ed4:	e014      	b.n	8005f00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	f043 0320 	orr.w	r3, r3, #32
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ede:	e00f      	b.n	8005f00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ee6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ee8:	e00a      	b.n	8005f00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ef2:	e005      	b.n	8005f00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005efc:	e000      	b.n	8005f00 <HAL_CAN_IRQHandler+0x336>
            break;
 8005efe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005f0e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2204      	movs	r2, #4
 8005f16:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f867 	bl	8005ffe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005f30:	bf00      	nop
 8005f32:	3728      	adds	r7, #40	@ 0x28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bc80      	pop	{r7}
 8005f6c:	4770      	bx	lr

08005f6e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr

08005f92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr

08005fda <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr

08005ffe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006020:	4b0c      	ldr	r3, [pc, #48]	@ (8006054 <__NVIC_SetPriorityGrouping+0x44>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800602c:	4013      	ands	r3, r2
 800602e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800603c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006042:	4a04      	ldr	r2, [pc, #16]	@ (8006054 <__NVIC_SetPriorityGrouping+0x44>)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	60d3      	str	r3, [r2, #12]
}
 8006048:	bf00      	nop
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	e000ed00 	.word	0xe000ed00

08006058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800605c:	4b04      	ldr	r3, [pc, #16]	@ (8006070 <__NVIC_GetPriorityGrouping+0x18>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	0a1b      	lsrs	r3, r3, #8
 8006062:	f003 0307 	and.w	r3, r3, #7
}
 8006066:	4618      	mov	r0, r3
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	e000ed00 	.word	0xe000ed00

08006074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800607e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006082:	2b00      	cmp	r3, #0
 8006084:	db0b      	blt.n	800609e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	f003 021f 	and.w	r2, r3, #31
 800608c:	4906      	ldr	r1, [pc, #24]	@ (80060a8 <__NVIC_EnableIRQ+0x34>)
 800608e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	2001      	movs	r0, #1
 8006096:	fa00 f202 	lsl.w	r2, r0, r2
 800609a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr
 80060a8:	e000e100 	.word	0xe000e100

080060ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	6039      	str	r1, [r7, #0]
 80060b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	db0a      	blt.n	80060d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	490c      	ldr	r1, [pc, #48]	@ (80060f8 <__NVIC_SetPriority+0x4c>)
 80060c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ca:	0112      	lsls	r2, r2, #4
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	440b      	add	r3, r1
 80060d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060d4:	e00a      	b.n	80060ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	4908      	ldr	r1, [pc, #32]	@ (80060fc <__NVIC_SetPriority+0x50>)
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	3b04      	subs	r3, #4
 80060e4:	0112      	lsls	r2, r2, #4
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	440b      	add	r3, r1
 80060ea:	761a      	strb	r2, [r3, #24]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	e000e100 	.word	0xe000e100
 80060fc:	e000ed00 	.word	0xe000ed00

08006100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006100:	b480      	push	{r7}
 8006102:	b089      	sub	sp, #36	@ 0x24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f1c3 0307 	rsb	r3, r3, #7
 800611a:	2b04      	cmp	r3, #4
 800611c:	bf28      	it	cs
 800611e:	2304      	movcs	r3, #4
 8006120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	3304      	adds	r3, #4
 8006126:	2b06      	cmp	r3, #6
 8006128:	d902      	bls.n	8006130 <NVIC_EncodePriority+0x30>
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3b03      	subs	r3, #3
 800612e:	e000      	b.n	8006132 <NVIC_EncodePriority+0x32>
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006134:	f04f 32ff 	mov.w	r2, #4294967295
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43da      	mvns	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	401a      	ands	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006148:	f04f 31ff 	mov.w	r1, #4294967295
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	fa01 f303 	lsl.w	r3, r1, r3
 8006152:	43d9      	mvns	r1, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006158:	4313      	orrs	r3, r2
         );
}
 800615a:	4618      	mov	r0, r3
 800615c:	3724      	adds	r7, #36	@ 0x24
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr

08006164 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006168:	f3bf 8f4f 	dsb	sy
}
 800616c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800616e:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <__NVIC_SystemReset+0x24>)
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006176:	4904      	ldr	r1, [pc, #16]	@ (8006188 <__NVIC_SystemReset+0x24>)
 8006178:	4b04      	ldr	r3, [pc, #16]	@ (800618c <__NVIC_SystemReset+0x28>)
 800617a:	4313      	orrs	r3, r2
 800617c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800617e:	f3bf 8f4f 	dsb	sy
}
 8006182:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006184:	bf00      	nop
 8006186:	e7fd      	b.n	8006184 <__NVIC_SystemReset+0x20>
 8006188:	e000ed00 	.word	0xe000ed00
 800618c:	05fa0004 	.word	0x05fa0004

08006190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3b01      	subs	r3, #1
 800619c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061a0:	d301      	bcc.n	80061a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061a2:	2301      	movs	r3, #1
 80061a4:	e00f      	b.n	80061c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061a6:	4a0a      	ldr	r2, [pc, #40]	@ (80061d0 <SysTick_Config+0x40>)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061ae:	210f      	movs	r1, #15
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295
 80061b4:	f7ff ff7a 	bl	80060ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061b8:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <SysTick_Config+0x40>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061be:	4b04      	ldr	r3, [pc, #16]	@ (80061d0 <SysTick_Config+0x40>)
 80061c0:	2207      	movs	r2, #7
 80061c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	e000e010 	.word	0xe000e010

080061d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff ff17 	bl	8006010 <__NVIC_SetPriorityGrouping>
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b086      	sub	sp, #24
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	4603      	mov	r3, r0
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061fc:	f7ff ff2c 	bl	8006058 <__NVIC_GetPriorityGrouping>
 8006200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	6978      	ldr	r0, [r7, #20]
 8006208:	f7ff ff7a 	bl	8006100 <NVIC_EncodePriority>
 800620c:	4602      	mov	r2, r0
 800620e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006212:	4611      	mov	r1, r2
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff ff49 	bl	80060ac <__NVIC_SetPriority>
}
 800621a:	bf00      	nop
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	4603      	mov	r3, r0
 800622a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800622c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff ff1f 	bl	8006074 <__NVIC_EnableIRQ>
}
 8006236:	bf00      	nop
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006242:	f7ff ff8f 	bl	8006164 <__NVIC_SystemReset>

08006246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff ff9e 	bl	8006190 <SysTick_Config>
 8006254:	4603      	mov	r3, r0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e043      	b.n	80062fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	4b22      	ldr	r3, [pc, #136]	@ (8006308 <HAL_DMA_Init+0xa8>)
 800627e:	4413      	add	r3, r2
 8006280:	4a22      	ldr	r2, [pc, #136]	@ (800630c <HAL_DMA_Init+0xac>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	091b      	lsrs	r3, r3, #4
 8006288:	009a      	lsls	r2, r3, #2
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1f      	ldr	r2, [pc, #124]	@ (8006310 <HAL_DMA_Init+0xb0>)
 8006292:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80062aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80062ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80062b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr
 8006308:	bffdfff8 	.word	0xbffdfff8
 800630c:	cccccccd 	.word	0xcccccccd
 8006310:	40020000 	.word	0x40020000

08006314 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_DMA_Start_IT+0x20>
 8006330:	2302      	movs	r3, #2
 8006332:	e04b      	b.n	80063cc <HAL_DMA_Start_IT+0xb8>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d13a      	bne.n	80063be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0201 	bic.w	r2, r2, #1
 8006364:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f9eb 	bl	8006748 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 020e 	orr.w	r2, r2, #14
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	e00f      	b.n	80063ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0204 	bic.w	r2, r2, #4
 800639a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 020a 	orr.w	r2, r2, #10
 80063aa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e005      	b.n	80063ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80063c6:	2302      	movs	r3, #2
 80063c8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d008      	beq.n	80063fe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2204      	movs	r2, #4
 80063f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e020      	b.n	8006440 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 020e 	bic.w	r2, r2, #14
 800640c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006426:	2101      	movs	r1, #1
 8006428:	fa01 f202 	lsl.w	r2, r1, r2
 800642c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
	...

0800644c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d005      	beq.n	8006470 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2204      	movs	r2, #4
 8006468:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
 800646e:	e051      	b.n	8006514 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 020e 	bic.w	r2, r2, #14
 800647e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0201 	bic.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a22      	ldr	r2, [pc, #136]	@ (8006520 <HAL_DMA_Abort_IT+0xd4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d029      	beq.n	80064ee <HAL_DMA_Abort_IT+0xa2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a21      	ldr	r2, [pc, #132]	@ (8006524 <HAL_DMA_Abort_IT+0xd8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d022      	beq.n	80064ea <HAL_DMA_Abort_IT+0x9e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006528 <HAL_DMA_Abort_IT+0xdc>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d01a      	beq.n	80064e4 <HAL_DMA_Abort_IT+0x98>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1e      	ldr	r2, [pc, #120]	@ (800652c <HAL_DMA_Abort_IT+0xe0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d012      	beq.n	80064de <HAL_DMA_Abort_IT+0x92>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006530 <HAL_DMA_Abort_IT+0xe4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00a      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x8c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006534 <HAL_DMA_Abort_IT+0xe8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d102      	bne.n	80064d2 <HAL_DMA_Abort_IT+0x86>
 80064cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80064d0:	e00e      	b.n	80064f0 <HAL_DMA_Abort_IT+0xa4>
 80064d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064d6:	e00b      	b.n	80064f0 <HAL_DMA_Abort_IT+0xa4>
 80064d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80064dc:	e008      	b.n	80064f0 <HAL_DMA_Abort_IT+0xa4>
 80064de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064e2:	e005      	b.n	80064f0 <HAL_DMA_Abort_IT+0xa4>
 80064e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80064e8:	e002      	b.n	80064f0 <HAL_DMA_Abort_IT+0xa4>
 80064ea:	2310      	movs	r3, #16
 80064ec:	e000      	b.n	80064f0 <HAL_DMA_Abort_IT+0xa4>
 80064ee:	2301      	movs	r3, #1
 80064f0:	4a11      	ldr	r2, [pc, #68]	@ (8006538 <HAL_DMA_Abort_IT+0xec>)
 80064f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
    } 
  }
  return status;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40020008 	.word	0x40020008
 8006524:	4002001c 	.word	0x4002001c
 8006528:	40020030 	.word	0x40020030
 800652c:	40020044 	.word	0x40020044
 8006530:	40020058 	.word	0x40020058
 8006534:	4002006c 	.word	0x4002006c
 8006538:	40020000 	.word	0x40020000

0800653c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006558:	2204      	movs	r2, #4
 800655a:	409a      	lsls	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4013      	ands	r3, r2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d04f      	beq.n	8006604 <HAL_DMA_IRQHandler+0xc8>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d04a      	beq.n	8006604 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d107      	bne.n	800658c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0204 	bic.w	r2, r2, #4
 800658a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a66      	ldr	r2, [pc, #408]	@ (800672c <HAL_DMA_IRQHandler+0x1f0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d029      	beq.n	80065ea <HAL_DMA_IRQHandler+0xae>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a65      	ldr	r2, [pc, #404]	@ (8006730 <HAL_DMA_IRQHandler+0x1f4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d022      	beq.n	80065e6 <HAL_DMA_IRQHandler+0xaa>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a63      	ldr	r2, [pc, #396]	@ (8006734 <HAL_DMA_IRQHandler+0x1f8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d01a      	beq.n	80065e0 <HAL_DMA_IRQHandler+0xa4>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a62      	ldr	r2, [pc, #392]	@ (8006738 <HAL_DMA_IRQHandler+0x1fc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d012      	beq.n	80065da <HAL_DMA_IRQHandler+0x9e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a60      	ldr	r2, [pc, #384]	@ (800673c <HAL_DMA_IRQHandler+0x200>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00a      	beq.n	80065d4 <HAL_DMA_IRQHandler+0x98>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a5f      	ldr	r2, [pc, #380]	@ (8006740 <HAL_DMA_IRQHandler+0x204>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d102      	bne.n	80065ce <HAL_DMA_IRQHandler+0x92>
 80065c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80065cc:	e00e      	b.n	80065ec <HAL_DMA_IRQHandler+0xb0>
 80065ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80065d2:	e00b      	b.n	80065ec <HAL_DMA_IRQHandler+0xb0>
 80065d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80065d8:	e008      	b.n	80065ec <HAL_DMA_IRQHandler+0xb0>
 80065da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065de:	e005      	b.n	80065ec <HAL_DMA_IRQHandler+0xb0>
 80065e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065e4:	e002      	b.n	80065ec <HAL_DMA_IRQHandler+0xb0>
 80065e6:	2340      	movs	r3, #64	@ 0x40
 80065e8:	e000      	b.n	80065ec <HAL_DMA_IRQHandler+0xb0>
 80065ea:	2304      	movs	r3, #4
 80065ec:	4a55      	ldr	r2, [pc, #340]	@ (8006744 <HAL_DMA_IRQHandler+0x208>)
 80065ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8094 	beq.w	8006722 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006602:	e08e      	b.n	8006722 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	2202      	movs	r2, #2
 800660a:	409a      	lsls	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4013      	ands	r3, r2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d056      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x186>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d051      	beq.n	80066c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10b      	bne.n	8006644 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 020a 	bic.w	r2, r2, #10
 800663a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a38      	ldr	r2, [pc, #224]	@ (800672c <HAL_DMA_IRQHandler+0x1f0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d029      	beq.n	80066a2 <HAL_DMA_IRQHandler+0x166>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a37      	ldr	r2, [pc, #220]	@ (8006730 <HAL_DMA_IRQHandler+0x1f4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d022      	beq.n	800669e <HAL_DMA_IRQHandler+0x162>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a35      	ldr	r2, [pc, #212]	@ (8006734 <HAL_DMA_IRQHandler+0x1f8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d01a      	beq.n	8006698 <HAL_DMA_IRQHandler+0x15c>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a34      	ldr	r2, [pc, #208]	@ (8006738 <HAL_DMA_IRQHandler+0x1fc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d012      	beq.n	8006692 <HAL_DMA_IRQHandler+0x156>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a32      	ldr	r2, [pc, #200]	@ (800673c <HAL_DMA_IRQHandler+0x200>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00a      	beq.n	800668c <HAL_DMA_IRQHandler+0x150>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a31      	ldr	r2, [pc, #196]	@ (8006740 <HAL_DMA_IRQHandler+0x204>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d102      	bne.n	8006686 <HAL_DMA_IRQHandler+0x14a>
 8006680:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006684:	e00e      	b.n	80066a4 <HAL_DMA_IRQHandler+0x168>
 8006686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800668a:	e00b      	b.n	80066a4 <HAL_DMA_IRQHandler+0x168>
 800668c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006690:	e008      	b.n	80066a4 <HAL_DMA_IRQHandler+0x168>
 8006692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006696:	e005      	b.n	80066a4 <HAL_DMA_IRQHandler+0x168>
 8006698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800669c:	e002      	b.n	80066a4 <HAL_DMA_IRQHandler+0x168>
 800669e:	2320      	movs	r3, #32
 80066a0:	e000      	b.n	80066a4 <HAL_DMA_IRQHandler+0x168>
 80066a2:	2302      	movs	r3, #2
 80066a4:	4a27      	ldr	r2, [pc, #156]	@ (8006744 <HAL_DMA_IRQHandler+0x208>)
 80066a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d034      	beq.n	8006722 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80066c0:	e02f      	b.n	8006722 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	2208      	movs	r2, #8
 80066c8:	409a      	lsls	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d028      	beq.n	8006724 <HAL_DMA_IRQHandler+0x1e8>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d023      	beq.n	8006724 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 020e 	bic.w	r2, r2, #14
 80066ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f4:	2101      	movs	r1, #1
 80066f6:	fa01 f202 	lsl.w	r2, r1, r2
 80066fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	4798      	blx	r3
    }
  }
  return;
 8006722:	bf00      	nop
 8006724:	bf00      	nop
}
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40020008 	.word	0x40020008
 8006730:	4002001c 	.word	0x4002001c
 8006734:	40020030 	.word	0x40020030
 8006738:	40020044 	.word	0x40020044
 800673c:	40020058 	.word	0x40020058
 8006740:	4002006c 	.word	0x4002006c
 8006744:	40020000 	.word	0x40020000

08006748 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800675e:	2101      	movs	r1, #1
 8006760:	fa01 f202 	lsl.w	r2, r1, r2
 8006764:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b10      	cmp	r3, #16
 8006774:	d108      	bne.n	8006788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006786:	e007      	b.n	8006798 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]
}
 8006798:	bf00      	nop
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
	...

080067a4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80067a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80067be:	4b2f      	ldr	r3, [pc, #188]	@ (800687c <HAL_FLASH_Program+0xd8>)
 80067c0:	7e1b      	ldrb	r3, [r3, #24]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <HAL_FLASH_Program+0x26>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e054      	b.n	8006874 <HAL_FLASH_Program+0xd0>
 80067ca:	4b2c      	ldr	r3, [pc, #176]	@ (800687c <HAL_FLASH_Program+0xd8>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80067d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80067d4:	f000 f8a8 	bl	8006928 <FLASH_WaitForLastOperation>
 80067d8:	4603      	mov	r3, r0
 80067da:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d144      	bne.n	800686c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d102      	bne.n	80067ee <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80067e8:	2301      	movs	r3, #1
 80067ea:	757b      	strb	r3, [r7, #21]
 80067ec:	e007      	b.n	80067fe <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d102      	bne.n	80067fa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80067f4:	2302      	movs	r3, #2
 80067f6:	757b      	strb	r3, [r7, #21]
 80067f8:	e001      	b.n	80067fe <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80067fa:	2304      	movs	r3, #4
 80067fc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80067fe:	2300      	movs	r3, #0
 8006800:	75bb      	strb	r3, [r7, #22]
 8006802:	e02d      	b.n	8006860 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006804:	7dbb      	ldrb	r3, [r7, #22]
 8006806:	005a      	lsls	r2, r3, #1
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	eb02 0c03 	add.w	ip, r2, r3
 800680e:	7dbb      	ldrb	r3, [r7, #22]
 8006810:	0119      	lsls	r1, r3, #4
 8006812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006816:	f1c1 0620 	rsb	r6, r1, #32
 800681a:	f1a1 0020 	sub.w	r0, r1, #32
 800681e:	fa22 f401 	lsr.w	r4, r2, r1
 8006822:	fa03 f606 	lsl.w	r6, r3, r6
 8006826:	4334      	orrs	r4, r6
 8006828:	fa23 f000 	lsr.w	r0, r3, r0
 800682c:	4304      	orrs	r4, r0
 800682e:	fa23 f501 	lsr.w	r5, r3, r1
 8006832:	b2a3      	uxth	r3, r4
 8006834:	4619      	mov	r1, r3
 8006836:	4660      	mov	r0, ip
 8006838:	f000 f85a 	bl	80068f0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800683c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006840:	f000 f872 	bl	8006928 <FLASH_WaitForLastOperation>
 8006844:	4603      	mov	r3, r0
 8006846:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006848:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <HAL_FLASH_Program+0xdc>)
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	4a0c      	ldr	r2, [pc, #48]	@ (8006880 <HAL_FLASH_Program+0xdc>)
 800684e:	f023 0301 	bic.w	r3, r3, #1
 8006852:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d107      	bne.n	800686a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800685a:	7dbb      	ldrb	r3, [r7, #22]
 800685c:	3301      	adds	r3, #1
 800685e:	75bb      	strb	r3, [r7, #22]
 8006860:	7dba      	ldrb	r2, [r7, #22]
 8006862:	7d7b      	ldrb	r3, [r7, #21]
 8006864:	429a      	cmp	r2, r3
 8006866:	d3cd      	bcc.n	8006804 <HAL_FLASH_Program+0x60>
 8006868:	e000      	b.n	800686c <HAL_FLASH_Program+0xc8>
      {
        break;
 800686a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800686c:	4b03      	ldr	r3, [pc, #12]	@ (800687c <HAL_FLASH_Program+0xd8>)
 800686e:	2200      	movs	r2, #0
 8006870:	761a      	strb	r2, [r3, #24]

  return status;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687c:	200007f0 	.word	0x200007f0
 8006880:	40022000 	.word	0x40022000

08006884 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800688e:	4b0d      	ldr	r3, [pc, #52]	@ (80068c4 <HAL_FLASH_Unlock+0x40>)
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00d      	beq.n	80068b6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800689a:	4b0a      	ldr	r3, [pc, #40]	@ (80068c4 <HAL_FLASH_Unlock+0x40>)
 800689c:	4a0a      	ldr	r2, [pc, #40]	@ (80068c8 <HAL_FLASH_Unlock+0x44>)
 800689e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80068a0:	4b08      	ldr	r3, [pc, #32]	@ (80068c4 <HAL_FLASH_Unlock+0x40>)
 80068a2:	4a0a      	ldr	r2, [pc, #40]	@ (80068cc <HAL_FLASH_Unlock+0x48>)
 80068a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80068a6:	4b07      	ldr	r3, [pc, #28]	@ (80068c4 <HAL_FLASH_Unlock+0x40>)
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80068b6:	79fb      	ldrb	r3, [r7, #7]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc80      	pop	{r7}
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40022000 	.word	0x40022000
 80068c8:	45670123 	.word	0x45670123
 80068cc:	cdef89ab 	.word	0xcdef89ab

080068d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80068d4:	4b05      	ldr	r3, [pc, #20]	@ (80068ec <HAL_FLASH_Lock+0x1c>)
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	4a04      	ldr	r2, [pc, #16]	@ (80068ec <HAL_FLASH_Lock+0x1c>)
 80068da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40022000 	.word	0x40022000

080068f0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80068fc:	4b08      	ldr	r3, [pc, #32]	@ (8006920 <FLASH_Program_HalfWord+0x30>)
 80068fe:	2200      	movs	r2, #0
 8006900:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006902:	4b08      	ldr	r3, [pc, #32]	@ (8006924 <FLASH_Program_HalfWord+0x34>)
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	4a07      	ldr	r2, [pc, #28]	@ (8006924 <FLASH_Program_HalfWord+0x34>)
 8006908:	f043 0301 	orr.w	r3, r3, #1
 800690c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	887a      	ldrh	r2, [r7, #2]
 8006912:	801a      	strh	r2, [r3, #0]
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	200007f0 	.word	0x200007f0
 8006924:	40022000 	.word	0x40022000

08006928 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006930:	f7fe fc6a 	bl	8005208 <HAL_GetTick>
 8006934:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006936:	e010      	b.n	800695a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693e:	d00c      	beq.n	800695a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <FLASH_WaitForLastOperation+0x2e>
 8006946:	f7fe fc5f 	bl	8005208 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	429a      	cmp	r2, r3
 8006954:	d201      	bcs.n	800695a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e025      	b.n	80069a6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800695a:	4b15      	ldr	r3, [pc, #84]	@ (80069b0 <FLASH_WaitForLastOperation+0x88>)
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e8      	bne.n	8006938 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006966:	4b12      	ldr	r3, [pc, #72]	@ (80069b0 <FLASH_WaitForLastOperation+0x88>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006972:	4b0f      	ldr	r3, [pc, #60]	@ (80069b0 <FLASH_WaitForLastOperation+0x88>)
 8006974:	2220      	movs	r2, #32
 8006976:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006978:	4b0d      	ldr	r3, [pc, #52]	@ (80069b0 <FLASH_WaitForLastOperation+0x88>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10b      	bne.n	800699c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006984:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <FLASH_WaitForLastOperation+0x88>)
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800698c:	2b00      	cmp	r3, #0
 800698e:	d105      	bne.n	800699c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006990:	4b07      	ldr	r3, [pc, #28]	@ (80069b0 <FLASH_WaitForLastOperation+0x88>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800699c:	f000 f80a 	bl	80069b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40022000 	.word	0x40022000

080069b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80069be:	4b23      	ldr	r3, [pc, #140]	@ (8006a4c <FLASH_SetErrorCode+0x98>)
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80069ca:	4b21      	ldr	r3, [pc, #132]	@ (8006a50 <FLASH_SetErrorCode+0x9c>)
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f043 0302 	orr.w	r3, r3, #2
 80069d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a50 <FLASH_SetErrorCode+0x9c>)
 80069d4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f043 0310 	orr.w	r3, r3, #16
 80069dc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80069de:	4b1b      	ldr	r3, [pc, #108]	@ (8006a4c <FLASH_SetErrorCode+0x98>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80069ea:	4b19      	ldr	r3, [pc, #100]	@ (8006a50 <FLASH_SetErrorCode+0x9c>)
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	4a17      	ldr	r2, [pc, #92]	@ (8006a50 <FLASH_SetErrorCode+0x9c>)
 80069f4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f043 0304 	orr.w	r3, r3, #4
 80069fc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80069fe:	4b13      	ldr	r3, [pc, #76]	@ (8006a4c <FLASH_SetErrorCode+0x98>)
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00b      	beq.n	8006a22 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8006a0a:	4b11      	ldr	r3, [pc, #68]	@ (8006a50 <FLASH_SetErrorCode+0x9c>)
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f043 0304 	orr.w	r3, r3, #4
 8006a12:	4a0f      	ldr	r2, [pc, #60]	@ (8006a50 <FLASH_SetErrorCode+0x9c>)
 8006a14:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006a16:	4b0d      	ldr	r3, [pc, #52]	@ (8006a4c <FLASH_SetErrorCode+0x98>)
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8006a4c <FLASH_SetErrorCode+0x98>)
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f240 1201 	movw	r2, #257	@ 0x101
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d106      	bne.n	8006a3a <FLASH_SetErrorCode+0x86>
 8006a2c:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <FLASH_SetErrorCode+0x98>)
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	4a06      	ldr	r2, [pc, #24]	@ (8006a4c <FLASH_SetErrorCode+0x98>)
 8006a32:	f023 0301 	bic.w	r3, r3, #1
 8006a36:	61d3      	str	r3, [r2, #28]
}  
 8006a38:	e002      	b.n	8006a40 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006a3a:	4a04      	ldr	r2, [pc, #16]	@ (8006a4c <FLASH_SetErrorCode+0x98>)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60d3      	str	r3, [r2, #12]
}  
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40022000 	.word	0x40022000
 8006a50:	200007f0 	.word	0x200007f0

08006a54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006a66:	4b2f      	ldr	r3, [pc, #188]	@ (8006b24 <HAL_FLASHEx_Erase+0xd0>)
 8006a68:	7e1b      	ldrb	r3, [r3, #24]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_FLASHEx_Erase+0x1e>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e053      	b.n	8006b1a <HAL_FLASHEx_Erase+0xc6>
 8006a72:	4b2c      	ldr	r3, [pc, #176]	@ (8006b24 <HAL_FLASHEx_Erase+0xd0>)
 8006a74:	2201      	movs	r2, #1
 8006a76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d116      	bne.n	8006aae <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006a80:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006a84:	f7ff ff50 	bl	8006928 <FLASH_WaitForLastOperation>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d141      	bne.n	8006b12 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8006a8e:	2001      	movs	r0, #1
 8006a90:	f000 f84c 	bl	8006b2c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a94:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006a98:	f7ff ff46 	bl	8006928 <FLASH_WaitForLastOperation>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006aa0:	4b21      	ldr	r3, [pc, #132]	@ (8006b28 <HAL_FLASHEx_Erase+0xd4>)
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	4a20      	ldr	r2, [pc, #128]	@ (8006b28 <HAL_FLASHEx_Erase+0xd4>)
 8006aa6:	f023 0304 	bic.w	r3, r3, #4
 8006aaa:	6113      	str	r3, [r2, #16]
 8006aac:	e031      	b.n	8006b12 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006aae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006ab2:	f7ff ff39 	bl	8006928 <FLASH_WaitForLastOperation>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d12a      	bne.n	8006b12 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	60bb      	str	r3, [r7, #8]
 8006aca:	e019      	b.n	8006b00 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8006acc:	68b8      	ldr	r0, [r7, #8]
 8006ace:	f000 f849 	bl	8006b64 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ad2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006ad6:	f7ff ff27 	bl	8006928 <FLASH_WaitForLastOperation>
 8006ada:	4603      	mov	r3, r0
 8006adc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006ade:	4b12      	ldr	r3, [pc, #72]	@ (8006b28 <HAL_FLASHEx_Erase+0xd4>)
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	4a11      	ldr	r2, [pc, #68]	@ (8006b28 <HAL_FLASHEx_Erase+0xd4>)
 8006ae4:	f023 0302 	bic.w	r3, r3, #2
 8006ae8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	601a      	str	r2, [r3, #0]
            break;
 8006af6:	e00c      	b.n	8006b12 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006afe:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	029a      	lsls	r2, r3, #10
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d3dc      	bcc.n	8006acc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006b12:	4b04      	ldr	r3, [pc, #16]	@ (8006b24 <HAL_FLASHEx_Erase+0xd0>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	761a      	strb	r2, [r3, #24]

  return status;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	200007f0 	.word	0x200007f0
 8006b28:	40022000 	.word	0x40022000

08006b2c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b34:	4b09      	ldr	r3, [pc, #36]	@ (8006b5c <FLASH_MassErase+0x30>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006b3a:	4b09      	ldr	r3, [pc, #36]	@ (8006b60 <FLASH_MassErase+0x34>)
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	4a08      	ldr	r2, [pc, #32]	@ (8006b60 <FLASH_MassErase+0x34>)
 8006b40:	f043 0304 	orr.w	r3, r3, #4
 8006b44:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006b46:	4b06      	ldr	r3, [pc, #24]	@ (8006b60 <FLASH_MassErase+0x34>)
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	4a05      	ldr	r2, [pc, #20]	@ (8006b60 <FLASH_MassErase+0x34>)
 8006b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b50:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	200007f0 	.word	0x200007f0
 8006b60:	40022000 	.word	0x40022000

08006b64 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <FLASH_PageErase+0x38>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006b72:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <FLASH_PageErase+0x3c>)
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	4a0a      	ldr	r2, [pc, #40]	@ (8006ba0 <FLASH_PageErase+0x3c>)
 8006b78:	f043 0302 	orr.w	r3, r3, #2
 8006b7c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006b7e:	4a08      	ldr	r2, [pc, #32]	@ (8006ba0 <FLASH_PageErase+0x3c>)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006b84:	4b06      	ldr	r3, [pc, #24]	@ (8006ba0 <FLASH_PageErase+0x3c>)
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	4a05      	ldr	r2, [pc, #20]	@ (8006ba0 <FLASH_PageErase+0x3c>)
 8006b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b8e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	200007f0 	.word	0x200007f0
 8006ba0:	40022000 	.word	0x40022000

08006ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b08b      	sub	sp, #44	@ 0x2c
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bb6:	e169      	b.n	8006e8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006bb8:	2201      	movs	r2, #1
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	f040 8158 	bne.w	8006e86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	4a9a      	ldr	r2, [pc, #616]	@ (8006e44 <HAL_GPIO_Init+0x2a0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d05e      	beq.n	8006c9e <HAL_GPIO_Init+0xfa>
 8006be0:	4a98      	ldr	r2, [pc, #608]	@ (8006e44 <HAL_GPIO_Init+0x2a0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d875      	bhi.n	8006cd2 <HAL_GPIO_Init+0x12e>
 8006be6:	4a98      	ldr	r2, [pc, #608]	@ (8006e48 <HAL_GPIO_Init+0x2a4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d058      	beq.n	8006c9e <HAL_GPIO_Init+0xfa>
 8006bec:	4a96      	ldr	r2, [pc, #600]	@ (8006e48 <HAL_GPIO_Init+0x2a4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d86f      	bhi.n	8006cd2 <HAL_GPIO_Init+0x12e>
 8006bf2:	4a96      	ldr	r2, [pc, #600]	@ (8006e4c <HAL_GPIO_Init+0x2a8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d052      	beq.n	8006c9e <HAL_GPIO_Init+0xfa>
 8006bf8:	4a94      	ldr	r2, [pc, #592]	@ (8006e4c <HAL_GPIO_Init+0x2a8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d869      	bhi.n	8006cd2 <HAL_GPIO_Init+0x12e>
 8006bfe:	4a94      	ldr	r2, [pc, #592]	@ (8006e50 <HAL_GPIO_Init+0x2ac>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d04c      	beq.n	8006c9e <HAL_GPIO_Init+0xfa>
 8006c04:	4a92      	ldr	r2, [pc, #584]	@ (8006e50 <HAL_GPIO_Init+0x2ac>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d863      	bhi.n	8006cd2 <HAL_GPIO_Init+0x12e>
 8006c0a:	4a92      	ldr	r2, [pc, #584]	@ (8006e54 <HAL_GPIO_Init+0x2b0>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d046      	beq.n	8006c9e <HAL_GPIO_Init+0xfa>
 8006c10:	4a90      	ldr	r2, [pc, #576]	@ (8006e54 <HAL_GPIO_Init+0x2b0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d85d      	bhi.n	8006cd2 <HAL_GPIO_Init+0x12e>
 8006c16:	2b12      	cmp	r3, #18
 8006c18:	d82a      	bhi.n	8006c70 <HAL_GPIO_Init+0xcc>
 8006c1a:	2b12      	cmp	r3, #18
 8006c1c:	d859      	bhi.n	8006cd2 <HAL_GPIO_Init+0x12e>
 8006c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <HAL_GPIO_Init+0x80>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c9f 	.word	0x08006c9f
 8006c28:	08006c79 	.word	0x08006c79
 8006c2c:	08006c8b 	.word	0x08006c8b
 8006c30:	08006ccd 	.word	0x08006ccd
 8006c34:	08006cd3 	.word	0x08006cd3
 8006c38:	08006cd3 	.word	0x08006cd3
 8006c3c:	08006cd3 	.word	0x08006cd3
 8006c40:	08006cd3 	.word	0x08006cd3
 8006c44:	08006cd3 	.word	0x08006cd3
 8006c48:	08006cd3 	.word	0x08006cd3
 8006c4c:	08006cd3 	.word	0x08006cd3
 8006c50:	08006cd3 	.word	0x08006cd3
 8006c54:	08006cd3 	.word	0x08006cd3
 8006c58:	08006cd3 	.word	0x08006cd3
 8006c5c:	08006cd3 	.word	0x08006cd3
 8006c60:	08006cd3 	.word	0x08006cd3
 8006c64:	08006cd3 	.word	0x08006cd3
 8006c68:	08006c81 	.word	0x08006c81
 8006c6c:	08006c95 	.word	0x08006c95
 8006c70:	4a79      	ldr	r2, [pc, #484]	@ (8006e58 <HAL_GPIO_Init+0x2b4>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d013      	beq.n	8006c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006c76:	e02c      	b.n	8006cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	623b      	str	r3, [r7, #32]
          break;
 8006c7e:	e029      	b.n	8006cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	3304      	adds	r3, #4
 8006c86:	623b      	str	r3, [r7, #32]
          break;
 8006c88:	e024      	b.n	8006cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	623b      	str	r3, [r7, #32]
          break;
 8006c92:	e01f      	b.n	8006cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	330c      	adds	r3, #12
 8006c9a:	623b      	str	r3, [r7, #32]
          break;
 8006c9c:	e01a      	b.n	8006cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ca6:	2304      	movs	r3, #4
 8006ca8:	623b      	str	r3, [r7, #32]
          break;
 8006caa:	e013      	b.n	8006cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d105      	bne.n	8006cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	611a      	str	r2, [r3, #16]
          break;
 8006cbe:	e009      	b.n	8006cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	615a      	str	r2, [r3, #20]
          break;
 8006cca:	e003      	b.n	8006cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	623b      	str	r3, [r7, #32]
          break;
 8006cd0:	e000      	b.n	8006cd4 <HAL_GPIO_Init+0x130>
          break;
 8006cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2bff      	cmp	r3, #255	@ 0xff
 8006cd8:	d801      	bhi.n	8006cde <HAL_GPIO_Init+0x13a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	e001      	b.n	8006ce2 <HAL_GPIO_Init+0x13e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2bff      	cmp	r3, #255	@ 0xff
 8006ce8:	d802      	bhi.n	8006cf0 <HAL_GPIO_Init+0x14c>
 8006cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	e002      	b.n	8006cf6 <HAL_GPIO_Init+0x152>
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	3b08      	subs	r3, #8
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	210f      	movs	r1, #15
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	fa01 f303 	lsl.w	r3, r1, r3
 8006d04:	43db      	mvns	r3, r3
 8006d06:	401a      	ands	r2, r3
 8006d08:	6a39      	ldr	r1, [r7, #32]
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d10:	431a      	orrs	r2, r3
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80b1 	beq.w	8006e86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006d24:	4b4d      	ldr	r3, [pc, #308]	@ (8006e5c <HAL_GPIO_Init+0x2b8>)
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	4a4c      	ldr	r2, [pc, #304]	@ (8006e5c <HAL_GPIO_Init+0x2b8>)
 8006d2a:	f043 0301 	orr.w	r3, r3, #1
 8006d2e:	6193      	str	r3, [r2, #24]
 8006d30:	4b4a      	ldr	r3, [pc, #296]	@ (8006e5c <HAL_GPIO_Init+0x2b8>)
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006d3c:	4a48      	ldr	r2, [pc, #288]	@ (8006e60 <HAL_GPIO_Init+0x2bc>)
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	089b      	lsrs	r3, r3, #2
 8006d42:	3302      	adds	r3, #2
 8006d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	f003 0303 	and.w	r3, r3, #3
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	220f      	movs	r2, #15
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a40      	ldr	r2, [pc, #256]	@ (8006e64 <HAL_GPIO_Init+0x2c0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d013      	beq.n	8006d90 <HAL_GPIO_Init+0x1ec>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8006e68 <HAL_GPIO_Init+0x2c4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00d      	beq.n	8006d8c <HAL_GPIO_Init+0x1e8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a3e      	ldr	r2, [pc, #248]	@ (8006e6c <HAL_GPIO_Init+0x2c8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <HAL_GPIO_Init+0x1e4>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a3d      	ldr	r2, [pc, #244]	@ (8006e70 <HAL_GPIO_Init+0x2cc>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d101      	bne.n	8006d84 <HAL_GPIO_Init+0x1e0>
 8006d80:	2303      	movs	r3, #3
 8006d82:	e006      	b.n	8006d92 <HAL_GPIO_Init+0x1ee>
 8006d84:	2304      	movs	r3, #4
 8006d86:	e004      	b.n	8006d92 <HAL_GPIO_Init+0x1ee>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e002      	b.n	8006d92 <HAL_GPIO_Init+0x1ee>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <HAL_GPIO_Init+0x1ee>
 8006d90:	2300      	movs	r3, #0
 8006d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d94:	f002 0203 	and.w	r2, r2, #3
 8006d98:	0092      	lsls	r2, r2, #2
 8006d9a:	4093      	lsls	r3, r2
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006da2:	492f      	ldr	r1, [pc, #188]	@ (8006e60 <HAL_GPIO_Init+0x2bc>)
 8006da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da6:	089b      	lsrs	r3, r3, #2
 8006da8:	3302      	adds	r3, #2
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d006      	beq.n	8006dca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	492c      	ldr	r1, [pc, #176]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	608b      	str	r3, [r1, #8]
 8006dc8:	e006      	b.n	8006dd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006dca:	4b2a      	ldr	r3, [pc, #168]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006dcc:	689a      	ldr	r2, [r3, #8]
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	4928      	ldr	r1, [pc, #160]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006de4:	4b23      	ldr	r3, [pc, #140]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	4922      	ldr	r1, [pc, #136]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60cb      	str	r3, [r1, #12]
 8006df0:	e006      	b.n	8006e00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006df2:	4b20      	ldr	r3, [pc, #128]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	491e      	ldr	r1, [pc, #120]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d006      	beq.n	8006e1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006e0c:	4b19      	ldr	r3, [pc, #100]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	4918      	ldr	r1, [pc, #96]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	604b      	str	r3, [r1, #4]
 8006e18:	e006      	b.n	8006e28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006e1a:	4b16      	ldr	r3, [pc, #88]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	43db      	mvns	r3, r3
 8006e22:	4914      	ldr	r1, [pc, #80]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d021      	beq.n	8006e78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006e34:	4b0f      	ldr	r3, [pc, #60]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	490e      	ldr	r1, [pc, #56]	@ (8006e74 <HAL_GPIO_Init+0x2d0>)
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	600b      	str	r3, [r1, #0]
 8006e40:	e021      	b.n	8006e86 <HAL_GPIO_Init+0x2e2>
 8006e42:	bf00      	nop
 8006e44:	10320000 	.word	0x10320000
 8006e48:	10310000 	.word	0x10310000
 8006e4c:	10220000 	.word	0x10220000
 8006e50:	10210000 	.word	0x10210000
 8006e54:	10120000 	.word	0x10120000
 8006e58:	10110000 	.word	0x10110000
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40010800 	.word	0x40010800
 8006e68:	40010c00 	.word	0x40010c00
 8006e6c:	40011000 	.word	0x40011000
 8006e70:	40011400 	.word	0x40011400
 8006e74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006e78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea8 <HAL_GPIO_Init+0x304>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	4909      	ldr	r1, [pc, #36]	@ (8006ea8 <HAL_GPIO_Init+0x304>)
 8006e82:	4013      	ands	r3, r2
 8006e84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	3301      	adds	r3, #1
 8006e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	fa22 f303 	lsr.w	r3, r2, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f47f ae8e 	bne.w	8006bb8 <HAL_GPIO_Init+0x14>
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	372c      	adds	r7, #44	@ 0x2c
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr
 8006ea8:	40010400 	.word	0x40010400

08006eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	887b      	ldrh	r3, [r7, #2]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]
 8006ec8:	e001      	b.n	8006ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr

08006eda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	807b      	strh	r3, [r7, #2]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006eea:	787b      	ldrb	r3, [r7, #1]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ef0:	887a      	ldrh	r2, [r7, #2]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006ef6:	e003      	b.n	8006f00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006ef8:	887b      	ldrh	r3, [r7, #2]
 8006efa:	041a      	lsls	r2, r3, #16
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	611a      	str	r2, [r3, #16]
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr

08006f0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f1c:	887a      	ldrh	r2, [r7, #2]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4013      	ands	r3, r2
 8006f22:	041a      	lsls	r2, r3, #16
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	43d9      	mvns	r1, r3
 8006f28:	887b      	ldrh	r3, [r7, #2]
 8006f2a:	400b      	ands	r3, r1
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	611a      	str	r2, [r3, #16]
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr

08006f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f46:	4b08      	ldr	r3, [pc, #32]	@ (8006f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f48:	695a      	ldr	r2, [r3, #20]
 8006f4a:	88fb      	ldrh	r3, [r7, #6]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d006      	beq.n	8006f60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f52:	4a05      	ldr	r2, [pc, #20]	@ (8006f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fb f800 	bl	8001f60 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40010400 	.word	0x40010400

08006f6c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e036      	b.n	8006fec <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006f86:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006f90:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6852      	ldr	r2, [r2, #4]
 8006f9a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6892      	ldr	r2, [r2, #8]
 8006fa4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006fa6:	f7fe f92f 	bl	8005208 <HAL_GetTick>
 8006faa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006fac:	e011      	b.n	8006fd2 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006fae:	f7fe f92b 	bl	8005208 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	f241 323c 	movw	r2, #4924	@ 0x133c
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d908      	bls.n	8006fd2 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e00c      	b.n	8006fec <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e6      	bne.n	8006fae <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006fe8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007004:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr
	...

08007014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e272      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 8087 	beq.w	8007142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007034:	4b92      	ldr	r3, [pc, #584]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f003 030c 	and.w	r3, r3, #12
 800703c:	2b04      	cmp	r3, #4
 800703e:	d00c      	beq.n	800705a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007040:	4b8f      	ldr	r3, [pc, #572]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f003 030c 	and.w	r3, r3, #12
 8007048:	2b08      	cmp	r3, #8
 800704a:	d112      	bne.n	8007072 <HAL_RCC_OscConfig+0x5e>
 800704c:	4b8c      	ldr	r3, [pc, #560]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007058:	d10b      	bne.n	8007072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800705a:	4b89      	ldr	r3, [pc, #548]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d06c      	beq.n	8007140 <HAL_RCC_OscConfig+0x12c>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d168      	bne.n	8007140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e24c      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800707a:	d106      	bne.n	800708a <HAL_RCC_OscConfig+0x76>
 800707c:	4b80      	ldr	r3, [pc, #512]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a7f      	ldr	r2, [pc, #508]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 8007082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	e02e      	b.n	80070e8 <HAL_RCC_OscConfig+0xd4>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10c      	bne.n	80070ac <HAL_RCC_OscConfig+0x98>
 8007092:	4b7b      	ldr	r3, [pc, #492]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a7a      	ldr	r2, [pc, #488]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 8007098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	4b78      	ldr	r3, [pc, #480]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a77      	ldr	r2, [pc, #476]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80070a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	e01d      	b.n	80070e8 <HAL_RCC_OscConfig+0xd4>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070b4:	d10c      	bne.n	80070d0 <HAL_RCC_OscConfig+0xbc>
 80070b6:	4b72      	ldr	r3, [pc, #456]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a71      	ldr	r2, [pc, #452]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80070bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	4b6f      	ldr	r3, [pc, #444]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a6e      	ldr	r2, [pc, #440]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80070c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e00b      	b.n	80070e8 <HAL_RCC_OscConfig+0xd4>
 80070d0:	4b6b      	ldr	r3, [pc, #428]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a6a      	ldr	r2, [pc, #424]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80070d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	4b68      	ldr	r3, [pc, #416]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a67      	ldr	r2, [pc, #412]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80070e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d013      	beq.n	8007118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f0:	f7fe f88a 	bl	8005208 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f8:	f7fe f886 	bl	8005208 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b64      	cmp	r3, #100	@ 0x64
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e200      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800710a:	4b5d      	ldr	r3, [pc, #372]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0f0      	beq.n	80070f8 <HAL_RCC_OscConfig+0xe4>
 8007116:	e014      	b.n	8007142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007118:	f7fe f876 	bl	8005208 <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007120:	f7fe f872 	bl	8005208 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b64      	cmp	r3, #100	@ 0x64
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e1ec      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007132:	4b53      	ldr	r3, [pc, #332]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1f0      	bne.n	8007120 <HAL_RCC_OscConfig+0x10c>
 800713e:	e000      	b.n	8007142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d063      	beq.n	8007216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800714e:	4b4c      	ldr	r3, [pc, #304]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f003 030c 	and.w	r3, r3, #12
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800715a:	4b49      	ldr	r3, [pc, #292]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f003 030c 	and.w	r3, r3, #12
 8007162:	2b08      	cmp	r3, #8
 8007164:	d11c      	bne.n	80071a0 <HAL_RCC_OscConfig+0x18c>
 8007166:	4b46      	ldr	r3, [pc, #280]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d116      	bne.n	80071a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007172:	4b43      	ldr	r3, [pc, #268]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d005      	beq.n	800718a <HAL_RCC_OscConfig+0x176>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d001      	beq.n	800718a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e1c0      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718a:	4b3d      	ldr	r3, [pc, #244]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	4939      	ldr	r1, [pc, #228]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 800719a:	4313      	orrs	r3, r2
 800719c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800719e:	e03a      	b.n	8007216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d020      	beq.n	80071ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071a8:	4b36      	ldr	r3, [pc, #216]	@ (8007284 <HAL_RCC_OscConfig+0x270>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ae:	f7fe f82b 	bl	8005208 <HAL_GetTick>
 80071b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b4:	e008      	b.n	80071c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b6:	f7fe f827 	bl	8005208 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e1a1      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0f0      	beq.n	80071b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d4:	4b2a      	ldr	r3, [pc, #168]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	00db      	lsls	r3, r3, #3
 80071e2:	4927      	ldr	r1, [pc, #156]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	600b      	str	r3, [r1, #0]
 80071e8:	e015      	b.n	8007216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071ea:	4b26      	ldr	r3, [pc, #152]	@ (8007284 <HAL_RCC_OscConfig+0x270>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f0:	f7fe f80a 	bl	8005208 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071f8:	f7fe f806 	bl	8005208 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e180      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800720a:	4b1d      	ldr	r3, [pc, #116]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1f0      	bne.n	80071f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0308 	and.w	r3, r3, #8
 800721e:	2b00      	cmp	r3, #0
 8007220:	d03a      	beq.n	8007298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d019      	beq.n	800725e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800722a:	4b17      	ldr	r3, [pc, #92]	@ (8007288 <HAL_RCC_OscConfig+0x274>)
 800722c:	2201      	movs	r2, #1
 800722e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007230:	f7fd ffea 	bl	8005208 <HAL_GetTick>
 8007234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007238:	f7fd ffe6 	bl	8005208 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e160      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800724a:	4b0d      	ldr	r3, [pc, #52]	@ (8007280 <HAL_RCC_OscConfig+0x26c>)
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0f0      	beq.n	8007238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007256:	2001      	movs	r0, #1
 8007258:	f000 fad0 	bl	80077fc <RCC_Delay>
 800725c:	e01c      	b.n	8007298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800725e:	4b0a      	ldr	r3, [pc, #40]	@ (8007288 <HAL_RCC_OscConfig+0x274>)
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007264:	f7fd ffd0 	bl	8005208 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800726a:	e00f      	b.n	800728c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800726c:	f7fd ffcc 	bl	8005208 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d908      	bls.n	800728c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e146      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
 800727e:	bf00      	nop
 8007280:	40021000 	.word	0x40021000
 8007284:	42420000 	.word	0x42420000
 8007288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800728c:	4b92      	ldr	r3, [pc, #584]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 800728e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e9      	bne.n	800726c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 80a6 	beq.w	80073f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072a6:	2300      	movs	r3, #0
 80072a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072aa:	4b8b      	ldr	r3, [pc, #556]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10d      	bne.n	80072d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072b6:	4b88      	ldr	r3, [pc, #544]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	4a87      	ldr	r2, [pc, #540]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 80072bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072c0:	61d3      	str	r3, [r2, #28]
 80072c2:	4b85      	ldr	r3, [pc, #532]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d2:	4b82      	ldr	r3, [pc, #520]	@ (80074dc <HAL_RCC_OscConfig+0x4c8>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d118      	bne.n	8007310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072de:	4b7f      	ldr	r3, [pc, #508]	@ (80074dc <HAL_RCC_OscConfig+0x4c8>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a7e      	ldr	r2, [pc, #504]	@ (80074dc <HAL_RCC_OscConfig+0x4c8>)
 80072e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ea:	f7fd ff8d 	bl	8005208 <HAL_GetTick>
 80072ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072f0:	e008      	b.n	8007304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072f2:	f7fd ff89 	bl	8005208 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b64      	cmp	r3, #100	@ 0x64
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e103      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007304:	4b75      	ldr	r3, [pc, #468]	@ (80074dc <HAL_RCC_OscConfig+0x4c8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f0      	beq.n	80072f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d106      	bne.n	8007326 <HAL_RCC_OscConfig+0x312>
 8007318:	4b6f      	ldr	r3, [pc, #444]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	4a6e      	ldr	r2, [pc, #440]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 800731e:	f043 0301 	orr.w	r3, r3, #1
 8007322:	6213      	str	r3, [r2, #32]
 8007324:	e02d      	b.n	8007382 <HAL_RCC_OscConfig+0x36e>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10c      	bne.n	8007348 <HAL_RCC_OscConfig+0x334>
 800732e:	4b6a      	ldr	r3, [pc, #424]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	4a69      	ldr	r2, [pc, #420]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	6213      	str	r3, [r2, #32]
 800733a:	4b67      	ldr	r3, [pc, #412]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	4a66      	ldr	r2, [pc, #408]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007340:	f023 0304 	bic.w	r3, r3, #4
 8007344:	6213      	str	r3, [r2, #32]
 8007346:	e01c      	b.n	8007382 <HAL_RCC_OscConfig+0x36e>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	2b05      	cmp	r3, #5
 800734e:	d10c      	bne.n	800736a <HAL_RCC_OscConfig+0x356>
 8007350:	4b61      	ldr	r3, [pc, #388]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	4a60      	ldr	r2, [pc, #384]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007356:	f043 0304 	orr.w	r3, r3, #4
 800735a:	6213      	str	r3, [r2, #32]
 800735c:	4b5e      	ldr	r3, [pc, #376]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	4a5d      	ldr	r2, [pc, #372]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007362:	f043 0301 	orr.w	r3, r3, #1
 8007366:	6213      	str	r3, [r2, #32]
 8007368:	e00b      	b.n	8007382 <HAL_RCC_OscConfig+0x36e>
 800736a:	4b5b      	ldr	r3, [pc, #364]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	4a5a      	ldr	r2, [pc, #360]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007370:	f023 0301 	bic.w	r3, r3, #1
 8007374:	6213      	str	r3, [r2, #32]
 8007376:	4b58      	ldr	r3, [pc, #352]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	4a57      	ldr	r2, [pc, #348]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 800737c:	f023 0304 	bic.w	r3, r3, #4
 8007380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d015      	beq.n	80073b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800738a:	f7fd ff3d 	bl	8005208 <HAL_GetTick>
 800738e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007390:	e00a      	b.n	80073a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007392:	f7fd ff39 	bl	8005208 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e0b1      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a8:	4b4b      	ldr	r3, [pc, #300]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0ee      	beq.n	8007392 <HAL_RCC_OscConfig+0x37e>
 80073b4:	e014      	b.n	80073e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073b6:	f7fd ff27 	bl	8005208 <HAL_GetTick>
 80073ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073bc:	e00a      	b.n	80073d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073be:	f7fd ff23 	bl	8005208 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e09b      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073d4:	4b40      	ldr	r3, [pc, #256]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1ee      	bne.n	80073be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d105      	bne.n	80073f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073e6:	4b3c      	ldr	r3, [pc, #240]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	4a3b      	ldr	r2, [pc, #236]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 80073ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 8087 	beq.w	800750a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073fc:	4b36      	ldr	r3, [pc, #216]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 030c 	and.w	r3, r3, #12
 8007404:	2b08      	cmp	r3, #8
 8007406:	d061      	beq.n	80074cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d146      	bne.n	800749e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007410:	4b33      	ldr	r3, [pc, #204]	@ (80074e0 <HAL_RCC_OscConfig+0x4cc>)
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007416:	f7fd fef7 	bl	8005208 <HAL_GetTick>
 800741a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800741e:	f7fd fef3 	bl	8005208 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e06d      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007430:	4b29      	ldr	r3, [pc, #164]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f0      	bne.n	800741e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007444:	d108      	bne.n	8007458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007446:	4b24      	ldr	r3, [pc, #144]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	4921      	ldr	r1, [pc, #132]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007454:	4313      	orrs	r3, r2
 8007456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007458:	4b1f      	ldr	r3, [pc, #124]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a19      	ldr	r1, [r3, #32]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007468:	430b      	orrs	r3, r1
 800746a:	491b      	ldr	r1, [pc, #108]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 800746c:	4313      	orrs	r3, r2
 800746e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007470:	4b1b      	ldr	r3, [pc, #108]	@ (80074e0 <HAL_RCC_OscConfig+0x4cc>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007476:	f7fd fec7 	bl	8005208 <HAL_GetTick>
 800747a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747e:	f7fd fec3 	bl	8005208 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e03d      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007490:	4b11      	ldr	r3, [pc, #68]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0f0      	beq.n	800747e <HAL_RCC_OscConfig+0x46a>
 800749c:	e035      	b.n	800750a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749e:	4b10      	ldr	r3, [pc, #64]	@ (80074e0 <HAL_RCC_OscConfig+0x4cc>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a4:	f7fd feb0 	bl	8005208 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ac:	f7fd feac 	bl	8005208 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e026      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074be:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <HAL_RCC_OscConfig+0x4c4>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f0      	bne.n	80074ac <HAL_RCC_OscConfig+0x498>
 80074ca:	e01e      	b.n	800750a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d107      	bne.n	80074e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e019      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
 80074d8:	40021000 	.word	0x40021000
 80074dc:	40007000 	.word	0x40007000
 80074e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80074e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007514 <HAL_RCC_OscConfig+0x500>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d106      	bne.n	8007506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007502:	429a      	cmp	r2, r3
 8007504:	d001      	beq.n	800750a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	40021000 	.word	0x40021000

08007518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e0d0      	b.n	80076ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800752c:	4b6a      	ldr	r3, [pc, #424]	@ (80076d8 <HAL_RCC_ClockConfig+0x1c0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0307 	and.w	r3, r3, #7
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d910      	bls.n	800755c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800753a:	4b67      	ldr	r3, [pc, #412]	@ (80076d8 <HAL_RCC_ClockConfig+0x1c0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f023 0207 	bic.w	r2, r3, #7
 8007542:	4965      	ldr	r1, [pc, #404]	@ (80076d8 <HAL_RCC_ClockConfig+0x1c0>)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	4313      	orrs	r3, r2
 8007548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800754a:	4b63      	ldr	r3, [pc, #396]	@ (80076d8 <HAL_RCC_ClockConfig+0x1c0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d001      	beq.n	800755c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e0b8      	b.n	80076ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d020      	beq.n	80075aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007574:	4b59      	ldr	r3, [pc, #356]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	4a58      	ldr	r2, [pc, #352]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 800757a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800757e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800758c:	4b53      	ldr	r3, [pc, #332]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	4a52      	ldr	r2, [pc, #328]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 8007592:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007598:	4b50      	ldr	r3, [pc, #320]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	494d      	ldr	r1, [pc, #308]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d040      	beq.n	8007638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d107      	bne.n	80075ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075be:	4b47      	ldr	r3, [pc, #284]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d115      	bne.n	80075f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e07f      	b.n	80076ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d107      	bne.n	80075e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d6:	4b41      	ldr	r3, [pc, #260]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e073      	b.n	80076ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e6:	4b3d      	ldr	r3, [pc, #244]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e06b      	b.n	80076ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075f6:	4b39      	ldr	r3, [pc, #228]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f023 0203 	bic.w	r2, r3, #3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	4936      	ldr	r1, [pc, #216]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 8007604:	4313      	orrs	r3, r2
 8007606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007608:	f7fd fdfe 	bl	8005208 <HAL_GetTick>
 800760c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800760e:	e00a      	b.n	8007626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007610:	f7fd fdfa 	bl	8005208 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800761e:	4293      	cmp	r3, r2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e053      	b.n	80076ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007626:	4b2d      	ldr	r3, [pc, #180]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f003 020c 	and.w	r2, r3, #12
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	429a      	cmp	r2, r3
 8007636:	d1eb      	bne.n	8007610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007638:	4b27      	ldr	r3, [pc, #156]	@ (80076d8 <HAL_RCC_ClockConfig+0x1c0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d210      	bcs.n	8007668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007646:	4b24      	ldr	r3, [pc, #144]	@ (80076d8 <HAL_RCC_ClockConfig+0x1c0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f023 0207 	bic.w	r2, r3, #7
 800764e:	4922      	ldr	r1, [pc, #136]	@ (80076d8 <HAL_RCC_ClockConfig+0x1c0>)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	4313      	orrs	r3, r2
 8007654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007656:	4b20      	ldr	r3, [pc, #128]	@ (80076d8 <HAL_RCC_ClockConfig+0x1c0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d001      	beq.n	8007668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e032      	b.n	80076ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b00      	cmp	r3, #0
 8007672:	d008      	beq.n	8007686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007674:	4b19      	ldr	r3, [pc, #100]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	4916      	ldr	r1, [pc, #88]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 8007682:	4313      	orrs	r3, r2
 8007684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0308 	and.w	r3, r3, #8
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007692:	4b12      	ldr	r3, [pc, #72]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	490e      	ldr	r1, [pc, #56]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076a6:	f000 f821 	bl	80076ec <HAL_RCC_GetSysClockFreq>
 80076aa:	4602      	mov	r2, r0
 80076ac:	4b0b      	ldr	r3, [pc, #44]	@ (80076dc <HAL_RCC_ClockConfig+0x1c4>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	091b      	lsrs	r3, r3, #4
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	490a      	ldr	r1, [pc, #40]	@ (80076e0 <HAL_RCC_ClockConfig+0x1c8>)
 80076b8:	5ccb      	ldrb	r3, [r1, r3]
 80076ba:	fa22 f303 	lsr.w	r3, r2, r3
 80076be:	4a09      	ldr	r2, [pc, #36]	@ (80076e4 <HAL_RCC_ClockConfig+0x1cc>)
 80076c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80076c2:	4b09      	ldr	r3, [pc, #36]	@ (80076e8 <HAL_RCC_ClockConfig+0x1d0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fd fd5c 	bl	8005184 <HAL_InitTick>

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	40022000 	.word	0x40022000
 80076dc:	40021000 	.word	0x40021000
 80076e0:	08009cc0 	.word	0x08009cc0
 80076e4:	20000034 	.word	0x20000034
 80076e8:	20000038 	.word	0x20000038

080076ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	2300      	movs	r3, #0
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	2300      	movs	r3, #0
 8007700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007706:	4b1e      	ldr	r3, [pc, #120]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x94>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f003 030c 	and.w	r3, r3, #12
 8007712:	2b04      	cmp	r3, #4
 8007714:	d002      	beq.n	800771c <HAL_RCC_GetSysClockFreq+0x30>
 8007716:	2b08      	cmp	r3, #8
 8007718:	d003      	beq.n	8007722 <HAL_RCC_GetSysClockFreq+0x36>
 800771a:	e027      	b.n	800776c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800771c:	4b19      	ldr	r3, [pc, #100]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x98>)
 800771e:	613b      	str	r3, [r7, #16]
      break;
 8007720:	e027      	b.n	8007772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	0c9b      	lsrs	r3, r3, #18
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	4a17      	ldr	r2, [pc, #92]	@ (8007788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800772c:	5cd3      	ldrb	r3, [r2, r3]
 800772e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d010      	beq.n	800775c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800773a:	4b11      	ldr	r3, [pc, #68]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x94>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	0c5b      	lsrs	r3, r3, #17
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	4a11      	ldr	r2, [pc, #68]	@ (800778c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007746:	5cd3      	ldrb	r3, [r2, r3]
 8007748:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a0d      	ldr	r2, [pc, #52]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x98>)
 800774e:	fb03 f202 	mul.w	r2, r3, r2
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	fbb2 f3f3 	udiv	r3, r2, r3
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e004      	b.n	8007766 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a0c      	ldr	r2, [pc, #48]	@ (8007790 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007760:	fb02 f303 	mul.w	r3, r2, r3
 8007764:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	613b      	str	r3, [r7, #16]
      break;
 800776a:	e002      	b.n	8007772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800776c:	4b09      	ldr	r3, [pc, #36]	@ (8007794 <HAL_RCC_GetSysClockFreq+0xa8>)
 800776e:	613b      	str	r3, [r7, #16]
      break;
 8007770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007772:	693b      	ldr	r3, [r7, #16]
}
 8007774:	4618      	mov	r0, r3
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40021000 	.word	0x40021000
 8007784:	00f42400 	.word	0x00f42400
 8007788:	08009cd8 	.word	0x08009cd8
 800778c:	08009ce8 	.word	0x08009ce8
 8007790:	003d0900 	.word	0x003d0900
 8007794:	007a1200 	.word	0x007a1200

08007798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800779c:	4b02      	ldr	r3, [pc, #8]	@ (80077a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800779e:	681b      	ldr	r3, [r3, #0]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr
 80077a8:	20000034 	.word	0x20000034

080077ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077b0:	f7ff fff2 	bl	8007798 <HAL_RCC_GetHCLKFreq>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4b05      	ldr	r3, [pc, #20]	@ (80077cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	0a1b      	lsrs	r3, r3, #8
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	4903      	ldr	r1, [pc, #12]	@ (80077d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077c2:	5ccb      	ldrb	r3, [r1, r3]
 80077c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40021000 	.word	0x40021000
 80077d0:	08009cd0 	.word	0x08009cd0

080077d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077d8:	f7ff ffde 	bl	8007798 <HAL_RCC_GetHCLKFreq>
 80077dc:	4602      	mov	r2, r0
 80077de:	4b05      	ldr	r3, [pc, #20]	@ (80077f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	0adb      	lsrs	r3, r3, #11
 80077e4:	f003 0307 	and.w	r3, r3, #7
 80077e8:	4903      	ldr	r1, [pc, #12]	@ (80077f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ea:	5ccb      	ldrb	r3, [r1, r3]
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	40021000 	.word	0x40021000
 80077f8:	08009cd0 	.word	0x08009cd0

080077fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007804:	4b0a      	ldr	r3, [pc, #40]	@ (8007830 <RCC_Delay+0x34>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a0a      	ldr	r2, [pc, #40]	@ (8007834 <RCC_Delay+0x38>)
 800780a:	fba2 2303 	umull	r2, r3, r2, r3
 800780e:	0a5b      	lsrs	r3, r3, #9
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	fb02 f303 	mul.w	r3, r2, r3
 8007816:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007818:	bf00      	nop
  }
  while (Delay --);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	1e5a      	subs	r2, r3, #1
 800781e:	60fa      	str	r2, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1f9      	bne.n	8007818 <RCC_Delay+0x1c>
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr
 8007830:	20000034 	.word	0x20000034
 8007834:	10624dd3 	.word	0x10624dd3

08007838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e076      	b.n	8007938 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d108      	bne.n	8007864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800785a:	d009      	beq.n	8007870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	61da      	str	r2, [r3, #28]
 8007862:	e005      	b.n	8007870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fd fa86 	bl	8004d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80078b8:	431a      	orrs	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f4:	ea42 0103 	orr.w	r1, r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	0c1a      	lsrs	r2, r3, #16
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f002 0204 	and.w	r2, r2, #4
 8007916:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69da      	ldr	r2, [r3, #28]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007926:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007950:	f7fd fc5a 	bl	8005208 <HAL_GetTick>
 8007954:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007956:	88fb      	ldrh	r3, [r7, #6]
 8007958:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b01      	cmp	r3, #1
 8007964:	d001      	beq.n	800796a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007966:	2302      	movs	r3, #2
 8007968:	e12a      	b.n	8007bc0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_SPI_Transmit+0x36>
 8007970:	88fb      	ldrh	r3, [r7, #6]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e122      	b.n	8007bc0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_SPI_Transmit+0x48>
 8007984:	2302      	movs	r3, #2
 8007986:	e11b      	b.n	8007bc0 <HAL_SPI_Transmit+0x280>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2203      	movs	r2, #3
 8007994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	88fa      	ldrh	r2, [r7, #6]
 80079ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079d6:	d10f      	bne.n	80079f8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a02:	2b40      	cmp	r3, #64	@ 0x40
 8007a04:	d007      	beq.n	8007a16 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a1e:	d152      	bne.n	8007ac6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <HAL_SPI_Transmit+0xee>
 8007a28:	8b7b      	ldrh	r3, [r7, #26]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d145      	bne.n	8007aba <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a32:	881a      	ldrh	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3e:	1c9a      	adds	r2, r3, #2
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a52:	e032      	b.n	8007aba <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d112      	bne.n	8007a88 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a66:	881a      	ldrh	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a72:	1c9a      	adds	r2, r3, #2
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a86:	e018      	b.n	8007aba <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a88:	f7fd fbbe 	bl	8005208 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d803      	bhi.n	8007aa0 <HAL_SPI_Transmit+0x160>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d102      	bne.n	8007aa6 <HAL_SPI_Transmit+0x166>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e082      	b.n	8007bc0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1c7      	bne.n	8007a54 <HAL_SPI_Transmit+0x114>
 8007ac4:	e053      	b.n	8007b6e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <HAL_SPI_Transmit+0x194>
 8007ace:	8b7b      	ldrh	r3, [r7, #26]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d147      	bne.n	8007b64 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	330c      	adds	r3, #12
 8007ade:	7812      	ldrb	r2, [r2, #0]
 8007ae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007afa:	e033      	b.n	8007b64 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d113      	bne.n	8007b32 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	330c      	adds	r3, #12
 8007b14:	7812      	ldrb	r2, [r2, #0]
 8007b16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b30:	e018      	b.n	8007b64 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b32:	f7fd fb69 	bl	8005208 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d803      	bhi.n	8007b4a <HAL_SPI_Transmit+0x20a>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b48:	d102      	bne.n	8007b50 <HAL_SPI_Transmit+0x210>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d109      	bne.n	8007b64 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e02d      	b.n	8007bc0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1c6      	bne.n	8007afc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fbc4 	bl	8008300 <SPI_EndRxTxTransaction>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2220      	movs	r2, #32
 8007b82:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	617b      	str	r3, [r7, #20]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
  }
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3720      	adds	r7, #32
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d001      	beq.n	8007be8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007be4:	2302      	movs	r3, #2
 8007be6:	e104      	b.n	8007df2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bf0:	d112      	bne.n	8007c18 <HAL_SPI_Receive+0x50>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10e      	bne.n	8007c18 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c02:	88fa      	ldrh	r2, [r7, #6]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 f8f3 	bl	8007dfa <HAL_SPI_TransmitReceive>
 8007c14:	4603      	mov	r3, r0
 8007c16:	e0ec      	b.n	8007df2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c18:	f7fd faf6 	bl	8005208 <HAL_GetTick>
 8007c1c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <HAL_SPI_Receive+0x62>
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e0e1      	b.n	8007df2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_SPI_Receive+0x74>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e0da      	b.n	8007df2 <HAL_SPI_Receive+0x22a>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2204      	movs	r2, #4
 8007c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	88fa      	ldrh	r2, [r7, #6]
 8007c62:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c8a:	d10f      	bne.n	8007cac <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007caa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb6:	2b40      	cmp	r3, #64	@ 0x40
 8007cb8:	d007      	beq.n	8007cca <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d170      	bne.n	8007db4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007cd2:	e035      	b.n	8007d40 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d115      	bne.n	8007d0e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f103 020c 	add.w	r2, r3, #12
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d0c:	e018      	b.n	8007d40 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d0e:	f7fd fa7b 	bl	8005208 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d803      	bhi.n	8007d26 <HAL_SPI_Receive+0x15e>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	d102      	bne.n	8007d2c <HAL_SPI_Receive+0x164>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d109      	bne.n	8007d40 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e058      	b.n	8007df2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1c4      	bne.n	8007cd4 <HAL_SPI_Receive+0x10c>
 8007d4a:	e038      	b.n	8007dbe <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d113      	bne.n	8007d82 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	b292      	uxth	r2, r2
 8007d66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6c:	1c9a      	adds	r2, r3, #2
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d80:	e018      	b.n	8007db4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d82:	f7fd fa41 	bl	8005208 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d803      	bhi.n	8007d9a <HAL_SPI_Receive+0x1d2>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d98:	d102      	bne.n	8007da0 <HAL_SPI_Receive+0x1d8>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e01e      	b.n	8007df2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1c6      	bne.n	8007d4c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fa4a 	bl	800825c <SPI_EndRxTransaction>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b08a      	sub	sp, #40	@ 0x28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e0c:	f7fd f9fc 	bl	8005208 <HAL_GetTick>
 8007e10:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e18:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007e20:	887b      	ldrh	r3, [r7, #2]
 8007e22:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e24:	7ffb      	ldrb	r3, [r7, #31]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d00c      	beq.n	8007e44 <HAL_SPI_TransmitReceive+0x4a>
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e30:	d106      	bne.n	8007e40 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <HAL_SPI_TransmitReceive+0x46>
 8007e3a:	7ffb      	ldrb	r3, [r7, #31]
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d001      	beq.n	8007e44 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007e40:	2302      	movs	r3, #2
 8007e42:	e17f      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d005      	beq.n	8007e56 <HAL_SPI_TransmitReceive+0x5c>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <HAL_SPI_TransmitReceive+0x5c>
 8007e50:	887b      	ldrh	r3, [r7, #2]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e174      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <HAL_SPI_TransmitReceive+0x6e>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e16d      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d003      	beq.n	8007e84 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2205      	movs	r2, #5
 8007e80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	887a      	ldrh	r2, [r7, #2]
 8007e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	887a      	ldrh	r2, [r7, #2]
 8007e9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	887a      	ldrh	r2, [r7, #2]
 8007ea6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	887a      	ldrh	r2, [r7, #2]
 8007eac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec4:	2b40      	cmp	r3, #64	@ 0x40
 8007ec6:	d007      	beq.n	8007ed8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ee0:	d17e      	bne.n	8007fe0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_SPI_TransmitReceive+0xf6>
 8007eea:	8afb      	ldrh	r3, [r7, #22]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d16c      	bne.n	8007fca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef4:	881a      	ldrh	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f00:	1c9a      	adds	r2, r3, #2
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f14:	e059      	b.n	8007fca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d11b      	bne.n	8007f5c <HAL_SPI_TransmitReceive+0x162>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d016      	beq.n	8007f5c <HAL_SPI_TransmitReceive+0x162>
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d113      	bne.n	8007f5c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f38:	881a      	ldrh	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f44:	1c9a      	adds	r2, r3, #2
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3b01      	subs	r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d119      	bne.n	8007f9e <HAL_SPI_TransmitReceive+0x1a4>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d014      	beq.n	8007f9e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f86:	1c9a      	adds	r2, r3, #2
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f9e:	f7fd f933 	bl	8005208 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d80d      	bhi.n	8007fca <HAL_SPI_TransmitReceive+0x1d0>
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb4:	d009      	beq.n	8007fca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e0bc      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1a0      	bne.n	8007f16 <HAL_SPI_TransmitReceive+0x11c>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d19b      	bne.n	8007f16 <HAL_SPI_TransmitReceive+0x11c>
 8007fde:	e082      	b.n	80080e6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_SPI_TransmitReceive+0x1f4>
 8007fe8:	8afb      	ldrh	r3, [r7, #22]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d171      	bne.n	80080d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	330c      	adds	r3, #12
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800800a:	b29b      	uxth	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008014:	e05d      	b.n	80080d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b02      	cmp	r3, #2
 8008022:	d11c      	bne.n	800805e <HAL_SPI_TransmitReceive+0x264>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d017      	beq.n	800805e <HAL_SPI_TransmitReceive+0x264>
 800802e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008030:	2b01      	cmp	r3, #1
 8008032:	d114      	bne.n	800805e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	330c      	adds	r3, #12
 800803e:	7812      	ldrb	r2, [r2, #0]
 8008040:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008050:	b29b      	uxth	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b01      	cmp	r3, #1
 800806a:	d119      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x2a6>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d014      	beq.n	80080a0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008080:	b2d2      	uxtb	r2, r2
 8008082:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008092:	b29b      	uxth	r3, r3
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800809c:	2301      	movs	r3, #1
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080a0:	f7fd f8b2 	bl	8005208 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d803      	bhi.n	80080b8 <HAL_SPI_TransmitReceive+0x2be>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d102      	bne.n	80080be <HAL_SPI_TransmitReceive+0x2c4>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d109      	bne.n	80080d2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e038      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d19c      	bne.n	8008016 <HAL_SPI_TransmitReceive+0x21c>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d197      	bne.n	8008016 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080e6:	6a3a      	ldr	r2, [r7, #32]
 80080e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 f908 	bl	8008300 <SPI_EndRxTxTransaction>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d008      	beq.n	8008108 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e01d      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008142:	2300      	movs	r3, #0
  }
}
 8008144:	4618      	mov	r0, r3
 8008146:	3728      	adds	r7, #40	@ 0x28
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	603b      	str	r3, [r7, #0]
 8008158:	4613      	mov	r3, r2
 800815a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800815c:	f7fd f854 	bl	8005208 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	4413      	add	r3, r2
 800816a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800816c:	f7fd f84c 	bl	8005208 <HAL_GetTick>
 8008170:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008172:	4b39      	ldr	r3, [pc, #228]	@ (8008258 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	015b      	lsls	r3, r3, #5
 8008178:	0d1b      	lsrs	r3, r3, #20
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	fb02 f303 	mul.w	r3, r2, r3
 8008180:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008182:	e054      	b.n	800822e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818a:	d050      	beq.n	800822e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800818c:	f7fd f83c 	bl	8005208 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	69fa      	ldr	r2, [r7, #28]
 8008198:	429a      	cmp	r2, r3
 800819a:	d902      	bls.n	80081a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d13d      	bne.n	800821e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80081b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081ba:	d111      	bne.n	80081e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081c4:	d004      	beq.n	80081d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ce:	d107      	bne.n	80081e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081e8:	d10f      	bne.n	800820a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e017      	b.n	800824e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	3b01      	subs	r3, #1
 800822c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4013      	ands	r3, r2
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	429a      	cmp	r2, r3
 800823c:	bf0c      	ite	eq
 800823e:	2301      	moveq	r3, #1
 8008240:	2300      	movne	r3, #0
 8008242:	b2db      	uxtb	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	429a      	cmp	r2, r3
 800824a:	d19b      	bne.n	8008184 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3720      	adds	r7, #32
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000034 	.word	0x20000034

0800825c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af02      	add	r7, sp, #8
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008270:	d111      	bne.n	8008296 <SPI_EndRxTransaction+0x3a>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800827a:	d004      	beq.n	8008286 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008284:	d107      	bne.n	8008296 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008294:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800829e:	d117      	bne.n	80082d0 <SPI_EndRxTransaction+0x74>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082a8:	d112      	bne.n	80082d0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2200      	movs	r2, #0
 80082b2:	2101      	movs	r1, #1
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff ff49 	bl	800814c <SPI_WaitFlagStateUntilTimeout>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d01a      	beq.n	80082f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c4:	f043 0220 	orr.w	r2, r3, #32
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e013      	b.n	80082f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2200      	movs	r2, #0
 80082d8:	2180      	movs	r1, #128	@ 0x80
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff ff36 	bl	800814c <SPI_WaitFlagStateUntilTimeout>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d007      	beq.n	80082f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ea:	f043 0220 	orr.w	r2, r3, #32
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e000      	b.n	80082f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af02      	add	r7, sp, #8
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2201      	movs	r2, #1
 8008314:	2102      	movs	r1, #2
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7ff ff18 	bl	800814c <SPI_WaitFlagStateUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008326:	f043 0220 	orr.w	r2, r3, #32
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e013      	b.n	800835a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2200      	movs	r2, #0
 800833a:	2180      	movs	r1, #128	@ 0x80
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f7ff ff05 	bl	800814c <SPI_WaitFlagStateUntilTimeout>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d007      	beq.n	8008358 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800834c:	f043 0220 	orr.w	r2, r3, #32
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e000      	b.n	800835a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e041      	b.n	80083f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d106      	bne.n	800838e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7fc fd8d 	bl	8004ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2202      	movs	r2, #2
 8008392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3304      	adds	r3, #4
 800839e:	4619      	mov	r1, r3
 80083a0:	4610      	mov	r0, r2
 80083a2:	f000 fa5b 	bl	800885c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	d001      	beq.n	8008418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e03a      	b.n	800848e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a18      	ldr	r2, [pc, #96]	@ (8008498 <HAL_TIM_Base_Start_IT+0x98>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00e      	beq.n	8008458 <HAL_TIM_Base_Start_IT+0x58>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008442:	d009      	beq.n	8008458 <HAL_TIM_Base_Start_IT+0x58>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a14      	ldr	r2, [pc, #80]	@ (800849c <HAL_TIM_Base_Start_IT+0x9c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d004      	beq.n	8008458 <HAL_TIM_Base_Start_IT+0x58>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a13      	ldr	r2, [pc, #76]	@ (80084a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d111      	bne.n	800847c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b06      	cmp	r3, #6
 8008468:	d010      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 0201 	orr.w	r2, r2, #1
 8008478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800847a:	e007      	b.n	800848c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	bc80      	pop	{r7}
 8008496:	4770      	bx	lr
 8008498:	40012c00 	.word	0x40012c00
 800849c:	40000400 	.word	0x40000400
 80084a0:	40000800 	.word	0x40000800

080084a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d020      	beq.n	8008508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01b      	beq.n	8008508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f06f 0202 	mvn.w	r2, #2
 80084d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f998 	bl	8008824 <HAL_TIM_IC_CaptureCallback>
 80084f4:	e005      	b.n	8008502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f98b 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f99a 	bl	8008836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	d020      	beq.n	8008554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01b      	beq.n	8008554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f06f 0204 	mvn.w	r2, #4
 8008524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2202      	movs	r2, #2
 800852a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f972 	bl	8008824 <HAL_TIM_IC_CaptureCallback>
 8008540:	e005      	b.n	800854e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f965 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f974 	bl	8008836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f003 0308 	and.w	r3, r3, #8
 800855a:	2b00      	cmp	r3, #0
 800855c:	d020      	beq.n	80085a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01b      	beq.n	80085a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f06f 0208 	mvn.w	r2, #8
 8008570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2204      	movs	r2, #4
 8008576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f94c 	bl	8008824 <HAL_TIM_IC_CaptureCallback>
 800858c:	e005      	b.n	800859a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f93f 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f94e 	bl	8008836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f003 0310 	and.w	r3, r3, #16
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d020      	beq.n	80085ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f003 0310 	and.w	r3, r3, #16
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01b      	beq.n	80085ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f06f 0210 	mvn.w	r2, #16
 80085bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2208      	movs	r2, #8
 80085c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f926 	bl	8008824 <HAL_TIM_IC_CaptureCallback>
 80085d8:	e005      	b.n	80085e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f919 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f928 	bl	8008836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00c      	beq.n	8008610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0201 	mvn.w	r2, #1
 8008608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7f9 fd08 	bl	8002020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00c      	beq.n	8008634 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800862c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa7f 	bl	8008b32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00c      	beq.n	8008658 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f8f8 	bl	8008848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00c      	beq.n	800867c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d007      	beq.n	800867c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0220 	mvn.w	r2, #32
 8008674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa52 	bl	8008b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008698:	2b01      	cmp	r3, #1
 800869a:	d101      	bne.n	80086a0 <HAL_TIM_ConfigClockSource+0x1c>
 800869c:	2302      	movs	r3, #2
 800869e:	e0b4      	b.n	800880a <HAL_TIM_ConfigClockSource+0x186>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80086be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086d8:	d03e      	beq.n	8008758 <HAL_TIM_ConfigClockSource+0xd4>
 80086da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086de:	f200 8087 	bhi.w	80087f0 <HAL_TIM_ConfigClockSource+0x16c>
 80086e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086e6:	f000 8086 	beq.w	80087f6 <HAL_TIM_ConfigClockSource+0x172>
 80086ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ee:	d87f      	bhi.n	80087f0 <HAL_TIM_ConfigClockSource+0x16c>
 80086f0:	2b70      	cmp	r3, #112	@ 0x70
 80086f2:	d01a      	beq.n	800872a <HAL_TIM_ConfigClockSource+0xa6>
 80086f4:	2b70      	cmp	r3, #112	@ 0x70
 80086f6:	d87b      	bhi.n	80087f0 <HAL_TIM_ConfigClockSource+0x16c>
 80086f8:	2b60      	cmp	r3, #96	@ 0x60
 80086fa:	d050      	beq.n	800879e <HAL_TIM_ConfigClockSource+0x11a>
 80086fc:	2b60      	cmp	r3, #96	@ 0x60
 80086fe:	d877      	bhi.n	80087f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008700:	2b50      	cmp	r3, #80	@ 0x50
 8008702:	d03c      	beq.n	800877e <HAL_TIM_ConfigClockSource+0xfa>
 8008704:	2b50      	cmp	r3, #80	@ 0x50
 8008706:	d873      	bhi.n	80087f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008708:	2b40      	cmp	r3, #64	@ 0x40
 800870a:	d058      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x13a>
 800870c:	2b40      	cmp	r3, #64	@ 0x40
 800870e:	d86f      	bhi.n	80087f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008710:	2b30      	cmp	r3, #48	@ 0x30
 8008712:	d064      	beq.n	80087de <HAL_TIM_ConfigClockSource+0x15a>
 8008714:	2b30      	cmp	r3, #48	@ 0x30
 8008716:	d86b      	bhi.n	80087f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008718:	2b20      	cmp	r3, #32
 800871a:	d060      	beq.n	80087de <HAL_TIM_ConfigClockSource+0x15a>
 800871c:	2b20      	cmp	r3, #32
 800871e:	d867      	bhi.n	80087f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008720:	2b00      	cmp	r3, #0
 8008722:	d05c      	beq.n	80087de <HAL_TIM_ConfigClockSource+0x15a>
 8008724:	2b10      	cmp	r3, #16
 8008726:	d05a      	beq.n	80087de <HAL_TIM_ConfigClockSource+0x15a>
 8008728:	e062      	b.n	80087f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800873a:	f000 f974 	bl	8008a26 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800874c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	609a      	str	r2, [r3, #8]
      break;
 8008756:	e04f      	b.n	80087f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008768:	f000 f95d 	bl	8008a26 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800877a:	609a      	str	r2, [r3, #8]
      break;
 800877c:	e03c      	b.n	80087f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800878a:	461a      	mov	r2, r3
 800878c:	f000 f8d4 	bl	8008938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2150      	movs	r1, #80	@ 0x50
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f92b 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 800879c:	e02c      	b.n	80087f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087aa:	461a      	mov	r2, r3
 80087ac:	f000 f8f2 	bl	8008994 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2160      	movs	r1, #96	@ 0x60
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 f91b 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 80087bc:	e01c      	b.n	80087f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ca:	461a      	mov	r2, r3
 80087cc:	f000 f8b4 	bl	8008938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2140      	movs	r1, #64	@ 0x40
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f90b 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 80087dc:	e00c      	b.n	80087f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4619      	mov	r1, r3
 80087e8:	4610      	mov	r0, r2
 80087ea:	f000 f902 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 80087ee:	e003      	b.n	80087f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	73fb      	strb	r3, [r7, #15]
      break;
 80087f4:	e000      	b.n	80087f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr

08008824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr

08008836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	bc80      	pop	{r7}
 8008846:	4770      	bx	lr

08008848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	bc80      	pop	{r7}
 8008858:	4770      	bx	lr
	...

0800885c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a2f      	ldr	r2, [pc, #188]	@ (800892c <TIM_Base_SetConfig+0xd0>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d00b      	beq.n	800888c <TIM_Base_SetConfig+0x30>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800887a:	d007      	beq.n	800888c <TIM_Base_SetConfig+0x30>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a2c      	ldr	r2, [pc, #176]	@ (8008930 <TIM_Base_SetConfig+0xd4>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d003      	beq.n	800888c <TIM_Base_SetConfig+0x30>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a2b      	ldr	r2, [pc, #172]	@ (8008934 <TIM_Base_SetConfig+0xd8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d108      	bne.n	800889e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a22      	ldr	r2, [pc, #136]	@ (800892c <TIM_Base_SetConfig+0xd0>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00b      	beq.n	80088be <TIM_Base_SetConfig+0x62>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ac:	d007      	beq.n	80088be <TIM_Base_SetConfig+0x62>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a1f      	ldr	r2, [pc, #124]	@ (8008930 <TIM_Base_SetConfig+0xd4>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d003      	beq.n	80088be <TIM_Base_SetConfig+0x62>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a1e      	ldr	r2, [pc, #120]	@ (8008934 <TIM_Base_SetConfig+0xd8>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d108      	bne.n	80088d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689a      	ldr	r2, [r3, #8]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a0d      	ldr	r2, [pc, #52]	@ (800892c <TIM_Base_SetConfig+0xd0>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d103      	bne.n	8008904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	f023 0201 	bic.w	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	611a      	str	r2, [r3, #16]
  }
}
 8008922:	bf00      	nop
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	bc80      	pop	{r7}
 800892a:	4770      	bx	lr
 800892c:	40012c00 	.word	0x40012c00
 8008930:	40000400 	.word	0x40000400
 8008934:	40000800 	.word	0x40000800

08008938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a1b      	ldr	r3, [r3, #32]
 8008948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	f023 0201 	bic.w	r2, r3, #1
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	4313      	orrs	r3, r2
 800896c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f023 030a 	bic.w	r3, r3, #10
 8008974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4313      	orrs	r3, r2
 800897c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	621a      	str	r2, [r3, #32]
}
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	bc80      	pop	{r7}
 8008992:	4770      	bx	lr

08008994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f023 0210 	bic.w	r2, r3, #16
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	031b      	lsls	r3, r3, #12
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	011b      	lsls	r3, r3, #4
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	4313      	orrs	r3, r2
 80089da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	621a      	str	r2, [r3, #32]
}
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr

080089f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	f043 0307 	orr.w	r3, r3, #7
 8008a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	609a      	str	r2, [r3, #8]
}
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr

08008a26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b087      	sub	sp, #28
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	607a      	str	r2, [r7, #4]
 8008a32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	021a      	lsls	r2, r3, #8
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	609a      	str	r2, [r3, #8]
}
 8008a5a:	bf00      	nop
 8008a5c:	371c      	adds	r7, #28
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bc80      	pop	{r7}
 8008a62:	4770      	bx	lr

08008a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e046      	b.n	8008b0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a16      	ldr	r2, [pc, #88]	@ (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00e      	beq.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ac8:	d009      	beq.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a12      	ldr	r2, [pc, #72]	@ (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d004      	beq.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a10      	ldr	r2, [pc, #64]	@ (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d10c      	bne.n	8008af8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bc80      	pop	{r7}
 8008b12:	4770      	bx	lr
 8008b14:	40012c00 	.word	0x40012c00
 8008b18:	40000400 	.word	0x40000400
 8008b1c:	40000800 	.word	0x40000800

08008b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr

08008b32 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bc80      	pop	{r7}
 8008b42:	4770      	bx	lr

08008b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e042      	b.n	8008bdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7fc f9dc 	bl	8004f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2224      	movs	r2, #36	@ 0x24
 8008b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 ff79 	bl	8009a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	691a      	ldr	r2, [r3, #16]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	695a      	ldr	r2, [r3, #20]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	@ 0x28
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	603b      	str	r3, [r7, #0]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b20      	cmp	r3, #32
 8008c02:	d175      	bne.n	8008cf0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <HAL_UART_Transmit+0x2c>
 8008c0a:	88fb      	ldrh	r3, [r7, #6]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e06e      	b.n	8008cf2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2221      	movs	r2, #33	@ 0x21
 8008c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c22:	f7fc faf1 	bl	8005208 <HAL_GetTick>
 8008c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	88fa      	ldrh	r2, [r7, #6]
 8008c2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	88fa      	ldrh	r2, [r7, #6]
 8008c32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c3c:	d108      	bne.n	8008c50 <HAL_UART_Transmit+0x6c>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d104      	bne.n	8008c50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	61bb      	str	r3, [r7, #24]
 8008c4e:	e003      	b.n	8008c58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c58:	e02e      	b.n	8008cb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	2180      	movs	r1, #128	@ 0x80
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fc55 	bl	8009514 <UART_WaitOnFlagUntilTimeout>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e03a      	b.n	8008cf2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10b      	bne.n	8008c9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	3302      	adds	r3, #2
 8008c96:	61bb      	str	r3, [r7, #24]
 8008c98:	e007      	b.n	8008caa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	781a      	ldrb	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1cb      	bne.n	8008c5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2140      	movs	r1, #64	@ 0x40
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fc21 	bl	8009514 <UART_WaitOnFlagUntilTimeout>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e006      	b.n	8008cf2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	e000      	b.n	8008cf2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008cf0:	2302      	movs	r3, #2
  }
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3720      	adds	r7, #32
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b08c      	sub	sp, #48	@ 0x30
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	4613      	mov	r3, r2
 8008d06:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b20      	cmp	r3, #32
 8008d12:	d146      	bne.n	8008da2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d002      	beq.n	8008d20 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e03f      	b.n	8008da4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008d30:	88fb      	ldrh	r3, [r7, #6]
 8008d32:	461a      	mov	r2, r3
 8008d34:	68b9      	ldr	r1, [r7, #8]
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fc46 	bl	80095c8 <UART_Start_Receive_DMA>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d125      	bne.n	8008d96 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	613b      	str	r3, [r7, #16]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	613b      	str	r3, [r7, #16]
 8008d5e:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	330c      	adds	r3, #12
 8008d66:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	e853 3f00 	ldrex	r3, [r3]
 8008d6e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f043 0310 	orr.w	r3, r3, #16
 8008d76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	330c      	adds	r3, #12
 8008d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d80:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d82:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d84:	6a39      	ldr	r1, [r7, #32]
 8008d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d88:	e841 2300 	strex	r3, r2, [r1]
 8008d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e5      	bne.n	8008d60 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8008d94:	e002      	b.n	8008d9c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8008d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008da0:	e000      	b.n	8008da4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8008da2:	2302      	movs	r3, #2
  }
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3730      	adds	r7, #48	@ 0x30
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b0ba      	sub	sp, #232	@ 0xe8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10f      	bne.n	8008e12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <HAL_UART_IRQHandler+0x66>
 8008dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e02:	f003 0320 	and.w	r3, r3, #32
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fd7a 	bl	8009904 <UART_Receive_IT>
      return;
 8008e10:	e25b      	b.n	80092ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 80de 	beq.w	8008fd8 <HAL_UART_IRQHandler+0x22c>
 8008e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d106      	bne.n	8008e36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80d1 	beq.w	8008fd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <HAL_UART_IRQHandler+0xae>
 8008e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d005      	beq.n	8008e5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e52:	f043 0201 	orr.w	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e5e:	f003 0304 	and.w	r3, r3, #4
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00b      	beq.n	8008e7e <HAL_UART_IRQHandler+0xd2>
 8008e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d005      	beq.n	8008e7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e76:	f043 0202 	orr.w	r2, r3, #2
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00b      	beq.n	8008ea2 <HAL_UART_IRQHandler+0xf6>
 8008e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d005      	beq.n	8008ea2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9a:	f043 0204 	orr.w	r2, r3, #4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d011      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x126>
 8008eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eb2:	f003 0320 	and.w	r3, r3, #32
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d105      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eca:	f043 0208 	orr.w	r2, r3, #8
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 81f2 	beq.w	80092c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee0:	f003 0320 	and.w	r3, r3, #32
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d008      	beq.n	8008efa <HAL_UART_IRQHandler+0x14e>
 8008ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eec:	f003 0320 	and.w	r3, r3, #32
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fd05 	bl	8009904 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bf14      	ite	ne
 8008f08:	2301      	movne	r3, #1
 8008f0a:	2300      	moveq	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f16:	f003 0308 	and.w	r3, r3, #8
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d103      	bne.n	8008f26 <HAL_UART_IRQHandler+0x17a>
 8008f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d04f      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fc0f 	bl	800974a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d041      	beq.n	8008fbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3314      	adds	r3, #20
 8008f40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3314      	adds	r3, #20
 8008f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f76:	e841 2300 	strex	r3, r2, [r1]
 8008f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1d9      	bne.n	8008f3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d013      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f92:	4a7e      	ldr	r2, [pc, #504]	@ (800918c <HAL_UART_IRQHandler+0x3e0>)
 8008f94:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fd fa56 	bl	800644c <HAL_DMA_Abort_IT>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d016      	beq.n	8008fd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb4:	e00e      	b.n	8008fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f9a5 	bl	8009306 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fbc:	e00a      	b.n	8008fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9a1 	bl	8009306 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc4:	e006      	b.n	8008fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f99d 	bl	8009306 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008fd2:	e175      	b.n	80092c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd4:	bf00      	nop
    return;
 8008fd6:	e173      	b.n	80092c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	f040 814f 	bne.w	8009280 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe6:	f003 0310 	and.w	r3, r3, #16
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 8148 	beq.w	8009280 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 8141 	beq.w	8009280 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ffe:	2300      	movs	r3, #0
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60bb      	str	r3, [r7, #8]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	60bb      	str	r3, [r7, #8]
 8009012:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 80b6 	beq.w	8009190 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 8145 	beq.w	80092c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800903e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009042:	429a      	cmp	r2, r3
 8009044:	f080 813e 	bcs.w	80092c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800904e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	2b20      	cmp	r3, #32
 8009058:	f000 8088 	beq.w	800916c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	330c      	adds	r3, #12
 8009062:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009072:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009076:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800907a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	330c      	adds	r3, #12
 8009084:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009088:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800908c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009094:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1d9      	bne.n	800905c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3314      	adds	r3, #20
 80090ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090ba:	f023 0301 	bic.w	r3, r3, #1
 80090be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3314      	adds	r3, #20
 80090c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090cc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80090d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e1      	bne.n	80090a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3314      	adds	r3, #20
 80090ea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3314      	adds	r3, #20
 8009104:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009108:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800910a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800910e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009110:	e841 2300 	strex	r3, r2, [r1]
 8009114:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e3      	bne.n	80090e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2220      	movs	r2, #32
 8009120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	330c      	adds	r3, #12
 8009130:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800913a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800913c:	f023 0310 	bic.w	r3, r3, #16
 8009140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	330c      	adds	r3, #12
 800914a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800914e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009150:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009154:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800915c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e3      	bne.n	800912a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009166:	4618      	mov	r0, r3
 8009168:	f7fd f934 	bl	80063d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2202      	movs	r2, #2
 8009170:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800917a:	b29b      	uxth	r3, r3
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	b29b      	uxth	r3, r3
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7f8 fe46 	bl	8001e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009188:	e09c      	b.n	80092c4 <HAL_UART_IRQHandler+0x518>
 800918a:	bf00      	nop
 800918c:	0800980f 	.word	0x0800980f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009198:	b29b      	uxth	r3, r3
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 808e 	beq.w	80092c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80091ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 8089 	beq.w	80092c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	330c      	adds	r3, #12
 80091bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	330c      	adds	r3, #12
 80091d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80091da:	647a      	str	r2, [r7, #68]	@ 0x44
 80091dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e3      	bne.n	80091b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3314      	adds	r3, #20
 80091f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	623b      	str	r3, [r7, #32]
   return(result);
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3314      	adds	r3, #20
 800920e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009212:	633a      	str	r2, [r7, #48]	@ 0x30
 8009214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e3      	bne.n	80091ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2220      	movs	r2, #32
 800922a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	330c      	adds	r3, #12
 800923a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	60fb      	str	r3, [r7, #12]
   return(result);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f023 0310 	bic.w	r3, r3, #16
 800924a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	330c      	adds	r3, #12
 8009254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009258:	61fa      	str	r2, [r7, #28]
 800925a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	69b9      	ldr	r1, [r7, #24]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	617b      	str	r3, [r7, #20]
   return(result);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e3      	bne.n	8009234 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009272:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7f8 fdcb 	bl	8001e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800927e:	e023      	b.n	80092c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009288:	2b00      	cmp	r3, #0
 800928a:	d009      	beq.n	80092a0 <HAL_UART_IRQHandler+0x4f4>
 800928c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 facc 	bl	8009836 <UART_Transmit_IT>
    return;
 800929e:	e014      	b.n	80092ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00e      	beq.n	80092ca <HAL_UART_IRQHandler+0x51e>
 80092ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d008      	beq.n	80092ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fb0b 	bl	80098d4 <UART_EndTransmit_IT>
    return;
 80092be:	e004      	b.n	80092ca <HAL_UART_IRQHandler+0x51e>
    return;
 80092c0:	bf00      	nop
 80092c2:	e002      	b.n	80092ca <HAL_UART_IRQHandler+0x51e>
      return;
 80092c4:	bf00      	nop
 80092c6:	e000      	b.n	80092ca <HAL_UART_IRQHandler+0x51e>
      return;
 80092c8:	bf00      	nop
  }
}
 80092ca:	37e8      	adds	r7, #232	@ 0xe8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	bc80      	pop	{r7}
 80092e0:	4770      	bx	lr

080092e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80092ea:	bf00      	nop
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bc80      	pop	{r7}
 80092f2:	4770      	bx	lr

080092f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	bc80      	pop	{r7}
 8009304:	4770      	bx	lr

08009306 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	bc80      	pop	{r7}
 8009316:	4770      	bx	lr

08009318 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b09c      	sub	sp, #112	@ 0x70
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009324:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b00      	cmp	r3, #0
 8009332:	d172      	bne.n	800941a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009336:	2200      	movs	r2, #0
 8009338:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800933a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	330c      	adds	r3, #12
 8009340:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800934a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800934c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009350:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	330c      	adds	r3, #12
 8009358:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800935a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800935c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009360:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e5      	bne.n	800933a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3314      	adds	r3, #20
 8009374:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800937e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	667b      	str	r3, [r7, #100]	@ 0x64
 8009386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3314      	adds	r3, #20
 800938c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800938e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009390:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800939c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e5      	bne.n	800936e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3314      	adds	r3, #20
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	623b      	str	r3, [r7, #32]
   return(result);
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80093ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3314      	adds	r3, #20
 80093c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80093c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80093c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e5      	bne.n	80093a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093d8:	2220      	movs	r2, #32
 80093da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d119      	bne.n	800941a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	330c      	adds	r3, #12
 80093ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f023 0310 	bic.w	r3, r3, #16
 80093fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	330c      	adds	r3, #12
 8009404:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009406:	61fa      	str	r2, [r7, #28]
 8009408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	69b9      	ldr	r1, [r7, #24]
 800940c:	69fa      	ldr	r2, [r7, #28]
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	617b      	str	r3, [r7, #20]
   return(result);
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e5      	bne.n	80093e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800941a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800941c:	2200      	movs	r2, #0
 800941e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009424:	2b01      	cmp	r3, #1
 8009426:	d106      	bne.n	8009436 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800942a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800942c:	4619      	mov	r1, r3
 800942e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009430:	f7f8 fcf0 	bl	8001e14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009434:	e002      	b.n	800943c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009436:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009438:	f7ff ff53 	bl	80092e2 <HAL_UART_RxCpltCallback>
}
 800943c:	bf00      	nop
 800943e:	3770      	adds	r7, #112	@ 0x70
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009450:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2201      	movs	r2, #1
 8009456:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945c:	2b01      	cmp	r3, #1
 800945e:	d108      	bne.n	8009472 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009464:	085b      	lsrs	r3, r3, #1
 8009466:	b29b      	uxth	r3, r3
 8009468:	4619      	mov	r1, r3
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f7f8 fcd2 	bl	8001e14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009470:	e002      	b.n	8009478 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f7ff ff3e 	bl	80092f4 <HAL_UART_RxHalfCpltCallback>
}
 8009478:	bf00      	nop
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009490:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf14      	ite	ne
 80094a0:	2301      	movne	r3, #1
 80094a2:	2300      	moveq	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b21      	cmp	r3, #33	@ 0x21
 80094b2:	d108      	bne.n	80094c6 <UART_DMAError+0x46>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d005      	beq.n	80094c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2200      	movs	r2, #0
 80094be:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80094c0:	68b8      	ldr	r0, [r7, #8]
 80094c2:	f000 f91b 	bl	80096fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	bf14      	ite	ne
 80094d4:	2301      	movne	r3, #1
 80094d6:	2300      	moveq	r3, #0
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b22      	cmp	r3, #34	@ 0x22
 80094e6:	d108      	bne.n	80094fa <UART_DMAError+0x7a>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d005      	beq.n	80094fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2200      	movs	r2, #0
 80094f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80094f4:	68b8      	ldr	r0, [r7, #8]
 80094f6:	f000 f928 	bl	800974a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094fe:	f043 0210 	orr.w	r2, r3, #16
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009506:	68b8      	ldr	r0, [r7, #8]
 8009508:	f7ff fefd 	bl	8009306 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800950c:	bf00      	nop
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	603b      	str	r3, [r7, #0]
 8009520:	4613      	mov	r3, r2
 8009522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009524:	e03b      	b.n	800959e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952c:	d037      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800952e:	f7fb fe6b 	bl	8005208 <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	6a3a      	ldr	r2, [r7, #32]
 800953a:	429a      	cmp	r2, r3
 800953c:	d302      	bcc.n	8009544 <UART_WaitOnFlagUntilTimeout+0x30>
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e03a      	b.n	80095be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f003 0304 	and.w	r3, r3, #4
 8009552:	2b00      	cmp	r3, #0
 8009554:	d023      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b80      	cmp	r3, #128	@ 0x80
 800955a:	d020      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0x8a>
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2b40      	cmp	r3, #64	@ 0x40
 8009560:	d01d      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	2b08      	cmp	r3, #8
 800956e:	d116      	bne.n	800959e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009570:	2300      	movs	r3, #0
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 f8df 	bl	800974a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2208      	movs	r2, #8
 8009590:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e00f      	b.n	80095be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	4013      	ands	r3, r2
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	bf0c      	ite	eq
 80095ae:	2301      	moveq	r3, #1
 80095b0:	2300      	movne	r3, #0
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	461a      	mov	r2, r3
 80095b6:	79fb      	ldrb	r3, [r7, #7]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d0b4      	beq.n	8009526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b098      	sub	sp, #96	@ 0x60
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	4613      	mov	r3, r2
 80095d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2222      	movs	r2, #34	@ 0x22
 80095ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f4:	4a3e      	ldr	r2, [pc, #248]	@ (80096f0 <UART_Start_Receive_DMA+0x128>)
 80095f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095fc:	4a3d      	ldr	r2, [pc, #244]	@ (80096f4 <UART_Start_Receive_DMA+0x12c>)
 80095fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009604:	4a3c      	ldr	r2, [pc, #240]	@ (80096f8 <UART_Start_Receive_DMA+0x130>)
 8009606:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800960c:	2200      	movs	r2, #0
 800960e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009610:	f107 0308 	add.w	r3, r7, #8
 8009614:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	88fb      	ldrh	r3, [r7, #6]
 8009628:	f7fc fe74 	bl	8006314 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800962c:	2300      	movs	r3, #0
 800962e:	613b      	str	r3, [r7, #16]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d019      	beq.n	800967e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	330c      	adds	r3, #12
 8009650:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009654:	e853 3f00 	ldrex	r3, [r3]
 8009658:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800965a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800965c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009660:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	330c      	adds	r3, #12
 8009668:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800966a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800966c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009672:	e841 2300 	strex	r3, r2, [r1]
 8009676:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1e5      	bne.n	800964a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3314      	adds	r3, #20
 8009684:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800968e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009690:	f043 0301 	orr.w	r3, r3, #1
 8009694:	657b      	str	r3, [r7, #84]	@ 0x54
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3314      	adds	r3, #20
 800969c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800969e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80096a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80096a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e5      	bne.n	800967e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3314      	adds	r3, #20
 80096b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	617b      	str	r3, [r7, #20]
   return(result);
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3314      	adds	r3, #20
 80096d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80096d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80096d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d6:	6a39      	ldr	r1, [r7, #32]
 80096d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	61fb      	str	r3, [r7, #28]
   return(result);
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1e5      	bne.n	80096b2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3760      	adds	r7, #96	@ 0x60
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	08009319 	.word	0x08009319
 80096f4:	08009445 	.word	0x08009445
 80096f8:	08009481 	.word	0x08009481

080096fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b089      	sub	sp, #36	@ 0x24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	330c      	adds	r3, #12
 800970a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	e853 3f00 	ldrex	r3, [r3]
 8009712:	60bb      	str	r3, [r7, #8]
   return(result);
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800971a:	61fb      	str	r3, [r7, #28]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	330c      	adds	r3, #12
 8009722:	69fa      	ldr	r2, [r7, #28]
 8009724:	61ba      	str	r2, [r7, #24]
 8009726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	6979      	ldr	r1, [r7, #20]
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	613b      	str	r3, [r7, #16]
   return(result);
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e5      	bne.n	8009704 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2220      	movs	r2, #32
 800973c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009740:	bf00      	nop
 8009742:	3724      	adds	r7, #36	@ 0x24
 8009744:	46bd      	mov	sp, r7
 8009746:	bc80      	pop	{r7}
 8009748:	4770      	bx	lr

0800974a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800974a:	b480      	push	{r7}
 800974c:	b095      	sub	sp, #84	@ 0x54
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	330c      	adds	r3, #12
 8009758:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	330c      	adds	r3, #12
 8009770:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009772:	643a      	str	r2, [r7, #64]	@ 0x40
 8009774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009776:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009778:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e5      	bne.n	8009752 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3314      	adds	r3, #20
 800978c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	61fb      	str	r3, [r7, #28]
   return(result);
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	f023 0301 	bic.w	r3, r3, #1
 800979c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3314      	adds	r3, #20
 80097a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097ae:	e841 2300 	strex	r3, r2, [r1]
 80097b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1e5      	bne.n	8009786 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d119      	bne.n	80097f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	330c      	adds	r3, #12
 80097c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f023 0310 	bic.w	r3, r3, #16
 80097d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	330c      	adds	r3, #12
 80097e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097e2:	61ba      	str	r2, [r7, #24]
 80097e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e6:	6979      	ldr	r1, [r7, #20]
 80097e8:	69ba      	ldr	r2, [r7, #24]
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	613b      	str	r3, [r7, #16]
   return(result);
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e5      	bne.n	80097c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009804:	bf00      	nop
 8009806:	3754      	adds	r7, #84	@ 0x54
 8009808:	46bd      	mov	sp, r7
 800980a:	bc80      	pop	{r7}
 800980c:	4770      	bx	lr

0800980e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800981a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f7ff fd6c 	bl	8009306 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b21      	cmp	r3, #33	@ 0x21
 8009848:	d13e      	bne.n	80098c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009852:	d114      	bne.n	800987e <UART_Transmit_IT+0x48>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d110      	bne.n	800987e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009870:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	1c9a      	adds	r2, r3, #2
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	621a      	str	r2, [r3, #32]
 800987c:	e008      	b.n	8009890 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	1c59      	adds	r1, r3, #1
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	6211      	str	r1, [r2, #32]
 8009888:	781a      	ldrb	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009894:	b29b      	uxth	r3, r3
 8009896:	3b01      	subs	r3, #1
 8009898:	b29b      	uxth	r3, r3
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	4619      	mov	r1, r3
 800989e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10f      	bne.n	80098c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68da      	ldr	r2, [r3, #12]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80098b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68da      	ldr	r2, [r3, #12]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	e000      	b.n	80098ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80098c8:	2302      	movs	r3, #2
  }
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bc80      	pop	{r7}
 80098d2:	4770      	bx	lr

080098d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2220      	movs	r2, #32
 80098f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff fceb 	bl	80092d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08c      	sub	sp, #48	@ 0x30
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b22      	cmp	r3, #34	@ 0x22
 8009916:	f040 80ae 	bne.w	8009a76 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009922:	d117      	bne.n	8009954 <UART_Receive_IT+0x50>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d113      	bne.n	8009954 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800992c:	2300      	movs	r3, #0
 800992e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009934:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	b29b      	uxth	r3, r3
 800993e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009942:	b29a      	uxth	r2, r3
 8009944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009946:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994c:	1c9a      	adds	r2, r3, #2
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	629a      	str	r2, [r3, #40]	@ 0x28
 8009952:	e026      	b.n	80099a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009958:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009966:	d007      	beq.n	8009978 <UART_Receive_IT+0x74>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <UART_Receive_IT+0x82>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d106      	bne.n	8009986 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	b2da      	uxtb	r2, r3
 8009980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009982:	701a      	strb	r2, [r3, #0]
 8009984:	e008      	b.n	8009998 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009992:	b2da      	uxtb	r2, r3
 8009994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009996:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	4619      	mov	r1, r3
 80099b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d15d      	bne.n	8009a72 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68da      	ldr	r2, [r3, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f022 0220 	bic.w	r2, r2, #32
 80099c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68da      	ldr	r2, [r3, #12]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80099d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	695a      	ldr	r2, [r3, #20]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f022 0201 	bic.w	r2, r2, #1
 80099e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2220      	movs	r2, #32
 80099ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d135      	bne.n	8009a68 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	330c      	adds	r3, #12
 8009a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	613b      	str	r3, [r7, #16]
   return(result);
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f023 0310 	bic.w	r3, r3, #16
 8009a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	330c      	adds	r3, #12
 8009a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a22:	623a      	str	r2, [r7, #32]
 8009a24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	69f9      	ldr	r1, [r7, #28]
 8009a28:	6a3a      	ldr	r2, [r7, #32]
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e5      	bne.n	8009a02 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0310 	and.w	r3, r3, #16
 8009a40:	2b10      	cmp	r3, #16
 8009a42:	d10a      	bne.n	8009a5a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a44:	2300      	movs	r3, #0
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7f8 f9d7 	bl	8001e14 <HAL_UARTEx_RxEventCallback>
 8009a66:	e002      	b.n	8009a6e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff fc3a 	bl	80092e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e002      	b.n	8009a78 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	e000      	b.n	8009a78 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009a76:	2302      	movs	r3, #2
  }
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3730      	adds	r7, #48	@ 0x30
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009aba:	f023 030c 	bic.w	r3, r3, #12
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	6812      	ldr	r2, [r2, #0]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699a      	ldr	r2, [r3, #24]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8009b94 <UART_SetConfig+0x114>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d103      	bne.n	8009af0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009ae8:	f7fd fe74 	bl	80077d4 <HAL_RCC_GetPCLK2Freq>
 8009aec:	60f8      	str	r0, [r7, #12]
 8009aee:	e002      	b.n	8009af6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009af0:	f7fd fe5c 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 8009af4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	009a      	lsls	r2, r3, #2
 8009b00:	441a      	add	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0c:	4a22      	ldr	r2, [pc, #136]	@ (8009b98 <UART_SetConfig+0x118>)
 8009b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b12:	095b      	lsrs	r3, r3, #5
 8009b14:	0119      	lsls	r1, r3, #4
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	009a      	lsls	r2, r3, #2
 8009b20:	441a      	add	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009b98 <UART_SetConfig+0x118>)
 8009b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8009b32:	095b      	lsrs	r3, r3, #5
 8009b34:	2064      	movs	r0, #100	@ 0x64
 8009b36:	fb00 f303 	mul.w	r3, r0, r3
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	011b      	lsls	r3, r3, #4
 8009b3e:	3332      	adds	r3, #50	@ 0x32
 8009b40:	4a15      	ldr	r2, [pc, #84]	@ (8009b98 <UART_SetConfig+0x118>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	095b      	lsrs	r3, r3, #5
 8009b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b4c:	4419      	add	r1, r3
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	4613      	mov	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	009a      	lsls	r2, r3, #2
 8009b58:	441a      	add	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b64:	4b0c      	ldr	r3, [pc, #48]	@ (8009b98 <UART_SetConfig+0x118>)
 8009b66:	fba3 0302 	umull	r0, r3, r3, r2
 8009b6a:	095b      	lsrs	r3, r3, #5
 8009b6c:	2064      	movs	r0, #100	@ 0x64
 8009b6e:	fb00 f303 	mul.w	r3, r0, r3
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	3332      	adds	r3, #50	@ 0x32
 8009b78:	4a07      	ldr	r2, [pc, #28]	@ (8009b98 <UART_SetConfig+0x118>)
 8009b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	f003 020f 	and.w	r2, r3, #15
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	440a      	add	r2, r1
 8009b8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009b8c:	bf00      	nop
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	40013800 	.word	0x40013800
 8009b98:	51eb851f 	.word	0x51eb851f

08009b9c <memset>:
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	4402      	add	r2, r0
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d100      	bne.n	8009ba6 <memset+0xa>
 8009ba4:	4770      	bx	lr
 8009ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8009baa:	e7f9      	b.n	8009ba0 <memset+0x4>

08009bac <strcat>:
 8009bac:	4602      	mov	r2, r0
 8009bae:	b510      	push	{r4, lr}
 8009bb0:	7814      	ldrb	r4, [r2, #0]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	3201      	adds	r2, #1
 8009bb6:	2c00      	cmp	r4, #0
 8009bb8:	d1fa      	bne.n	8009bb0 <strcat+0x4>
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bc4:	2a00      	cmp	r2, #0
 8009bc6:	d1f9      	bne.n	8009bbc <strcat+0x10>
 8009bc8:	bd10      	pop	{r4, pc}
	...

08009bcc <__libc_init_array>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	2600      	movs	r6, #0
 8009bd0:	4d0c      	ldr	r5, [pc, #48]	@ (8009c04 <__libc_init_array+0x38>)
 8009bd2:	4c0d      	ldr	r4, [pc, #52]	@ (8009c08 <__libc_init_array+0x3c>)
 8009bd4:	1b64      	subs	r4, r4, r5
 8009bd6:	10a4      	asrs	r4, r4, #2
 8009bd8:	42a6      	cmp	r6, r4
 8009bda:	d109      	bne.n	8009bf0 <__libc_init_array+0x24>
 8009bdc:	f000 f822 	bl	8009c24 <_init>
 8009be0:	2600      	movs	r6, #0
 8009be2:	4d0a      	ldr	r5, [pc, #40]	@ (8009c0c <__libc_init_array+0x40>)
 8009be4:	4c0a      	ldr	r4, [pc, #40]	@ (8009c10 <__libc_init_array+0x44>)
 8009be6:	1b64      	subs	r4, r4, r5
 8009be8:	10a4      	asrs	r4, r4, #2
 8009bea:	42a6      	cmp	r6, r4
 8009bec:	d105      	bne.n	8009bfa <__libc_init_array+0x2e>
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf4:	4798      	blx	r3
 8009bf6:	3601      	adds	r6, #1
 8009bf8:	e7ee      	b.n	8009bd8 <__libc_init_array+0xc>
 8009bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfe:	4798      	blx	r3
 8009c00:	3601      	adds	r6, #1
 8009c02:	e7f2      	b.n	8009bea <__libc_init_array+0x1e>
 8009c04:	08009cf4 	.word	0x08009cf4
 8009c08:	08009cf4 	.word	0x08009cf4
 8009c0c:	08009cf4 	.word	0x08009cf4
 8009c10:	08009cf8 	.word	0x08009cf8

08009c14 <strcpy>:
 8009c14:	4603      	mov	r3, r0
 8009c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c1a:	f803 2b01 	strb.w	r2, [r3], #1
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	d1f9      	bne.n	8009c16 <strcpy+0x2>
 8009c22:	4770      	bx	lr

08009c24 <_init>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	bf00      	nop
 8009c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c2a:	bc08      	pop	{r3}
 8009c2c:	469e      	mov	lr, r3
 8009c2e:	4770      	bx	lr

08009c30 <_fini>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	bf00      	nop
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr
