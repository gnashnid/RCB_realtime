
RCB_realtime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009a08  08009a08  0000aa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab8  08009ab8  0000b044  2**0
                  CONTENTS
  4 .ARM          00000008  08009ab8  08009ab8  0000aab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ac0  08009ac0  0000b044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ac0  08009ac0  0000aac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ac4  08009ac4  0000aac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08009ac8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  20000048  08009b0c  0000b048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  08009b0c  0000b7f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149dc  00000000  00000000  0000b06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e0  00000000  00000000  0001fa49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00022f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100c  00000000  00000000  000243b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019728  00000000  00000000  000253c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172b2  00000000  00000000  0003eaec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093878  00000000  00000000  00055d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b0  00000000  00000000  000e965c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000eed0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	080099f0 	.word	0x080099f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	080099f0 	.word	0x080099f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000164:	4b22      	ldr	r3, [pc, #136]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000166:	68db      	ldr	r3, [r3, #12]
 8000168:	4798      	blx	r3
   WIZCHIP.CS._select();
 800016a:	4b21      	ldr	r3, [pc, #132]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800016c:	695b      	ldr	r3, [r3, #20]
 800016e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000170:	4b1f      	ldr	r3, [pc, #124]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000174:	2b00      	cmp	r3, #0
 8000176:	d003      	beq.n	8000180 <WIZCHIP_READ+0x24>
 8000178:	4b1d      	ldr	r3, [pc, #116]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800017a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800017c:	2b00      	cmp	r3, #0
 800017e:	d114      	bne.n	80001aa <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000180:	4b1b      	ldr	r3, [pc, #108]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000182:	6a1b      	ldr	r3, [r3, #32]
 8000184:	687a      	ldr	r2, [r7, #4]
 8000186:	0c12      	lsrs	r2, r2, #16
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	4610      	mov	r0, r2
 800018c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800018e:	4b18      	ldr	r3, [pc, #96]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000190:	6a1b      	ldr	r3, [r3, #32]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	0a12      	lsrs	r2, r2, #8
 8000196:	b2d2      	uxtb	r2, r2
 8000198:	4610      	mov	r0, r2
 800019a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800019c:	4b14      	ldr	r3, [pc, #80]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800019e:	6a1b      	ldr	r3, [r3, #32]
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	b2d2      	uxtb	r2, r2
 80001a4:	4610      	mov	r0, r2
 80001a6:	4798      	blx	r3
 80001a8:	e011      	b.n	80001ce <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
	   	   spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	0c1b      	lsrs	r3, r3, #16
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	0a1b      	lsrs	r3, r3, #8
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80001c0:	4b0b      	ldr	r3, [pc, #44]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80001c4:	f107 020c 	add.w	r2, r7, #12
 80001c8:	2103      	movs	r1, #3
 80001ca:	4610      	mov	r0, r2
 80001cc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80001ce:	4b08      	ldr	r3, [pc, #32]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001d0:	69db      	ldr	r3, [r3, #28]
 80001d2:	4798      	blx	r3
 80001d4:	4603      	mov	r3, r0
 80001d6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80001de:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	4798      	blx	r3
   return ret;
 80001e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000004 	.word	0x20000004

080001f4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	460b      	mov	r3, r1
 80001fe:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000200:	4b22      	ldr	r3, [pc, #136]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000206:	4b21      	ldr	r3, [pc, #132]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000214:	4b1d      	ldr	r3, [pc, #116]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000218:	2b00      	cmp	r3, #0
 800021a:	d119      	bne.n	8000250 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800021c:	4b1b      	ldr	r3, [pc, #108]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	0c12      	lsrs	r2, r2, #16
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800022a:	4b18      	ldr	r3, [pc, #96]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800022c:	6a1b      	ldr	r3, [r3, #32]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	0a12      	lsrs	r2, r2, #8
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	4610      	mov	r0, r2
 8000236:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000238:	4b14      	ldr	r3, [pc, #80]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	4610      	mov	r0, r2
 8000242:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000244:	4b11      	ldr	r3, [pc, #68]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	78fa      	ldrb	r2, [r7, #3]
 800024a:	4610      	mov	r0, r2
 800024c:	4798      	blx	r3
 800024e:	e013      	b.n	8000278 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	0c1b      	lsrs	r3, r3, #16
 8000254:	b2db      	uxtb	r3, r3
 8000256:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	0a1b      	lsrs	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000266:	78fb      	ldrb	r3, [r7, #3]
 8000268:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800026a:	4b08      	ldr	r3, [pc, #32]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800026c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800026e:	f107 020c 	add.w	r2, r7, #12
 8000272:	2104      	movs	r1, #4
 8000274:	4610      	mov	r0, r2
 8000276:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000278:	4b04      	ldr	r3, [pc, #16]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	4798      	blx	r3
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000004 	.word	0x20000004

08000290 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800029e:	4b2b      	ldr	r3, [pc, #172]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80002a4:	4b29      	ldr	r3, [pc, #164]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80002aa:	4b28      	ldr	r3, [pc, #160]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d003      	beq.n	80002ba <WIZCHIP_READ_BUF+0x2a>
 80002b2:	4b26      	ldr	r3, [pc, #152]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d126      	bne.n	8000308 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80002ba:	4b24      	ldr	r3, [pc, #144]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002bc:	6a1b      	ldr	r3, [r3, #32]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	0c12      	lsrs	r2, r2, #16
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	4610      	mov	r0, r2
 80002c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80002c8:	4b20      	ldr	r3, [pc, #128]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	0a12      	lsrs	r2, r2, #8
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	4610      	mov	r0, r2
 80002d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80002d6:	4b1d      	ldr	r3, [pc, #116]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002d8:	6a1b      	ldr	r3, [r3, #32]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80002e2:	2300      	movs	r3, #0
 80002e4:	82fb      	strh	r3, [r7, #22]
 80002e6:	e00a      	b.n	80002fe <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	8afa      	ldrh	r2, [r7, #22]
 80002ee:	68b9      	ldr	r1, [r7, #8]
 80002f0:	188c      	adds	r4, r1, r2
 80002f2:	4798      	blx	r3
 80002f4:	4603      	mov	r3, r0
 80002f6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80002f8:	8afb      	ldrh	r3, [r7, #22]
 80002fa:	3301      	adds	r3, #1
 80002fc:	82fb      	strh	r3, [r7, #22]
 80002fe:	8afa      	ldrh	r2, [r7, #22]
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	429a      	cmp	r2, r3
 8000304:	d3f0      	bcc.n	80002e8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000306:	e017      	b.n	8000338 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	b2db      	uxtb	r3, r3
 800030e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	0a1b      	lsrs	r3, r3, #8
 8000314:	b2db      	uxtb	r3, r3
 8000316:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800031e:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 8000320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000322:	f107 0210 	add.w	r2, r7, #16
 8000326:	2103      	movs	r1, #3
 8000328:	4610      	mov	r0, r2
 800032a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 800032e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000330:	88fa      	ldrh	r2, [r7, #6]
 8000332:	4611      	mov	r1, r2
 8000334:	68b8      	ldr	r0, [r7, #8]
 8000336:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000338:	4b04      	ldr	r3, [pc, #16]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800033e:	4b03      	ldr	r3, [pc, #12]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 8000340:	691b      	ldr	r3, [r3, #16]
 8000342:	4798      	blx	r3
}
 8000344:	bf00      	nop
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	bd90      	pop	{r4, r7, pc}
 800034c:	20000004 	.word	0x20000004

08000350 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	4613      	mov	r3, r2
 800035c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800035e:	4b2b      	ldr	r3, [pc, #172]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000364:	4b29      	ldr	r3, [pc, #164]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000376:	2b00      	cmp	r3, #0
 8000378:	d126      	bne.n	80003c8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800037a:	4b24      	ldr	r3, [pc, #144]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 800037c:	6a1b      	ldr	r3, [r3, #32]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	0c12      	lsrs	r2, r2, #16
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	4610      	mov	r0, r2
 8000386:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000388:	4b20      	ldr	r3, [pc, #128]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	68fa      	ldr	r2, [r7, #12]
 800038e:	0a12      	lsrs	r2, r2, #8
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	4610      	mov	r0, r2
 8000394:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000398:	6a1b      	ldr	r3, [r3, #32]
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	4610      	mov	r0, r2
 80003a0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	82fb      	strh	r3, [r7, #22]
 80003a6:	e00a      	b.n	80003be <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80003a8:	4b18      	ldr	r3, [pc, #96]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003aa:	6a1b      	ldr	r3, [r3, #32]
 80003ac:	8afa      	ldrh	r2, [r7, #22]
 80003ae:	68b9      	ldr	r1, [r7, #8]
 80003b0:	440a      	add	r2, r1
 80003b2:	7812      	ldrb	r2, [r2, #0]
 80003b4:	4610      	mov	r0, r2
 80003b6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	3301      	adds	r3, #1
 80003bc:	82fb      	strh	r3, [r7, #22]
 80003be:	8afa      	ldrh	r2, [r7, #22]
 80003c0:	88fb      	ldrh	r3, [r7, #6]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3f0      	bcc.n	80003a8 <WIZCHIP_WRITE_BUF+0x58>
 80003c6:	e017      	b.n	80003f8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	0a1b      	lsrs	r3, r3, #8
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003e2:	f107 0210 	add.w	r2, r7, #16
 80003e6:	2103      	movs	r1, #3
 80003e8:	4610      	mov	r0, r2
 80003ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80003ec:	4b07      	ldr	r3, [pc, #28]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003f0:	88fa      	ldrh	r2, [r7, #6]
 80003f2:	4611      	mov	r1, r2
 80003f4:	68b8      	ldr	r0, [r7, #8]
 80003f6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80003f8:	4b04      	ldr	r3, [pc, #16]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80003fe:	4b03      	ldr	r3, [pc, #12]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	4798      	blx	r3
}
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000004 	.word	0x20000004

08000410 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800041a:	2300      	movs	r3, #0
 800041c:	81fb      	strh	r3, [r7, #14]
 800041e:	2300      	movs	r3, #0
 8000420:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	3301      	adds	r3, #1
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fe94 	bl	800015c <WIZCHIP_READ>
 8000434:	4603      	mov	r3, r0
 8000436:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000438:	89bb      	ldrh	r3, [r7, #12]
 800043a:	021b      	lsls	r3, r3, #8
 800043c:	b29c      	uxth	r4, r3
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	3301      	adds	r3, #1
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fe86 	bl	800015c <WIZCHIP_READ>
 8000450:	4603      	mov	r3, r0
 8000452:	4423      	add	r3, r4
 8000454:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000456:	89bb      	ldrh	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d019      	beq.n	8000490 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	3301      	adds	r3, #1
 8000462:	00db      	lsls	r3, r3, #3
 8000464:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fe77 	bl	800015c <WIZCHIP_READ>
 800046e:	4603      	mov	r3, r0
 8000470:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000472:	89fb      	ldrh	r3, [r7, #14]
 8000474:	021b      	lsls	r3, r3, #8
 8000476:	b29c      	uxth	r4, r3
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	3301      	adds	r3, #1
 800047e:	00db      	lsls	r3, r3, #3
 8000480:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe69 	bl	800015c <WIZCHIP_READ>
 800048a:	4603      	mov	r3, r0
 800048c:	4423      	add	r3, r4
 800048e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000490:	89fa      	ldrh	r2, [r7, #14]
 8000492:	89bb      	ldrh	r3, [r7, #12]
 8000494:	429a      	cmp	r2, r3
 8000496:	d1c4      	bne.n	8000422 <getSn_TX_FSR+0x12>
   return val;
 8000498:	89fb      	ldrh	r3, [r7, #14]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd90      	pop	{r4, r7, pc}

080004a2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80004a2:	b590      	push	{r4, r7, lr}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	81fb      	strh	r3, [r7, #14]
 80004b0:	2300      	movs	r3, #0
 80004b2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	3301      	adds	r3, #1
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fe4b 	bl	800015c <WIZCHIP_READ>
 80004c6:	4603      	mov	r3, r0
 80004c8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80004ca:	89bb      	ldrh	r3, [r7, #12]
 80004cc:	021b      	lsls	r3, r3, #8
 80004ce:	b29c      	uxth	r4, r3
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	3301      	adds	r3, #1
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fe3d 	bl	800015c <WIZCHIP_READ>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4423      	add	r3, r4
 80004e6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80004e8:	89bb      	ldrh	r3, [r7, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d019      	beq.n	8000522 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	3301      	adds	r3, #1
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe2e 	bl	800015c <WIZCHIP_READ>
 8000500:	4603      	mov	r3, r0
 8000502:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	b29c      	uxth	r4, r3
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	3301      	adds	r3, #1
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe20 	bl	800015c <WIZCHIP_READ>
 800051c:	4603      	mov	r3, r0
 800051e:	4423      	add	r3, r4
 8000520:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000522:	89fa      	ldrh	r2, [r7, #14]
 8000524:	89bb      	ldrh	r3, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d1c4      	bne.n	80004b4 <getSn_RX_RSR+0x12>
   return val;
 800052a:	89fb      	ldrh	r3, [r7, #14]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bd90      	pop	{r4, r7, pc}

08000534 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d046      	beq.n	80005e0 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	3301      	adds	r3, #1
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fdfc 	bl	800015c <WIZCHIP_READ>
 8000564:	4603      	mov	r3, r0
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	b29c      	uxth	r4, r3
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	3301      	adds	r3, #1
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fdf0 	bl	800015c <WIZCHIP_READ>
 800057c:	4603      	mov	r3, r0
 800057e:	4423      	add	r3, r4
 8000580:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000582:	89fb      	ldrh	r3, [r7, #14]
 8000584:	021a      	lsls	r2, r3, #8
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	3302      	adds	r3, #2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4413      	add	r3, r2
 8000590:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	461a      	mov	r2, r3
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	68b8      	ldr	r0, [r7, #8]
 800059a:	f7ff fed9 	bl	8000350 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800059e:	89fa      	ldrh	r2, [r7, #14]
 80005a0:	88bb      	ldrh	r3, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	3301      	adds	r3, #1
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80005b2:	461a      	mov	r2, r3
 80005b4:	89fb      	ldrh	r3, [r7, #14]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	4610      	mov	r0, r2
 80005c0:	f7ff fe18 	bl	80001f4 <WIZCHIP_WRITE>
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	3301      	adds	r3, #1
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80005d0:	461a      	mov	r2, r3
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	4610      	mov	r0, r2
 80005da:	f7ff fe0b 	bl	80001f4 <WIZCHIP_WRITE>
 80005de:	e000      	b.n	80005e2 <wiz_send_data+0xae>
   if(len == 0)  return;
 80005e0:	bf00      	nop
}
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd90      	pop	{r4, r7, pc}

080005e8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d046      	beq.n	8000694 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	3301      	adds	r3, #1
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fda2 	bl	800015c <WIZCHIP_READ>
 8000618:	4603      	mov	r3, r0
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	b29c      	uxth	r4, r3
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	3301      	adds	r3, #1
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fd96 	bl	800015c <WIZCHIP_READ>
 8000630:	4603      	mov	r3, r0
 8000632:	4423      	add	r3, r4
 8000634:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	021a      	lsls	r2, r3, #8
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3303      	adds	r3, #3
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	4413      	add	r3, r2
 8000644:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	461a      	mov	r2, r3
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	68b8      	ldr	r0, [r7, #8]
 800064e:	f7ff fe1f 	bl	8000290 <WIZCHIP_READ_BUF>
   ptr += len;
 8000652:	89fa      	ldrh	r2, [r7, #14]
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	3301      	adds	r3, #1
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000666:	461a      	mov	r2, r3
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	b29b      	uxth	r3, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff fdbe 	bl	80001f4 <WIZCHIP_WRITE>
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3301      	adds	r3, #1
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8000684:	461a      	mov	r2, r3
 8000686:	89fb      	ldrh	r3, [r7, #14]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	4610      	mov	r0, r2
 800068e:	f7ff fdb1 	bl	80001f4 <WIZCHIP_WRITE>
 8000692:	e000      	b.n	8000696 <wiz_recv_data+0xae>
   if(len == 0) return;
 8000694:	bf00      	nop
}
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <wizchip_select>:
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
 80006a0:	2200      	movs	r2, #0
 80006a2:	2110      	movs	r1, #16
 80006a4:	4802      	ldr	r0, [pc, #8]	@ (80006b0 <wizchip_select+0x14>)
 80006a6:	f006 fafe 	bl	8006ca6 <HAL_GPIO_WritePin>
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40010800 	.word	0x40010800

080006b4 <wizchip_deselect>:
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4802      	ldr	r0, [pc, #8]	@ (80006c8 <wizchip_deselect+0x14>)
 80006be:	f006 faf2 	bl	8006ca6 <HAL_GPIO_WritePin>
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010800 	.word	0x40010800

080006cc <wizchip_read>:
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	1df9      	adds	r1, r7, #7
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2201      	movs	r2, #1
 80006da:	4804      	ldr	r0, [pc, #16]	@ (80006ec <wizchip_read+0x20>)
 80006dc:	f007 f95a 	bl	8007994 <HAL_SPI_Receive>
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000d0 	.word	0x200000d0

080006f0 <wizchip_write>:
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	1df9      	adds	r1, r7, #7
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2201      	movs	r2, #1
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <wizchip_write+0x20>)
 8000704:	f007 f802 	bl	800770c <HAL_SPI_Transmit>
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000d0 	.word	0x200000d0

08000714 <wizchip_readburst>:
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4803      	ldr	r0, [pc, #12]	@ (8000738 <wizchip_readburst+0x24>)
 800072a:	f007 f933 	bl	8007994 <HAL_SPI_Receive>
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000d0 	.word	0x200000d0

0800073c <wizchip_writeburst>:
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
 8000748:	887a      	ldrh	r2, [r7, #2]
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <wizchip_writeburst+0x24>)
 8000752:	f006 ffdb 	bl	800770c <HAL_SPI_Transmit>
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000d0 	.word	0x200000d0

08000764 <W5500Init>:
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
 800076a:	23ff      	movs	r3, #255	@ 0xff
 800076c:	75fb      	strb	r3, [r7, #23]
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <W5500Init+0x74>)
 8000770:	1d3c      	adds	r4, r7, #4
 8000772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	4817      	ldr	r0, [pc, #92]	@ (80007dc <W5500Init+0x78>)
 800077e:	f006 fa92 	bl	8006ca6 <HAL_GPIO_WritePin>
 8000782:	2200      	movs	r2, #0
 8000784:	2102      	movs	r1, #2
 8000786:	4816      	ldr	r0, [pc, #88]	@ (80007e0 <W5500Init+0x7c>)
 8000788:	f006 fa8d 	bl	8006ca6 <HAL_GPIO_WritePin>
 800078c:	bf00      	nop
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	75fa      	strb	r2, [r7, #23]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1fa      	bne.n	800078e <W5500Init+0x2a>
 8000798:	2201      	movs	r2, #1
 800079a:	2102      	movs	r1, #2
 800079c:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <W5500Init+0x7c>)
 800079e:	f006 fa82 	bl	8006ca6 <HAL_GPIO_WritePin>
 80007a2:	4910      	ldr	r1, [pc, #64]	@ (80007e4 <W5500Init+0x80>)
 80007a4:	4810      	ldr	r0, [pc, #64]	@ (80007e8 <W5500Init+0x84>)
 80007a6:	f000 fcb9 	bl	800111c <reg_wizchip_cs_cbfunc>
 80007aa:	4910      	ldr	r1, [pc, #64]	@ (80007ec <W5500Init+0x88>)
 80007ac:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <W5500Init+0x8c>)
 80007ae:	f000 fcd9 	bl	8001164 <reg_wizchip_spi_cbfunc>
 80007b2:	4910      	ldr	r1, [pc, #64]	@ (80007f4 <W5500Init+0x90>)
 80007b4:	4810      	ldr	r0, [pc, #64]	@ (80007f8 <W5500Init+0x94>)
 80007b6:	f000 fd01 	bl	80011bc <reg_wizchip_spiburst_cbfunc>
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fd28 	bl	8001214 <ctlwizchip>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ca:	d101      	bne.n	80007d0 <W5500Init+0x6c>
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <W5500Init+0x68>
 80007d0:	bf00      	nop
 80007d2:	371c      	adds	r7, #28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	08009a08 	.word	0x08009a08
 80007dc:	40010800 	.word	0x40010800
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	080006b5 	.word	0x080006b5
 80007e8:	0800069d 	.word	0x0800069d
 80007ec:	080006f1 	.word	0x080006f1
 80007f0:	080006cd 	.word	0x080006cd
 80007f4:	0800073d 	.word	0x0800073d
 80007f8:	08000715 	.word	0x08000715

080007fc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	4604      	mov	r4, r0
 8000804:	4608      	mov	r0, r1
 8000806:	4611      	mov	r1, r2
 8000808:	461a      	mov	r2, r3
 800080a:	4623      	mov	r3, r4
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	460b      	mov	r3, r1
 8000814:	80bb      	strh	r3, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b08      	cmp	r3, #8
 800081e:	d902      	bls.n	8000826 <socket+0x2a>
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	e0ef      	b.n	8000a06 <socket+0x20a>
	switch(protocol)
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d005      	beq.n	8000838 <socket+0x3c>
 800082c:	2b00      	cmp	r3, #0
 800082e:	dd11      	ble.n	8000854 <socket+0x58>
 8000830:	3b02      	subs	r3, #2
 8000832:	2b02      	cmp	r3, #2
 8000834:	d80e      	bhi.n	8000854 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000836:	e011      	b.n	800085c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2204      	movs	r2, #4
 800083e:	4619      	mov	r1, r3
 8000840:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000844:	f7ff fd24 	bl	8000290 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <socket+0x5e>
 800084e:	f06f 0302 	mvn.w	r3, #2
 8000852:	e0d8      	b.n	8000a06 <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000854:	f06f 0304 	mvn.w	r3, #4
 8000858:	e0d5      	b.n	8000a06 <socket+0x20a>
	    break;
 800085a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <socket+0x70>
 8000866:	f06f 0305 	mvn.w	r3, #5
 800086a:	e0cc      	b.n	8000a06 <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d028      	beq.n	80008c4 <socket+0xc8>
	{
   	switch(protocol)
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d002      	beq.n	800087e <socket+0x82>
 8000878:	2b02      	cmp	r3, #2
 800087a:	d008      	beq.n	800088e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800087c:	e022      	b.n	80008c4 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11a      	bne.n	80008be <socket+0xc2>
 8000888:	f06f 0305 	mvn.w	r3, #5
 800088c:	e0bb      	b.n	8000a06 <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	f003 0320 	and.w	r3, r3, #32
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db02      	blt.n	80008a6 <socket+0xaa>
 80008a0:	f06f 0305 	mvn.w	r3, #5
 80008a4:	e0af      	b.n	8000a06 <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d008      	beq.n	80008c2 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80008b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db04      	blt.n	80008c2 <socket+0xc6>
 80008b8:	f06f 0305 	mvn.w	r3, #5
 80008bc:	e0a3      	b.n	8000a06 <socket+0x20a>
   	      break;
 80008be:	bf00      	nop
 80008c0:	e000      	b.n	80008c4 <socket+0xc8>
   	      break;
 80008c2:	bf00      	nop
   	}
   }
	close(sn);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f8ac 	bl	8000a24 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	3301      	adds	r3, #1
 80008d2:	00d8      	lsls	r0, r3, #3
 80008d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008d8:	f023 030f 	bic.w	r3, r3, #15
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	f7ff fc83 	bl	80001f4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d110      	bne.n	8000916 <socket+0x11a>
	{
	   port = sock_any_port++;
 80008f4:	4b46      	ldr	r3, [pc, #280]	@ (8000a10 <socket+0x214>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	b291      	uxth	r1, r2
 80008fc:	4a44      	ldr	r2, [pc, #272]	@ (8000a10 <socket+0x214>)
 80008fe:	8011      	strh	r1, [r2, #0]
 8000900:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000902:	4b43      	ldr	r3, [pc, #268]	@ (8000a10 <socket+0x214>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800090a:	4293      	cmp	r3, r2
 800090c:	d103      	bne.n	8000916 <socket+0x11a>
 800090e:	4b40      	ldr	r3, [pc, #256]	@ (8000a10 <socket+0x214>)
 8000910:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000914:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	3301      	adds	r3, #1
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000922:	461a      	mov	r2, r3
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	0a1b      	lsrs	r3, r3, #8
 8000928:	b29b      	uxth	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4619      	mov	r1, r3
 800092e:	4610      	mov	r0, r2
 8000930:	f7ff fc60 	bl	80001f4 <WIZCHIP_WRITE>
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	3301      	adds	r3, #1
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000940:	461a      	mov	r2, r3
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f7ff fc53 	bl	80001f4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	3301      	adds	r3, #1
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc49 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000962:	bf00      	nop
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	3301      	adds	r3, #1
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fbf3 	bl	800015c <WIZCHIP_READ>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f3      	bne.n	8000964 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2201      	movs	r2, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	b21b      	sxth	r3, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	b21a      	sxth	r2, r3
 800098a:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <socket+0x218>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b21b      	sxth	r3, r3
 8000990:	4013      	ands	r3, r2
 8000992:	b21b      	sxth	r3, r3
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <socket+0x218>)
 8000998:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	f003 0201 	and.w	r2, r3, #1
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <socket+0x218>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <socket+0x218>)
 80009b6:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <socket+0x21c>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <socket+0x21c>)
 80009d4:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <socket+0x220>)
 80009da:	2100      	movs	r1, #0
 80009dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <socket+0x224>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80009e8:	bf00      	nop
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	3301      	adds	r3, #1
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fbb0 	bl	800015c <WIZCHIP_READ>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f3      	beq.n	80009ea <socket+0x1ee>
   return (int8_t)sn;
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000064 	.word	0x20000064
 8000a18:	20000066 	.word	0x20000066
 8000a1c:	20000068 	.word	0x20000068
 8000a20:	2000007c 	.word	0x2000007c

08000a24 <close>:

int8_t close(uint8_t sn)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b08      	cmp	r3, #8
 8000a32:	d902      	bls.n	8000a3a <close+0x16>
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	e069      	b.n	8000b0e <close+0xea>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	3301      	adds	r3, #1
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a46:	2110      	movs	r1, #16
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbd3 	bl	80001f4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) )
 8000a4e:	e009      	b.n	8000a64 <close+0x40>
	{
		if (g_uart_request_exit == 1)
 8000a50:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <close+0xf4>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d105      	bne.n	8000a64 <close+0x40>
		{
			g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000a58:	4b2f      	ldr	r3, [pc, #188]	@ (8000b18 <close+0xf4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
			return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000a5e:	f06f 030c 	mvn.w	r3, #12
 8000a62:	e054      	b.n	8000b0e <close+0xea>
	while( getSn_CR(sn) )
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	3301      	adds	r3, #1
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fb73 	bl	800015c <WIZCHIP_READ>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1e9      	bne.n	8000a50 <close+0x2c>
		}
	}
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	3301      	adds	r3, #1
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000a88:	211f      	movs	r1, #31
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fbb2 	bl	80001f4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2201      	movs	r2, #1
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <close+0xf8>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <close+0xf8>)
 8000aac:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <close+0xfc>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <close+0xfc>)
 8000aca:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	4a15      	ldr	r2, [pc, #84]	@ (8000b24 <close+0x100>)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <close+0x104>)
 8000ada:	2100      	movs	r1, #0
 8000adc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000ade:	e009      	b.n	8000af4 <close+0xd0>
	{
		if (g_uart_request_exit == 1)
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <close+0xf4>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d105      	bne.n	8000af4 <close+0xd0>
		{
			g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <close+0xf4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
			return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000aee:	f06f 030c 	mvn.w	r3, #12
 8000af2:	e00c      	b.n	8000b0e <close+0xea>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	3301      	adds	r3, #1
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fb2b 	bl	800015c <WIZCHIP_READ>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1e9      	bne.n	8000ae0 <close+0xbc>
		}
	}
	return SOCK_OK;
 8000b0c:	2301      	movs	r3, #1
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000078 	.word	0x20000078
 8000b1c:	20000064 	.word	0x20000064
 8000b20:	20000066 	.word	0x20000066
 8000b24:	20000068 	.word	0x20000068
 8000b28:	2000007c 	.word	0x2000007c

08000b2c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d902      	bls.n	8000b48 <connect+0x1c>
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e0da      	b.n	8000cfe <connect+0x1d2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fb03 	bl	800015c <WIZCHIP_READ>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f003 030f 	and.w	r3, r3, #15
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d002      	beq.n	8000b66 <connect+0x3a>
 8000b60:	f06f 0304 	mvn.w	r3, #4
 8000b64:	e0cb      	b.n	8000cfe <connect+0x1d2>
   CHECK_SOCKINIT();
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff faf2 	bl	800015c <WIZCHIP_READ>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b13      	cmp	r3, #19
 8000b7c:	d002      	beq.n	8000b84 <connect+0x58>
 8000b7e:	f06f 0302 	mvn.w	r3, #2
 8000b82:	e0bc      	b.n	8000cfe <connect+0x1d2>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	3201      	adds	r2, #1
 8000b92:	7812      	ldrb	r2, [r2, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	3202      	adds	r2, #2
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	3203      	adds	r2, #3
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bba:	d002      	beq.n	8000bc2 <connect+0x96>
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <connect+0x9c>
 8000bc2:	f06f 030b 	mvn.w	r3, #11
 8000bc6:	e09a      	b.n	8000cfe <connect+0x1d2>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8000bc8:	88bb      	ldrh	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <connect+0xa8>
 8000bce:	f06f 030a 	mvn.w	r3, #10
 8000bd2:	e094      	b.n	8000cfe <connect+0x1d2>
	setSn_DIPR(sn,addr);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	3301      	adds	r3, #1
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8000be0:	2204      	movs	r2, #4
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fbb3 	bl	8000350 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	3301      	adds	r3, #1
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	4610      	mov	r0, r2
 8000c04:	f7ff faf6 	bl	80001f4 <WIZCHIP_WRITE>
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8000c14:	461a      	mov	r2, r3
 8000c16:	88bb      	ldrh	r3, [r7, #4]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	f7ff fae9 	bl	80001f4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	3301      	adds	r3, #1
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fadf 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn))
 8000c36:	e009      	b.n	8000c4c <connect+0x120>
	{
		if (g_uart_request_exit == 1)
 8000c38:	4b33      	ldr	r3, [pc, #204]	@ (8000d08 <connect+0x1dc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d105      	bne.n	8000c4c <connect+0x120>
		{
			g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000c40:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <connect+0x1dc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
			return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000c46:	f06f 030c 	mvn.w	r3, #12
 8000c4a:	e058      	b.n	8000cfe <connect+0x1d2>
   while(getSn_CR(sn))
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	3301      	adds	r3, #1
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fa7f 	bl	800015c <WIZCHIP_READ>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1e9      	bne.n	8000c38 <connect+0x10c>
		}
	}
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000c64:	4b29      	ldr	r3, [pc, #164]	@ (8000d0c <connect+0x1e0>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	fa42 f303 	asr.w	r3, r2, r3
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d035      	beq.n	8000ce4 <connect+0x1b8>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e040      	b.n	8000cfe <connect+0x1d2>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	3301      	adds	r3, #1
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fa67 	bl	800015c <WIZCHIP_READ>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00c      	beq.n	8000cb2 <connect+0x186>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff faa4 	bl	80001f4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8000cac:	f06f 030c 	mvn.w	r3, #12
 8000cb0:	e025      	b.n	8000cfe <connect+0x1d2>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fa4c 	bl	800015c <WIZCHIP_READ>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <connect+0x1a4>
		{
			return SOCKERR_SOCKCLOSED;
 8000cca:	f06f 0303 	mvn.w	r3, #3
 8000cce:	e016      	b.n	8000cfe <connect+0x1d2>
		}
		if (g_uart_request_exit == 1)
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <connect+0x1dc>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d105      	bne.n	8000ce4 <connect+0x1b8>
		{
			g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <connect+0x1dc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
			return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000cde:	f06f 030c 	mvn.w	r3, #12
 8000ce2:	e00c      	b.n	8000cfe <connect+0x1d2>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3301      	adds	r3, #1
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fa33 	bl	800015c <WIZCHIP_READ>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b17      	cmp	r3, #23
 8000cfa:	d1bf      	bne.n	8000c7c <connect+0x150>
		}
	}
   
   return SOCK_OK;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000078 	.word	0x20000078
 8000d0c:	20000064 	.word	0x20000064

08000d10 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b08      	cmp	r3, #8
 8000d2c:	d902      	bls.n	8000d34 <send+0x24>
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e0dd      	b.n	8000ef0 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	3301      	adds	r3, #1
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fa0d 	bl	800015c <WIZCHIP_READ>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d002      	beq.n	8000d52 <send+0x42>
 8000d4c:	f06f 0304 	mvn.w	r3, #4
 8000d50:	e0ce      	b.n	8000ef0 <send+0x1e0>
   CHECK_SOCKDATA();
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <send+0x4e>
 8000d58:	f06f 030d 	mvn.w	r3, #13
 8000d5c:	e0c8      	b.n	8000ef0 <send+0x1e0>
   tmp = getSn_SR(sn);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	3301      	adds	r3, #1
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff f9f6 	bl	800015c <WIZCHIP_READ>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	2b17      	cmp	r3, #23
 8000d78:	d005      	beq.n	8000d86 <send+0x76>
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b1c      	cmp	r3, #28
 8000d7e:	d002      	beq.n	8000d86 <send+0x76>
 8000d80:	f06f 0306 	mvn.w	r3, #6
 8000d84:	e0b4      	b.n	8000ef0 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8000d86:	4b5c      	ldr	r3, [pc, #368]	@ (8000ef8 <send+0x1e8>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	fa42 f303 	asr.w	r3, r2, r3
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d039      	beq.n	8000e0e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	3301      	adds	r3, #1
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff f9d8 	bl	800015c <WIZCHIP_READ>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f003 031f 	and.w	r3, r3, #31
 8000db2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d019      	beq.n	8000df2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000dca:	2110      	movs	r1, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fa11 	bl	80001f4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	4b45      	ldr	r3, [pc, #276]	@ (8000ef8 <send+0x1e8>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4013      	ands	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b42      	ldr	r3, [pc, #264]	@ (8000ef8 <send+0x1e8>)
 8000dee:	801a      	strh	r2, [r3, #0]
 8000df0:	e00d      	b.n	8000e0e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <send+0xfa>
      {
         close(sn);
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fe10 	bl	8000a24 <close>
         return SOCKERR_TIMEOUT;
 8000e04:	f06f 030c 	mvn.w	r3, #12
 8000e08:	e072      	b.n	8000ef0 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e070      	b.n	8000ef0 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	3301      	adds	r3, #1
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff f99e 	bl	800015c <WIZCHIP_READ>
 8000e20:	4603      	mov	r3, r0
 8000e22:	029b      	lsls	r3, r3, #10
 8000e24:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000e26:	88ba      	ldrh	r2, [r7, #4]
 8000e28:	89bb      	ldrh	r3, [r7, #12]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d901      	bls.n	8000e32 <send+0x122>
 8000e2e:	89bb      	ldrh	r3, [r7, #12]
 8000e30:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff faeb 	bl	8000410 <getSn_TX_FSR>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	3301      	adds	r3, #1
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff f986 	bl	800015c <WIZCHIP_READ>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b17      	cmp	r3, #23
 8000e58:	d009      	beq.n	8000e6e <send+0x15e>
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b1c      	cmp	r3, #28
 8000e5e:	d006      	beq.n	8000e6e <send+0x15e>
      {
         close(sn);
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fdde 	bl	8000a24 <close>
         return SOCKERR_SOCKSTATUS;
 8000e68:	f06f 0306 	mvn.w	r3, #6
 8000e6c:	e040      	b.n	8000ef0 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000e6e:	4b23      	ldr	r3, [pc, #140]	@ (8000efc <send+0x1ec>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	fa42 f303 	asr.w	r3, r2, r3
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <send+0x17e>
 8000e82:	88ba      	ldrh	r2, [r7, #4]
 8000e84:	89bb      	ldrh	r3, [r7, #12]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d901      	bls.n	8000e8e <send+0x17e>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e030      	b.n	8000ef0 <send+0x1e0>
      if(len <= freesize) break;
 8000e8e:	88ba      	ldrh	r2, [r7, #4]
 8000e90:	89bb      	ldrh	r3, [r7, #12]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d900      	bls.n	8000e98 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8000e96:	e7cc      	b.n	8000e32 <send+0x122>
      if(len <= freesize) break;
 8000e98:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000e9a:	88ba      	ldrh	r2, [r7, #4]
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fb47 	bl	8000534 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	3301      	adds	r3, #1
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff f99d 	bl	80001f4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000eba:	bf00      	nop
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f947 	bl	800015c <WIZCHIP_READ>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f3      	bne.n	8000ebc <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <send+0x1e8>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <send+0x1e8>)
 8000eec:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000eee:	88bb      	ldrh	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000066 	.word	0x20000066
 8000efc:	20000064 	.word	0x20000064

08000f00 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d902      	bls.n	8000f24 <recv+0x24>
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e09b      	b.n	800105c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	3301      	adds	r3, #1
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f915 	bl	800015c <WIZCHIP_READ>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <recv+0x42>
 8000f3c:	f06f 0304 	mvn.w	r3, #4
 8000f40:	e08c      	b.n	800105c <recv+0x15c>
   CHECK_SOCKDATA();
 8000f42:	88bb      	ldrh	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <recv+0x4e>
 8000f48:	f06f 030d 	mvn.w	r3, #13
 8000f4c:	e086      	b.n	800105c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	3301      	adds	r3, #1
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f8fe 	bl	800015c <WIZCHIP_READ>
 8000f60:	4603      	mov	r3, r0
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8000f66:	89ba      	ldrh	r2, [r7, #12]
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d201      	bcs.n	8000f72 <recv+0x72>
 8000f6e:	89bb      	ldrh	r3, [r7, #12]
 8000f70:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fa94 	bl	80004a2 <getSn_RX_RSR>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	3301      	adds	r3, #1
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f8e6 	bl	800015c <WIZCHIP_READ>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b17      	cmp	r3, #23
 8000f98:	d026      	beq.n	8000fe8 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b1c      	cmp	r3, #28
 8000f9e:	d11c      	bne.n	8000fda <recv+0xda>
            {
               if(recvsize != 0) break;
 8000fa0:	89bb      	ldrh	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d133      	bne.n	800100e <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa31 	bl	8000410 <getSn_TX_FSR>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461c      	mov	r4, r3
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f8cc 	bl	800015c <WIZCHIP_READ>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	029b      	lsls	r3, r3, #10
 8000fc8:	429c      	cmp	r4, r3
 8000fca:	d10d      	bne.n	8000fe8 <recv+0xe8>
               {
                  close(sn);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fd28 	bl	8000a24 <close>
                  return SOCKERR_SOCKSTATUS;
 8000fd4:	f06f 0306 	mvn.w	r3, #6
 8000fd8:	e040      	b.n	800105c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fd21 	bl	8000a24 <close>
               return SOCKERR_SOCKSTATUS;
 8000fe2:	f06f 0306 	mvn.w	r3, #6
 8000fe6:	e039      	b.n	800105c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8001064 <recv+0x164>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	fa42 f303 	asr.w	r3, r2, r3
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <recv+0x106>
 8000ffc:	89bb      	ldrh	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <recv+0x106>
 8001002:	2300      	movs	r3, #0
 8001004:	e02a      	b.n	800105c <recv+0x15c>
         if(recvsize != 0) break;
 8001006:	89bb      	ldrh	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 800100c:	e7b1      	b.n	8000f72 <recv+0x72>
               if(recvsize != 0) break;
 800100e:	bf00      	nop
 8001010:	e000      	b.n	8001014 <recv+0x114>
         if(recvsize != 0) break;
 8001012:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001014:	89ba      	ldrh	r2, [r7, #12]
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	d201      	bcs.n	8001020 <recv+0x120>
 800101c:	89bb      	ldrh	r3, [r7, #12]
 800101e:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001020:	88ba      	ldrh	r2, [r7, #4]
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fade 	bl	80005e8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	3301      	adds	r3, #1
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001038:	2140      	movs	r1, #64	@ 0x40
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f8da 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001040:	bf00      	nop
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	3301      	adds	r3, #1
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f884 	bl	800015c <WIZCHIP_READ>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f3      	bne.n	8001042 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800105a:	88bb      	ldrh	r3, [r7, #4]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	20000064 	.word	0x20000064

08001068 <wizchip_cris_enter>:
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <wizchip_cris_exit>:
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <wizchip_cs_select>:
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <wizchip_cs_deselect>:
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <wizchip_bus_readdata>:
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <wizchip_bus_writedata>:
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	78fa      	ldrb	r2, [r7, #3]
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <wizchip_spi_readbyte>:
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	2300      	movs	r3, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <wizchip_spi_writebyte>:
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <wizchip_spi_readburst>:
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	807b      	strh	r3, [r7, #2]
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <wizchip_spi_writeburst>:
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
	...

0800111c <reg_wizchip_cs_cbfunc>:
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <reg_wizchip_cs_cbfunc+0x16>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d106      	bne.n	8001140 <reg_wizchip_cs_cbfunc+0x24>
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <reg_wizchip_cs_cbfunc+0x3c>)
 8001134:	4a09      	ldr	r2, [pc, #36]	@ (800115c <reg_wizchip_cs_cbfunc+0x40>)
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <reg_wizchip_cs_cbfunc+0x3c>)
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <reg_wizchip_cs_cbfunc+0x44>)
 800113c:	619a      	str	r2, [r3, #24]
 800113e:	e006      	b.n	800114e <reg_wizchip_cs_cbfunc+0x32>
 8001140:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <reg_wizchip_cs_cbfunc+0x3c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <reg_wizchip_cs_cbfunc+0x3c>)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	20000004 	.word	0x20000004
 800115c:	08001081 	.word	0x08001081
 8001160:	0800108d 	.word	0x0800108d

08001164 <reg_wizchip_spi_cbfunc>:
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	bf00      	nop
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f9      	beq.n	8001170 <reg_wizchip_spi_cbfunc+0xc>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <reg_wizchip_spi_cbfunc+0x24>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d106      	bne.n	8001196 <reg_wizchip_spi_cbfunc+0x32>
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <reg_wizchip_spi_cbfunc+0x4c>)
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <reg_wizchip_spi_cbfunc+0x50>)
 800118c:	61da      	str	r2, [r3, #28]
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001190:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <reg_wizchip_spi_cbfunc+0x54>)
 8001192:	621a      	str	r2, [r3, #32]
 8001194:	e006      	b.n	80011a4 <reg_wizchip_spi_cbfunc+0x40>
 8001196:	4a06      	ldr	r2, [pc, #24]	@ (80011b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	61d3      	str	r3, [r2, #28]
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <reg_wizchip_spi_cbfunc+0x4c>)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000004 	.word	0x20000004
 80011b4:	080010cd 	.word	0x080010cd
 80011b8:	080010db 	.word	0x080010db

080011bc <reg_wizchip_spiburst_cbfunc>:
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	bf00      	nop
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f9      	beq.n	80011c8 <reg_wizchip_spiburst_cbfunc+0xc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <reg_wizchip_spiburst_cbfunc+0x24>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d106      	bne.n	80011ee <reg_wizchip_spiburst_cbfunc+0x32>
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <reg_wizchip_spiburst_cbfunc+0x50>)
 80011e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011e8:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <reg_wizchip_spiburst_cbfunc+0x54>)
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80011ec:	e006      	b.n	80011fc <reg_wizchip_spiburst_cbfunc+0x40>
 80011ee:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6253      	str	r3, [r2, #36]	@ 0x24
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	6293      	str	r3, [r2, #40]	@ 0x28
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000004 	.word	0x20000004
 800120c:	080010ef 	.word	0x080010ef
 8001210:	08001105 	.word	0x08001105

08001214 <ctlwizchip>:
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	2300      	movs	r3, #0
 8001222:	75fb      	strb	r3, [r7, #23]
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f200 80c5 	bhi.w	80013be <ctlwizchip+0x1aa>
 8001234:	a201      	add	r2, pc, #4	@ (adr r2, 800123c <ctlwizchip+0x28>)
 8001236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123a:	bf00      	nop
 800123c:	0800127d 	.word	0x0800127d
 8001240:	08001283 	.word	0x08001283
 8001244:	080012af 	.word	0x080012af
 8001248:	080012a3 	.word	0x080012a3
 800124c:	080012bd 	.word	0x080012bd
 8001250:	080012c9 	.word	0x080012c9
 8001254:	080012d7 	.word	0x080012d7
 8001258:	080012fd 	.word	0x080012fd
 800125c:	0800131f 	.word	0x0800131f
 8001260:	08001363 	.word	0x08001363
 8001264:	08001369 	.word	0x08001369
 8001268:	08001371 	.word	0x08001371
 800126c:	080013c5 	.word	0x080013c5
 8001270:	08001379 	.word	0x08001379
 8001274:	08001387 	.word	0x08001387
 8001278:	080013a3 	.word	0x080013a3
 800127c:	f000 f8aa 	bl	80013d4 <wizchip_sw_reset>
 8001280:	e0a1      	b.n	80013c6 <ctlwizchip+0x1b2>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <ctlwizchip+0x7e>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3308      	adds	r3, #8
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f8e7 	bl	800146c <wizchip_init>
 800129e:	4603      	mov	r3, r0
 80012a0:	e092      	b.n	80013c8 <ctlwizchip+0x1b4>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f96c 	bl	8001584 <wizchip_clrinterrupt>
 80012ac:	e08b      	b.n	80013c6 <ctlwizchip+0x1b2>
 80012ae:	f000 f99d 	bl	80015ec <wizchip_getinterrupt>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	801a      	strh	r2, [r3, #0]
 80012ba:	e084      	b.n	80013c6 <ctlwizchip+0x1b2>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f9b8 	bl	8001636 <wizchip_setinterruptmask>
 80012c6:	e07e      	b.n	80013c6 <ctlwizchip+0x1b2>
 80012c8:	f000 f9d0 	bl	800166c <wizchip_getinterruptmask>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	801a      	strh	r2, [r3, #0]
 80012d4:	e077      	b.n	80013c6 <ctlwizchip+0x1b2>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80012e6:	f7fe ff85 	bl	80001f4 <WIZCHIP_WRITE>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80012f6:	f7fe ff7d 	bl	80001f4 <WIZCHIP_WRITE>
 80012fa:	e064      	b.n	80013c6 <ctlwizchip+0x1b2>
 80012fc:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8001300:	f7fe ff2c 	bl	800015c <WIZCHIP_READ>
 8001304:	4603      	mov	r3, r0
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b29c      	uxth	r4, r3
 800130a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800130e:	f7fe ff25 	bl	800015c <WIZCHIP_READ>
 8001312:	4603      	mov	r3, r0
 8001314:	4423      	add	r3, r4
 8001316:	b29a      	uxth	r2, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	801a      	strh	r2, [r3, #0]
 800131c:	e053      	b.n	80013c6 <ctlwizchip+0x1b2>
 800131e:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <ctlwizchip+0x1bc>)
 8001320:	789a      	ldrb	r2, [r3, #2]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a29      	ldr	r2, [pc, #164]	@ (80013d0 <ctlwizchip+0x1bc>)
 800132c:	78d2      	ldrb	r2, [r2, #3]
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3302      	adds	r3, #2
 8001334:	4a26      	ldr	r2, [pc, #152]	@ (80013d0 <ctlwizchip+0x1bc>)
 8001336:	7912      	ldrb	r2, [r2, #4]
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3303      	adds	r3, #3
 800133e:	4a24      	ldr	r2, [pc, #144]	@ (80013d0 <ctlwizchip+0x1bc>)
 8001340:	7952      	ldrb	r2, [r2, #5]
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	3304      	adds	r3, #4
 8001348:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <ctlwizchip+0x1bc>)
 800134a:	7992      	ldrb	r2, [r2, #6]
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	3305      	adds	r3, #5
 8001352:	4a1f      	ldr	r2, [pc, #124]	@ (80013d0 <ctlwizchip+0x1bc>)
 8001354:	79d2      	ldrb	r2, [r2, #7]
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	3306      	adds	r3, #6
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	e031      	b.n	80013c6 <ctlwizchip+0x1b2>
 8001362:	f000 f9d5 	bl	8001710 <wizphy_reset>
 8001366:	e02e      	b.n	80013c6 <ctlwizchip+0x1b2>
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	f000 f9f8 	bl	800175e <wizphy_setphyconf>
 800136e:	e02a      	b.n	80013c6 <ctlwizchip+0x1b2>
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f000 fa37 	bl	80017e4 <wizphy_getphyconf>
 8001376:	e026      	b.n	80013c6 <ctlwizchip+0x1b2>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fa9b 	bl	80018b8 <wizphy_setphypmode>
 8001382:	4603      	mov	r3, r0
 8001384:	e020      	b.n	80013c8 <ctlwizchip+0x1b4>
 8001386:	f000 f9aa 	bl	80016de <wizphy_getphypmode>
 800138a:	4603      	mov	r3, r0
 800138c:	75fb      	strb	r3, [r7, #23]
 800138e:	7dfb      	ldrb	r3, [r7, #23]
 8001390:	2bff      	cmp	r3, #255	@ 0xff
 8001392:	d102      	bne.n	800139a <ctlwizchip+0x186>
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	e016      	b.n	80013c8 <ctlwizchip+0x1b4>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	7dfa      	ldrb	r2, [r7, #23]
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	e011      	b.n	80013c6 <ctlwizchip+0x1b2>
 80013a2:	f000 f986 	bl	80016b2 <wizphy_getphylink>
 80013a6:	4603      	mov	r3, r0
 80013a8:	75fb      	strb	r3, [r7, #23]
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	2bff      	cmp	r3, #255	@ 0xff
 80013ae:	d102      	bne.n	80013b6 <ctlwizchip+0x1a2>
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	e008      	b.n	80013c8 <ctlwizchip+0x1b4>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	7dfa      	ldrb	r2, [r7, #23]
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e003      	b.n	80013c6 <ctlwizchip+0x1b2>
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e001      	b.n	80013c8 <ctlwizchip+0x1b4>
 80013c4:	bf00      	nop
 80013c6:	2300      	movs	r3, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	20000004 	.word	0x20000004

080013d4 <wizchip_sw_reset>:
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2206      	movs	r2, #6
 80013de:	4619      	mov	r1, r3
 80013e0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80013e4:	f7fe ff54 	bl	8000290 <WIZCHIP_READ_BUF>
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2204      	movs	r2, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013f4:	f7fe ff4c 	bl	8000290 <WIZCHIP_READ_BUF>
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2204      	movs	r2, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001404:	f7fe ff44 	bl	8000290 <WIZCHIP_READ_BUF>
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2204      	movs	r2, #4
 800140e:	4619      	mov	r1, r3
 8001410:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001414:	f7fe ff3c 	bl	8000290 <WIZCHIP_READ_BUF>
 8001418:	2180      	movs	r1, #128	@ 0x80
 800141a:	2000      	movs	r0, #0
 800141c:	f7fe feea 	bl	80001f4 <WIZCHIP_WRITE>
 8001420:	2000      	movs	r0, #0
 8001422:	f7fe fe9b 	bl	800015c <WIZCHIP_READ>
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2206      	movs	r2, #6
 800142a:	4619      	mov	r1, r3
 800142c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001430:	f7fe ff8e 	bl	8000350 <WIZCHIP_WRITE_BUF>
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2204      	movs	r2, #4
 800143a:	4619      	mov	r1, r3
 800143c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001440:	f7fe ff86 	bl	8000350 <WIZCHIP_WRITE_BUF>
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	2204      	movs	r2, #4
 800144a:	4619      	mov	r1, r3
 800144c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001450:	f7fe ff7e 	bl	8000350 <WIZCHIP_WRITE_BUF>
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2204      	movs	r2, #4
 800145a:	4619      	mov	r1, r3
 800145c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001460:	f7fe ff76 	bl	8000350 <WIZCHIP_WRITE_BUF>
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <wizchip_init>:
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	73bb      	strb	r3, [r7, #14]
 800147a:	f7ff ffab 	bl	80013d4 <wizchip_sw_reset>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d03b      	beq.n	80014fc <wizchip_init+0x90>
 8001484:	2300      	movs	r3, #0
 8001486:	73bb      	strb	r3, [r7, #14]
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e015      	b.n	80014ba <wizchip_init+0x4e>
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	4413      	add	r3, r2
 800149c:	b2db      	uxtb	r3, r3
 800149e:	73bb      	strb	r3, [r7, #14]
 80014a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014a4:	2b10      	cmp	r3, #16
 80014a6:	dd02      	ble.n	80014ae <wizchip_init+0x42>
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	e066      	b.n	800157c <wizchip_init+0x110>
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	2b07      	cmp	r3, #7
 80014c0:	dde5      	ble.n	800148e <wizchip_init+0x22>
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e015      	b.n	80014f4 <wizchip_init+0x88>
 80014c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	3301      	adds	r3, #1
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80014d6:	4618      	mov	r0, r3
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7fe fe86 	bl	80001f4 <WIZCHIP_WRITE>
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	dde5      	ble.n	80014c8 <wizchip_init+0x5c>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d03b      	beq.n	800157a <wizchip_init+0x10e>
 8001502:	2300      	movs	r3, #0
 8001504:	73bb      	strb	r3, [r7, #14]
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e015      	b.n	8001538 <wizchip_init+0xcc>
 800150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	4413      	add	r3, r2
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	7bbb      	ldrb	r3, [r7, #14]
 8001518:	4413      	add	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	73bb      	strb	r3, [r7, #14]
 800151e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001522:	2b10      	cmp	r3, #16
 8001524:	dd02      	ble.n	800152c <wizchip_init+0xc0>
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e027      	b.n	800157c <wizchip_init+0x110>
 800152c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153c:	2b07      	cmp	r3, #7
 800153e:	dde5      	ble.n	800150c <wizchip_init+0xa0>
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e015      	b.n	8001572 <wizchip_init+0x106>
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	3301      	adds	r3, #1
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001554:	4618      	mov	r0, r3
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	4413      	add	r3, r2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f7fe fe47 	bl	80001f4 <WIZCHIP_WRITE>
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	3301      	adds	r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	2b07      	cmp	r3, #7
 8001578:	dde5      	ble.n	8001546 <wizchip_init+0xda>
 800157a:	2300      	movs	r3, #0
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <wizchip_clrinterrupt>:
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b29b      	uxth	r3, r3
 8001598:	73bb      	strb	r3, [r7, #14]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	f023 030f 	bic.w	r3, r3, #15
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80015a8:	f7fe fe24 	bl	80001f4 <WIZCHIP_WRITE>
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e014      	b.n	80015dc <wizchip_clrinterrupt+0x58>
 80015b2:	7bba      	ldrb	r2, [r7, #14]
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	fa42 f303 	asr.w	r3, r2, r3
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <wizchip_clrinterrupt+0x52>
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	3301      	adds	r3, #1
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015ce:	211f      	movs	r1, #31
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe fe0f 	bl	80001f4 <WIZCHIP_WRITE>
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	3301      	adds	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b07      	cmp	r3, #7
 80015e0:	d9e7      	bls.n	80015b2 <wizchip_clrinterrupt+0x2e>
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <wizchip_getinterrupt>:
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	2300      	movs	r3, #0
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	2300      	movs	r3, #0
 80015f8:	71bb      	strb	r3, [r7, #6]
 80015fa:	2300      	movs	r3, #0
 80015fc:	80bb      	strh	r3, [r7, #4]
 80015fe:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8001602:	f7fe fdab 	bl	800015c <WIZCHIP_READ>
 8001606:	4603      	mov	r3, r0
 8001608:	f023 030f 	bic.w	r3, r3, #15
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8001612:	f7fe fda3 	bl	800015c <WIZCHIP_READ>
 8001616:	4603      	mov	r3, r0
 8001618:	71bb      	strb	r3, [r7, #6]
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	80bb      	strh	r3, [r7, #4]
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b29a      	uxth	r2, r3
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	b29b      	uxth	r3, r3
 8001628:	4413      	add	r3, r2
 800162a:	80bb      	strh	r3, [r7, #4]
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <wizchip_setinterruptmask>:
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	80fb      	strh	r3, [r7, #6]
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	b29b      	uxth	r3, r3
 800164a:	73bb      	strb	r3, [r7, #14]
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	4619      	mov	r1, r3
 8001650:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001654:	f7fe fdce 	bl	80001f4 <WIZCHIP_WRITE>
 8001658:	7bbb      	ldrb	r3, [r7, #14]
 800165a:	4619      	mov	r1, r3
 800165c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001660:	f7fe fdc8 	bl	80001f4 <WIZCHIP_WRITE>
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <wizchip_getinterruptmask>:
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	2300      	movs	r3, #0
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	2300      	movs	r3, #0
 8001678:	71bb      	strb	r3, [r7, #6]
 800167a:	2300      	movs	r3, #0
 800167c:	80bb      	strh	r3, [r7, #4]
 800167e:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001682:	f7fe fd6b 	bl	800015c <WIZCHIP_READ>
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800168e:	f7fe fd65 	bl	800015c <WIZCHIP_READ>
 8001692:	4603      	mov	r3, r0
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	80bb      	strh	r3, [r7, #4]
 800169a:	88bb      	ldrh	r3, [r7, #4]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b29a      	uxth	r2, r3
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	80bb      	strh	r3, [r7, #4]
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <wizphy_getphylink>:
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	2300      	movs	r3, #0
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016c0:	f7fe fd4c 	bl	800015c <WIZCHIP_READ>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <wizphy_getphylink+0x20>
 80016ce:	2301      	movs	r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <wizphy_getphypmode>:
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	2300      	movs	r3, #0
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80016ec:	f7fe fd36 	bl	800015c <WIZCHIP_READ>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016f6:	2b30      	cmp	r3, #48	@ 0x30
 80016f8:	d102      	bne.n	8001700 <wizphy_getphypmode+0x22>
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e001      	b.n	8001704 <wizphy_getphypmode+0x26>
 8001700:	2300      	movs	r3, #0
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <wizphy_reset>:
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800171a:	f7fe fd1f 	bl	800015c <WIZCHIP_READ>
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001732:	f7fe fd5f 	bl	80001f4 <WIZCHIP_WRITE>
 8001736:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800173a:	f7fe fd0f 	bl	800015c <WIZCHIP_READ>
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001752:	f7fe fd4f 	bl	80001f4 <WIZCHIP_WRITE>
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <wizphy_setphyconf>:
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d104      	bne.n	800177c <wizphy_setphyconf+0x1e>
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	e003      	b.n	8001784 <wizphy_setphyconf+0x26>
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d104      	bne.n	8001796 <wizphy_setphyconf+0x38>
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e019      	b.n	80017ca <wizphy_setphyconf+0x6c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	78db      	ldrb	r3, [r3, #3]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10d      	bne.n	80017ba <wizphy_setphyconf+0x5c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	789b      	ldrb	r3, [r3, #2]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d104      	bne.n	80017b0 <wizphy_setphyconf+0x52>
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	f043 0318 	orr.w	r3, r3, #24
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e00c      	b.n	80017ca <wizphy_setphyconf+0x6c>
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	e007      	b.n	80017ca <wizphy_setphyconf+0x6c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	789b      	ldrb	r3, [r3, #2]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d103      	bne.n	80017ca <wizphy_setphyconf+0x6c>
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017d2:	f7fe fd0f 	bl	80001f4 <WIZCHIP_WRITE>
 80017d6:	f7ff ff9b 	bl	8001710 <wizphy_reset>
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <wizphy_getphyconf>:
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017f4:	f7fe fcb2 	bl	800015c <WIZCHIP_READ>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	119b      	asrs	r3, r3, #6
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001812:	2b20      	cmp	r3, #32
 8001814:	d001      	beq.n	800181a <wizphy_getphyconf+0x36>
 8001816:	2b38      	cmp	r3, #56	@ 0x38
 8001818:	d103      	bne.n	8001822 <wizphy_getphyconf+0x3e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	705a      	strb	r2, [r3, #1]
 8001820:	e003      	b.n	800182a <wizphy_getphyconf+0x46>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	705a      	strb	r2, [r3, #1]
 8001828:	bf00      	nop
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001830:	3b10      	subs	r3, #16
 8001832:	2b10      	cmp	r3, #16
 8001834:	bf8c      	ite	hi
 8001836:	2201      	movhi	r2, #1
 8001838:	2200      	movls	r2, #0
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	2a00      	cmp	r2, #0
 800183e:	d10f      	bne.n	8001860 <wizphy_getphyconf+0x7c>
 8001840:	4a1b      	ldr	r2, [pc, #108]	@ (80018b0 <wizphy_getphyconf+0xcc>)
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf14      	ite	ne
 800184e:	2301      	movne	r3, #1
 8001850:	2300      	moveq	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <wizphy_getphyconf+0x7c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	709a      	strb	r2, [r3, #2]
 800185e:	e003      	b.n	8001868 <wizphy_getphyconf+0x84>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	709a      	strb	r2, [r3, #2]
 8001866:	bf00      	nop
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800186e:	3b08      	subs	r3, #8
 8001870:	2b18      	cmp	r3, #24
 8001872:	bf8c      	ite	hi
 8001874:	2201      	movhi	r2, #1
 8001876:	2200      	movls	r2, #0
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	2a00      	cmp	r2, #0
 800187c:	d10f      	bne.n	800189e <wizphy_getphyconf+0xba>
 800187e:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <wizphy_getphyconf+0xd0>)
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf14      	ite	ne
 800188c:	2301      	movne	r3, #1
 800188e:	2300      	moveq	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <wizphy_getphyconf+0xba>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	70da      	strb	r2, [r3, #3]
 800189c:	e003      	b.n	80018a6 <wizphy_getphyconf+0xc2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	70da      	strb	r2, [r3, #3]
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	00010101 	.word	0x00010101
 80018b4:	01010001 	.word	0x01010001

080018b8 <wizphy_setphypmode>:
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018ca:	f7fe fc47 	bl	800015c <WIZCHIP_READ>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <wizphy_setphypmode+0x2a>
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	e030      	b.n	8001944 <wizphy_setphypmode+0x8c>
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d104      	bne.n	80018fa <wizphy_setphypmode+0x42>
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e003      	b.n	8001902 <wizphy_setphypmode+0x4a>
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800190a:	f7fe fc73 	bl	80001f4 <WIZCHIP_WRITE>
 800190e:	f7ff feff 	bl	8001710 <wizphy_reset>
 8001912:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001916:	f7fe fc21 	bl	800015c <WIZCHIP_READ>
 800191a:	4603      	mov	r3, r0
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d106      	bne.n	8001932 <wizphy_setphypmode+0x7a>
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <wizphy_setphypmode+0x88>
 800192e:	2300      	movs	r3, #0
 8001930:	e008      	b.n	8001944 <wizphy_setphypmode+0x8c>
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <wizphy_setphypmode+0x88>
 800193c:	2300      	movs	r3, #0
 800193e:	e001      	b.n	8001944 <wizphy_setphypmode+0x8c>
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <wizchip_setnetinfo>:
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2206      	movs	r2, #6
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800195e:	f7fe fcf7 	bl	8000350 <WIZCHIP_WRITE_BUF>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	330e      	adds	r3, #14
 8001966:	2204      	movs	r2, #4
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800196e:	f7fe fcef 	bl	8000350 <WIZCHIP_WRITE_BUF>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	330a      	adds	r3, #10
 8001976:	2204      	movs	r2, #4
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800197e:	f7fe fce7 	bl	8000350 <WIZCHIP_WRITE_BUF>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3306      	adds	r3, #6
 8001986:	2204      	movs	r2, #4
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800198e:	f7fe fcdf 	bl	8000350 <WIZCHIP_WRITE_BUF>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7c9a      	ldrb	r2, [r3, #18]
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <wizchip_setnetinfo+0x78>)
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7cda      	ldrb	r2, [r3, #19]
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <wizchip_setnetinfo+0x78>)
 80019a0:	705a      	strb	r2, [r3, #1]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7d1a      	ldrb	r2, [r3, #20]
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <wizchip_setnetinfo+0x78>)
 80019a8:	709a      	strb	r2, [r3, #2]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7d5a      	ldrb	r2, [r3, #21]
 80019ae:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <wizchip_setnetinfo+0x78>)
 80019b0:	70da      	strb	r2, [r3, #3]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7d9a      	ldrb	r2, [r3, #22]
 80019b6:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <wizchip_setnetinfo+0x7c>)
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000084 	.word	0x20000084
 80019c8:	20000088 	.word	0x20000088

080019cc <csLOW>:
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019d6:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <csLOW+0x14>)
 80019d8:	f005 f965 	bl	8006ca6 <HAL_GPIO_WritePin>
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40010c00 	.word	0x40010c00

080019e4 <csHIGH>:
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ee:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <csHIGH+0x14>)
 80019f0:	f005 f959 	bl	8006ca6 <HAL_GPIO_WritePin>
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40010c00 	.word	0x40010c00

080019fc <W25Q_delay>:
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f003 faef 	bl	8004fe8 <HAL_Delay>
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <SPI_Write>:
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4803      	ldr	r0, [pc, #12]	@ (8001a38 <SPI_Write+0x24>)
 8001a2a:	f005 fe6f 	bl	800770c <HAL_SPI_Transmit>
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000128 	.word	0x20000128

08001a3c <SPI_Read>:
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <SPI_Read+0x24>)
 8001a52:	f005 ff9f 	bl	8007994 <HAL_SPI_Receive>
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000128 	.word	0x20000128

08001a64 <W25Q_WaitForWriteEnd>:
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	71bb      	strb	r3, [r7, #6]
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f7ff ffc4 	bl	80019fc <W25Q_delay>
 8001a74:	f7ff ffaa 	bl	80019cc <csLOW>
 8001a78:	1db9      	adds	r1, r7, #6
 8001a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7e:	2201      	movs	r2, #1
 8001a80:	480b      	ldr	r0, [pc, #44]	@ (8001ab0 <W25Q_WaitForWriteEnd+0x4c>)
 8001a82:	f005 fe43 	bl	800770c <HAL_SPI_Transmit>
 8001a86:	1df9      	adds	r1, r7, #7
 8001a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <W25Q_WaitForWriteEnd+0x4c>)
 8001a90:	f005 ff80 	bl	8007994 <HAL_SPI_Receive>
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff ffb1 	bl	80019fc <W25Q_delay>
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <W25Q_WaitForWriteEnd+0x22>
 8001aa4:	f7ff ff9e 	bl	80019e4 <csHIGH>
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000128 	.word	0x20000128

08001ab4 <W25Q_Reset>:
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	2366      	movs	r3, #102	@ 0x66
 8001abc:	713b      	strb	r3, [r7, #4]
 8001abe:	2399      	movs	r3, #153	@ 0x99
 8001ac0:	717b      	strb	r3, [r7, #5]
 8001ac2:	f7ff ff83 	bl	80019cc <csLOW>
 8001ac6:	1d39      	adds	r1, r7, #4
 8001ac8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001acc:	2202      	movs	r2, #2
 8001ace:	4804      	ldr	r0, [pc, #16]	@ (8001ae0 <W25Q_Reset+0x2c>)
 8001ad0:	f005 fe1c 	bl	800770c <HAL_SPI_Transmit>
 8001ad4:	f7ff ff86 	bl	80019e4 <csHIGH>
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000128 	.word	0x20000128

08001ae4 <W25Q_FastRead>:
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	460b      	mov	r3, r1
 8001af2:	72fb      	strb	r3, [r7, #11]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	4413      	add	r3, r2
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	230b      	movs	r3, #11
 8001b00:	753b      	strb	r3, [r7, #20]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	757b      	strb	r3, [r7, #21]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	75bb      	strb	r3, [r7, #22]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	75fb      	strb	r3, [r7, #23]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	763b      	strb	r3, [r7, #24]
 8001b1c:	f7ff ff56 	bl	80019cc <csLOW>
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2105      	movs	r1, #5
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff74 	bl	8001a14 <SPI_Write>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4619      	mov	r1, r3
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f7ff ff82 	bl	8001a3c <SPI_Read>
 8001b38:	f7ff ff54 	bl	80019e4 <csHIGH>
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <W25Q_FastRead_address>:
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	230b      	movs	r3, #11
 8001b52:	743b      	strb	r3, [r7, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	747b      	strb	r3, [r7, #17]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	74bb      	strb	r3, [r7, #18]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	74fb      	strb	r3, [r7, #19]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	753b      	strb	r3, [r7, #20]
 8001b6e:	f7ff ff2d 	bl	80019cc <csLOW>
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	2105      	movs	r1, #5
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff4b 	bl	8001a14 <SPI_Write>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff59 	bl	8001a3c <SPI_Read>
 8001b8a:	f7ff ff2b 	bl	80019e4 <csHIGH>
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <write_enable>:
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	71fb      	strb	r3, [r7, #7]
 8001ba0:	f7ff ff14 	bl	80019cc <csLOW>
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff33 	bl	8001a14 <SPI_Write>
 8001bae:	f7ff ff19 	bl	80019e4 <csHIGH>
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7ff ff22 	bl	80019fc <W25Q_delay>
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <write_disable>:
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	f7ff feff 	bl	80019cc <csLOW>
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff1e 	bl	8001a14 <SPI_Write>
 8001bd8:	f7ff ff04 	bl	80019e4 <csHIGH>
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff ff0d 	bl	80019fc <W25Q_delay>
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <W25Q_EraseChip>:
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	23c7      	movs	r3, #199	@ 0xc7
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	f7ff ffcf 	bl	8001b96 <write_enable>
 8001bf8:	f7ff fee8 	bl	80019cc <csLOW>
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	2101      	movs	r1, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff07 	bl	8001a14 <SPI_Write>
 8001c06:	f7ff feed 	bl	80019e4 <csHIGH>
 8001c0a:	f7ff ff2b 	bl	8001a64 <W25Q_WaitForWriteEnd>
 8001c0e:	2005      	movs	r0, #5
 8001c10:	f7ff fef4 	bl	80019fc <W25Q_delay>
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <W25Q_Erase_Sector>:
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	031b      	lsls	r3, r3, #12
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	f7ff ff1a 	bl	8001a64 <W25Q_WaitForWriteEnd>
 8001c30:	f7ff ffb1 	bl	8001b96 <write_enable>
 8001c34:	2320      	movs	r3, #32
 8001c36:	733b      	strb	r3, [r7, #12]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	0c1b      	lsrs	r3, r3, #16
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	737b      	strb	r3, [r7, #13]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	73bb      	strb	r3, [r7, #14]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	f7ff febd 	bl	80019cc <csLOW>
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2104      	movs	r1, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fedb 	bl	8001a14 <SPI_Write>
 8001c5e:	f7ff fec1 	bl	80019e4 <csHIGH>
 8001c62:	f7ff feff 	bl	8001a64 <W25Q_WaitForWriteEnd>
 8001c66:	f7ff ffab 	bl	8001bc0 <write_disable>
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <W25Q_Read_Byte>:
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	743b      	strb	r3, [r7, #16]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	747b      	strb	r3, [r7, #17]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	74bb      	strb	r3, [r7, #18]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	74fb      	strb	r3, [r7, #19]
 8001c94:	f7ff fe9a 	bl	80019cc <csLOW>
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff feb8 	bl	8001a14 <SPI_Write>
 8001ca4:	f107 030f 	add.w	r3, r7, #15
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fec6 	bl	8001a3c <SPI_Read>
 8001cb0:	f7ff fe98 	bl	80019e4 <csHIGH>
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <W25Q_Write_Nbytes>:
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b0c8      	sub	sp, #288	@ 0x120
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cc8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ccc:	6018      	str	r0, [r3, #0]
 8001cce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cd2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001cd6:	6019      	str	r1, [r3, #0]
 8001cd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cdc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ce6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cea:	2202      	movs	r2, #2
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cf2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d04:	705a      	strb	r2, [r3, #1]
 8001d06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d1c:	709a      	strb	r2, [r3, #2]
 8001d1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d2e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d32:	70da      	strb	r2, [r3, #3]
 8001d34:	2304      	movs	r3, #4
 8001d36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8001d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d44:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8001d58:	e018      	b.n	8001d8c <W25Q_Write_Nbytes+0xce>
 8001d5a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d5e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d62:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	441a      	add	r2, r3
 8001d6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001d6e:	1c59      	adds	r1, r3, #1
 8001d70:	f887 111f 	strb.w	r1, [r7, #287]	@ 0x11f
 8001d74:	4619      	mov	r1, r3
 8001d76:	7812      	ldrb	r2, [r2, #0]
 8001d78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d80:	545a      	strb	r2, [r3, r1]
 8001d82:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d86:	3301      	adds	r3, #1
 8001d88:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8001d8c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001d90:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d94:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d8dd      	bhi.n	8001d5a <W25Q_Write_Nbytes+0x9c>
 8001d9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001da2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	f7ff ff63 	bl	8001c72 <W25Q_Read_Byte>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2bff      	cmp	r3, #255	@ 0xff
 8001db0:	d12b      	bne.n	8001e0a <W25Q_Write_Nbytes+0x14c>
 8001db2:	f7ff fef0 	bl	8001b96 <write_enable>
 8001db6:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8001dba:	2bfa      	cmp	r3, #250	@ 0xfa
 8001dbc:	d915      	bls.n	8001dea <W25Q_Write_Nbytes+0x12c>
 8001dbe:	f7ff fe05 	bl	80019cc <csLOW>
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	2164      	movs	r1, #100	@ 0x64
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fe23 	bl	8001a14 <SPI_Write>
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	3364      	adds	r3, #100	@ 0x64
 8001dd4:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8001dd8:	3a64      	subs	r2, #100	@ 0x64
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fe18 	bl	8001a14 <SPI_Write>
 8001de4:	f7ff fdfe 	bl	80019e4 <csHIGH>
 8001de8:	e00b      	b.n	8001e02 <W25Q_Write_Nbytes+0x144>
 8001dea:	f7ff fdef 	bl	80019cc <csLOW>
 8001dee:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fe0b 	bl	8001a14 <SPI_Write>
 8001dfe:	f7ff fdf1 	bl	80019e4 <csHIGH>
 8001e02:	f7ff fe2f 	bl	8001a64 <W25Q_WaitForWriteEnd>
 8001e06:	f7ff fedb 	bl	8001bc0 <write_disable>
 8001e0a:	bf00      	nop
 8001e0c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == huart1.Instance)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b3d      	ldr	r3, [pc, #244]	@ (8001f1c <HAL_UARTEx_RxEventCallback+0x108>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d165      	bne.n	8001ef8 <HAL_UARTEx_RxEventCallback+0xe4>
	{
		heardbit_REB = HAL_GetTick(); // Heard bit from REB
 8001e2c:	f003 f8d2 	bl	8004fd4 <HAL_GetTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a3b      	ldr	r2, [pc, #236]	@ (8001f20 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001e34:	6013      	str	r3, [r2, #0]
		switch (uart_data[0])
 8001e36:	4b3b      	ldr	r3, [pc, #236]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b43      	cmp	r3, #67	@ 0x43
 8001e3c:	d03d      	beq.n	8001eba <HAL_UARTEx_RxEventCallback+0xa6>
 8001e3e:	2b44      	cmp	r3, #68	@ 0x44
 8001e40:	d15a      	bne.n	8001ef8 <HAL_UARTEx_RxEventCallback+0xe4>
		{
		case 0x44: //Data: D
			wcode = uart_data[1]<<24|uart_data[2]<<16|uart_data[3]<<8|uart_data[4];
 8001e42:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	061a      	lsls	r2, r3, #24
 8001e48:	4b36      	ldr	r3, [pc, #216]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001e4a:	789b      	ldrb	r3, [r3, #2]
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	4b34      	ldr	r3, [pc, #208]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001e52:	78db      	ldrb	r3, [r3, #3]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4313      	orrs	r3, r2
 8001e58:	4a32      	ldr	r2, [pc, #200]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001e5a:	7912      	ldrb	r2, [r2, #4]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <HAL_UARTEx_RxEventCallback+0x114>)
 8001e62:	601a      	str	r2, [r3, #0]
			if (!write_mode && !write_mode_somecard && !write_card_by_hand)
 8001e64:	4b31      	ldr	r3, [pc, #196]	@ (8001f2c <HAL_UARTEx_RxEventCallback+0x118>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d01b      	beq.n	8001eaa <HAL_UARTEx_RxEventCallback+0x96>
 8001e72:	4b2f      	ldr	r3, [pc, #188]	@ (8001f30 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d014      	beq.n	8001eaa <HAL_UARTEx_RxEventCallback+0x96>
 8001e80:	4b2c      	ldr	r3, [pc, #176]	@ (8001f34 <HAL_UARTEx_RxEventCallback+0x120>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f083 0301 	eor.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00d      	beq.n	8001eaa <HAL_UARTEx_RxEventCallback+0x96>
			{
				sendData_eth("D", wcode);
 8001e8e:	4b26      	ldr	r3, [pc, #152]	@ (8001f28 <HAL_UARTEx_RxEventCallback+0x114>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4828      	ldr	r0, [pc, #160]	@ (8001f38 <HAL_UARTEx_RxEventCallback+0x124>)
 8001e96:	f001 fff5 	bl	8003e84 <sendData_eth>
				isSendDataEth = true;
 8001e9a:	4b28      	ldr	r3, [pc, #160]	@ (8001f3c <HAL_UARTEx_RxEventCallback+0x128>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
				timeSendDataEth = HAL_GetTick();
 8001ea0:	f003 f898 	bl	8004fd4 <HAL_GetTick>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a26      	ldr	r2, [pc, #152]	@ (8001f40 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001ea8:	6013      	str	r3, [r2, #0]
			}
			if (write_card_by_hand)
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <HAL_UARTEx_RxEventCallback+0x120>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d021      	beq.n	8001ef6 <HAL_UARTEx_RxEventCallback+0xe2>
			{
				new_wcode = true;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <HAL_UARTEx_RxEventCallback+0x130>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001eb8:	e01d      	b.n	8001ef6 <HAL_UARTEx_RxEventCallback+0xe2>
		case 0x43://Comand: C
//			send_uart_to_REB = true;
			if (send_uart_to_REB)
 8001eba:	4b23      	ldr	r3, [pc, #140]	@ (8001f48 <HAL_UARTEx_RxEventCallback+0x134>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_UARTEx_RxEventCallback+0xc2>
			{
				send_uart_to_REB = false;
 8001ec2:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <HAL_UARTEx_RxEventCallback+0x134>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
				sendData_uart("I", send_uart);
 8001ec8:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <HAL_UARTEx_RxEventCallback+0x138>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4820      	ldr	r0, [pc, #128]	@ (8001f50 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001ed0:	f002 f95a 	bl	8004188 <sendData_uart>
 8001ed4:	e005      	b.n	8001ee2 <HAL_UARTEx_RxEventCallback+0xce>
			} else
			{
				sendData_uart("I", uart_bypass);
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <HAL_UARTEx_RxEventCallback+0x140>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	481c      	ldr	r0, [pc, #112]	@ (8001f50 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001ede:	f002 f953 	bl	8004188 <sendData_uart>
			}
//			time_send_uart = HAL_GetTick();
			bypass_from_REB = uart_data[4];
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001ee4:	791b      	ldrb	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf14      	ite	ne
 8001eea:	2301      	movne	r3, #1
 8001eec:	2300      	moveq	r3, #0
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_UARTEx_RxEventCallback+0x144>)
 8001ef2:	701a      	strb	r2, [r3, #0]
			break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_UARTEx_RxEventCallback+0xe4>
			break;
 8001ef6:	bf00      	nop
		}
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 50);
 8001ef8:	2232      	movs	r2, #50	@ 0x32
 8001efa:	490a      	ldr	r1, [pc, #40]	@ (8001f24 <HAL_UARTEx_RxEventCallback+0x110>)
 8001efc:	4807      	ldr	r0, [pc, #28]	@ (8001f1c <HAL_UARTEx_RxEventCallback+0x108>)
 8001efe:	f006 fde2 	bl	8008ac6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001f02:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <HAL_UARTEx_RxEventCallback+0x148>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_UARTEx_RxEventCallback+0x148>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0204 	bic.w	r2, r2, #4
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000210 	.word	0x20000210
 8001f20:	200006b4 	.word	0x200006b4
 8001f24:	200002d0 	.word	0x200002d0
 8001f28:	2000058c 	.word	0x2000058c
 8001f2c:	20000727 	.word	0x20000727
 8001f30:	20000726 	.word	0x20000726
 8001f34:	2000072f 	.word	0x2000072f
 8001f38:	08009a18 	.word	0x08009a18
 8001f3c:	20000725 	.word	0x20000725
 8001f40:	200006b8 	.word	0x200006b8
 8001f44:	2000072b 	.word	0x2000072b
 8001f48:	20000733 	.word	0x20000733
 8001f4c:	20000580 	.word	0x20000580
 8001f50:	08009a1c 	.word	0x08009a1c
 8001f54:	20000030 	.word	0x20000030
 8001f58:	200006e0 	.word	0x200006e0
 8001f5c:	20000258 	.word	0x20000258

08001f60 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RST_Pin)
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	2b40      	cmp	r3, #64	@ 0x40
 8001f6e:	d145      	bne.n	8001ffc <HAL_GPIO_EXTI_Callback+0x9c>
	{
		HAL_Delay(20);
 8001f70:	2014      	movs	r0, #20
 8001f72:	f003 f839 	bl	8004fe8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin) == 0)
 8001f76:	2140      	movs	r1, #64	@ 0x40
 8001f78:	4822      	ldr	r0, [pc, #136]	@ (8002004 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f7a:	f004 fe7d 	bl	8006c78 <HAL_GPIO_ReadPin>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d13b      	bne.n	8001ffc <HAL_GPIO_EXTI_Callback+0x9c>
		{
			RST_set = true;
 8001f84:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
			RST_timer = HAL_GetTick();
 8001f8a:	f003 f823 	bl	8004fd4 <HAL_GetTick>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a1e      	ldr	r2, [pc, #120]	@ (800200c <HAL_GPIO_EXTI_Callback+0xac>)
 8001f92:	6013      	str	r3, [r2, #0]
			count_RST = 2000;
 8001f94:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001f96:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001f9a:	601a      	str	r2, [r3, #0]
			while (!HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin))
 8001f9c:	e027      	b.n	8001fee <HAL_GPIO_EXTI_Callback+0x8e>
			{
				RST_timer_last = HAL_GetTick() - RST_timer;
 8001f9e:	f003 f819 	bl	8004fd4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_GPIO_EXTI_Callback+0xac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	4a1a      	ldr	r2, [pc, #104]	@ (8002014 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001fac:	6013      	str	r3, [r2, #0]
//				if ((RST_timer_last > 5000) && (RST_timer_last < 10000))
//				{
//					count_RST = 500;
//				} else
				if (RST_timer_last > 10000)
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d902      	bls.n	8001fc0 <HAL_GPIO_EXTI_Callback+0x60>
				{
					count_RST = 100;
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001fbc:	2264      	movs	r2, #100	@ 0x64
 8001fbe:	601a      	str	r2, [r3, #0]
				}
				if (HAL_GetTick() - RST_timer_now > count_RST)
 8001fc0:	f003 f808 	bl	8004fd4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	1ad2      	subs	r2, r2, r3
 8001fcc:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d909      	bls.n	8001fe8 <HAL_GPIO_EXTI_Callback+0x88>
				{
					RST_timer_now = HAL_GetTick();
 8001fd4:	f002 fffe 	bl	8004fd4 <HAL_GetTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001fdc:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8001fde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fe2:	480e      	ldr	r0, [pc, #56]	@ (800201c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001fe4:	f004 fe77 	bl	8006cd6 <HAL_GPIO_TogglePin>
				}
				HAL_Delay(10);
 8001fe8:	200a      	movs	r0, #10
 8001fea:	f002 fffd 	bl	8004fe8 <HAL_Delay>
			while (!HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin))
 8001fee:	2140      	movs	r1, #64	@ 0x40
 8001ff0:	4804      	ldr	r0, [pc, #16]	@ (8002004 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001ff2:	f004 fe41 	bl	8006c78 <HAL_GPIO_ReadPin>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0d0      	beq.n	8001f9e <HAL_GPIO_EXTI_Callback+0x3e>
			}
		}
	}
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40010c00 	.word	0x40010c00
 8002008:	20000731 	.word	0x20000731
 800200c:	200006c0 	.word	0x200006c0
 8002010:	200006cc 	.word	0x200006cc
 8002014:	200006c8 	.word	0x200006c8
 8002018:	200006c4 	.word	0x200006c4
 800201c:	40011000 	.word	0x40011000

08002020 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af02      	add	r7, sp, #8
 8002026:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b49      	ldr	r3, [pc, #292]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d169      	bne.n	8002108 <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		// calculator data
		if (counter_start < time_delay)
 8002034:	4b48      	ldr	r3, [pc, #288]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	4b48      	ldr	r3, [pc, #288]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d205      	bcs.n	800204c <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			counter_start++;
 8002040:	4b45      	ldr	r3, [pc, #276]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b43      	ldr	r3, [pc, #268]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800204a:	701a      	strb	r2, [r3, #0]
		}
		if (write_mode || write_mode_somecard || unlock_fire || bypass_from_Eth || bypass_from_REB || !REB_connected || !HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin))
 800204c:	4b44      	ldr	r3, [pc, #272]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d11d      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002054:	4b43      	ldr	r3, [pc, #268]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d119      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 800205c:	4b42      	ldr	r3, [pc, #264]	@ (8002168 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d115      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002064:	4b41      	ldr	r3, [pc, #260]	@ (800216c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d111      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 800206c:	4b40      	ldr	r3, [pc, #256]	@ (8002170 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10d      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002074:	4b3f      	ldr	r3, [pc, #252]	@ (8002174 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x70>
 8002082:	2104      	movs	r1, #4
 8002084:	483c      	ldr	r0, [pc, #240]	@ (8002178 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002086:	f004 fdf7 	bl	8006c78 <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d121      	bne.n	80020d4 <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
			data_MC2B[0] = 1;
 8002090:	4b3a      	ldr	r3, [pc, #232]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
			data_MC2B[1] = 0;
 8002096:	4b39      	ldr	r3, [pc, #228]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002098:	2200      	movs	r2, #0
 800209a:	705a      	strb	r2, [r3, #1]
			data_MC2B[2] = 0;
 800209c:	4b37      	ldr	r3, [pc, #220]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	709a      	strb	r2, [r3, #2]
			data_MC2B[3] = 0;
 80020a2:	4b36      	ldr	r3, [pc, #216]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	70da      	strb	r2, [r3, #3]
			data_MC2B[4] = 0;
 80020a8:	4b34      	ldr	r3, [pc, #208]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	711a      	strb	r2, [r3, #4]
			data_MC2B[5] = 0;
 80020ae:	4b33      	ldr	r3, [pc, #204]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	715a      	strb	r2, [r3, #5]
			data_MC2B[6] = 0;
 80020b4:	4b31      	ldr	r3, [pc, #196]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	719a      	strb	r2, [r3, #6]
			data_MC2B[7] = 0;
 80020ba:	4b30      	ldr	r3, [pc, #192]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	71da      	strb	r2, [r3, #7]
			HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, 1);
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020c6:	482e      	ldr	r0, [pc, #184]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80020c8:	f004 fded 	bl	8006ca6 <HAL_GPIO_WritePin>
//			sendData_uart("I", 2);
			uart_bypass = 2;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020ce:	2202      	movs	r2, #2
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e013      	b.n	80020fc <HAL_TIM_PeriodElapsedCallback+0xdc>
//			send_uart_to_REB = true;
		} else
		{
			calculate_data_can(x, x_timer, data_MC2B, lock_default, time_delay, &counter_start);
 80020d4:	4b21      	ldr	r3, [pc, #132]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80020da:	9201      	str	r2, [sp, #4]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4b2a      	ldr	r3, [pc, #168]	@ (8002188 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80020e0:	4a26      	ldr	r2, [pc, #152]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020e2:	492a      	ldr	r1, [pc, #168]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80020e4:	482a      	ldr	r0, [pc, #168]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80020e6:	f002 fa28 	bl	800453a <calculate_data_can>
			HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020f0:	4823      	ldr	r0, [pc, #140]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80020f2:	f004 fdd8 	bl	8006ca6 <HAL_GPIO_WritePin>
			uart_bypass = 3;
 80020f6:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80020f8:	2203      	movs	r2, #3
 80020fa:	701a      	strb	r2, [r3, #0]
	//		send_uart_to_REB = true;
		}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader_MC2B, data_MC2B, &TxMailbox);
 80020fc:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80020fe:	4a1f      	ldr	r2, [pc, #124]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002100:	4925      	ldr	r1, [pc, #148]	@ (8002198 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002102:	4826      	ldr	r0, [pc, #152]	@ (800219c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002104:	f003 f9ba 	bl	800547c <HAL_CAN_AddTxMessage>
//		sendData_uart("I", 3);
	}
	if (htim->Instance == htim3.Instance)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d11a      	bne.n	800214a <HAL_TIM_PeriodElapsedCallback+0x12a>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8002114:	4823      	ldr	r0, [pc, #140]	@ (80021a4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002116:	f004 fe53 	bl	8006dc0 <HAL_IWDG_Refresh>
		if (HAL_GetTick() - timeBreak > 300)
 800211a:	f002 ff5b 	bl	8004fd4 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800212a:	d902      	bls.n	8002132 <HAL_TIM_PeriodElapsedCallback+0x112>
		{
			g_uart_request_exit = 1;
 800212c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
		}
		if (!RST_set)
 8002132:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <HAL_TIM_PeriodElapsedCallback+0x12a>
		{
			HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8002140:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002144:	480e      	ldr	r0, [pc, #56]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002146:	f004 fdc6 	bl	8006cd6 <HAL_GPIO_TogglePin>
		}
	}
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000180 	.word	0x20000180
 8002158:	20000576 	.word	0x20000576
 800215c:	20000510 	.word	0x20000510
 8002160:	20000727 	.word	0x20000727
 8002164:	20000726 	.word	0x20000726
 8002168:	20000732 	.word	0x20000732
 800216c:	200006e1 	.word	0x200006e1
 8002170:	200006e0 	.word	0x200006e0
 8002174:	20000036 	.word	0x20000036
 8002178:	40010800 	.word	0x40010800
 800217c:	20000544 	.word	0x20000544
 8002180:	40011000 	.word	0x40011000
 8002184:	20000030 	.word	0x20000030
 8002188:	20000514 	.word	0x20000514
 800218c:	20000594 	.word	0x20000594
 8002190:	200006e4 	.word	0x200006e4
 8002194:	20000590 	.word	0x20000590
 8002198:	200002b8 	.word	0x200002b8
 800219c:	2000009c 	.word	0x2000009c
 80021a0:	200001c8 	.word	0x200001c8
 80021a4:	200000c4 	.word	0x200000c4
 80021a8:	200006bc 	.word	0x200006bc
 80021ac:	20000078 	.word	0x20000078
 80021b0:	20000731 	.word	0x20000731

080021b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80021be:	4a13      	ldr	r2, [pc, #76]	@ (800220c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80021c0:	2100      	movs	r1, #0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f003 faa1 	bl	800570a <HAL_CAN_GetRxMessage>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
	    Error_Handler();
 80021ce:	f002 fc3f 	bl	8004a50 <Error_Handler>
	}
	if (RxHeader.StdId == 0x740 && RxData[2] == 0x48)
 80021d2:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 80021da:	d110      	bne.n	80021fe <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 80021dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80021de:	789b      	ldrb	r3, [r3, #2]
 80021e0:	2b48      	cmp	r3, #72	@ 0x48
 80021e2:	d10c      	bne.n	80021fe <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	{
		if ((RxData[4] & 0x40) == 0x40)
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		{
			unlock_fire = true;
 80021f0:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
		} else
		{
			unlock_fire = false;
		}
	}
}
 80021f6:	e002      	b.n	80021fe <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
			unlock_fire = false;
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000578 	.word	0x20000578
 800220c:	2000029c 	.word	0x2000029c
 8002210:	20000732 	.word	0x20000732

08002214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002216:	b0b5      	sub	sp, #212	@ 0xd4
 8002218:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800221a:	f002 fe83 	bl	8004f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800221e:	f001 fb67 	bl	80038f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_DBGMCU_FREEZE_IWDG();
 8002222:	4b92      	ldr	r3, [pc, #584]	@ (800246c <main+0x258>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a91      	ldr	r2, [pc, #580]	@ (800246c <main+0x258>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222c:	6053      	str	r3, [r2, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222e:	f001 fd47 	bl	8003cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002232:	f001 fd27 	bl	8003c84 <MX_DMA_Init>
  MX_CAN_Init();
 8002236:	f001 fba3 	bl	8003980 <MX_CAN_Init>
  MX_SPI1_Init();
 800223a:	f001 fbf1 	bl	8003a20 <MX_SPI1_Init>
  MX_SPI2_Init();
 800223e:	f001 fc25 	bl	8003a8c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002242:	f001 fcf5 	bl	8003c30 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002246:	f001 fca5 	bl	8003b94 <MX_TIM3_Init>
  MX_IWDG_Init();
 800224a:	f001 fbcf 	bl	80039ec <MX_IWDG_Init>
  MX_TIM2_Init();
 800224e:	f001 fc53 	bl	8003af8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8002252:	4887      	ldr	r0, [pc, #540]	@ (8002470 <main+0x25c>)
 8002254:	f005 ffba 	bl	80081cc <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 50);
 8002258:	2232      	movs	r2, #50	@ 0x32
 800225a:	4986      	ldr	r1, [pc, #536]	@ (8002474 <main+0x260>)
 800225c:	4886      	ldr	r0, [pc, #536]	@ (8002478 <main+0x264>)
 800225e:	f006 fc32 	bl	8008ac6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002262:	4b86      	ldr	r3, [pc, #536]	@ (800247c <main+0x268>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b84      	ldr	r3, [pc, #528]	@ (800247c <main+0x268>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0204 	bic.w	r2, r2, #4
 8002270:	601a      	str	r2, [r3, #0]
  TxHeader_MC2B.DLC = 8;
 8002272:	4b83      	ldr	r3, [pc, #524]	@ (8002480 <main+0x26c>)
 8002274:	2208      	movs	r2, #8
 8002276:	611a      	str	r2, [r3, #16]
  TxHeader_MC2B.ExtId = 0x47FF;
 8002278:	4b81      	ldr	r3, [pc, #516]	@ (8002480 <main+0x26c>)
 800227a:	f244 72ff 	movw	r2, #18431	@ 0x47ff
 800227e:	605a      	str	r2, [r3, #4]
  TxHeader_MC2B.IDE = CAN_ID_EXT;
 8002280:	4b7f      	ldr	r3, [pc, #508]	@ (8002480 <main+0x26c>)
 8002282:	2204      	movs	r2, #4
 8002284:	609a      	str	r2, [r3, #8]
  TxHeader_MC2B.RTR = CAN_RTR_DATA;
 8002286:	4b7e      	ldr	r3, [pc, #504]	@ (8002480 <main+0x26c>)
 8002288:	2200      	movs	r2, #0
 800228a:	60da      	str	r2, [r3, #12]
  TxHeader_MC2B.StdId = 0;
 800228c:	4b7c      	ldr	r3, [pc, #496]	@ (8002480 <main+0x26c>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
  TxHeader_MC2B.TransmitGlobalTime = DISABLE;
 8002292:	4b7b      	ldr	r3, [pc, #492]	@ (8002480 <main+0x26c>)
 8002294:	2200      	movs	r2, #0
 8002296:	751a      	strb	r2, [r3, #20]

  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002298:	4b7a      	ldr	r3, [pc, #488]	@ (8002484 <main+0x270>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
  EraseInit.Banks = FLASH_BANK_1;
 800229e:	4b79      	ldr	r3, [pc, #484]	@ (8002484 <main+0x270>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	605a      	str	r2, [r3, #4]
  EraseInit.PageAddress =  0x0800FC00;
 80022a4:	4b77      	ldr	r3, [pc, #476]	@ (8002484 <main+0x270>)
 80022a6:	4a78      	ldr	r2, [pc, #480]	@ (8002488 <main+0x274>)
 80022a8:	609a      	str	r2, [r3, #8]
  EraseInit.NbPages = 1;
 80022aa:	4b76      	ldr	r3, [pc, #472]	@ (8002484 <main+0x270>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	60da      	str	r2, [r3, #12]
  ip1 = *(uint32_t *)(0x0800FC00);
 80022b0:	4b75      	ldr	r3, [pc, #468]	@ (8002488 <main+0x274>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4b75      	ldr	r3, [pc, #468]	@ (800248c <main+0x278>)
 80022b8:	701a      	strb	r2, [r3, #0]
  ip2 = *(uint32_t *)(0x0800FC04);
 80022ba:	4b75      	ldr	r3, [pc, #468]	@ (8002490 <main+0x27c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b74      	ldr	r3, [pc, #464]	@ (8002494 <main+0x280>)
 80022c2:	701a      	strb	r2, [r3, #0]
  ip3 = *(uint32_t *)(0x0800FC08);
 80022c4:	4b74      	ldr	r3, [pc, #464]	@ (8002498 <main+0x284>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b74      	ldr	r3, [pc, #464]	@ (800249c <main+0x288>)
 80022cc:	701a      	strb	r2, [r3, #0]
  ip4 = *(uint32_t *)(0x0800FC0C);
 80022ce:	4b74      	ldr	r3, [pc, #464]	@ (80024a0 <main+0x28c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b73      	ldr	r3, [pc, #460]	@ (80024a4 <main+0x290>)
 80022d6:	701a      	strb	r2, [r3, #0]
  port_client = *(uint32_t *)(0x0800FC10);
 80022d8:	4b73      	ldr	r3, [pc, #460]	@ (80024a8 <main+0x294>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	4b73      	ldr	r3, [pc, #460]	@ (80024ac <main+0x298>)
 80022e0:	801a      	strh	r2, [r3, #0]
  ip_server1 = *(uint32_t *)(0x0800FC14);
 80022e2:	4b73      	ldr	r3, [pc, #460]	@ (80024b0 <main+0x29c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b72      	ldr	r3, [pc, #456]	@ (80024b4 <main+0x2a0>)
 80022ea:	701a      	strb	r2, [r3, #0]
  ip_server2 = *(uint32_t *)(0x0800FC18);
 80022ec:	4b72      	ldr	r3, [pc, #456]	@ (80024b8 <main+0x2a4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b72      	ldr	r3, [pc, #456]	@ (80024bc <main+0x2a8>)
 80022f4:	701a      	strb	r2, [r3, #0]
  ip_server3 = *(uint32_t *)(0x0800FC1C);
 80022f6:	4b72      	ldr	r3, [pc, #456]	@ (80024c0 <main+0x2ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b71      	ldr	r3, [pc, #452]	@ (80024c4 <main+0x2b0>)
 80022fe:	701a      	strb	r2, [r3, #0]
  ip_server4 = *(uint32_t *)(0x0800FC20);
 8002300:	4b71      	ldr	r3, [pc, #452]	@ (80024c8 <main+0x2b4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b71      	ldr	r3, [pc, #452]	@ (80024cc <main+0x2b8>)
 8002308:	701a      	strb	r2, [r3, #0]
  port_server = *(uint32_t *)(0x0800FC24);
 800230a:	4b71      	ldr	r3, [pc, #452]	@ (80024d0 <main+0x2bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b70      	ldr	r3, [pc, #448]	@ (80024d4 <main+0x2c0>)
 8002312:	801a      	strh	r2, [r3, #0]
  time_delay = *(uint32_t *)(0x0800FC28);
 8002314:	4b70      	ldr	r3, [pc, #448]	@ (80024d8 <main+0x2c4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b70      	ldr	r3, [pc, #448]	@ (80024dc <main+0x2c8>)
 800231c:	701a      	strb	r2, [r3, #0]
  elevator_mode = *(uint32_t *)(0x0800FC2C);
 800231e:	4b70      	ldr	r3, [pc, #448]	@ (80024e0 <main+0x2cc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b6f      	ldr	r3, [pc, #444]	@ (80024e4 <main+0x2d0>)
 8002326:	701a      	strb	r2, [r3, #0]
  lock_default_1 = *(uint32_t *)(0x0800FC30);
 8002328:	4b6f      	ldr	r3, [pc, #444]	@ (80024e8 <main+0x2d4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a6f      	ldr	r2, [pc, #444]	@ (80024ec <main+0x2d8>)
 800232e:	6013      	str	r3, [r2, #0]
  lock_default_2 = *(uint32_t *)(0x0800FC34);
 8002330:	4b6f      	ldr	r3, [pc, #444]	@ (80024f0 <main+0x2dc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6f      	ldr	r2, [pc, #444]	@ (80024f4 <main+0x2e0>)
 8002336:	6013      	str	r3, [r2, #0]
  if (ip1 == 0xFF) ip1 = 192;
 8002338:	4b54      	ldr	r3, [pc, #336]	@ (800248c <main+0x278>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2bff      	cmp	r3, #255	@ 0xff
 800233e:	d102      	bne.n	8002346 <main+0x132>
 8002340:	4b52      	ldr	r3, [pc, #328]	@ (800248c <main+0x278>)
 8002342:	22c0      	movs	r2, #192	@ 0xc0
 8002344:	701a      	strb	r2, [r3, #0]
  if (ip2 == 0xFF) ip2 = 168;
 8002346:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <main+0x280>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2bff      	cmp	r3, #255	@ 0xff
 800234c:	d102      	bne.n	8002354 <main+0x140>
 800234e:	4b51      	ldr	r3, [pc, #324]	@ (8002494 <main+0x280>)
 8002350:	22a8      	movs	r2, #168	@ 0xa8
 8002352:	701a      	strb	r2, [r3, #0]
  if (ip3 == 0xFF) ip3 = 0;
 8002354:	4b51      	ldr	r3, [pc, #324]	@ (800249c <main+0x288>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2bff      	cmp	r3, #255	@ 0xff
 800235a:	d102      	bne.n	8002362 <main+0x14e>
 800235c:	4b4f      	ldr	r3, [pc, #316]	@ (800249c <main+0x288>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
  if (ip4 == 0xFF) ip4 = 72;
 8002362:	4b50      	ldr	r3, [pc, #320]	@ (80024a4 <main+0x290>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2bff      	cmp	r3, #255	@ 0xff
 8002368:	d102      	bne.n	8002370 <main+0x15c>
 800236a:	4b4e      	ldr	r3, [pc, #312]	@ (80024a4 <main+0x290>)
 800236c:	2248      	movs	r2, #72	@ 0x48
 800236e:	701a      	strb	r2, [r3, #0]
  if (port_client == 0xFFFF) port_client = 0;
 8002370:	4b4e      	ldr	r3, [pc, #312]	@ (80024ac <main+0x298>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002378:	4293      	cmp	r3, r2
 800237a:	d102      	bne.n	8002382 <main+0x16e>
 800237c:	4b4b      	ldr	r3, [pc, #300]	@ (80024ac <main+0x298>)
 800237e:	2200      	movs	r2, #0
 8002380:	801a      	strh	r2, [r3, #0]
  if (ip_server1 == 0xFF) ip_server1 = 192;
 8002382:	4b4c      	ldr	r3, [pc, #304]	@ (80024b4 <main+0x2a0>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2bff      	cmp	r3, #255	@ 0xff
 8002388:	d102      	bne.n	8002390 <main+0x17c>
 800238a:	4b4a      	ldr	r3, [pc, #296]	@ (80024b4 <main+0x2a0>)
 800238c:	22c0      	movs	r2, #192	@ 0xc0
 800238e:	701a      	strb	r2, [r3, #0]
  if (ip_server2 == 0xFF) ip_server2 = 168;
 8002390:	4b4a      	ldr	r3, [pc, #296]	@ (80024bc <main+0x2a8>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2bff      	cmp	r3, #255	@ 0xff
 8002396:	d102      	bne.n	800239e <main+0x18a>
 8002398:	4b48      	ldr	r3, [pc, #288]	@ (80024bc <main+0x2a8>)
 800239a:	22a8      	movs	r2, #168	@ 0xa8
 800239c:	701a      	strb	r2, [r3, #0]
  if (ip_server3 == 0xFF) ip_server3 = 0;
 800239e:	4b49      	ldr	r3, [pc, #292]	@ (80024c4 <main+0x2b0>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2bff      	cmp	r3, #255	@ 0xff
 80023a4:	d102      	bne.n	80023ac <main+0x198>
 80023a6:	4b47      	ldr	r3, [pc, #284]	@ (80024c4 <main+0x2b0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
  if (ip_server4 == 0xFF) ip_server4 = 2;
 80023ac:	4b47      	ldr	r3, [pc, #284]	@ (80024cc <main+0x2b8>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2bff      	cmp	r3, #255	@ 0xff
 80023b2:	d102      	bne.n	80023ba <main+0x1a6>
 80023b4:	4b45      	ldr	r3, [pc, #276]	@ (80024cc <main+0x2b8>)
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
  if (port_server == 0xFFFF) port_server = 6000;
 80023ba:	4b46      	ldr	r3, [pc, #280]	@ (80024d4 <main+0x2c0>)
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d103      	bne.n	80023ce <main+0x1ba>
 80023c6:	4b43      	ldr	r3, [pc, #268]	@ (80024d4 <main+0x2c0>)
 80023c8:	f241 7270 	movw	r2, #6000	@ 0x1770
 80023cc:	801a      	strh	r2, [r3, #0]
  if (time_delay == 0xFF) time_delay = 1;
 80023ce:	4b43      	ldr	r3, [pc, #268]	@ (80024dc <main+0x2c8>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2bff      	cmp	r3, #255	@ 0xff
 80023d4:	d102      	bne.n	80023dc <main+0x1c8>
 80023d6:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <main+0x2c8>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
  if (elevator_mode == 0xFF) elevator_mode = 0;
 80023dc:	4b41      	ldr	r3, [pc, #260]	@ (80024e4 <main+0x2d0>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2bff      	cmp	r3, #255	@ 0xff
 80023e2:	d102      	bne.n	80023ea <main+0x1d6>
 80023e4:	4b3f      	ldr	r3, [pc, #252]	@ (80024e4 <main+0x2d0>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
//  if (lock_default_1 == 0xFFFFFFFF) lock_default_1 = 0;
//  if (lock_default_2 == 0xFFFFFFFF) lock_default_2 = 0;
  lock_default[0] = lock_default_1 & 0xFF;
 80023ea:	4b40      	ldr	r3, [pc, #256]	@ (80024ec <main+0x2d8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b41      	ldr	r3, [pc, #260]	@ (80024f8 <main+0x2e4>)
 80023f2:	701a      	strb	r2, [r3, #0]
  lock_default[1] = (lock_default_1>>8) & 0xFF;
 80023f4:	4b3d      	ldr	r3, [pc, #244]	@ (80024ec <main+0x2d8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b3e      	ldr	r3, [pc, #248]	@ (80024f8 <main+0x2e4>)
 80023fe:	705a      	strb	r2, [r3, #1]
  lock_default[2] = (lock_default_1>>16) & 0xFF;
 8002400:	4b3a      	ldr	r3, [pc, #232]	@ (80024ec <main+0x2d8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <main+0x2e4>)
 800240a:	709a      	strb	r2, [r3, #2]
  lock_default[3] = (lock_default_1>>24) & 0xFF;
 800240c:	4b37      	ldr	r3, [pc, #220]	@ (80024ec <main+0x2d8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0e1b      	lsrs	r3, r3, #24
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b38      	ldr	r3, [pc, #224]	@ (80024f8 <main+0x2e4>)
 8002416:	70da      	strb	r2, [r3, #3]
  lock_default[4] = lock_default_2 & 0xFF;
 8002418:	4b36      	ldr	r3, [pc, #216]	@ (80024f4 <main+0x2e0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b36      	ldr	r3, [pc, #216]	@ (80024f8 <main+0x2e4>)
 8002420:	711a      	strb	r2, [r3, #4]
  lock_default[5] = (lock_default_2>>8) & 0xFF;
 8002422:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <main+0x2e0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b33      	ldr	r3, [pc, #204]	@ (80024f8 <main+0x2e4>)
 800242c:	715a      	strb	r2, [r3, #5]
  lock_default[6] = (lock_default_2>>16) & 0xFF;
 800242e:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <main+0x2e0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b30      	ldr	r3, [pc, #192]	@ (80024f8 <main+0x2e4>)
 8002438:	719a      	strb	r2, [r3, #6]
  lock_default[7] = (lock_default_2>>24) & 0xFF;
 800243a:	4b2e      	ldr	r3, [pc, #184]	@ (80024f4 <main+0x2e0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	0e1b      	lsrs	r3, r3, #24
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b2d      	ldr	r3, [pc, #180]	@ (80024f8 <main+0x2e4>)
 8002444:	71da      	strb	r2, [r3, #7]
  server_ip[0] = ip_server1;
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <main+0x2a0>)
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	4b2c      	ldr	r3, [pc, #176]	@ (80024fc <main+0x2e8>)
 800244c:	701a      	strb	r2, [r3, #0]
  server_ip[1] = ip_server2;
 800244e:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <main+0x2a8>)
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <main+0x2e8>)
 8002454:	705a      	strb	r2, [r3, #1]
  server_ip[2] = ip_server3;
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <main+0x2b0>)
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <main+0x2e8>)
 800245c:	709a      	strb	r2, [r3, #2]
  server_ip[3] = ip_server4;
 800245e:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <main+0x2b8>)
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <main+0x2e8>)
 8002464:	70da      	strb	r2, [r3, #3]

  W25Q_Reset();
 8002466:	f7ff fb25 	bl	8001ab4 <W25Q_Reset>
//  W25Q_EraseChip();
  while(user.STT!=0xFFFFFFFF)
 800246a:	e05c      	b.n	8002526 <main+0x312>
 800246c:	e0042000 	.word	0xe0042000
 8002470:	200001c8 	.word	0x200001c8
 8002474:	200002d0 	.word	0x200002d0
 8002478:	20000210 	.word	0x20000210
 800247c:	20000258 	.word	0x20000258
 8002480:	200002b8 	.word	0x200002b8
 8002484:	2000008c 	.word	0x2000008c
 8002488:	0800fc00 	.word	0x0800fc00
 800248c:	2000051c 	.word	0x2000051c
 8002490:	0800fc04 	.word	0x0800fc04
 8002494:	2000051d 	.word	0x2000051d
 8002498:	0800fc08 	.word	0x0800fc08
 800249c:	2000051e 	.word	0x2000051e
 80024a0:	0800fc0c 	.word	0x0800fc0c
 80024a4:	2000051f 	.word	0x2000051f
 80024a8:	0800fc10 	.word	0x0800fc10
 80024ac:	20000584 	.word	0x20000584
 80024b0:	0800fc14 	.word	0x0800fc14
 80024b4:	20000520 	.word	0x20000520
 80024b8:	0800fc18 	.word	0x0800fc18
 80024bc:	20000521 	.word	0x20000521
 80024c0:	0800fc1c 	.word	0x0800fc1c
 80024c4:	20000522 	.word	0x20000522
 80024c8:	0800fc20 	.word	0x0800fc20
 80024cc:	20000523 	.word	0x20000523
 80024d0:	0800fc24 	.word	0x0800fc24
 80024d4:	20000582 	.word	0x20000582
 80024d8:	0800fc28 	.word	0x0800fc28
 80024dc:	20000510 	.word	0x20000510
 80024e0:	0800fc2c 	.word	0x0800fc2c
 80024e4:	20000542 	.word	0x20000542
 80024e8:	0800fc30 	.word	0x0800fc30
 80024ec:	200006a8 	.word	0x200006a8
 80024f0:	0800fc34 	.word	0x0800fc34
 80024f4:	200006ac 	.word	0x200006ac
 80024f8:	20000514 	.word	0x20000514
 80024fc:	2000050c 	.word	0x2000050c
  {
	  W25Q_FastRead_address(number_card*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&user);
 8002500:	4bb4      	ldr	r3, [pc, #720]	@ (80027d4 <main+0x5c0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	015b      	lsls	r3, r3, #5
 8002506:	4ab4      	ldr	r2, [pc, #720]	@ (80027d8 <main+0x5c4>)
 8002508:	2120      	movs	r1, #32
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fb1a 	bl	8001b44 <W25Q_FastRead_address>
	  if (user.STT -1 == number_card)
 8002510:	4bb1      	ldr	r3, [pc, #708]	@ (80027d8 <main+0x5c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	1e5a      	subs	r2, r3, #1
 8002516:	4baf      	ldr	r3, [pc, #700]	@ (80027d4 <main+0x5c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d103      	bne.n	8002526 <main+0x312>
	  {
		  number_card = user.STT;
 800251e:	4bae      	ldr	r3, [pc, #696]	@ (80027d8 <main+0x5c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4aac      	ldr	r2, [pc, #688]	@ (80027d4 <main+0x5c0>)
 8002524:	6013      	str	r3, [r2, #0]
  while(user.STT!=0xFFFFFFFF)
 8002526:	4bac      	ldr	r3, [pc, #688]	@ (80027d8 <main+0x5c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d1e7      	bne.n	8002500 <main+0x2ec>
	  }
  }
  while(user_before.STT!=0xFFFFFFFF)
 8002530:	e014      	b.n	800255c <main+0x348>
  {
	  W25Q_FastRead_address(number_card_old*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&user_before);
 8002532:	4baa      	ldr	r3, [pc, #680]	@ (80027dc <main+0x5c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800253a:	015b      	lsls	r3, r3, #5
 800253c:	4aa8      	ldr	r2, [pc, #672]	@ (80027e0 <main+0x5cc>)
 800253e:	2120      	movs	r1, #32
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff faff 	bl	8001b44 <W25Q_FastRead_address>
	  if (user_before.STT -1 == number_card_old)
 8002546:	4ba6      	ldr	r3, [pc, #664]	@ (80027e0 <main+0x5cc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	4ba3      	ldr	r3, [pc, #652]	@ (80027dc <main+0x5c8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d103      	bne.n	800255c <main+0x348>
	  {
		  number_card_old = user_before.STT;
 8002554:	4ba2      	ldr	r3, [pc, #648]	@ (80027e0 <main+0x5cc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4aa0      	ldr	r2, [pc, #640]	@ (80027dc <main+0x5c8>)
 800255a:	6013      	str	r3, [r2, #0]
  while(user_before.STT!=0xFFFFFFFF)
 800255c:	4ba0      	ldr	r3, [pc, #640]	@ (80027e0 <main+0x5cc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d1e5      	bne.n	8002532 <main+0x31e>
	  }
  }
  if (number_card_old > 0)
 8002566:	4b9d      	ldr	r3, [pc, #628]	@ (80027dc <main+0x5c8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01a      	beq.n	80025a4 <main+0x390>
  {
	  for (uint32_t i=0; i<(number_card_old*sizeof(user_info_t)/Sector +2); i++)
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002574:	e00d      	b.n	8002592 <main+0x37e>
	  {
		  W25Q_Erase_Sector(i + Block32/0x1000);
 8002576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800257a:	b29b      	uxth	r3, r3
 800257c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002580:	b29b      	uxth	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fb4a 	bl	8001c1c <W25Q_Erase_Sector>
	  for (uint32_t i=0; i<(number_card_old*sizeof(user_info_t)/Sector +2); i++)
 8002588:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800258c:	3301      	adds	r3, #1
 800258e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002592:	4b92      	ldr	r3, [pc, #584]	@ (80027dc <main+0x5c8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	015b      	lsls	r3, r3, #5
 8002598:	0b1b      	lsrs	r3, r3, #12
 800259a:	3302      	adds	r3, #2
 800259c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d3e8      	bcc.n	8002576 <main+0x362>
	  }
  }
  wiz_NetInfo gWIZNETINFO = {
 80025a4:	2300      	movs	r3, #0
 80025a6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80025aa:	231c      	movs	r3, #28
 80025ac:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 80025b0:	2316      	movs	r3, #22
 80025b2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 80025b6:	f002 fd3b 	bl	8005030 <HAL_GetUIDw0>
 80025ba:	4603      	mov	r3, r0
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4b89      	ldr	r3, [pc, #548]	@ (80027e4 <main+0x5d0>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	4053      	eors	r3, r2
 80025c4:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 80025c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 80025ca:	f002 fd3b 	bl	8005044 <HAL_GetUIDw1>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4b84      	ldr	r3, [pc, #528]	@ (80027e4 <main+0x5d0>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4053      	eors	r3, r2
 80025d8:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 80025da:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
  		  .mac = {0x00, 0x1c, 0x16, (HAL_GetUIDw0()^ip4)&0xFF, (HAL_GetUIDw1()^ip4)&0xFF, (HAL_GetUIDw2()^ip4)&0xFF},
 80025de:	f002 fd3b 	bl	8005058 <HAL_GetUIDw2>
 80025e2:	4603      	mov	r3, r0
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4b7f      	ldr	r3, [pc, #508]	@ (80027e4 <main+0x5d0>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	4053      	eors	r3, r2
 80025ec:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 80025ee:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 80025f2:	4b7d      	ldr	r3, [pc, #500]	@ (80027e8 <main+0x5d4>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 80025fa:	4b7c      	ldr	r3, [pc, #496]	@ (80027ec <main+0x5d8>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8002602:	4b7b      	ldr	r3, [pc, #492]	@ (80027f0 <main+0x5dc>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800260a:	4b76      	ldr	r3, [pc, #472]	@ (80027e4 <main+0x5d0>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8002612:	4a78      	ldr	r2, [pc, #480]	@ (80027f4 <main+0x5e0>)
 8002614:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8002618:	6810      	ldr	r0, [r2, #0]
 800261a:	6018      	str	r0, [r3, #0]
 800261c:	4a76      	ldr	r2, [pc, #472]	@ (80027f8 <main+0x5e4>)
 800261e:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 8002622:	6810      	ldr	r0, [r2, #0]
 8002624:	6018      	str	r0, [r3, #0]
 8002626:	4a75      	ldr	r2, [pc, #468]	@ (80027fc <main+0x5e8>)
 8002628:	f107 0376 	add.w	r3, r7, #118	@ 0x76
 800262c:	6810      	ldr	r0, [r2, #0]
 800262e:	6018      	str	r0, [r3, #0]
 8002630:	2301      	movs	r3, #1
 8002632:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
  		  .ip = {ip1,ip2,ip3,ip4},
  		  .sn = {255, 255, 255, 0},
  		  .gw = {192, 168, 0, 1},
  		  .dns = {168, 126, 63, 1},
  		  .dhcp = NETINFO_STATIC};
  W5500Init();
 8002636:	f7fe f895 	bl	8000764 <W5500Init>
  HAL_Delay(2000);
 800263a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800263e:	f002 fcd3 	bl	8004fe8 <HAL_Delay>
  wizchip_setnetinfo(&gWIZNETINFO);
 8002642:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f980 	bl	800194c <wizchip_setnetinfo>
//  socket(SOCK_NUM, Sn_MR_TCP, port_client, SF_TCP_NODELAY);
//  connect(SOCK_NUM, server_ip, port_server);
  Set_speed_can(elevator_mode);
 800264c:	4b6c      	ldr	r3, [pc, #432]	@ (8002800 <main+0x5ec>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f002 f8e5 	bl	8004820 <Set_speed_can>
  HAL_TIM_Base_Start_IT(&htim2);
 8002656:	486b      	ldr	r0, [pc, #428]	@ (8002804 <main+0x5f0>)
 8002658:	f005 fdb8 	bl	80081cc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lenData = getSn_RX_RSR(SOCK_NUM);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fd ff20 	bl	80004a2 <getSn_RX_RSR>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	4b68      	ldr	r3, [pc, #416]	@ (8002808 <main+0x5f4>)
 8002668:	601a      	str	r2, [r3, #0]
	  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 800266a:	2000      	movs	r0, #0
 800266c:	f7fd ff19 	bl	80004a2 <getSn_RX_RSR>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	4b64      	ldr	r3, [pc, #400]	@ (8002808 <main+0x5f4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	f041 80fb 	bne.w	8003874 <main+0x1660>
	  {
		  if (lenData > 512)
 800267e:	4b62      	ldr	r3, [pc, #392]	@ (8002808 <main+0x5f4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002686:	d901      	bls.n	800268c <main+0x478>
		  {
			  HAL_NVIC_SystemReset();
 8002688:	f003 fcbf 	bl	800600a <HAL_NVIC_SystemReset>
		  }
		  if (lenData > 0)
 800268c:	4b5e      	ldr	r3, [pc, #376]	@ (8002808 <main+0x5f4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8140 	beq.w	8002916 <main+0x702>
		  {
			  recv(SOCK_NUM, buf, lenData);
 8002696:	4b5c      	ldr	r3, [pc, #368]	@ (8002808 <main+0x5f4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	495b      	ldr	r1, [pc, #364]	@ (800280c <main+0x5f8>)
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe fc2d 	bl	8000f00 <recv>
			  switch (buf[0])
 80026a6:	4b59      	ldr	r3, [pc, #356]	@ (800280c <main+0x5f8>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	3b44      	subs	r3, #68	@ 0x44
 80026ac:	2b13      	cmp	r3, #19
 80026ae:	f200 8132 	bhi.w	8002916 <main+0x702>
 80026b2:	a201      	add	r2, pc, #4	@ (adr r2, 80026b8 <main+0x4a4>)
 80026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b8:	08002751 	.word	0x08002751
 80026bc:	08002917 	.word	0x08002917
 80026c0:	08002917 	.word	0x08002917
 80026c4:	08002917 	.word	0x08002917
 80026c8:	08002709 	.word	0x08002709
 80026cc:	08002917 	.word	0x08002917
 80026d0:	08002917 	.word	0x08002917
 80026d4:	08002917 	.word	0x08002917
 80026d8:	08002917 	.word	0x08002917
 80026dc:	08002917 	.word	0x08002917
 80026e0:	08002917 	.word	0x08002917
 80026e4:	08002917 	.word	0x08002917
 80026e8:	08002917 	.word	0x08002917
 80026ec:	08002917 	.word	0x08002917
 80026f0:	080027b9 	.word	0x080027b9
 80026f4:	08002785 	.word	0x08002785
 80026f8:	08002917 	.word	0x08002917
 80026fc:	08002917 	.word	0x08002917
 8002700:	08002917 	.word	0x08002917
 8002704:	0800285f 	.word	0x0800285f
			  {
			  case 0x48:
				  connected = HAL_GetTick();
 8002708:	f002 fc64 	bl	8004fd4 <HAL_GetTick>
 800270c:	4603      	mov	r3, r0
 800270e:	4a40      	ldr	r2, [pc, #256]	@ (8002810 <main+0x5fc>)
 8002710:	6013      	str	r3, [r2, #0]
				  yearNow = (buf[3]<<8) | buf[4];
 8002712:	4b3e      	ldr	r3, [pc, #248]	@ (800280c <main+0x5f8>)
 8002714:	78db      	ldrb	r3, [r3, #3]
 8002716:	b21b      	sxth	r3, r3
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	b21a      	sxth	r2, r3
 800271c:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <main+0x5f8>)
 800271e:	791b      	ldrb	r3, [r3, #4]
 8002720:	b21b      	sxth	r3, r3
 8002722:	4313      	orrs	r3, r2
 8002724:	b21b      	sxth	r3, r3
 8002726:	b29a      	uxth	r2, r3
 8002728:	4b3a      	ldr	r3, [pc, #232]	@ (8002814 <main+0x600>)
 800272a:	801a      	strh	r2, [r3, #0]
				  timeNow = mktime(yearNow, buf[2], buf[1], buf[5], buf[6]);
 800272c:	4b39      	ldr	r3, [pc, #228]	@ (8002814 <main+0x600>)
 800272e:	8818      	ldrh	r0, [r3, #0]
 8002730:	4b36      	ldr	r3, [pc, #216]	@ (800280c <main+0x5f8>)
 8002732:	7899      	ldrb	r1, [r3, #2]
 8002734:	4b35      	ldr	r3, [pc, #212]	@ (800280c <main+0x5f8>)
 8002736:	785a      	ldrb	r2, [r3, #1]
 8002738:	4b34      	ldr	r3, [pc, #208]	@ (800280c <main+0x5f8>)
 800273a:	795c      	ldrb	r4, [r3, #5]
 800273c:	4b33      	ldr	r3, [pc, #204]	@ (800280c <main+0x5f8>)
 800273e:	799b      	ldrb	r3, [r3, #6]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	4623      	mov	r3, r4
 8002744:	f002 f904 	bl	8004950 <mktime>
 8002748:	4603      	mov	r3, r0
 800274a:	4a33      	ldr	r2, [pc, #204]	@ (8002818 <main+0x604>)
 800274c:	6013      	str	r3, [r2, #0]
				  break;
 800274e:	e0e2      	b.n	8002916 <main+0x702>
			  case 0x44://data: D
				  Ethernet_received = true;
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <main+0x608>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
				  for (uint8_t i =0; i<9; i++)
 8002756:	2300      	movs	r3, #0
 8002758:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800275c:	e00d      	b.n	800277a <main+0x566>
				  {
					  Ethernet_received_data[i] = buf[i+1];
 800275e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002768:	4928      	ldr	r1, [pc, #160]	@ (800280c <main+0x5f8>)
 800276a:	5c89      	ldrb	r1, [r1, r2]
 800276c:	4a2c      	ldr	r2, [pc, #176]	@ (8002820 <main+0x60c>)
 800276e:	54d1      	strb	r1, [r2, r3]
				  for (uint8_t i =0; i<9; i++)
 8002770:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002774:	3301      	adds	r3, #1
 8002776:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800277a:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800277e:	2b08      	cmp	r3, #8
 8002780:	d9ed      	bls.n	800275e <main+0x54a>
				  }
				  break;
 8002782:	e0c8      	b.n	8002916 <main+0x702>
			  case 0x53://setting: S
				  Ethernet_setting = true;
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <main+0x610>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
				  for (uint8_t i =0; i<23; i++)
 800278a:	2300      	movs	r3, #0
 800278c:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 8002790:	e00d      	b.n	80027ae <main+0x59a>
				  {
					  Ethernet_setting_data[i] = buf[i+1];
 8002792:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 800279c:	491b      	ldr	r1, [pc, #108]	@ (800280c <main+0x5f8>)
 800279e:	5c89      	ldrb	r1, [r1, r2]
 80027a0:	4a21      	ldr	r2, [pc, #132]	@ (8002828 <main+0x614>)
 80027a2:	54d1      	strb	r1, [r2, r3]
				  for (uint8_t i =0; i<23; i++)
 80027a4:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80027a8:	3301      	adds	r3, #1
 80027aa:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 80027ae:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80027b2:	2b16      	cmp	r3, #22
 80027b4:	d9ed      	bls.n	8002792 <main+0x57e>
				  }
				  break;
 80027b6:	e0ae      	b.n	8002916 <main+0x702>
			  case 0x52:// reset board R: 0; read data: 1
				  if (buf[1] == 2)
 80027b8:	4b14      	ldr	r3, [pc, #80]	@ (800280c <main+0x5f8>)
 80027ba:	785b      	ldrb	r3, [r3, #1]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d139      	bne.n	8002834 <main+0x620>
				  {
					  send_card_to_pc = true;
 80027c0:	4b1a      	ldr	r3, [pc, #104]	@ (800282c <main+0x618>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 80027c6:	f002 fc05 	bl	8004fd4 <HAL_GetTick>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <main+0x61c>)
 80027ce:	6013      	str	r3, [r2, #0]
				  } else
				  {
					  Ethernet_read_and_reset = true;
					  Ethernet_read_and_reset_data = buf[1];
				  }
				  break;
 80027d0:	e0a1      	b.n	8002916 <main+0x702>
 80027d2:	bf00      	nop
 80027d4:	20000694 	.word	0x20000694
 80027d8:	20000734 	.word	0x20000734
 80027dc:	200006a4 	.word	0x200006a4
 80027e0:	20000754 	.word	0x20000754
 80027e4:	2000051f 	.word	0x2000051f
 80027e8:	2000051c 	.word	0x2000051c
 80027ec:	2000051d 	.word	0x2000051d
 80027f0:	2000051e 	.word	0x2000051e
 80027f4:	08009a4c 	.word	0x08009a4c
 80027f8:	08009a50 	.word	0x08009a50
 80027fc:	08009a54 	.word	0x08009a54
 8002800:	20000542 	.word	0x20000542
 8002804:	20000180 	.word	0x20000180
 8002808:	200006a0 	.word	0x200006a0
 800280c:	20000304 	.word	0x20000304
 8002810:	20000698 	.word	0x20000698
 8002814:	20000586 	.word	0x20000586
 8002818:	200006d4 	.word	0x200006d4
 800281c:	2000072c 	.word	0x2000072c
 8002820:	20000550 	.word	0x20000550
 8002824:	2000072d 	.word	0x2000072d
 8002828:	2000055c 	.word	0x2000055c
 800282c:	20000729 	.word	0x20000729
 8002830:	2000069c 	.word	0x2000069c
				  } else if (buf[1] == 3)
 8002834:	4ba8      	ldr	r3, [pc, #672]	@ (8002ad8 <main+0x8c4>)
 8002836:	785b      	ldrb	r3, [r3, #1]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d108      	bne.n	800284e <main+0x63a>
					  send_card_done = true;
 800283c:	4ba7      	ldr	r3, [pc, #668]	@ (8002adc <main+0x8c8>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002842:	f002 fbc7 	bl	8004fd4 <HAL_GetTick>
 8002846:	4603      	mov	r3, r0
 8002848:	4aa5      	ldr	r2, [pc, #660]	@ (8002ae0 <main+0x8cc>)
 800284a:	6013      	str	r3, [r2, #0]
				  break;
 800284c:	e063      	b.n	8002916 <main+0x702>
					  Ethernet_read_and_reset = true;
 800284e:	4ba5      	ldr	r3, [pc, #660]	@ (8002ae4 <main+0x8d0>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
					  Ethernet_read_and_reset_data = buf[1];
 8002854:	4ba0      	ldr	r3, [pc, #640]	@ (8002ad8 <main+0x8c4>)
 8002856:	785a      	ldrb	r2, [r3, #1]
 8002858:	4ba3      	ldr	r3, [pc, #652]	@ (8002ae8 <main+0x8d4>)
 800285a:	701a      	strb	r2, [r3, #0]
				  break;
 800285c:	e05b      	b.n	8002916 <main+0x702>
			  case 0x57: // W
				  switch (buf[1])
 800285e:	4b9e      	ldr	r3, [pc, #632]	@ (8002ad8 <main+0x8c4>)
 8002860:	785b      	ldrb	r3, [r3, #1]
 8002862:	3b41      	subs	r3, #65	@ 0x41
 8002864:	2b19      	cmp	r3, #25
 8002866:	d855      	bhi.n	8002914 <main+0x700>
 8002868:	a201      	add	r2, pc, #4	@ (adr r2, 8002870 <main+0x65c>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	080028f1 	.word	0x080028f1
 8002874:	08002915 	.word	0x08002915
 8002878:	08002915 	.word	0x08002915
 800287c:	08002915 	.word	0x08002915
 8002880:	080028df 	.word	0x080028df
 8002884:	08002915 	.word	0x08002915
 8002888:	08002915 	.word	0x08002915
 800288c:	08002903 	.word	0x08002903
 8002890:	08002915 	.word	0x08002915
 8002894:	08002915 	.word	0x08002915
 8002898:	08002915 	.word	0x08002915
 800289c:	08002915 	.word	0x08002915
 80028a0:	08002915 	.word	0x08002915
 80028a4:	08002915 	.word	0x08002915
 80028a8:	08002915 	.word	0x08002915
 80028ac:	08002915 	.word	0x08002915
 80028b0:	08002915 	.word	0x08002915
 80028b4:	08002915 	.word	0x08002915
 80028b8:	08002915 	.word	0x08002915
 80028bc:	08002915 	.word	0x08002915
 80028c0:	08002915 	.word	0x08002915
 80028c4:	08002915 	.word	0x08002915
 80028c8:	08002915 	.word	0x08002915
 80028cc:	08002915 	.word	0x08002915
 80028d0:	08002915 	.word	0x08002915
 80028d4:	080028d9 	.word	0x080028d9
				  {
				  case 0x5A:// E: errase
					  W25Q_EraseChip();
 80028d8:	f7ff f987 	bl	8001bea <W25Q_EraseChip>
					  break;
 80028dc:	e01a      	b.n	8002914 <main+0x700>
				  case 0x45:// E: errase
					  write_mode = true;
 80028de:	4b83      	ldr	r3, [pc, #524]	@ (8002aec <main+0x8d8>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 80028e4:	f002 fb76 	bl	8004fd4 <HAL_GetTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4a7d      	ldr	r2, [pc, #500]	@ (8002ae0 <main+0x8cc>)
 80028ec:	6013      	str	r3, [r2, #0]
					  break;
 80028ee:	e011      	b.n	8002914 <main+0x700>
				  case 0x41:// A: add card
					  write_mode_somecard = true;
 80028f0:	4b7f      	ldr	r3, [pc, #508]	@ (8002af0 <main+0x8dc>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 80028f6:	f002 fb6d 	bl	8004fd4 <HAL_GetTick>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4a78      	ldr	r2, [pc, #480]	@ (8002ae0 <main+0x8cc>)
 80028fe:	6013      	str	r3, [r2, #0]
					  break;
 8002900:	e008      	b.n	8002914 <main+0x700>
				  case 0x48:// H: add card by hand
					  write_card_by_hand = true;
 8002902:	4b7c      	ldr	r3, [pc, #496]	@ (8002af4 <main+0x8e0>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002908:	f002 fb64 	bl	8004fd4 <HAL_GetTick>
 800290c:	4603      	mov	r3, r0
 800290e:	4a74      	ldr	r2, [pc, #464]	@ (8002ae0 <main+0x8cc>)
 8002910:	6013      	str	r3, [r2, #0]
					  break;
 8002912:	bf00      	nop
				  }
				  break;
 8002914:	bf00      	nop
	  } else
	  {
		  continue;
	  }

	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8002916:	4878      	ldr	r0, [pc, #480]	@ (8002af8 <main+0x8e4>)
 8002918:	f002 fec3 	bl	80056a2 <HAL_CAN_GetTxMailboxesFreeLevel>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <main+0x724>
	  {
		  if (HAL_CAN_AbortTxRequest(&hcan, TxMailbox) != HAL_OK)
 8002922:	4b76      	ldr	r3, [pc, #472]	@ (8002afc <main+0x8e8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	4873      	ldr	r0, [pc, #460]	@ (8002af8 <main+0x8e4>)
 800292a:	f002 fe76 	bl	800561a <HAL_CAN_AbortTxRequest>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <main+0x724>
		  {
			HAL_NVIC_SystemReset();
 8002934:	f003 fb69 	bl	800600a <HAL_NVIC_SystemReset>
		  }
	  }

	  // check connection Ethernet
	  if (keepalive == SOCK_ESTABLISHED && (abs(HAL_GetTick() - connected) < Timeout_heartbit))
 8002938:	4b71      	ldr	r3, [pc, #452]	@ (8002b00 <main+0x8ec>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b17      	cmp	r3, #23
 800293e:	d110      	bne.n	8002962 <main+0x74e>
 8002940:	f002 fb48 	bl	8004fd4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	4b6f      	ldr	r3, [pc, #444]	@ (8002b04 <main+0x8f0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	bfb8      	it	lt
 8002950:	425b      	neglt	r3, r3
 8002952:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002956:	4293      	cmp	r3, r2
 8002958:	dc03      	bgt.n	8002962 <main+0x74e>
	  {
		  Ethernet_connected = true;
 800295a:	4b6b      	ldr	r3, [pc, #428]	@ (8002b08 <main+0x8f4>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e002      	b.n	8002968 <main+0x754>
	  } else
	  {
		  Ethernet_connected = false;// false
 8002962:	4b69      	ldr	r3, [pc, #420]	@ (8002b08 <main+0x8f4>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
	  }
	  // check connection REB
	  if (abs(HAL_GetTick() - heardbit_REB) > Timeout_heartbit)
 8002968:	f002 fb34 	bl	8004fd4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	4b67      	ldr	r3, [pc, #412]	@ (8002b0c <main+0x8f8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	bfb8      	it	lt
 8002978:	425b      	neglt	r3, r3
 800297a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800297e:	4293      	cmp	r3, r2
 8002980:	dd03      	ble.n	800298a <main+0x776>
	  {
		  REB_connected = false;// false
 8002982:	4b63      	ldr	r3, [pc, #396]	@ (8002b10 <main+0x8fc>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e002      	b.n	8002990 <main+0x77c>
	  } else
	  {
		  REB_connected = true;
 800298a:	4b61      	ldr	r3, [pc, #388]	@ (8002b10 <main+0x8fc>)
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
	  }
	  //// received data from Ethernet
	  if (Ethernet_received)// 0x44
 8002990:	4b60      	ldr	r3, [pc, #384]	@ (8002b14 <main+0x900>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d022      	beq.n	80029de <main+0x7ca>
	  {
		  Ethernet_received = false;
 8002998:	4b5e      	ldr	r3, [pc, #376]	@ (8002b14 <main+0x900>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_received_data[0])
 800299e:	4b5e      	ldr	r3, [pc, #376]	@ (8002b18 <main+0x904>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <main+0x798>
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d00a      	beq.n	80029c0 <main+0x7ac>
 80029aa:	e018      	b.n	80029de <main+0x7ca>
		  {
		  case 0:
			  send_uart = 0;
 80029ac:	4b5b      	ldr	r3, [pc, #364]	@ (8002b1c <main+0x908>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 80029b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b20 <main+0x90c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
			  isSendDataEth = false;
 80029b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b24 <main+0x910>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
			  break;
 80029be:	e00e      	b.n	80029de <main+0x7ca>
		  case 1: // data ok
			  new_card_update(&Ethernet_received_data[1], x, x_timer);
 80029c0:	4a59      	ldr	r2, [pc, #356]	@ (8002b28 <main+0x914>)
 80029c2:	495a      	ldr	r1, [pc, #360]	@ (8002b2c <main+0x918>)
 80029c4:	485a      	ldr	r0, [pc, #360]	@ (8002b30 <main+0x91c>)
 80029c6:	f001 fd4d 	bl	8004464 <new_card_update>
			  send_uart = 1;
 80029ca:	4b54      	ldr	r3, [pc, #336]	@ (8002b1c <main+0x908>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <main+0x90c>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
			  isSendDataEth = false;
 80029d6:	4b53      	ldr	r3, [pc, #332]	@ (8002b24 <main+0x910>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
			  break;
 80029dc:	bf00      	nop
		  }
	  }

	  // Nếu không nhận được Data từ server sau khi gửi mã thẻ, thì xử lý offline

	  if (isSendDataEth)
 80029de:	4b51      	ldr	r3, [pc, #324]	@ (8002b24 <main+0x910>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80c3 	beq.w	8002b6e <main+0x95a>
	  {
		  if (!Ethernet_connected || ((HAL_GetTick() - timeSendDataEth) > 500))
 80029e8:	4b47      	ldr	r3, [pc, #284]	@ (8002b08 <main+0x8f4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <main+0x7f6>
 80029f6:	f002 faed 	bl	8004fd4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002b34 <main+0x920>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a06:	f240 80b2 	bls.w	8002b6e <main+0x95a>
		  {
			  isSendDataEth = false;
 8002a0a:	4b46      	ldr	r3, [pc, #280]	@ (8002b24 <main+0x910>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
			  compare_user = binary_search(number_card, wcode);
 8002a10:	4b49      	ldr	r3, [pc, #292]	@ (8002b38 <main+0x924>)
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	4b49      	ldr	r3, [pc, #292]	@ (8002b3c <main+0x928>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4c49      	ldr	r4, [pc, #292]	@ (8002b40 <main+0x92c>)
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 fcd3 	bl	80043c8 <binary_search>
 8002a22:	4625      	mov	r5, r4
 8002a24:	463c      	mov	r4, r7
 8002a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			  if (compare_user.STT > 0 && compare_user.STT <= number_card)
 8002a32:	4b43      	ldr	r3, [pc, #268]	@ (8002b40 <main+0x92c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8093 	beq.w	8002b62 <main+0x94e>
 8002a3c:	4b40      	ldr	r3, [pc, #256]	@ (8002b40 <main+0x92c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <main+0x924>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f200 808c 	bhi.w	8002b62 <main+0x94e>
			  {
				  timeBegin = mktime(compare_user.beginYear, compare_user.beginMonth, compare_user.beginDate, compare_user.beginHour, compare_user.beginMinute);
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b40 <main+0x92c>)
 8002a4c:	8a18      	ldrh	r0, [r3, #16]
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b40 <main+0x92c>)
 8002a50:	7c99      	ldrb	r1, [r3, #18]
 8002a52:	4b3b      	ldr	r3, [pc, #236]	@ (8002b40 <main+0x92c>)
 8002a54:	7cda      	ldrb	r2, [r3, #19]
 8002a56:	4b3a      	ldr	r3, [pc, #232]	@ (8002b40 <main+0x92c>)
 8002a58:	7d1c      	ldrb	r4, [r3, #20]
 8002a5a:	4b39      	ldr	r3, [pc, #228]	@ (8002b40 <main+0x92c>)
 8002a5c:	7d5b      	ldrb	r3, [r3, #21]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	4623      	mov	r3, r4
 8002a62:	f001 ff75 	bl	8004950 <mktime>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4a36      	ldr	r2, [pc, #216]	@ (8002b44 <main+0x930>)
 8002a6a:	6013      	str	r3, [r2, #0]
				  timeEnd = mktime(compare_user.endYear, compare_user.endMonth, compare_user.endDate, compare_user.endHour, compare_user.endMinute);
 8002a6c:	4b34      	ldr	r3, [pc, #208]	@ (8002b40 <main+0x92c>)
 8002a6e:	8ad8      	ldrh	r0, [r3, #22]
 8002a70:	4b33      	ldr	r3, [pc, #204]	@ (8002b40 <main+0x92c>)
 8002a72:	7e19      	ldrb	r1, [r3, #24]
 8002a74:	4b32      	ldr	r3, [pc, #200]	@ (8002b40 <main+0x92c>)
 8002a76:	7e5a      	ldrb	r2, [r3, #25]
 8002a78:	4b31      	ldr	r3, [pc, #196]	@ (8002b40 <main+0x92c>)
 8002a7a:	7e9c      	ldrb	r4, [r3, #26]
 8002a7c:	4b30      	ldr	r3, [pc, #192]	@ (8002b40 <main+0x92c>)
 8002a7e:	7edb      	ldrb	r3, [r3, #27]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	4623      	mov	r3, r4
 8002a84:	f001 ff64 	bl	8004950 <mktime>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b48 <main+0x934>)
 8002a8c:	6013      	str	r3, [r2, #0]
				  if ((timeBegin < timeNow) && (timeNow < timeEnd) && (timeBegin != 0) && (timeEnd != 0) && (timeNow != 0))
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b44 <main+0x930>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b2e      	ldr	r3, [pc, #184]	@ (8002b4c <main+0x938>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d25c      	bcs.n	8002b54 <main+0x940>
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b4c <main+0x938>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b48 <main+0x934>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d256      	bcs.n	8002b54 <main+0x940>
 8002aa6:	4b27      	ldr	r3, [pc, #156]	@ (8002b44 <main+0x930>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d052      	beq.n	8002b54 <main+0x940>
 8002aae:	4b26      	ldr	r3, [pc, #152]	@ (8002b48 <main+0x934>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d04e      	beq.n	8002b54 <main+0x940>
 8002ab6:	4b25      	ldr	r3, [pc, #148]	@ (8002b4c <main+0x938>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d04a      	beq.n	8002b54 <main+0x940>
				  {
					  new_card_update(compare_user.permis, x, x_timer);
 8002abe:	4a1a      	ldr	r2, [pc, #104]	@ (8002b28 <main+0x914>)
 8002ac0:	491a      	ldr	r1, [pc, #104]	@ (8002b2c <main+0x918>)
 8002ac2:	4823      	ldr	r0, [pc, #140]	@ (8002b50 <main+0x93c>)
 8002ac4:	f001 fcce 	bl	8004464 <new_card_update>
					  send_uart = 1;
 8002ac8:	4b14      	ldr	r3, [pc, #80]	@ (8002b1c <main+0x908>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
					  send_uart_to_REB = true;
 8002ace:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <main+0x90c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
				  if ((timeBegin < timeNow) && (timeNow < timeEnd) && (timeBegin != 0) && (timeEnd != 0) && (timeNow != 0))
 8002ad4:	e04b      	b.n	8002b6e <main+0x95a>
 8002ad6:	bf00      	nop
 8002ad8:	20000304 	.word	0x20000304
 8002adc:	2000072a 	.word	0x2000072a
 8002ae0:	2000069c 	.word	0x2000069c
 8002ae4:	20000730 	.word	0x20000730
 8002ae8:	20000575 	.word	0x20000575
 8002aec:	20000727 	.word	0x20000727
 8002af0:	20000726 	.word	0x20000726
 8002af4:	2000072f 	.word	0x2000072f
 8002af8:	2000009c 	.word	0x2000009c
 8002afc:	20000590 	.word	0x20000590
 8002b00:	2000054c 	.word	0x2000054c
 8002b04:	20000698 	.word	0x20000698
 8002b08:	20000724 	.word	0x20000724
 8002b0c:	200006b4 	.word	0x200006b4
 8002b10:	20000036 	.word	0x20000036
 8002b14:	2000072c 	.word	0x2000072c
 8002b18:	20000550 	.word	0x20000550
 8002b1c:	20000580 	.word	0x20000580
 8002b20:	20000733 	.word	0x20000733
 8002b24:	20000725 	.word	0x20000725
 8002b28:	20000594 	.word	0x20000594
 8002b2c:	200006e4 	.word	0x200006e4
 8002b30:	20000551 	.word	0x20000551
 8002b34:	200006b8 	.word	0x200006b8
 8002b38:	20000694 	.word	0x20000694
 8002b3c:	2000058c 	.word	0x2000058c
 8002b40:	20000774 	.word	0x20000774
 8002b44:	200006d8 	.word	0x200006d8
 8002b48:	200006dc 	.word	0x200006dc
 8002b4c:	200006d4 	.word	0x200006d4
 8002b50:	2000077c 	.word	0x2000077c
				  } else
				  {
					  send_uart = 0;
 8002b54:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <main+0xa90>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
					  send_uart_to_REB = true;
 8002b5a:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <main+0xa94>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
				  if ((timeBegin < timeNow) && (timeNow < timeEnd) && (timeBegin != 0) && (timeEnd != 0) && (timeNow != 0))
 8002b60:	e005      	b.n	8002b6e <main+0x95a>
				  }
			  } else
			  {
				  send_uart = 0;
 8002b62:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <main+0xa90>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
				  send_uart_to_REB = true;
 8002b68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca8 <main+0xa94>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	  //// setting from PC Ethernet
	  if (Ethernet_setting) // 0x53
 8002b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8002cac <main+0xa98>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8083 	beq.w	8002c7e <main+0xa6a>
	  {
		  Ethernet_setting = false;
 8002b78:	4b4c      	ldr	r3, [pc, #304]	@ (8002cac <main+0xa98>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_setting_data[0])
 8002b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb0 <main+0xa9c>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <main+0x978>
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d06f      	beq.n	8002c6a <main+0xa56>
 8002b8a:	e078      	b.n	8002c7e <main+0xa6a>
		  {
		  case 0:// setting board
			  ip1 = Ethernet_setting_data[1];
 8002b8c:	4b48      	ldr	r3, [pc, #288]	@ (8002cb0 <main+0xa9c>)
 8002b8e:	785a      	ldrb	r2, [r3, #1]
 8002b90:	4b48      	ldr	r3, [pc, #288]	@ (8002cb4 <main+0xaa0>)
 8002b92:	701a      	strb	r2, [r3, #0]
			  ip2 = Ethernet_setting_data[2];
 8002b94:	4b46      	ldr	r3, [pc, #280]	@ (8002cb0 <main+0xa9c>)
 8002b96:	789a      	ldrb	r2, [r3, #2]
 8002b98:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <main+0xaa4>)
 8002b9a:	701a      	strb	r2, [r3, #0]
			  ip3 = Ethernet_setting_data[3];
 8002b9c:	4b44      	ldr	r3, [pc, #272]	@ (8002cb0 <main+0xa9c>)
 8002b9e:	78da      	ldrb	r2, [r3, #3]
 8002ba0:	4b46      	ldr	r3, [pc, #280]	@ (8002cbc <main+0xaa8>)
 8002ba2:	701a      	strb	r2, [r3, #0]
			  ip4 = Ethernet_setting_data[4];
 8002ba4:	4b42      	ldr	r3, [pc, #264]	@ (8002cb0 <main+0xa9c>)
 8002ba6:	791a      	ldrb	r2, [r3, #4]
 8002ba8:	4b45      	ldr	r3, [pc, #276]	@ (8002cc0 <main+0xaac>)
 8002baa:	701a      	strb	r2, [r3, #0]
			  port_client = Ethernet_setting_data[5]<<8|Ethernet_setting_data[6];
 8002bac:	4b40      	ldr	r3, [pc, #256]	@ (8002cb0 <main+0xa9c>)
 8002bae:	795b      	ldrb	r3, [r3, #5]
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	b21a      	sxth	r2, r3
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb0 <main+0xa9c>)
 8002bb8:	799b      	ldrb	r3, [r3, #6]
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4b40      	ldr	r3, [pc, #256]	@ (8002cc4 <main+0xab0>)
 8002bc4:	801a      	strh	r2, [r3, #0]
			  ip_server1 = Ethernet_setting_data[7];
 8002bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb0 <main+0xa9c>)
 8002bc8:	79da      	ldrb	r2, [r3, #7]
 8002bca:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc8 <main+0xab4>)
 8002bcc:	701a      	strb	r2, [r3, #0]
			  ip_server2 = Ethernet_setting_data[8];
 8002bce:	4b38      	ldr	r3, [pc, #224]	@ (8002cb0 <main+0xa9c>)
 8002bd0:	7a1a      	ldrb	r2, [r3, #8]
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ccc <main+0xab8>)
 8002bd4:	701a      	strb	r2, [r3, #0]
			  ip_server3 = Ethernet_setting_data[9];
 8002bd6:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <main+0xa9c>)
 8002bd8:	7a5a      	ldrb	r2, [r3, #9]
 8002bda:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd0 <main+0xabc>)
 8002bdc:	701a      	strb	r2, [r3, #0]
			  ip_server4 = Ethernet_setting_data[10];
 8002bde:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <main+0xa9c>)
 8002be0:	7a9a      	ldrb	r2, [r3, #10]
 8002be2:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd4 <main+0xac0>)
 8002be4:	701a      	strb	r2, [r3, #0]
			  port_server = Ethernet_setting_data[11]<<8|Ethernet_setting_data[12];
 8002be6:	4b32      	ldr	r3, [pc, #200]	@ (8002cb0 <main+0xa9c>)
 8002be8:	7adb      	ldrb	r3, [r3, #11]
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb0 <main+0xa9c>)
 8002bf2:	7b1b      	ldrb	r3, [r3, #12]
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	4b36      	ldr	r3, [pc, #216]	@ (8002cd8 <main+0xac4>)
 8002bfe:	801a      	strh	r2, [r3, #0]
			  time_delay = Ethernet_setting_data[13];
 8002c00:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb0 <main+0xa9c>)
 8002c02:	7b5a      	ldrb	r2, [r3, #13]
 8002c04:	4b35      	ldr	r3, [pc, #212]	@ (8002cdc <main+0xac8>)
 8002c06:	701a      	strb	r2, [r3, #0]
			  elevator_mode = Ethernet_setting_data[14];
 8002c08:	4b29      	ldr	r3, [pc, #164]	@ (8002cb0 <main+0xa9c>)
 8002c0a:	7b9a      	ldrb	r2, [r3, #14]
 8002c0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ce0 <main+0xacc>)
 8002c0e:	701a      	strb	r2, [r3, #0]
			  lock_default_1 = Ethernet_setting_data[15]|(Ethernet_setting_data[16]<<8)|(Ethernet_setting_data[17]<<16)|(Ethernet_setting_data[18]<<24);
 8002c10:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <main+0xa9c>)
 8002c12:	7bdb      	ldrb	r3, [r3, #15]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b26      	ldr	r3, [pc, #152]	@ (8002cb0 <main+0xa9c>)
 8002c18:	7c1b      	ldrb	r3, [r3, #16]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <main+0xa9c>)
 8002c20:	7c5b      	ldrb	r3, [r3, #17]
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	431a      	orrs	r2, r3
 8002c26:	4b22      	ldr	r3, [pc, #136]	@ (8002cb0 <main+0xa9c>)
 8002c28:	7c9b      	ldrb	r3, [r3, #18]
 8002c2a:	061b      	lsls	r3, r3, #24
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce4 <main+0xad0>)
 8002c32:	601a      	str	r2, [r3, #0]
			  lock_default_2 = Ethernet_setting_data[19]|(Ethernet_setting_data[20]<<8)|(Ethernet_setting_data[21]<<16)|(Ethernet_setting_data[22]<<24);
 8002c34:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <main+0xa9c>)
 8002c36:	7cdb      	ldrb	r3, [r3, #19]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <main+0xa9c>)
 8002c3c:	7d1b      	ldrb	r3, [r3, #20]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	431a      	orrs	r2, r3
 8002c42:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <main+0xa9c>)
 8002c44:	7d5b      	ldrb	r3, [r3, #21]
 8002c46:	041b      	lsls	r3, r3, #16
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	4b19      	ldr	r3, [pc, #100]	@ (8002cb0 <main+0xa9c>)
 8002c4c:	7d9b      	ldrb	r3, [r3, #22]
 8002c4e:	061b      	lsls	r3, r3, #24
 8002c50:	4313      	orrs	r3, r2
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b24      	ldr	r3, [pc, #144]	@ (8002ce8 <main+0xad4>)
 8002c56:	601a      	str	r2, [r3, #0]
			  save_data();
 8002c58:	f001 fac2 	bl	80041e0 <save_data>
			  sendString("S", "OK");
 8002c5c:	4923      	ldr	r1, [pc, #140]	@ (8002cec <main+0xad8>)
 8002c5e:	4824      	ldr	r0, [pc, #144]	@ (8002cf0 <main+0xadc>)
 8002c60:	f001 f950 	bl	8003f04 <sendString>
			  HAL_NVIC_SystemReset();
 8002c64:	f003 f9d1 	bl	800600a <HAL_NVIC_SystemReset>
			  break;
 8002c68:	e009      	b.n	8002c7e <main+0xa6a>
		  case 1:// bypass mode
			  bypass_from_Eth = Ethernet_setting_data[1];
 8002c6a:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <main+0xa9c>)
 8002c6c:	785b      	ldrb	r3, [r3, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <main+0xae0>)
 8002c7a:	701a      	strb	r2, [r3, #0]
			  break;
 8002c7c:	bf00      	nop
		  }
	  }
	  /// reset or conmand read data from PC
	  if (Ethernet_read_and_reset)// 0x52
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf8 <main+0xae4>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80b8 	beq.w	8002df8 <main+0xbe4>
	  {
		  Ethernet_read_and_reset = false;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <main+0xae4>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_read_and_reset_data)
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <main+0xae8>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <main+0xa88>
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d032      	beq.n	8002d00 <main+0xaec>
 8002c9a:	e0ad      	b.n	8002df8 <main+0xbe4>
		  {
		  case 0:
			  HAL_NVIC_SystemReset();
 8002c9c:	f003 f9b5 	bl	800600a <HAL_NVIC_SystemReset>
			  break;
 8002ca0:	e0aa      	b.n	8002df8 <main+0xbe4>
 8002ca2:	bf00      	nop
 8002ca4:	20000580 	.word	0x20000580
 8002ca8:	20000733 	.word	0x20000733
 8002cac:	2000072d 	.word	0x2000072d
 8002cb0:	2000055c 	.word	0x2000055c
 8002cb4:	2000051c 	.word	0x2000051c
 8002cb8:	2000051d 	.word	0x2000051d
 8002cbc:	2000051e 	.word	0x2000051e
 8002cc0:	2000051f 	.word	0x2000051f
 8002cc4:	20000584 	.word	0x20000584
 8002cc8:	20000520 	.word	0x20000520
 8002ccc:	20000521 	.word	0x20000521
 8002cd0:	20000522 	.word	0x20000522
 8002cd4:	20000523 	.word	0x20000523
 8002cd8:	20000582 	.word	0x20000582
 8002cdc:	20000510 	.word	0x20000510
 8002ce0:	20000542 	.word	0x20000542
 8002ce4:	200006a8 	.word	0x200006a8
 8002ce8:	200006ac 	.word	0x200006ac
 8002cec:	08009a20 	.word	0x08009a20
 8002cf0:	08009a24 	.word	0x08009a24
 8002cf4:	200006e1 	.word	0x200006e1
 8002cf8:	20000730 	.word	0x20000730
 8002cfc:	20000575 	.word	0x20000575
		  case 1:
			  data_info[0] = ip1;
 8002d00:	4b8a      	ldr	r3, [pc, #552]	@ (8002f2c <main+0xd18>)
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	4b8a      	ldr	r3, [pc, #552]	@ (8002f30 <main+0xd1c>)
 8002d06:	701a      	strb	r2, [r3, #0]
			  data_info[1] = ip2;
 8002d08:	4b8a      	ldr	r3, [pc, #552]	@ (8002f34 <main+0xd20>)
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	4b88      	ldr	r3, [pc, #544]	@ (8002f30 <main+0xd1c>)
 8002d0e:	705a      	strb	r2, [r3, #1]
			  data_info[2] = ip3;
 8002d10:	4b89      	ldr	r3, [pc, #548]	@ (8002f38 <main+0xd24>)
 8002d12:	781a      	ldrb	r2, [r3, #0]
 8002d14:	4b86      	ldr	r3, [pc, #536]	@ (8002f30 <main+0xd1c>)
 8002d16:	709a      	strb	r2, [r3, #2]
			  data_info[3] = ip4;
 8002d18:	4b88      	ldr	r3, [pc, #544]	@ (8002f3c <main+0xd28>)
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	4b84      	ldr	r3, [pc, #528]	@ (8002f30 <main+0xd1c>)
 8002d1e:	70da      	strb	r2, [r3, #3]
			  data_info[4] = port_client>>8;
 8002d20:	4b87      	ldr	r3, [pc, #540]	@ (8002f40 <main+0xd2c>)
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b81      	ldr	r3, [pc, #516]	@ (8002f30 <main+0xd1c>)
 8002d2c:	711a      	strb	r2, [r3, #4]
			  data_info[5] = port_client & 0xFF;
 8002d2e:	4b84      	ldr	r3, [pc, #528]	@ (8002f40 <main+0xd2c>)
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b7e      	ldr	r3, [pc, #504]	@ (8002f30 <main+0xd1c>)
 8002d36:	715a      	strb	r2, [r3, #5]
			  data_info[6] = ip_server1;
 8002d38:	4b82      	ldr	r3, [pc, #520]	@ (8002f44 <main+0xd30>)
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	4b7c      	ldr	r3, [pc, #496]	@ (8002f30 <main+0xd1c>)
 8002d3e:	719a      	strb	r2, [r3, #6]
			  data_info[7] = ip_server2;
 8002d40:	4b81      	ldr	r3, [pc, #516]	@ (8002f48 <main+0xd34>)
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	4b7a      	ldr	r3, [pc, #488]	@ (8002f30 <main+0xd1c>)
 8002d46:	71da      	strb	r2, [r3, #7]
			  data_info[8] = ip_server3;
 8002d48:	4b80      	ldr	r3, [pc, #512]	@ (8002f4c <main+0xd38>)
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	4b78      	ldr	r3, [pc, #480]	@ (8002f30 <main+0xd1c>)
 8002d4e:	721a      	strb	r2, [r3, #8]
			  data_info[9] = ip_server4;
 8002d50:	4b7f      	ldr	r3, [pc, #508]	@ (8002f50 <main+0xd3c>)
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	4b76      	ldr	r3, [pc, #472]	@ (8002f30 <main+0xd1c>)
 8002d56:	725a      	strb	r2, [r3, #9]
			  data_info[10] = port_server>>8;
 8002d58:	4b7e      	ldr	r3, [pc, #504]	@ (8002f54 <main+0xd40>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4b73      	ldr	r3, [pc, #460]	@ (8002f30 <main+0xd1c>)
 8002d64:	729a      	strb	r2, [r3, #10]
			  data_info[11] = port_server & 0xFF;
 8002d66:	4b7b      	ldr	r3, [pc, #492]	@ (8002f54 <main+0xd40>)
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	4b70      	ldr	r3, [pc, #448]	@ (8002f30 <main+0xd1c>)
 8002d6e:	72da      	strb	r2, [r3, #11]
			  data_info[12] = time_delay;
 8002d70:	4b79      	ldr	r3, [pc, #484]	@ (8002f58 <main+0xd44>)
 8002d72:	781a      	ldrb	r2, [r3, #0]
 8002d74:	4b6e      	ldr	r3, [pc, #440]	@ (8002f30 <main+0xd1c>)
 8002d76:	731a      	strb	r2, [r3, #12]
			  data_info[13] = elevator_mode;
 8002d78:	4b78      	ldr	r3, [pc, #480]	@ (8002f5c <main+0xd48>)
 8002d7a:	781a      	ldrb	r2, [r3, #0]
 8002d7c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f30 <main+0xd1c>)
 8002d7e:	735a      	strb	r2, [r3, #13]
			  data_info[14] = number_card>>24&0xFF;
 8002d80:	4b77      	ldr	r3, [pc, #476]	@ (8002f60 <main+0xd4c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e1b      	lsrs	r3, r3, #24
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4b69      	ldr	r3, [pc, #420]	@ (8002f30 <main+0xd1c>)
 8002d8a:	739a      	strb	r2, [r3, #14]
			  data_info[15] = number_card>>16&0xFF;
 8002d8c:	4b74      	ldr	r3, [pc, #464]	@ (8002f60 <main+0xd4c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	4b66      	ldr	r3, [pc, #408]	@ (8002f30 <main+0xd1c>)
 8002d96:	73da      	strb	r2, [r3, #15]
			  data_info[16] = number_card>>8&0xFF;
 8002d98:	4b71      	ldr	r3, [pc, #452]	@ (8002f60 <main+0xd4c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b63      	ldr	r3, [pc, #396]	@ (8002f30 <main+0xd1c>)
 8002da2:	741a      	strb	r2, [r3, #16]
			  data_info[17] = number_card&0xFF;
 8002da4:	4b6e      	ldr	r3, [pc, #440]	@ (8002f60 <main+0xd4c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4b61      	ldr	r3, [pc, #388]	@ (8002f30 <main+0xd1c>)
 8002dac:	745a      	strb	r2, [r3, #17]
			  data_info[18] = lock_default[0];
 8002dae:	4b6d      	ldr	r3, [pc, #436]	@ (8002f64 <main+0xd50>)
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f30 <main+0xd1c>)
 8002db4:	749a      	strb	r2, [r3, #18]
			  data_info[19] = lock_default[1];
 8002db6:	4b6b      	ldr	r3, [pc, #428]	@ (8002f64 <main+0xd50>)
 8002db8:	785a      	ldrb	r2, [r3, #1]
 8002dba:	4b5d      	ldr	r3, [pc, #372]	@ (8002f30 <main+0xd1c>)
 8002dbc:	74da      	strb	r2, [r3, #19]
			  data_info[20] = lock_default[2];
 8002dbe:	4b69      	ldr	r3, [pc, #420]	@ (8002f64 <main+0xd50>)
 8002dc0:	789a      	ldrb	r2, [r3, #2]
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f30 <main+0xd1c>)
 8002dc4:	751a      	strb	r2, [r3, #20]
			  data_info[21] = lock_default[3];
 8002dc6:	4b67      	ldr	r3, [pc, #412]	@ (8002f64 <main+0xd50>)
 8002dc8:	78da      	ldrb	r2, [r3, #3]
 8002dca:	4b59      	ldr	r3, [pc, #356]	@ (8002f30 <main+0xd1c>)
 8002dcc:	755a      	strb	r2, [r3, #21]
			  data_info[22] = lock_default[4];
 8002dce:	4b65      	ldr	r3, [pc, #404]	@ (8002f64 <main+0xd50>)
 8002dd0:	791a      	ldrb	r2, [r3, #4]
 8002dd2:	4b57      	ldr	r3, [pc, #348]	@ (8002f30 <main+0xd1c>)
 8002dd4:	759a      	strb	r2, [r3, #22]
			  data_info[23] = lock_default[5];
 8002dd6:	4b63      	ldr	r3, [pc, #396]	@ (8002f64 <main+0xd50>)
 8002dd8:	795a      	ldrb	r2, [r3, #5]
 8002dda:	4b55      	ldr	r3, [pc, #340]	@ (8002f30 <main+0xd1c>)
 8002ddc:	75da      	strb	r2, [r3, #23]
			  data_info[24] = lock_default[6];
 8002dde:	4b61      	ldr	r3, [pc, #388]	@ (8002f64 <main+0xd50>)
 8002de0:	799a      	ldrb	r2, [r3, #6]
 8002de2:	4b53      	ldr	r3, [pc, #332]	@ (8002f30 <main+0xd1c>)
 8002de4:	761a      	strb	r2, [r3, #24]
			  data_info[25] = lock_default[7];
 8002de6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f64 <main+0xd50>)
 8002de8:	79da      	ldrb	r2, [r3, #7]
 8002dea:	4b51      	ldr	r3, [pc, #324]	@ (8002f30 <main+0xd1c>)
 8002dec:	765a      	strb	r2, [r3, #25]
			  sendData_eth_info("R", data_info);
 8002dee:	4950      	ldr	r1, [pc, #320]	@ (8002f30 <main+0xd1c>)
 8002df0:	485d      	ldr	r0, [pc, #372]	@ (8002f68 <main+0xd54>)
 8002df2:	f001 f8dd 	bl	8003fb0 <sendData_eth_info>
			  break;
 8002df6:	bf00      	nop
		  }
	  }
	  //// send data to PC, to keep alive connection
	  if (!add_card_uart && (abs(HAL_GetTick() - time_check) > 5000))
 8002df8:	4b5c      	ldr	r3, [pc, #368]	@ (8002f6c <main+0xd58>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 808c 	beq.w	8002f20 <main+0xd0c>
 8002e08:	f002 f8e4 	bl	8004fd4 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b58      	ldr	r3, [pc, #352]	@ (8002f70 <main+0xd5c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bfb8      	it	lt
 8002e18:	425b      	neglt	r3, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	dd7e      	ble.n	8002f20 <main+0xd0c>
	  {
		  keepalive = reconect_eth(SOCK_NUM);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f001 fc6a 	bl	80046fc <reconect_eth>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b51      	ldr	r3, [pc, #324]	@ (8002f74 <main+0xd60>)
 8002e2e:	701a      	strb	r2, [r3, #0]
		  if (keepalive == SOCK_ESTABLISHED)
 8002e30:	4b50      	ldr	r3, [pc, #320]	@ (8002f74 <main+0xd60>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b17      	cmp	r3, #23
 8002e36:	d173      	bne.n	8002f20 <main+0xd0c>
		  {
			  if (unlock_fire)
 8002e38:	4b4f      	ldr	r3, [pc, #316]	@ (8002f78 <main+0xd64>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <main+0xc34>
			  {
				  c[1] = 0x46;//F
 8002e40:	4b4e      	ldr	r3, [pc, #312]	@ (8002f7c <main+0xd68>)
 8002e42:	2246      	movs	r2, #70	@ 0x46
 8002e44:	705a      	strb	r2, [r3, #1]
 8002e46:	e033      	b.n	8002eb0 <main+0xc9c>
			  } else if (bypass_from_Eth)
 8002e48:	4b4d      	ldr	r3, [pc, #308]	@ (8002f80 <main+0xd6c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <main+0xc44>
			  {
				  c[1] = 0x50;//P
 8002e50:	4b4a      	ldr	r3, [pc, #296]	@ (8002f7c <main+0xd68>)
 8002e52:	2250      	movs	r2, #80	@ 0x50
 8002e54:	705a      	strb	r2, [r3, #1]
 8002e56:	e02b      	b.n	8002eb0 <main+0xc9c>
			  } else if (bypass_from_REB)
 8002e58:	4b4a      	ldr	r3, [pc, #296]	@ (8002f84 <main+0xd70>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <main+0xc54>
			  {
				  c[1] = 0x45;//E
 8002e60:	4b46      	ldr	r3, [pc, #280]	@ (8002f7c <main+0xd68>)
 8002e62:	2245      	movs	r2, #69	@ 0x45
 8002e64:	705a      	strb	r2, [r3, #1]
 8002e66:	e023      	b.n	8002eb0 <main+0xc9c>
			  } else if (!REB_connected)
 8002e68:	4b47      	ldr	r3, [pc, #284]	@ (8002f88 <main+0xd74>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	f083 0301 	eor.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <main+0xc6a>
			  {
				  c[1] = 0x44;//D
 8002e76:	4b41      	ldr	r3, [pc, #260]	@ (8002f7c <main+0xd68>)
 8002e78:	2244      	movs	r2, #68	@ 0x44
 8002e7a:	705a      	strb	r2, [r3, #1]
 8002e7c:	e018      	b.n	8002eb0 <main+0xc9c>
			  } else if (!HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin))
 8002e7e:	2104      	movs	r1, #4
 8002e80:	4842      	ldr	r0, [pc, #264]	@ (8002f8c <main+0xd78>)
 8002e82:	f003 fef9 	bl	8006c78 <HAL_GPIO_ReadPin>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <main+0xc80>
			  {
				  c[1] = 0x43;//C
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f7c <main+0xd68>)
 8002e8e:	2243      	movs	r2, #67	@ 0x43
 8002e90:	705a      	strb	r2, [r3, #1]
 8002e92:	e00d      	b.n	8002eb0 <main+0xc9c>
			  } else if (!Ethernet_connected)
 8002e94:	4b3e      	ldr	r3, [pc, #248]	@ (8002f90 <main+0xd7c>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	f083 0301 	eor.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <main+0xc96>
			  {
				  c[1] = 0x4F;//o
 8002ea2:	4b36      	ldr	r3, [pc, #216]	@ (8002f7c <main+0xd68>)
 8002ea4:	224f      	movs	r2, #79	@ 0x4f
 8002ea6:	705a      	strb	r2, [r3, #1]
 8002ea8:	e002      	b.n	8002eb0 <main+0xc9c>
			  } else
			  {
				  c[1] = 0x52;//r
 8002eaa:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <main+0xd68>)
 8002eac:	2252      	movs	r2, #82	@ 0x52
 8002eae:	705a      	strb	r2, [r3, #1]
			  }
			  send(SOCK_NUM, c, 2);
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4932      	ldr	r1, [pc, #200]	@ (8002f7c <main+0xd68>)
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fd ff2b 	bl	8000d10 <send>
		  }
	  }

	  while (send_card_to_pc)
 8002eba:	e031      	b.n	8002f20 <main+0xd0c>
	  {
		  HAL_Delay(500);
 8002ebc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ec0:	f002 f892 	bl	8004fe8 <HAL_Delay>
		  for (uint32_t i=0; i< number_card; i++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002eca:	e01c      	b.n	8002f06 <main+0xcf2>
		  {
			  W25Q_FastRead_address(i*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&send_user);
 8002ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ed0:	015b      	lsls	r3, r3, #5
 8002ed2:	4a30      	ldr	r2, [pc, #192]	@ (8002f94 <main+0xd80>)
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fe34 	bl	8001b44 <W25Q_FastRead_address>
			  sendData_eth_CardID ("X", send_user);
 8002edc:	4e2d      	ldr	r6, [pc, #180]	@ (8002f94 <main+0xd80>)
 8002ede:	466d      	mov	r5, sp
 8002ee0:	f106 040c 	add.w	r4, r6, #12
 8002ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	602b      	str	r3, [r5, #0]
 8002eec:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002ef0:	4829      	ldr	r0, [pc, #164]	@ (8002f98 <main+0xd84>)
 8002ef2:	f001 f88f 	bl	8004014 <sendData_eth_CardID>
			  HAL_Delay(100);
 8002ef6:	2064      	movs	r0, #100	@ 0x64
 8002ef8:	f002 f876 	bl	8004fe8 <HAL_Delay>
		  for (uint32_t i=0; i< number_card; i++)
 8002efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f00:	3301      	adds	r3, #1
 8002f02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f06:	4b16      	ldr	r3, [pc, #88]	@ (8002f60 <main+0xd4c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d3dc      	bcc.n	8002ecc <main+0xcb8>
		  }
		  send_u8_eth("X", 1);
 8002f12:	2101      	movs	r1, #1
 8002f14:	4820      	ldr	r0, [pc, #128]	@ (8002f98 <main+0xd84>)
 8002f16:	f000 ffdb 	bl	8003ed0 <send_u8_eth>
		  send_card_to_pc = false;
 8002f1a:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <main+0xd88>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
	  while (send_card_to_pc)
 8002f20:	4b1e      	ldr	r3, [pc, #120]	@ (8002f9c <main+0xd88>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1c9      	bne.n	8002ebc <main+0xca8>
	  }
	  while (write_mode)
 8002f28:	e186      	b.n	8003238 <main+0x1024>
 8002f2a:	bf00      	nop
 8002f2c:	2000051c 	.word	0x2000051c
 8002f30:	20000524 	.word	0x20000524
 8002f34:	2000051d 	.word	0x2000051d
 8002f38:	2000051e 	.word	0x2000051e
 8002f3c:	2000051f 	.word	0x2000051f
 8002f40:	20000584 	.word	0x20000584
 8002f44:	20000520 	.word	0x20000520
 8002f48:	20000521 	.word	0x20000521
 8002f4c:	20000522 	.word	0x20000522
 8002f50:	20000523 	.word	0x20000523
 8002f54:	20000582 	.word	0x20000582
 8002f58:	20000510 	.word	0x20000510
 8002f5c:	20000542 	.word	0x20000542
 8002f60:	20000694 	.word	0x20000694
 8002f64:	20000514 	.word	0x20000514
 8002f68:	08009a28 	.word	0x08009a28
 8002f6c:	2000072e 	.word	0x2000072e
 8002f70:	200006b0 	.word	0x200006b0
 8002f74:	2000054c 	.word	0x2000054c
 8002f78:	20000732 	.word	0x20000732
 8002f7c:	20000034 	.word	0x20000034
 8002f80:	200006e1 	.word	0x200006e1
 8002f84:	200006e0 	.word	0x200006e0
 8002f88:	20000036 	.word	0x20000036
 8002f8c:	40010800 	.word	0x40010800
 8002f90:	20000724 	.word	0x20000724
 8002f94:	200007b4 	.word	0x200007b4
 8002f98:	08009a2c 	.word	0x08009a2c
 8002f9c:	20000729 	.word	0x20000729
	  {
		  HAL_Delay(1000);
 8002fa0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fa4:	f002 f820 	bl	8004fe8 <HAL_Delay>
		  uint32_t totalCard = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		  sendString("W", "EOK");
 8002fae:	49a5      	ldr	r1, [pc, #660]	@ (8003244 <main+0x1030>)
 8002fb0:	48a5      	ldr	r0, [pc, #660]	@ (8003248 <main+0x1034>)
 8002fb2:	f000 ffa7 	bl	8003f04 <sendString>
		  time_break = HAL_GetTick();
 8002fb6:	f002 f80d 	bl	8004fd4 <HAL_GetTick>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4aa3      	ldr	r2, [pc, #652]	@ (800324c <main+0x1038>)
 8002fbe:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 8002fc0:	4ba3      	ldr	r3, [pc, #652]	@ (8003250 <main+0x103c>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fd fa6b 	bl	80004a2 <getSn_RX_RSR>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4ba0      	ldr	r3, [pc, #640]	@ (8003254 <main+0x1040>)
 8002fd2:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fd fa64 	bl	80004a2 <getSn_RX_RSR>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b9d      	ldr	r3, [pc, #628]	@ (8003254 <main+0x1040>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	f040 8126 	bne.w	8003234 <main+0x1020>
			  {
				  if (lenData > 500)
 8002fe8:	4b9a      	ldr	r3, [pc, #616]	@ (8003254 <main+0x1040>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002ff0:	d901      	bls.n	8002ff6 <main+0xde2>
				  {
					  HAL_NVIC_SystemReset();
 8002ff2:	f003 f80a 	bl	800600a <HAL_NVIC_SystemReset>
				  }
				  if (!add_card_uart && (lenData > 0))
 8002ff6:	4b98      	ldr	r3, [pc, #608]	@ (8003258 <main+0x1044>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	f083 0301 	eor.w	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8102 	beq.w	800320a <main+0xff6>
 8003006:	4b93      	ldr	r3, [pc, #588]	@ (8003254 <main+0x1040>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80fd 	beq.w	800320a <main+0xff6>
				  {
					  recv(SOCK_NUM, buf, lenData);
 8003010:	4b90      	ldr	r3, [pc, #576]	@ (8003254 <main+0x1040>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	4990      	ldr	r1, [pc, #576]	@ (800325c <main+0x1048>)
 800301a:	2000      	movs	r0, #0
 800301c:	f7fd ff70 	bl	8000f00 <recv>
					  if (buf[0] == 0x57)
 8003020:	4b8e      	ldr	r3, [pc, #568]	@ (800325c <main+0x1048>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b57      	cmp	r3, #87	@ 0x57
 8003026:	f040 80f0 	bne.w	800320a <main+0xff6>
					  {
						  if (buf[1] == 0x44)
 800302a:	4b8c      	ldr	r3, [pc, #560]	@ (800325c <main+0x1048>)
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	2b44      	cmp	r3, #68	@ 0x44
 8003030:	f040 8089 	bne.w	8003146 <main+0xf32>
						  {
							  totalCard++;
 8003034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003038:	3301      	adds	r3, #1
 800303a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							  write_user.STT = totalCard;
 800303e:	4a88      	ldr	r2, [pc, #544]	@ (8003260 <main+0x104c>)
 8003040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003044:	6013      	str	r3, [r2, #0]
							  write_user.cardID =  buf[2]<<24|buf[3]<<16|buf[4]<<8|buf[5];
 8003046:	4b85      	ldr	r3, [pc, #532]	@ (800325c <main+0x1048>)
 8003048:	789b      	ldrb	r3, [r3, #2]
 800304a:	061a      	lsls	r2, r3, #24
 800304c:	4b83      	ldr	r3, [pc, #524]	@ (800325c <main+0x1048>)
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	4b81      	ldr	r3, [pc, #516]	@ (800325c <main+0x1048>)
 8003056:	791b      	ldrb	r3, [r3, #4]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	4313      	orrs	r3, r2
 800305c:	4a7f      	ldr	r2, [pc, #508]	@ (800325c <main+0x1048>)
 800305e:	7952      	ldrb	r2, [r2, #5]
 8003060:	4313      	orrs	r3, r2
 8003062:	461a      	mov	r2, r3
 8003064:	4b7e      	ldr	r3, [pc, #504]	@ (8003260 <main+0x104c>)
 8003066:	605a      	str	r2, [r3, #4]
							  write_user.permis[0] = buf[6];
 8003068:	4b7c      	ldr	r3, [pc, #496]	@ (800325c <main+0x1048>)
 800306a:	799a      	ldrb	r2, [r3, #6]
 800306c:	4b7c      	ldr	r3, [pc, #496]	@ (8003260 <main+0x104c>)
 800306e:	721a      	strb	r2, [r3, #8]
							  write_user.permis[1] = buf[7];
 8003070:	4b7a      	ldr	r3, [pc, #488]	@ (800325c <main+0x1048>)
 8003072:	79da      	ldrb	r2, [r3, #7]
 8003074:	4b7a      	ldr	r3, [pc, #488]	@ (8003260 <main+0x104c>)
 8003076:	725a      	strb	r2, [r3, #9]
							  write_user.permis[2] = buf[8];
 8003078:	4b78      	ldr	r3, [pc, #480]	@ (800325c <main+0x1048>)
 800307a:	7a1a      	ldrb	r2, [r3, #8]
 800307c:	4b78      	ldr	r3, [pc, #480]	@ (8003260 <main+0x104c>)
 800307e:	729a      	strb	r2, [r3, #10]
							  write_user.permis[3] = buf[9];
 8003080:	4b76      	ldr	r3, [pc, #472]	@ (800325c <main+0x1048>)
 8003082:	7a5a      	ldrb	r2, [r3, #9]
 8003084:	4b76      	ldr	r3, [pc, #472]	@ (8003260 <main+0x104c>)
 8003086:	72da      	strb	r2, [r3, #11]
							  write_user.permis[4] = buf[10];
 8003088:	4b74      	ldr	r3, [pc, #464]	@ (800325c <main+0x1048>)
 800308a:	7a9a      	ldrb	r2, [r3, #10]
 800308c:	4b74      	ldr	r3, [pc, #464]	@ (8003260 <main+0x104c>)
 800308e:	731a      	strb	r2, [r3, #12]
							  write_user.permis[5] = buf[11];
 8003090:	4b72      	ldr	r3, [pc, #456]	@ (800325c <main+0x1048>)
 8003092:	7ada      	ldrb	r2, [r3, #11]
 8003094:	4b72      	ldr	r3, [pc, #456]	@ (8003260 <main+0x104c>)
 8003096:	735a      	strb	r2, [r3, #13]
							  write_user.permis[6] = buf[12];
 8003098:	4b70      	ldr	r3, [pc, #448]	@ (800325c <main+0x1048>)
 800309a:	7b1a      	ldrb	r2, [r3, #12]
 800309c:	4b70      	ldr	r3, [pc, #448]	@ (8003260 <main+0x104c>)
 800309e:	739a      	strb	r2, [r3, #14]
							  write_user.permis[7] = buf[13];
 80030a0:	4b6e      	ldr	r3, [pc, #440]	@ (800325c <main+0x1048>)
 80030a2:	7b5a      	ldrb	r2, [r3, #13]
 80030a4:	4b6e      	ldr	r3, [pc, #440]	@ (8003260 <main+0x104c>)
 80030a6:	73da      	strb	r2, [r3, #15]
							  write_user.beginDate = buf[14];
 80030a8:	4b6c      	ldr	r3, [pc, #432]	@ (800325c <main+0x1048>)
 80030aa:	7b9a      	ldrb	r2, [r3, #14]
 80030ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003260 <main+0x104c>)
 80030ae:	74da      	strb	r2, [r3, #19]
							  write_user.beginMonth = buf[15];
 80030b0:	4b6a      	ldr	r3, [pc, #424]	@ (800325c <main+0x1048>)
 80030b2:	7bda      	ldrb	r2, [r3, #15]
 80030b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003260 <main+0x104c>)
 80030b6:	749a      	strb	r2, [r3, #18]
							  write_user.beginYear = buf[16]<<8 | buf[17];
 80030b8:	4b68      	ldr	r3, [pc, #416]	@ (800325c <main+0x1048>)
 80030ba:	7c1b      	ldrb	r3, [r3, #16]
 80030bc:	b21b      	sxth	r3, r3
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	b21a      	sxth	r2, r3
 80030c2:	4b66      	ldr	r3, [pc, #408]	@ (800325c <main+0x1048>)
 80030c4:	7c5b      	ldrb	r3, [r3, #17]
 80030c6:	b21b      	sxth	r3, r3
 80030c8:	4313      	orrs	r3, r2
 80030ca:	b21b      	sxth	r3, r3
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	4b64      	ldr	r3, [pc, #400]	@ (8003260 <main+0x104c>)
 80030d0:	821a      	strh	r2, [r3, #16]
							  write_user.beginHour = buf[18];
 80030d2:	4b62      	ldr	r3, [pc, #392]	@ (800325c <main+0x1048>)
 80030d4:	7c9a      	ldrb	r2, [r3, #18]
 80030d6:	4b62      	ldr	r3, [pc, #392]	@ (8003260 <main+0x104c>)
 80030d8:	751a      	strb	r2, [r3, #20]
							  write_user.beginMinute = buf[19];
 80030da:	4b60      	ldr	r3, [pc, #384]	@ (800325c <main+0x1048>)
 80030dc:	7cda      	ldrb	r2, [r3, #19]
 80030de:	4b60      	ldr	r3, [pc, #384]	@ (8003260 <main+0x104c>)
 80030e0:	755a      	strb	r2, [r3, #21]
							  write_user.endDate = buf[20];
 80030e2:	4b5e      	ldr	r3, [pc, #376]	@ (800325c <main+0x1048>)
 80030e4:	7d1a      	ldrb	r2, [r3, #20]
 80030e6:	4b5e      	ldr	r3, [pc, #376]	@ (8003260 <main+0x104c>)
 80030e8:	765a      	strb	r2, [r3, #25]
							  write_user.endMonth = buf[21];
 80030ea:	4b5c      	ldr	r3, [pc, #368]	@ (800325c <main+0x1048>)
 80030ec:	7d5a      	ldrb	r2, [r3, #21]
 80030ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003260 <main+0x104c>)
 80030f0:	761a      	strb	r2, [r3, #24]
							  write_user.endYear = buf[22]<<8 | buf[23];
 80030f2:	4b5a      	ldr	r3, [pc, #360]	@ (800325c <main+0x1048>)
 80030f4:	7d9b      	ldrb	r3, [r3, #22]
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	b21a      	sxth	r2, r3
 80030fc:	4b57      	ldr	r3, [pc, #348]	@ (800325c <main+0x1048>)
 80030fe:	7ddb      	ldrb	r3, [r3, #23]
 8003100:	b21b      	sxth	r3, r3
 8003102:	4313      	orrs	r3, r2
 8003104:	b21b      	sxth	r3, r3
 8003106:	b29a      	uxth	r2, r3
 8003108:	4b55      	ldr	r3, [pc, #340]	@ (8003260 <main+0x104c>)
 800310a:	82da      	strh	r2, [r3, #22]
							  write_user.endHour = buf[24];
 800310c:	4b53      	ldr	r3, [pc, #332]	@ (800325c <main+0x1048>)
 800310e:	7e1a      	ldrb	r2, [r3, #24]
 8003110:	4b53      	ldr	r3, [pc, #332]	@ (8003260 <main+0x104c>)
 8003112:	769a      	strb	r2, [r3, #26]
							  write_user.endMinute = buf[25];
 8003114:	4b51      	ldr	r3, [pc, #324]	@ (800325c <main+0x1048>)
 8003116:	7e5a      	ldrb	r2, [r3, #25]
 8003118:	4b51      	ldr	r3, [pc, #324]	@ (8003260 <main+0x104c>)
 800311a:	76da      	strb	r2, [r3, #27]
							  W25Q_Write_Nbytes((totalCard-1)*sizeof(user_info_t) + Block32, (uint8_t *)&write_user, sizeof(user_info_t));
 800311c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003120:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003124:	33ff      	adds	r3, #255	@ 0xff
 8003126:	015b      	lsls	r3, r3, #5
 8003128:	2220      	movs	r2, #32
 800312a:	494d      	ldr	r1, [pc, #308]	@ (8003260 <main+0x104c>)
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fdc6 	bl	8001cbe <W25Q_Write_Nbytes>
							  sendString("W", "DOK");
 8003132:	494c      	ldr	r1, [pc, #304]	@ (8003264 <main+0x1050>)
 8003134:	4844      	ldr	r0, [pc, #272]	@ (8003248 <main+0x1034>)
 8003136:	f000 fee5 	bl	8003f04 <sendString>
							  time_break = HAL_GetTick();
 800313a:	f001 ff4b 	bl	8004fd4 <HAL_GetTick>
 800313e:	4603      	mov	r3, r0
 8003140:	4a42      	ldr	r2, [pc, #264]	@ (800324c <main+0x1038>)
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	e061      	b.n	800320a <main+0xff6>
						  } else if (buf[1] == 0x43)
 8003146:	4b45      	ldr	r3, [pc, #276]	@ (800325c <main+0x1048>)
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	2b43      	cmp	r3, #67	@ 0x43
 800314c:	d15d      	bne.n	800320a <main+0xff6>
						  {
							  write_done = true;
 800314e:	4b46      	ldr	r3, [pc, #280]	@ (8003268 <main+0x1054>)
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
				  }
			  } else
			  {
				  continue;
			  }
			  while (write_done)
 8003154:	e059      	b.n	800320a <main+0xff6>
			  {
				  for (uint8_t i=0; i<(number_card)*sizeof(user_info_t)/Sector+1; i++)
 8003156:	2300      	movs	r3, #0
 8003158:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800315c:	e00a      	b.n	8003174 <main+0xf60>
				  {
					  W25Q_Erase_Sector(i);
 800315e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8003162:	b29b      	uxth	r3, r3
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe fd59 	bl	8001c1c <W25Q_Erase_Sector>
				  for (uint8_t i=0; i<(number_card)*sizeof(user_info_t)/Sector+1; i++)
 800316a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800316e:	3301      	adds	r3, #1
 8003170:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8003174:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8003178:	4b3c      	ldr	r3, [pc, #240]	@ (800326c <main+0x1058>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	015b      	lsls	r3, r3, #5
 800317e:	0b1b      	lsrs	r3, r3, #12
 8003180:	3301      	adds	r3, #1
 8003182:	429a      	cmp	r2, r3
 8003184:	d3eb      	bcc.n	800315e <main+0xf4a>
				  }
				  for (uint32_t i = 0; i<totalCard; i++)
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800318c:	e016      	b.n	80031bc <main+0xfa8>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t)+ Block32, sizeof(user_info_t), (uint8_t *)&send_user);
 800318e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003192:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003196:	015b      	lsls	r3, r3, #5
 8003198:	4a35      	ldr	r2, [pc, #212]	@ (8003270 <main+0x105c>)
 800319a:	2120      	movs	r1, #32
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fcd1 	bl	8001b44 <W25Q_FastRead_address>
					  W25Q_Write_Nbytes(i*sizeof(user_info_t), (uint8_t *)&send_user, sizeof(user_info_t));
 80031a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031a6:	015b      	lsls	r3, r3, #5
 80031a8:	2220      	movs	r2, #32
 80031aa:	4931      	ldr	r1, [pc, #196]	@ (8003270 <main+0x105c>)
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe fd86 	bl	8001cbe <W25Q_Write_Nbytes>
				  for (uint32_t i = 0; i<totalCard; i++)
 80031b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031b6:	3301      	adds	r3, #1
 80031b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031bc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80031c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d3e2      	bcc.n	800318e <main+0xf7a>
				  }
				  for (uint32_t i=0; i<((totalCard*sizeof(user_info_t)/Sector)+1); i++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031ce:	e00d      	b.n	80031ec <main+0xfd8>
				  {
					  W25Q_Erase_Sector(i + Block32/0x1000);
 80031d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fd1d 	bl	8001c1c <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((totalCard*sizeof(user_info_t)/Sector)+1); i++)
 80031e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031e6:	3301      	adds	r3, #1
 80031e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031f0:	015b      	lsls	r3, r3, #5
 80031f2:	0b1b      	lsrs	r3, r3, #12
 80031f4:	3301      	adds	r3, #1
 80031f6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d3e8      	bcc.n	80031d0 <main+0xfbc>
				  }
				  sendString("W", "COK");
 80031fe:	491d      	ldr	r1, [pc, #116]	@ (8003274 <main+0x1060>)
 8003200:	4811      	ldr	r0, [pc, #68]	@ (8003248 <main+0x1034>)
 8003202:	f000 fe7f 	bl	8003f04 <sendString>
				  HAL_NVIC_SystemReset();
 8003206:	f002 ff00 	bl	800600a <HAL_NVIC_SystemReset>
			  while (write_done)
 800320a:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <main+0x1054>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1a1      	bne.n	8003156 <main+0xf42>
			  }

			  if ((abs(HAL_GetTick() - time_break) > Timeout_online))
 8003212:	f001 fedf 	bl	8004fd4 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <main+0x1038>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	bfb8      	it	lt
 8003222:	425b      	neglt	r3, r3
 8003224:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003228:	4293      	cmp	r3, r2
 800322a:	f77f aecc 	ble.w	8002fc6 <main+0xdb2>
			  {
				  HAL_NVIC_SystemReset();
 800322e:	f002 feec 	bl	800600a <HAL_NVIC_SystemReset>
 8003232:	e6c8      	b.n	8002fc6 <main+0xdb2>
				  continue;
 8003234:	bf00      	nop
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003236:	e6c6      	b.n	8002fc6 <main+0xdb2>
	  while (write_mode)
 8003238:	4b0f      	ldr	r3, [pc, #60]	@ (8003278 <main+0x1064>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f47f aeaf 	bne.w	8002fa0 <main+0xd8c>
			  }
		  }
	  }
	  while (write_mode_somecard)
 8003242:	e271      	b.n	8003728 <main+0x1514>
 8003244:	08009a30 	.word	0x08009a30
 8003248:	08009a34 	.word	0x08009a34
 800324c:	2000069c 	.word	0x2000069c
 8003250:	200006e1 	.word	0x200006e1
 8003254:	200006a0 	.word	0x200006a0
 8003258:	2000072e 	.word	0x2000072e
 800325c:	20000304 	.word	0x20000304
 8003260:	20000794 	.word	0x20000794
 8003264:	08009a38 	.word	0x08009a38
 8003268:	20000728 	.word	0x20000728
 800326c:	20000694 	.word	0x20000694
 8003270:	200007b4 	.word	0x200007b4
 8003274:	08009a3c 	.word	0x08009a3c
 8003278:	20000727 	.word	0x20000727
	  {
		  HAL_Delay(1000);
 800327c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003280:	f001 feb2 	bl	8004fe8 <HAL_Delay>
		  uint32_t add_card = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  sendString("W", "AOK");
 800328a:	49a6      	ldr	r1, [pc, #664]	@ (8003524 <main+0x1310>)
 800328c:	48a6      	ldr	r0, [pc, #664]	@ (8003528 <main+0x1314>)
 800328e:	f000 fe39 	bl	8003f04 <sendString>
		  time_break = HAL_GetTick();
 8003292:	f001 fe9f 	bl	8004fd4 <HAL_GetTick>
 8003296:	4603      	mov	r3, r0
 8003298:	4aa4      	ldr	r2, [pc, #656]	@ (800352c <main+0x1318>)
 800329a:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 800329c:	4ba4      	ldr	r3, [pc, #656]	@ (8003530 <main+0x131c>)
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7fd f8fd 	bl	80004a2 <getSn_RX_RSR>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	4ba1      	ldr	r3, [pc, #644]	@ (8003534 <main+0x1320>)
 80032ae:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fd f8f6 	bl	80004a2 <getSn_RX_RSR>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b9e      	ldr	r3, [pc, #632]	@ (8003534 <main+0x1320>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	f040 8230 	bne.w	8003724 <main+0x1510>
			  {
				  if (lenData > 512)
 80032c4:	4b9b      	ldr	r3, [pc, #620]	@ (8003534 <main+0x1320>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032cc:	d901      	bls.n	80032d2 <main+0x10be>
				  {
					  HAL_NVIC_SystemReset();
 80032ce:	f002 fe9c 	bl	800600a <HAL_NVIC_SystemReset>
				  }
				  if (!add_card_uart && (lenData > 0))
 80032d2:	4b99      	ldr	r3, [pc, #612]	@ (8003538 <main+0x1324>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	f083 0301 	eor.w	r3, r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 820b 	beq.w	80036f8 <main+0x14e4>
 80032e2:	4b94      	ldr	r3, [pc, #592]	@ (8003534 <main+0x1320>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8206 	beq.w	80036f8 <main+0x14e4>
				  {
					  recv(SOCK_NUM, buf, lenData);
 80032ec:	4b91      	ldr	r3, [pc, #580]	@ (8003534 <main+0x1320>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	4991      	ldr	r1, [pc, #580]	@ (800353c <main+0x1328>)
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7fd fe02 	bl	8000f00 <recv>
					  if (buf[0] == 0x57)
 80032fc:	4b8f      	ldr	r3, [pc, #572]	@ (800353c <main+0x1328>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b57      	cmp	r3, #87	@ 0x57
 8003302:	f040 81f9 	bne.w	80036f8 <main+0x14e4>
					  {
						  if (buf[1] == 0x44)
 8003306:	4b8d      	ldr	r3, [pc, #564]	@ (800353c <main+0x1328>)
 8003308:	785b      	ldrb	r3, [r3, #1]
 800330a:	2b44      	cmp	r3, #68	@ 0x44
 800330c:	f040 808b 	bne.w	8003426 <main+0x1212>
						  {
							  add_card++;
 8003310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003314:	3301      	adds	r3, #1
 8003316:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							  write_user.STT++;
 800331a:	4b89      	ldr	r3, [pc, #548]	@ (8003540 <main+0x132c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	4a87      	ldr	r2, [pc, #540]	@ (8003540 <main+0x132c>)
 8003322:	6013      	str	r3, [r2, #0]
							  write_user.cardID =  buf[2]<<24|buf[3]<<16|buf[4]<<8|buf[5];
 8003324:	4b85      	ldr	r3, [pc, #532]	@ (800353c <main+0x1328>)
 8003326:	789b      	ldrb	r3, [r3, #2]
 8003328:	061a      	lsls	r2, r3, #24
 800332a:	4b84      	ldr	r3, [pc, #528]	@ (800353c <main+0x1328>)
 800332c:	78db      	ldrb	r3, [r3, #3]
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	431a      	orrs	r2, r3
 8003332:	4b82      	ldr	r3, [pc, #520]	@ (800353c <main+0x1328>)
 8003334:	791b      	ldrb	r3, [r3, #4]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	4313      	orrs	r3, r2
 800333a:	4a80      	ldr	r2, [pc, #512]	@ (800353c <main+0x1328>)
 800333c:	7952      	ldrb	r2, [r2, #5]
 800333e:	4313      	orrs	r3, r2
 8003340:	461a      	mov	r2, r3
 8003342:	4b7f      	ldr	r3, [pc, #508]	@ (8003540 <main+0x132c>)
 8003344:	605a      	str	r2, [r3, #4]
							  write_user.permis[0] = buf[6];
 8003346:	4b7d      	ldr	r3, [pc, #500]	@ (800353c <main+0x1328>)
 8003348:	799a      	ldrb	r2, [r3, #6]
 800334a:	4b7d      	ldr	r3, [pc, #500]	@ (8003540 <main+0x132c>)
 800334c:	721a      	strb	r2, [r3, #8]
							  write_user.permis[1] = buf[7];
 800334e:	4b7b      	ldr	r3, [pc, #492]	@ (800353c <main+0x1328>)
 8003350:	79da      	ldrb	r2, [r3, #7]
 8003352:	4b7b      	ldr	r3, [pc, #492]	@ (8003540 <main+0x132c>)
 8003354:	725a      	strb	r2, [r3, #9]
							  write_user.permis[2] = buf[8];
 8003356:	4b79      	ldr	r3, [pc, #484]	@ (800353c <main+0x1328>)
 8003358:	7a1a      	ldrb	r2, [r3, #8]
 800335a:	4b79      	ldr	r3, [pc, #484]	@ (8003540 <main+0x132c>)
 800335c:	729a      	strb	r2, [r3, #10]
							  write_user.permis[3] = buf[9];
 800335e:	4b77      	ldr	r3, [pc, #476]	@ (800353c <main+0x1328>)
 8003360:	7a5a      	ldrb	r2, [r3, #9]
 8003362:	4b77      	ldr	r3, [pc, #476]	@ (8003540 <main+0x132c>)
 8003364:	72da      	strb	r2, [r3, #11]
							  write_user.permis[4] = buf[10];
 8003366:	4b75      	ldr	r3, [pc, #468]	@ (800353c <main+0x1328>)
 8003368:	7a9a      	ldrb	r2, [r3, #10]
 800336a:	4b75      	ldr	r3, [pc, #468]	@ (8003540 <main+0x132c>)
 800336c:	731a      	strb	r2, [r3, #12]
							  write_user.permis[5] = buf[11];
 800336e:	4b73      	ldr	r3, [pc, #460]	@ (800353c <main+0x1328>)
 8003370:	7ada      	ldrb	r2, [r3, #11]
 8003372:	4b73      	ldr	r3, [pc, #460]	@ (8003540 <main+0x132c>)
 8003374:	735a      	strb	r2, [r3, #13]
							  write_user.permis[6] = buf[12];
 8003376:	4b71      	ldr	r3, [pc, #452]	@ (800353c <main+0x1328>)
 8003378:	7b1a      	ldrb	r2, [r3, #12]
 800337a:	4b71      	ldr	r3, [pc, #452]	@ (8003540 <main+0x132c>)
 800337c:	739a      	strb	r2, [r3, #14]
							  write_user.permis[7] = buf[13];
 800337e:	4b6f      	ldr	r3, [pc, #444]	@ (800353c <main+0x1328>)
 8003380:	7b5a      	ldrb	r2, [r3, #13]
 8003382:	4b6f      	ldr	r3, [pc, #444]	@ (8003540 <main+0x132c>)
 8003384:	73da      	strb	r2, [r3, #15]
							  write_user.beginDate = buf[14];
 8003386:	4b6d      	ldr	r3, [pc, #436]	@ (800353c <main+0x1328>)
 8003388:	7b9a      	ldrb	r2, [r3, #14]
 800338a:	4b6d      	ldr	r3, [pc, #436]	@ (8003540 <main+0x132c>)
 800338c:	74da      	strb	r2, [r3, #19]
							  write_user.beginMonth = buf[15];
 800338e:	4b6b      	ldr	r3, [pc, #428]	@ (800353c <main+0x1328>)
 8003390:	7bda      	ldrb	r2, [r3, #15]
 8003392:	4b6b      	ldr	r3, [pc, #428]	@ (8003540 <main+0x132c>)
 8003394:	749a      	strb	r2, [r3, #18]
							  write_user.beginYear = buf[16]<<8 | buf[17];
 8003396:	4b69      	ldr	r3, [pc, #420]	@ (800353c <main+0x1328>)
 8003398:	7c1b      	ldrb	r3, [r3, #16]
 800339a:	b21b      	sxth	r3, r3
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	b21a      	sxth	r2, r3
 80033a0:	4b66      	ldr	r3, [pc, #408]	@ (800353c <main+0x1328>)
 80033a2:	7c5b      	ldrb	r3, [r3, #17]
 80033a4:	b21b      	sxth	r3, r3
 80033a6:	4313      	orrs	r3, r2
 80033a8:	b21b      	sxth	r3, r3
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	4b64      	ldr	r3, [pc, #400]	@ (8003540 <main+0x132c>)
 80033ae:	821a      	strh	r2, [r3, #16]
							  write_user.beginHour = buf[18];
 80033b0:	4b62      	ldr	r3, [pc, #392]	@ (800353c <main+0x1328>)
 80033b2:	7c9a      	ldrb	r2, [r3, #18]
 80033b4:	4b62      	ldr	r3, [pc, #392]	@ (8003540 <main+0x132c>)
 80033b6:	751a      	strb	r2, [r3, #20]
							  write_user.beginMinute = buf[19];
 80033b8:	4b60      	ldr	r3, [pc, #384]	@ (800353c <main+0x1328>)
 80033ba:	7cda      	ldrb	r2, [r3, #19]
 80033bc:	4b60      	ldr	r3, [pc, #384]	@ (8003540 <main+0x132c>)
 80033be:	755a      	strb	r2, [r3, #21]
							  write_user.endDate = buf[20];
 80033c0:	4b5e      	ldr	r3, [pc, #376]	@ (800353c <main+0x1328>)
 80033c2:	7d1a      	ldrb	r2, [r3, #20]
 80033c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003540 <main+0x132c>)
 80033c6:	765a      	strb	r2, [r3, #25]
							  write_user.endMonth = buf[21];
 80033c8:	4b5c      	ldr	r3, [pc, #368]	@ (800353c <main+0x1328>)
 80033ca:	7d5a      	ldrb	r2, [r3, #21]
 80033cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003540 <main+0x132c>)
 80033ce:	761a      	strb	r2, [r3, #24]
							  write_user.endYear = buf[22]<<8 | buf[23];
 80033d0:	4b5a      	ldr	r3, [pc, #360]	@ (800353c <main+0x1328>)
 80033d2:	7d9b      	ldrb	r3, [r3, #22]
 80033d4:	b21b      	sxth	r3, r3
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	b21a      	sxth	r2, r3
 80033da:	4b58      	ldr	r3, [pc, #352]	@ (800353c <main+0x1328>)
 80033dc:	7ddb      	ldrb	r3, [r3, #23]
 80033de:	b21b      	sxth	r3, r3
 80033e0:	4313      	orrs	r3, r2
 80033e2:	b21b      	sxth	r3, r3
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	4b56      	ldr	r3, [pc, #344]	@ (8003540 <main+0x132c>)
 80033e8:	82da      	strh	r2, [r3, #22]
							  write_user.endHour = buf[24];
 80033ea:	4b54      	ldr	r3, [pc, #336]	@ (800353c <main+0x1328>)
 80033ec:	7e1a      	ldrb	r2, [r3, #24]
 80033ee:	4b54      	ldr	r3, [pc, #336]	@ (8003540 <main+0x132c>)
 80033f0:	769a      	strb	r2, [r3, #26]
							  write_user.endMinute = buf[25];
 80033f2:	4b52      	ldr	r3, [pc, #328]	@ (800353c <main+0x1328>)
 80033f4:	7e5a      	ldrb	r2, [r3, #25]
 80033f6:	4b52      	ldr	r3, [pc, #328]	@ (8003540 <main+0x132c>)
 80033f8:	76da      	strb	r2, [r3, #27]
							  W25Q_Write_Nbytes((add_card-1)*sizeof(user_info_t) + Block63, (uint8_t *)&write_user, sizeof(user_info_t));
 80033fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033fe:	f503 33fb 	add.w	r3, r3, #128512	@ 0x1f600
 8003402:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	2220      	movs	r2, #32
 800340a:	494d      	ldr	r1, [pc, #308]	@ (8003540 <main+0x132c>)
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fc56 	bl	8001cbe <W25Q_Write_Nbytes>
							  sendString("W", "DOK");
 8003412:	494c      	ldr	r1, [pc, #304]	@ (8003544 <main+0x1330>)
 8003414:	4844      	ldr	r0, [pc, #272]	@ (8003528 <main+0x1314>)
 8003416:	f000 fd75 	bl	8003f04 <sendString>
							  time_break = HAL_GetTick();
 800341a:	f001 fddb 	bl	8004fd4 <HAL_GetTick>
 800341e:	4603      	mov	r3, r0
 8003420:	4a42      	ldr	r2, [pc, #264]	@ (800352c <main+0x1318>)
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	e168      	b.n	80036f8 <main+0x14e4>
						  } else if (buf[1] == 0x43)
 8003426:	4b45      	ldr	r3, [pc, #276]	@ (800353c <main+0x1328>)
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	2b43      	cmp	r3, #67	@ 0x43
 800342c:	f040 8164 	bne.w	80036f8 <main+0x14e4>
						  {
							  write_done = true;
 8003430:	4b45      	ldr	r3, [pc, #276]	@ (8003548 <main+0x1334>)
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
				  }
			  } else
			  {
				  continue;
			  }
			  while (write_done)
 8003436:	e15f      	b.n	80036f8 <main+0x14e4>
			  {
				  // ghi các thẻ hiện tại vào bộ nhớ đệm từ Block 33
				  for (uint32_t i = 0; i<number_card; i++)
 8003438:	2300      	movs	r3, #0
 800343a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800343e:	e016      	b.n	800346e <main+0x125a>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&send_user);
 8003440:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003444:	015b      	lsls	r3, r3, #5
 8003446:	4a41      	ldr	r2, [pc, #260]	@ (800354c <main+0x1338>)
 8003448:	2120      	movs	r1, #32
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fb7a 	bl	8001b44 <W25Q_FastRead_address>
					  W25Q_Write_Nbytes(i*sizeof(user_info_t) + Block32, (uint8_t *)&send_user, sizeof(user_info_t));
 8003450:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003454:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003458:	015b      	lsls	r3, r3, #5
 800345a:	2220      	movs	r2, #32
 800345c:	493b      	ldr	r1, [pc, #236]	@ (800354c <main+0x1338>)
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe fc2d 	bl	8001cbe <W25Q_Write_Nbytes>
				  for (uint32_t i = 0; i<number_card; i++)
 8003464:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003468:	3301      	adds	r3, #1
 800346a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800346e:	4b38      	ldr	r3, [pc, #224]	@ (8003550 <main+0x133c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003476:	429a      	cmp	r2, r3
 8003478:	d3e2      	bcc.n	8003440 <main+0x122c>
				  }
				  // xóa bộ nhớ ban đầu
				  for (uint8_t i=0; i<(number_card*sizeof(user_info_t)/Sector+1); i++)
 800347a:	2300      	movs	r3, #0
 800347c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8003480:	e00a      	b.n	8003498 <main+0x1284>
				  {
					  W25Q_Erase_Sector(i);
 8003482:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8003486:	b29b      	uxth	r3, r3
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe fbc7 	bl	8001c1c <W25Q_Erase_Sector>
				  for (uint8_t i=0; i<(number_card*sizeof(user_info_t)/Sector+1); i++)
 800348e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8003492:	3301      	adds	r3, #1
 8003494:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8003498:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 800349c:	4b2c      	ldr	r3, [pc, #176]	@ (8003550 <main+0x133c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	015b      	lsls	r3, r3, #5
 80034a2:	0b1b      	lsrs	r3, r3, #12
 80034a4:	3301      	adds	r3, #1
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d3eb      	bcc.n	8003482 <main+0x126e>
				  }
				  uint32_t i = 0, j = 0, k = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  user_info_t old_user, new_user;

				  while (i < number_card && j < add_card)
 80034bc:	e086      	b.n	80035cc <main+0x13b8>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&old_user);
 80034be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034c2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80034c6:	015b      	lsls	r3, r3, #5
 80034c8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80034cc:	2120      	movs	r1, #32
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fb38 	bl	8001b44 <W25Q_FastRead_address>
					  W25Q_FastRead_address(j*sizeof(user_info_t) + Block63, sizeof(user_info_t), (uint8_t *)&new_user);
 80034d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034d8:	f503 33fc 	add.w	r3, r3, #129024	@ 0x1f800
 80034dc:	015b      	lsls	r3, r3, #5
 80034de:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80034e2:	2120      	movs	r1, #32
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fb2d 	bl	8001b44 <W25Q_FastRead_address>
					  if (old_user.cardID < new_user.cardID)
 80034ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d230      	bcs.n	8003554 <main+0x1340>
					  {
						  old_user.STT = k + 1;
 80034f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034f6:	3301      	adds	r3, #1
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&old_user, sizeof(user_info_t));
 80034fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034fe:	015b      	lsls	r3, r3, #5
 8003500:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003504:	2220      	movs	r2, #32
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fbd9 	bl	8001cbe <W25Q_Write_Nbytes>
						  i++; // Dịch chỉ số của mảng đã lấy
 800350c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003510:	3301      	adds	r3, #1
 8003512:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						  k++;
 8003516:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800351a:	3301      	adds	r3, #1
 800351c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003520:	e054      	b.n	80035cc <main+0x13b8>
 8003522:	bf00      	nop
 8003524:	08009a40 	.word	0x08009a40
 8003528:	08009a34 	.word	0x08009a34
 800352c:	2000069c 	.word	0x2000069c
 8003530:	200006e1 	.word	0x200006e1
 8003534:	200006a0 	.word	0x200006a0
 8003538:	2000072e 	.word	0x2000072e
 800353c:	20000304 	.word	0x20000304
 8003540:	20000794 	.word	0x20000794
 8003544:	08009a38 	.word	0x08009a38
 8003548:	20000728 	.word	0x20000728
 800354c:	200007b4 	.word	0x200007b4
 8003550:	20000694 	.word	0x20000694
					  } else if (old_user.cardID > new_user.cardID)
 8003554:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003558:	429a      	cmp	r2, r3
 800355a:	d917      	bls.n	800358c <main+0x1378>
					  {
						  new_user.STT = k + 1;
 800355c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003560:	3301      	adds	r3, #1
 8003562:	647b      	str	r3, [r7, #68]	@ 0x44
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 8003564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003568:	015b      	lsls	r3, r3, #5
 800356a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800356e:	2220      	movs	r2, #32
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fba4 	bl	8001cbe <W25Q_Write_Nbytes>
						  j++; // Dịch chỉ số của mảng đã lấy
 8003576:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800357a:	3301      	adds	r3, #1
 800357c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						  k++;
 8003580:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003584:	3301      	adds	r3, #1
 8003586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800358a:	e01f      	b.n	80035cc <main+0x13b8>
					  } else if (old_user.cardID == new_user.cardID)
 800358c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800358e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003590:	429a      	cmp	r2, r3
 8003592:	d11b      	bne.n	80035cc <main+0x13b8>
					  {
						  new_user.STT = k + 1;
 8003594:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003598:	3301      	adds	r3, #1
 800359a:	647b      	str	r3, [r7, #68]	@ 0x44
						  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 800359c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035a0:	015b      	lsls	r3, r3, #5
 80035a2:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80035a6:	2220      	movs	r2, #32
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fb88 	bl	8001cbe <W25Q_Write_Nbytes>
						  j++; // Dịch chỉ số của mảng đã lấy
 80035ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035b2:	3301      	adds	r3, #1
 80035b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						  i++;
 80035b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035bc:	3301      	adds	r3, #1
 80035be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						  k++;
 80035c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035c6:	3301      	adds	r3, #1
 80035c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (i < number_card && j < add_card)
 80035cc:	4bab      	ldr	r3, [pc, #684]	@ (800387c <main+0x1668>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d229      	bcs.n	800362c <main+0x1418>
 80035d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80035dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035e0:	429a      	cmp	r2, r3
 80035e2:	f4ff af6c 	bcc.w	80034be <main+0x12aa>
					  }
				  }
				  while (i < number_card)
 80035e6:	e021      	b.n	800362c <main+0x1418>
				  {
					  W25Q_FastRead_address(i*sizeof(user_info_t) + Block32, sizeof(user_info_t), (uint8_t *)&old_user);
 80035e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ec:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80035f0:	015b      	lsls	r3, r3, #5
 80035f2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80035f6:	2120      	movs	r1, #32
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe faa3 	bl	8001b44 <W25Q_FastRead_address>
					  old_user.STT = k + 1;
 80035fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003602:	3301      	adds	r3, #1
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
					  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&old_user, sizeof(user_info_t));
 8003606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800360a:	015b      	lsls	r3, r3, #5
 800360c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003610:	2220      	movs	r2, #32
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fb53 	bl	8001cbe <W25Q_Write_Nbytes>
					  i++;
 8003618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800361c:	3301      	adds	r3, #1
 800361e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					  k++;
 8003622:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003626:	3301      	adds	r3, #1
 8003628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (i < number_card)
 800362c:	4b93      	ldr	r3, [pc, #588]	@ (800387c <main+0x1668>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003634:	429a      	cmp	r2, r3
 8003636:	d3d7      	bcc.n	80035e8 <main+0x13d4>
				  }
				  while (j < add_card)
 8003638:	e021      	b.n	800367e <main+0x146a>
				  {
					  W25Q_FastRead_address(j*sizeof(user_info_t) + Block63, sizeof(user_info_t), (uint8_t *)&new_user);
 800363a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800363e:	f503 33fc 	add.w	r3, r3, #129024	@ 0x1f800
 8003642:	015b      	lsls	r3, r3, #5
 8003644:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8003648:	2120      	movs	r1, #32
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fa7a 	bl	8001b44 <W25Q_FastRead_address>
					  new_user.STT = k + 1;
 8003650:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003654:	3301      	adds	r3, #1
 8003656:	647b      	str	r3, [r7, #68]	@ 0x44
					  W25Q_Write_Nbytes(k*sizeof(user_info_t), (uint8_t *)&new_user, sizeof(user_info_t));
 8003658:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800365c:	015b      	lsls	r3, r3, #5
 800365e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003662:	2220      	movs	r2, #32
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe fb2a 	bl	8001cbe <W25Q_Write_Nbytes>
					  j++;
 800366a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800366e:	3301      	adds	r3, #1
 8003670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
					  k++;
 8003674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003678:	3301      	adds	r3, #1
 800367a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  while (j < add_card)
 800367e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003682:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003686:	429a      	cmp	r2, r3
 8003688:	d3d7      	bcc.n	800363a <main+0x1426>
				  }
				  for (uint32_t i=0; i<((number_card*sizeof(user_info_t)/Sector)+1); i++)
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003690:	e00d      	b.n	80036ae <main+0x149a>
				  {
					  W25Q_Erase_Sector(i + Block32/0x1000);
 8003692:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003696:	b29b      	uxth	r3, r3
 8003698:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800369c:	b29b      	uxth	r3, r3
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe fabc 	bl	8001c1c <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((number_card*sizeof(user_info_t)/Sector)+1); i++)
 80036a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036a8:	3301      	adds	r3, #1
 80036aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036ae:	4b73      	ldr	r3, [pc, #460]	@ (800387c <main+0x1668>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	015b      	lsls	r3, r3, #5
 80036b4:	0b1b      	lsrs	r3, r3, #12
 80036b6:	3301      	adds	r3, #1
 80036b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036bc:	429a      	cmp	r2, r3
 80036be:	d3e8      	bcc.n	8003692 <main+0x147e>
				  }
				  for (uint32_t i=0; i<((add_card*sizeof(user_info_t)/Sector)+1); i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036c4:	e00a      	b.n	80036dc <main+0x14c8>
				  {
					  W25Q_Erase_Sector(i + Block63/0x1000);
 80036c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe faa3 	bl	8001c1c <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((add_card*sizeof(user_info_t)/Sector)+1); i++)
 80036d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036d8:	3301      	adds	r3, #1
 80036da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036e0:	015b      	lsls	r3, r3, #5
 80036e2:	0b1b      	lsrs	r3, r3, #12
 80036e4:	3301      	adds	r3, #1
 80036e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d3ec      	bcc.n	80036c6 <main+0x14b2>
				  }
				  sendString("W", "COK");
 80036ec:	4964      	ldr	r1, [pc, #400]	@ (8003880 <main+0x166c>)
 80036ee:	4865      	ldr	r0, [pc, #404]	@ (8003884 <main+0x1670>)
 80036f0:	f000 fc08 	bl	8003f04 <sendString>
				  HAL_NVIC_SystemReset();
 80036f4:	f002 fc89 	bl	800600a <HAL_NVIC_SystemReset>
			  while (write_done)
 80036f8:	4b63      	ldr	r3, [pc, #396]	@ (8003888 <main+0x1674>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f47f ae9b 	bne.w	8003438 <main+0x1224>
			  }

			  if (abs(HAL_GetTick() - time_break) > Timeout_online)
 8003702:	f001 fc67 	bl	8004fd4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	4b60      	ldr	r3, [pc, #384]	@ (800388c <main+0x1678>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	bfb8      	it	lt
 8003712:	425b      	neglt	r3, r3
 8003714:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003718:	4293      	cmp	r3, r2
 800371a:	f77f adc2 	ble.w	80032a2 <main+0x108e>
			  {
				  HAL_NVIC_SystemReset();
 800371e:	f002 fc74 	bl	800600a <HAL_NVIC_SystemReset>
 8003722:	e5be      	b.n	80032a2 <main+0x108e>
				  continue;
 8003724:	bf00      	nop
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003726:	e5bc      	b.n	80032a2 <main+0x108e>
	  while (write_mode_somecard)
 8003728:	4b59      	ldr	r3, [pc, #356]	@ (8003890 <main+0x167c>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f47f ada5 	bne.w	800327c <main+0x1068>
			  }
		  }
	  }
	  while (write_card_by_hand)
 8003732:	e05a      	b.n	80037ea <main+0x15d6>
	  {
		  sendString("W", "HOK");
 8003734:	4957      	ldr	r1, [pc, #348]	@ (8003894 <main+0x1680>)
 8003736:	4853      	ldr	r0, [pc, #332]	@ (8003884 <main+0x1670>)
 8003738:	f000 fbe4 	bl	8003f04 <sendString>
		  time_break = HAL_GetTick();
 800373c:	f001 fc4a 	bl	8004fd4 <HAL_GetTick>
 8003740:	4603      	mov	r3, r0
 8003742:	4a52      	ldr	r2, [pc, #328]	@ (800388c <main+0x1678>)
 8003744:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 8003746:	4b54      	ldr	r3, [pc, #336]	@ (8003898 <main+0x1684>)
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 800374c:	2000      	movs	r0, #0
 800374e:	f7fc fea8 	bl	80004a2 <getSn_RX_RSR>
 8003752:	4603      	mov	r3, r0
 8003754:	461a      	mov	r2, r3
 8003756:	4b51      	ldr	r3, [pc, #324]	@ (800389c <main+0x1688>)
 8003758:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 800375a:	2000      	movs	r0, #0
 800375c:	f7fc fea1 	bl	80004a2 <getSn_RX_RSR>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	4b4d      	ldr	r3, [pc, #308]	@ (800389c <main+0x1688>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d11c      	bne.n	80037a6 <main+0x1592>
			  {
				  if (lenData > 512)
 800376c:	4b4b      	ldr	r3, [pc, #300]	@ (800389c <main+0x1688>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003774:	d901      	bls.n	800377a <main+0x1566>
				  {
					  HAL_NVIC_SystemReset();
 8003776:	f002 fc48 	bl	800600a <HAL_NVIC_SystemReset>
				  }
				  if (lenData > 0)
 800377a:	4b48      	ldr	r3, [pc, #288]	@ (800389c <main+0x1688>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d011      	beq.n	80037a6 <main+0x1592>
				  {
					  recv(SOCK_NUM, buf, lenData);
 8003782:	4b46      	ldr	r3, [pc, #280]	@ (800389c <main+0x1688>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	4945      	ldr	r1, [pc, #276]	@ (80038a0 <main+0x168c>)
 800378c:	2000      	movs	r0, #0
 800378e:	f7fd fbb7 	bl	8000f00 <recv>
					  if (buf[0] == 0x57)
 8003792:	4b43      	ldr	r3, [pc, #268]	@ (80038a0 <main+0x168c>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b57      	cmp	r3, #87	@ 0x57
 8003798:	d105      	bne.n	80037a6 <main+0x1592>
					  {
						  if (buf[1] == 0x43)
 800379a:	4b41      	ldr	r3, [pc, #260]	@ (80038a0 <main+0x168c>)
 800379c:	785b      	ldrb	r3, [r3, #1]
 800379e:	2b43      	cmp	r3, #67	@ 0x43
 80037a0:	d101      	bne.n	80037a6 <main+0x1592>
						  {
							  HAL_NVIC_SystemReset();
 80037a2:	f002 fc32 	bl	800600a <HAL_NVIC_SystemReset>
						  }
					  }
				  }
			  }
			  if (new_wcode)
 80037a6:	4b3f      	ldr	r3, [pc, #252]	@ (80038a4 <main+0x1690>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <main+0x15b6>
			  {
				  new_wcode = false;
 80037ae:	4b3d      	ldr	r3, [pc, #244]	@ (80038a4 <main+0x1690>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
				  sendData_eth("H", wcode);
 80037b4:	4b3c      	ldr	r3, [pc, #240]	@ (80038a8 <main+0x1694>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	483c      	ldr	r0, [pc, #240]	@ (80038ac <main+0x1698>)
 80037bc:	f000 fb62 	bl	8003e84 <sendData_eth>
				  time_break = HAL_GetTick();
 80037c0:	f001 fc08 	bl	8004fd4 <HAL_GetTick>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4a31      	ldr	r2, [pc, #196]	@ (800388c <main+0x1678>)
 80037c8:	6013      	str	r3, [r2, #0]
			  }
			  if (abs(HAL_GetTick() - time_break) > Timeout_online)
 80037ca:	f001 fc03 	bl	8004fd4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	4b2e      	ldr	r3, [pc, #184]	@ (800388c <main+0x1678>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bfb8      	it	lt
 80037da:	425b      	neglt	r3, r3
 80037dc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80037e0:	4293      	cmp	r3, r2
 80037e2:	ddb3      	ble.n	800374c <main+0x1538>
			  {
				  HAL_NVIC_SystemReset();
 80037e4:	f002 fc11 	bl	800600a <HAL_NVIC_SystemReset>
			  lenData = getSn_RX_RSR(SOCK_NUM);
 80037e8:	e7b0      	b.n	800374c <main+0x1538>
	  while (write_card_by_hand)
 80037ea:	4b31      	ldr	r3, [pc, #196]	@ (80038b0 <main+0x169c>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1a0      	bne.n	8003734 <main+0x1520>
			  }
		  }
	  }
	  if (RST_set)
 80037f2:	4b30      	ldr	r3, [pc, #192]	@ (80038b4 <main+0x16a0>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d030      	beq.n	800385c <main+0x1648>
	  {
		  if (RST_timer_last > 10000)
 80037fa:	4b2f      	ldr	r3, [pc, #188]	@ (80038b8 <main+0x16a4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003802:	4293      	cmp	r3, r2
 8003804:	d928      	bls.n	8003858 <main+0x1644>
		  {
			  ip1 = 192;
 8003806:	4b2d      	ldr	r3, [pc, #180]	@ (80038bc <main+0x16a8>)
 8003808:	22c0      	movs	r2, #192	@ 0xc0
 800380a:	701a      	strb	r2, [r3, #0]
			  ip2 = 168;
 800380c:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <main+0x16ac>)
 800380e:	22a8      	movs	r2, #168	@ 0xa8
 8003810:	701a      	strb	r2, [r3, #0]
			  ip3 = 0;
 8003812:	4b2c      	ldr	r3, [pc, #176]	@ (80038c4 <main+0x16b0>)
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
			  ip4 = 72;
 8003818:	4b2b      	ldr	r3, [pc, #172]	@ (80038c8 <main+0x16b4>)
 800381a:	2248      	movs	r2, #72	@ 0x48
 800381c:	701a      	strb	r2, [r3, #0]
			  ip_server1 = 192;
 800381e:	4b2b      	ldr	r3, [pc, #172]	@ (80038cc <main+0x16b8>)
 8003820:	22c0      	movs	r2, #192	@ 0xc0
 8003822:	701a      	strb	r2, [r3, #0]
			  ip_server2 = 168;
 8003824:	4b2a      	ldr	r3, [pc, #168]	@ (80038d0 <main+0x16bc>)
 8003826:	22a8      	movs	r2, #168	@ 0xa8
 8003828:	701a      	strb	r2, [r3, #0]
			  ip_server3 = 0;
 800382a:	4b2a      	ldr	r3, [pc, #168]	@ (80038d4 <main+0x16c0>)
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
			  ip_server4 = 2;
 8003830:	4b29      	ldr	r3, [pc, #164]	@ (80038d8 <main+0x16c4>)
 8003832:	2202      	movs	r2, #2
 8003834:	701a      	strb	r2, [r3, #0]
			  port_server = 6000;
 8003836:	4b29      	ldr	r3, [pc, #164]	@ (80038dc <main+0x16c8>)
 8003838:	f241 7270 	movw	r2, #6000	@ 0x1770
 800383c:	801a      	strh	r2, [r3, #0]
			  port_client = 0;
 800383e:	4b28      	ldr	r3, [pc, #160]	@ (80038e0 <main+0x16cc>)
 8003840:	2200      	movs	r2, #0
 8003842:	801a      	strh	r2, [r3, #0]
			  time_delay = 1;
 8003844:	4b27      	ldr	r3, [pc, #156]	@ (80038e4 <main+0x16d0>)
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
			  elevator_mode = 0;
 800384a:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <main+0x16d4>)
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
			  W25Q_EraseChip();
 8003850:	f7fe f9cb 	bl	8001bea <W25Q_EraseChip>
			  save_data();
 8003854:	f000 fcc4 	bl	80041e0 <save_data>
		  }
		  HAL_NVIC_SystemReset();
 8003858:	f002 fbd7 	bl	800600a <HAL_NVIC_SystemReset>
	  }
	  if (counter_reset == 700)
 800385c:	4b23      	ldr	r3, [pc, #140]	@ (80038ec <main+0x16d8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8003864:	d101      	bne.n	800386a <main+0x1656>
	  {
		  HAL_NVIC_SystemReset();
 8003866:	f002 fbd0 	bl	800600a <HAL_NVIC_SystemReset>
	  }
	  HAL_Delay(10);
 800386a:	200a      	movs	r0, #10
 800386c:	f001 fbbc 	bl	8004fe8 <HAL_Delay>
 8003870:	f7fe bef4 	b.w	800265c <main+0x448>
		  continue;
 8003874:	bf00      	nop
	  lenData = getSn_RX_RSR(SOCK_NUM);
 8003876:	f7fe bef1 	b.w	800265c <main+0x448>
 800387a:	bf00      	nop
 800387c:	20000694 	.word	0x20000694
 8003880:	08009a3c 	.word	0x08009a3c
 8003884:	08009a34 	.word	0x08009a34
 8003888:	20000728 	.word	0x20000728
 800388c:	2000069c 	.word	0x2000069c
 8003890:	20000726 	.word	0x20000726
 8003894:	08009a44 	.word	0x08009a44
 8003898:	200006e1 	.word	0x200006e1
 800389c:	200006a0 	.word	0x200006a0
 80038a0:	20000304 	.word	0x20000304
 80038a4:	2000072b 	.word	0x2000072b
 80038a8:	2000058c 	.word	0x2000058c
 80038ac:	08009a48 	.word	0x08009a48
 80038b0:	2000072f 	.word	0x2000072f
 80038b4:	20000731 	.word	0x20000731
 80038b8:	200006c8 	.word	0x200006c8
 80038bc:	2000051c 	.word	0x2000051c
 80038c0:	2000051d 	.word	0x2000051d
 80038c4:	2000051e 	.word	0x2000051e
 80038c8:	2000051f 	.word	0x2000051f
 80038cc:	20000520 	.word	0x20000520
 80038d0:	20000521 	.word	0x20000521
 80038d4:	20000522 	.word	0x20000522
 80038d8:	20000523 	.word	0x20000523
 80038dc:	20000582 	.word	0x20000582
 80038e0:	20000584 	.word	0x20000584
 80038e4:	20000510 	.word	0x20000510
 80038e8:	20000542 	.word	0x20000542
 80038ec:	200006d0 	.word	0x200006d0

080038f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b090      	sub	sp, #64	@ 0x40
 80038f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038f6:	f107 0318 	add.w	r3, r7, #24
 80038fa:	2228      	movs	r2, #40	@ 0x28
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f006 f832 	bl	8009968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	609a      	str	r2, [r3, #8]
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003912:	2309      	movs	r3, #9
 8003914:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003916:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800391a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800391c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003920:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003922:	2301      	movs	r3, #1
 8003924:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003926:	2301      	movs	r3, #1
 8003928:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800392a:	2302      	movs	r3, #2
 800392c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800392e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003932:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003934:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003938:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800393a:	f107 0318 	add.w	r3, r7, #24
 800393e:	4618      	mov	r0, r3
 8003940:	f003 fa4e 	bl	8006de0 <HAL_RCC_OscConfig>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800394a:	f001 f881 	bl	8004a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800394e:	230f      	movs	r3, #15
 8003950:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003952:	2302      	movs	r3, #2
 8003954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800395a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800395e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f003 fcbb 	bl	80072e4 <HAL_RCC_ClockConfig>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003974:	f001 f86c 	bl	8004a50 <Error_Handler>
  }
}
 8003978:	bf00      	nop
 800397a:	3740      	adds	r7, #64	@ 0x40
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003984:	4b17      	ldr	r3, [pc, #92]	@ (80039e4 <MX_CAN_Init+0x64>)
 8003986:	4a18      	ldr	r2, [pc, #96]	@ (80039e8 <MX_CAN_Init+0x68>)
 8003988:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 60;
 800398a:	4b16      	ldr	r3, [pc, #88]	@ (80039e4 <MX_CAN_Init+0x64>)
 800398c:	223c      	movs	r2, #60	@ 0x3c
 800398e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003990:	4b14      	ldr	r3, [pc, #80]	@ (80039e4 <MX_CAN_Init+0x64>)
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003996:	4b13      	ldr	r3, [pc, #76]	@ (80039e4 <MX_CAN_Init+0x64>)
 8003998:	2200      	movs	r2, #0
 800399a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 800399c:	4b11      	ldr	r3, [pc, #68]	@ (80039e4 <MX_CAN_Init+0x64>)
 800399e:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 80039a2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 80039a4:	4b0f      	ldr	r3, [pc, #60]	@ (80039e4 <MX_CAN_Init+0x64>)
 80039a6:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80039aa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80039ac:	4b0d      	ldr	r3, [pc, #52]	@ (80039e4 <MX_CAN_Init+0x64>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80039b2:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <MX_CAN_Init+0x64>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80039b8:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <MX_CAN_Init+0x64>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80039be:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <MX_CAN_Init+0x64>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80039c4:	4b07      	ldr	r3, [pc, #28]	@ (80039e4 <MX_CAN_Init+0x64>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80039ca:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <MX_CAN_Init+0x64>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80039d0:	4804      	ldr	r0, [pc, #16]	@ (80039e4 <MX_CAN_Init+0x64>)
 80039d2:	f001 fb4b 	bl	800506c <HAL_CAN_Init>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80039dc:	f001 f838 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	2000009c 	.word	0x2000009c
 80039e8:	40006400 	.word	0x40006400

080039ec <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80039f0:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <MX_IWDG_Init+0x2c>)
 80039f2:	4a0a      	ldr	r2, [pc, #40]	@ (8003a1c <MX_IWDG_Init+0x30>)
 80039f4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80039f6:	4b08      	ldr	r3, [pc, #32]	@ (8003a18 <MX_IWDG_Init+0x2c>)
 80039f8:	2204      	movs	r2, #4
 80039fa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1874;
 80039fc:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <MX_IWDG_Init+0x2c>)
 80039fe:	f240 7252 	movw	r2, #1874	@ 0x752
 8003a02:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003a04:	4804      	ldr	r0, [pc, #16]	@ (8003a18 <MX_IWDG_Init+0x2c>)
 8003a06:	f003 f997 	bl	8006d38 <HAL_IWDG_Init>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003a10:	f001 f81e 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	200000c4 	.word	0x200000c4
 8003a1c:	40003000 	.word	0x40003000

08003a20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a24:	4b17      	ldr	r3, [pc, #92]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a26:	4a18      	ldr	r2, [pc, #96]	@ (8003a88 <MX_SPI1_Init+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a2a:	4b16      	ldr	r3, [pc, #88]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a32:	4b14      	ldr	r3, [pc, #80]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a38:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a44:	4b0f      	ldr	r3, [pc, #60]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a52:	4b0c      	ldr	r3, [pc, #48]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a54:	2220      	movs	r2, #32
 8003a56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a58:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a5e:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a64:	4b07      	ldr	r3, [pc, #28]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a6c:	220a      	movs	r2, #10
 8003a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a70:	4804      	ldr	r0, [pc, #16]	@ (8003a84 <MX_SPI1_Init+0x64>)
 8003a72:	f003 fdc7 	bl	8007604 <HAL_SPI_Init>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a7c:	f000 ffe8 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	200000d0 	.word	0x200000d0
 8003a88:	40013000 	.word	0x40013000

08003a8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a90:	4b17      	ldr	r3, [pc, #92]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003a92:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <MX_SPI2_Init+0x68>)
 8003a94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a96:	4b16      	ldr	r3, [pc, #88]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003a98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a9e:	4b14      	ldr	r3, [pc, #80]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003aa4:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aaa:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003abc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003abe:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad0:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ad6:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003ad8:	220a      	movs	r2, #10
 8003ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003adc:	4804      	ldr	r0, [pc, #16]	@ (8003af0 <MX_SPI2_Init+0x64>)
 8003ade:	f003 fd91 	bl	8007604 <HAL_SPI_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ae8:	f000 ffb2 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003aec:	bf00      	nop
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000128 	.word	0x20000128
 8003af4:	40003800 	.word	0x40003800

08003af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003afe:	f107 0308 	add.w	r3, r7, #8
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	609a      	str	r2, [r3, #8]
 8003b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b14:	4b1e      	ldr	r3, [pc, #120]	@ (8003b90 <MX_TIM2_Init+0x98>)
 8003b16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b90 <MX_TIM2_Init+0x98>)
 8003b1e:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003b22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b24:	4b1a      	ldr	r3, [pc, #104]	@ (8003b90 <MX_TIM2_Init+0x98>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003b2a:	4b19      	ldr	r3, [pc, #100]	@ (8003b90 <MX_TIM2_Init+0x98>)
 8003b2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b32:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <MX_TIM2_Init+0x98>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b38:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <MX_TIM2_Init+0x98>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b3e:	4814      	ldr	r0, [pc, #80]	@ (8003b90 <MX_TIM2_Init+0x98>)
 8003b40:	f004 faf5 	bl	800812e <HAL_TIM_Base_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003b4a:	f000 ff81 	bl	8004a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b54:	f107 0308 	add.w	r3, r7, #8
 8003b58:	4619      	mov	r1, r3
 8003b5a:	480d      	ldr	r0, [pc, #52]	@ (8003b90 <MX_TIM2_Init+0x98>)
 8003b5c:	f004 fc78 	bl	8008450 <HAL_TIM_ConfigClockSource>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003b66:	f000 ff73 	bl	8004a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b72:	463b      	mov	r3, r7
 8003b74:	4619      	mov	r1, r3
 8003b76:	4806      	ldr	r0, [pc, #24]	@ (8003b90 <MX_TIM2_Init+0x98>)
 8003b78:	f004 fe5a 	bl	8008830 <HAL_TIMEx_MasterConfigSynchronization>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003b82:	f000 ff65 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000180 	.word	0x20000180

08003b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ba8:	463b      	mov	r3, r7
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <MX_TIM3_Init+0x94>)
 8003bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c2c <MX_TIM3_Init+0x98>)
 8003bb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000;
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c28 <MX_TIM3_Init+0x94>)
 8003bb8:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003bbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8003c28 <MX_TIM3_Init+0x94>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003bc4:	4b18      	ldr	r3, [pc, #96]	@ (8003c28 <MX_TIM3_Init+0x94>)
 8003bc6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003bca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bcc:	4b16      	ldr	r3, [pc, #88]	@ (8003c28 <MX_TIM3_Init+0x94>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bd2:	4b15      	ldr	r3, [pc, #84]	@ (8003c28 <MX_TIM3_Init+0x94>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bd8:	4813      	ldr	r0, [pc, #76]	@ (8003c28 <MX_TIM3_Init+0x94>)
 8003bda:	f004 faa8 	bl	800812e <HAL_TIM_Base_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003be4:	f000 ff34 	bl	8004a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	480c      	ldr	r0, [pc, #48]	@ (8003c28 <MX_TIM3_Init+0x94>)
 8003bf6:	f004 fc2b 	bl	8008450 <HAL_TIM_ConfigClockSource>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003c00:	f000 ff26 	bl	8004a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c04:	2300      	movs	r3, #0
 8003c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4805      	ldr	r0, [pc, #20]	@ (8003c28 <MX_TIM3_Init+0x94>)
 8003c12:	f004 fe0d 	bl	8008830 <HAL_TIMEx_MasterConfigSynchronization>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003c1c:	f000 ff18 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c20:	bf00      	nop
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	200001c8 	.word	0x200001c8
 8003c2c:	40000400 	.word	0x40000400

08003c30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c36:	4a12      	ldr	r2, [pc, #72]	@ (8003c80 <MX_USART1_UART_Init+0x50>)
 8003c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003c3a:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c42:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c48:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c54:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c56:	220c      	movs	r2, #12
 8003c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c5a:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c60:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c66:	4805      	ldr	r0, [pc, #20]	@ (8003c7c <MX_USART1_UART_Init+0x4c>)
 8003c68:	f004 fe52 	bl	8008910 <HAL_UART_Init>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c72:	f000 feed 	bl	8004a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000210 	.word	0x20000210
 8003c80:	40013800 	.word	0x40013800

08003c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <MX_DMA_Init+0x38>)
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003cbc <MX_DMA_Init+0x38>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6153      	str	r3, [r2, #20]
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <MX_DMA_Init+0x38>)
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	607b      	str	r3, [r7, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	200f      	movs	r0, #15
 8003ca8:	f002 f985 	bl	8005fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003cac:	200f      	movs	r0, #15
 8003cae:	f002 f99e 	bl	8005fee <HAL_NVIC_EnableIRQ>

}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000

08003cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc6:	f107 0310 	add.w	r3, r7, #16
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd4:	4b66      	ldr	r3, [pc, #408]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	4a65      	ldr	r2, [pc, #404]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003cda:	f043 0310 	orr.w	r3, r3, #16
 8003cde:	6193      	str	r3, [r2, #24]
 8003ce0:	4b63      	ldr	r3, [pc, #396]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cec:	4b60      	ldr	r3, [pc, #384]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	4a5f      	ldr	r2, [pc, #380]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003cf2:	f043 0320 	orr.w	r3, r3, #32
 8003cf6:	6193      	str	r3, [r2, #24]
 8003cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d04:	4b5a      	ldr	r3, [pc, #360]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	4a59      	ldr	r2, [pc, #356]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003d0a:	f043 0304 	orr.w	r3, r3, #4
 8003d0e:	6193      	str	r3, [r2, #24]
 8003d10:	4b57      	ldr	r3, [pc, #348]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1c:	4b54      	ldr	r3, [pc, #336]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	4a53      	ldr	r2, [pc, #332]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003d22:	f043 0308 	orr.w	r3, r3, #8
 8003d26:	6193      	str	r3, [r2, #24]
 8003d28:	4b51      	ldr	r3, [pc, #324]	@ (8003e70 <MX_GPIO_Init+0x1b0>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_STT_Pin|LED_STT_ETH_Pin|LED_BP_Pin, GPIO_PIN_RESET);
 8003d34:	2200      	movs	r2, #0
 8003d36:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8003d3a:	484e      	ldr	r0, [pc, #312]	@ (8003e74 <MX_GPIO_Init+0x1b4>)
 8003d3c:	f002 ffb3 	bl	8006ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003d40:	2201      	movs	r2, #1
 8003d42:	2110      	movs	r1, #16
 8003d44:	484c      	ldr	r0, [pc, #304]	@ (8003e78 <MX_GPIO_Init+0x1b8>)
 8003d46:	f002 ffae 	bl	8006ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|S_OUT2_Pin|S_OUT1_Pin, GPIO_PIN_RESET);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2132      	movs	r1, #50	@ 0x32
 8003d4e:	484b      	ldr	r0, [pc, #300]	@ (8003e7c <MX_GPIO_Init+0x1bc>)
 8003d50:	f002 ffa9 	bl	8006ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_SET);
 8003d54:	2201      	movs	r2, #1
 8003d56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d5a:	4848      	ldr	r0, [pc, #288]	@ (8003e7c <MX_GPIO_Init+0x1bc>)
 8003d5c:	f002 ffa3 	bl	8006ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8003d60:	2200      	movs	r2, #0
 8003d62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d66:	4844      	ldr	r0, [pc, #272]	@ (8003e78 <MX_GPIO_Init+0x1b8>)
 8003d68:	f002 ff9d 	bl	8006ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STT_Pin LED_STT_ETH_Pin LED_BP_Pin */
  GPIO_InitStruct.Pin = LED_STT_Pin|LED_STT_ETH_Pin|LED_BP_Pin;
 8003d6c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d72:	2301      	movs	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d7e:	f107 0310 	add.w	r3, r7, #16
 8003d82:	4619      	mov	r1, r3
 8003d84:	483b      	ldr	r0, [pc, #236]	@ (8003e74 <MX_GPIO_Init+0x1b4>)
 8003d86:	f002 fdf3 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : BYPASS_Pin */
  GPIO_InitStruct.Pin = BYPASS_Pin;
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BYPASS_GPIO_Port, &GPIO_InitStruct);
 8003d96:	f107 0310 	add.w	r3, r7, #16
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4836      	ldr	r0, [pc, #216]	@ (8003e78 <MX_GPIO_Init+0x1b8>)
 8003d9e:	f002 fde7 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8003da2:	2310      	movs	r3, #16
 8003da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003da6:	2301      	movs	r3, #1
 8003da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dae:	2303      	movs	r3, #3
 8003db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8003db2:	f107 0310 	add.w	r3, r7, #16
 8003db6:	4619      	mov	r1, r3
 8003db8:	482f      	ldr	r0, [pc, #188]	@ (8003e78 <MX_GPIO_Init+0x1b8>)
 8003dba:	f002 fdd9 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e80 <MX_GPIO_Init+0x1c0>)
 8003dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dca:	f107 0310 	add.w	r3, r7, #16
 8003dce:	4619      	mov	r1, r3
 8003dd0:	482a      	ldr	r0, [pc, #168]	@ (8003e7c <MX_GPIO_Init+0x1bc>)
 8003dd2:	f002 fdcd 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 S_OUT2_Pin S_OUT1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|S_OUT2_Pin|S_OUT1_Pin;
 8003dd6:	2332      	movs	r3, #50	@ 0x32
 8003dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2302      	movs	r3, #2
 8003de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de6:	f107 0310 	add.w	r3, r7, #16
 8003dea:	4619      	mov	r1, r3
 8003dec:	4823      	ldr	r0, [pc, #140]	@ (8003e7c <MX_GPIO_Init+0x1bc>)
 8003dee:	f002 fdbf 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_W25_Pin */
  GPIO_InitStruct.Pin = CS_W25_Pin;
 8003df2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e00:	2303      	movs	r3, #3
 8003e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_W25_GPIO_Port, &GPIO_InitStruct);
 8003e04:	f107 0310 	add.w	r3, r7, #16
 8003e08:	4619      	mov	r1, r3
 8003e0a:	481c      	ldr	r0, [pc, #112]	@ (8003e7c <MX_GPIO_Init+0x1bc>)
 8003e0c:	f002 fdb0 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : DE_Pin */
  GPIO_InitStruct.Pin = DE_Pin;
 8003e10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e16:	2301      	movs	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 8003e22:	f107 0310 	add.w	r3, r7, #16
 8003e26:	4619      	mov	r1, r3
 8003e28:	4813      	ldr	r0, [pc, #76]	@ (8003e78 <MX_GPIO_Init+0x1b8>)
 8003e2a:	f002 fda1 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8003e2e:	2340      	movs	r3, #64	@ 0x40
 8003e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e32:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <MX_GPIO_Init+0x1c0>)
 8003e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e36:	2301      	movs	r3, #1
 8003e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8003e3a:	f107 0310 	add.w	r3, r7, #16
 8003e3e:	4619      	mov	r1, r3
 8003e40:	480e      	ldr	r0, [pc, #56]	@ (8003e7c <MX_GPIO_Init+0x1bc>)
 8003e42:	f002 fd95 	bl	8006970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2101      	movs	r1, #1
 8003e4a:	2006      	movs	r0, #6
 8003e4c:	f002 f8b3 	bl	8005fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003e50:	2006      	movs	r0, #6
 8003e52:	f002 f8cc 	bl	8005fee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8003e56:	2200      	movs	r2, #0
 8003e58:	2107      	movs	r1, #7
 8003e5a:	2017      	movs	r0, #23
 8003e5c:	f002 f8ab 	bl	8005fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e60:	2017      	movs	r0, #23
 8003e62:	f002 f8c4 	bl	8005fee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003e66:	bf00      	nop
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40011000 	.word	0x40011000
 8003e78:	40010800 	.word	0x40010800
 8003e7c:	40010c00 	.word	0x40010c00
 8003e80:	10210000 	.word	0x10210000

08003e84 <sendData_eth>:

/* USER CODE BEGIN 4 */
void sendData_eth (char *CMD, uint32_t data)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	uint8_t cmd[7];
	cmd[0] = CMD[0];
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	723b      	strb	r3, [r7, #8]
	cmd[1] = data>>24&0xFF;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	0e1b      	lsrs	r3, r3, #24
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	727b      	strb	r3, [r7, #9]
	cmd[2] = data>>16&0xFF;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	72bb      	strb	r3, [r7, #10]
	cmd[3] = data>>8&0xFF;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	72fb      	strb	r3, [r7, #11]
	cmd[4] = data&0xFF;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	733b      	strb	r3, [r7, #12]
	cmd[5] = 0x0D;
 8003eb2:	230d      	movs	r3, #13
 8003eb4:	737b      	strb	r3, [r7, #13]
	cmd[6] = 0x0A;
 8003eb6:	230a      	movs	r3, #10
 8003eb8:	73bb      	strb	r3, [r7, #14]
	send(SOCK_NUM,(uint8_t *) cmd, 7);
 8003eba:	f107 0308 	add.w	r3, r7, #8
 8003ebe:	2207      	movs	r2, #7
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f7fc ff24 	bl	8000d10 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <send_u8_eth>:
void send_u8_eth (char *CMD, uint8_t data)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
//	char buf[10] = {0};
	uint8_t cmd[4];
	cmd[0] = CMD[0];
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	733b      	strb	r3, [r7, #12]
	cmd[1] = data;
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	737b      	strb	r3, [r7, #13]
	cmd[2] = 0x0D;
 8003ee6:	230d      	movs	r3, #13
 8003ee8:	73bb      	strb	r3, [r7, #14]
	cmd[3] = 0x0A;
 8003eea:	230a      	movs	r3, #10
 8003eec:	73fb      	strb	r3, [r7, #15]
	send(SOCK_NUM,(uint8_t *) cmd, 4);
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f7fc ff0a 	bl	8000d10 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <sendString>:
void sendString (char *CMD, char *data)
{
 8003f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
 8003f10:	466b      	mov	r3, sp
 8003f12:	461e      	mov	r6, r3
//	char buf[10] = {0};
	char cmd[strlen(data) + 3];
 8003f14:	6838      	ldr	r0, [r7, #0]
 8003f16:	f7fc f919 	bl	800014c <strlen>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	1cd9      	adds	r1, r3, #3
 8003f1e:	460b      	mov	r3, r1
 8003f20:	3b01      	subs	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	2300      	movs	r3, #0
 8003f26:	4688      	mov	r8, r1
 8003f28:	4699      	mov	r9, r3
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	460c      	mov	r4, r1
 8003f42:	461d      	mov	r5, r3
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	00eb      	lsls	r3, r5, #3
 8003f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f52:	00e2      	lsls	r2, r4, #3
 8003f54:	1dcb      	adds	r3, r1, #7
 8003f56:	08db      	lsrs	r3, r3, #3
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	ebad 0d03 	sub.w	sp, sp, r3
 8003f5e:	466b      	mov	r3, sp
 8003f60:	3300      	adds	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]
	strcpy(cmd,CMD);
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	68b8      	ldr	r0, [r7, #8]
 8003f68:	f005 fd3a 	bl	80099e0 <strcpy>
	strcat(cmd, data);
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	68b8      	ldr	r0, [r7, #8]
 8003f70:	f005 fd02 	bl	8009978 <strcat>
	strcat(cmd, "\r\n");
 8003f74:	68b8      	ldr	r0, [r7, #8]
 8003f76:	f7fc f8e9 	bl	800014c <strlen>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4413      	add	r3, r2
 8003f82:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <sendString+0xa8>)
 8003f84:	8811      	ldrh	r1, [r2, #0]
 8003f86:	7892      	ldrb	r2, [r2, #2]
 8003f88:	8019      	strh	r1, [r3, #0]
 8003f8a:	709a      	strb	r2, [r3, #2]
//	cmd[1] = (data&0xFF000000)>>24;
//	cmd[2] = (data&0x00FF0000)>>16;
//	cmd[3] = (data&0x0000FF00)>>8;
//	cmd[4] = (data&0x000000FF)>>0;
	send(SOCK_NUM,(uint8_t *) cmd, strlen(cmd));
 8003f8c:	68b8      	ldr	r0, [r7, #8]
 8003f8e:	f7fc f8dd 	bl	800014c <strlen>
 8003f92:	4603      	mov	r3, r0
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	f7fc feb8 	bl	8000d10 <send>
 8003fa0:	46b5      	mov	sp, r6
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fac:	08009a58 	.word	0x08009a58

08003fb0 <sendData_eth_info>:
void sendData_eth_info (char *CMD, uint8_t *data)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	@ 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
	char cx[29];
//	strcpy(cx,CMD);
//	strcat(cx, data);
	cx[0] = CMD[0];
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	723b      	strb	r3, [r7, #8]
	for (uint8_t i=0; i<26; i++)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003fc6:	e010      	b.n	8003fea <sendData_eth_info+0x3a>
	{
		cx[i+1] = data[i];
 8003fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	441a      	add	r2, r3
 8003fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	7812      	ldrb	r2, [r2, #0]
 8003fd8:	3328      	adds	r3, #40	@ 0x28
 8003fda:	443b      	add	r3, r7
 8003fdc:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (uint8_t i=0; i<26; i++)
 8003fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003fea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fee:	2b19      	cmp	r3, #25
 8003ff0:	d9ea      	bls.n	8003fc8 <sendData_eth_info+0x18>
	}
	cx[27] = 0x0D;
 8003ff2:	230d      	movs	r3, #13
 8003ff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	cx[28] = 0x0A;
 8003ff8:	230a      	movs	r3, #10
 8003ffa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	send(SOCK_NUM,(uint8_t *) cx, 29);
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	221d      	movs	r2, #29
 8004004:	4619      	mov	r1, r3
 8004006:	2000      	movs	r0, #0
 8004008:	f7fc fe82 	bl	8000d10 <send>
}
 800400c:	bf00      	nop
 800400e:	3728      	adds	r7, #40	@ 0x28
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <sendData_eth_CardID>:
void sendData_eth_CardID (char *CMD, user_info_t user)
{
 8004014:	b084      	sub	sp, #16
 8004016:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8004024:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004028:	466b      	mov	r3, sp
 800402a:	461e      	mov	r6, r3
	uint8_t size = sizeof(user_info_t);
 800402c:	2320      	movs	r3, #32
 800402e:	75fb      	strb	r3, [r7, #23]
	uint8_t cx[size];
 8004030:	7df9      	ldrb	r1, [r7, #23]
 8004032:	460b      	mov	r3, r1
 8004034:	3b01      	subs	r3, #1
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	b2cb      	uxtb	r3, r1
 800403a:	2200      	movs	r2, #0
 800403c:	4698      	mov	r8, r3
 800403e:	4691      	mov	r9, r2
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004050:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004054:	b2cb      	uxtb	r3, r1
 8004056:	2200      	movs	r2, #0
 8004058:	461c      	mov	r4, r3
 800405a:	4615      	mov	r5, r2
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	00eb      	lsls	r3, r5, #3
 8004066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800406a:	00e2      	lsls	r2, r4, #3
 800406c:	460b      	mov	r3, r1
 800406e:	3307      	adds	r3, #7
 8004070:	08db      	lsrs	r3, r3, #3
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	ebad 0d03 	sub.w	sp, sp, r3
 8004078:	466b      	mov	r3, sp
 800407a:	3300      	adds	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
	cx[0] = CMD[0];
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	701a      	strb	r2, [r3, #0]
	cx[1] = 2;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2202      	movs	r2, #2
 800408a:	705a      	strb	r2, [r3, #1]
	cx[2] = user.cardID>>24&0xFF;
 800408c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800408e:	0e1b      	lsrs	r3, r3, #24
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	709a      	strb	r2, [r3, #2]
	cx[3] = user.cardID>>16&0xFF;
 8004096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	b2da      	uxtb	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	70da      	strb	r2, [r3, #3]
	cx[4] = user.cardID>>8&0xFF;
 80040a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	711a      	strb	r2, [r3, #4]
	cx[5] = user.cardID&0xFF;
 80040aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	715a      	strb	r2, [r3, #5]
	cx[6] = user.permis[0];
 80040b2:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	719a      	strb	r2, [r3, #6]
	cx[7] = user.permis[1];
 80040ba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	71da      	strb	r2, [r3, #7]
	cx[8] = user.permis[2];
 80040c2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	721a      	strb	r2, [r3, #8]
	cx[9] = user.permis[3];
 80040ca:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	725a      	strb	r2, [r3, #9]
	cx[10] = user.permis[4];
 80040d2:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	729a      	strb	r2, [r3, #10]
	cx[11] = user.permis[5];
 80040da:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	72da      	strb	r2, [r3, #11]
	cx[12] = user.permis[6];
 80040e2:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	731a      	strb	r2, [r3, #12]
	cx[13] = user.permis[7];
 80040ea:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	735a      	strb	r2, [r3, #13]
	cx[14] = user.beginDate;
 80040f2:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	739a      	strb	r2, [r3, #14]
	cx[15] = user.beginMonth;
 80040fa:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	73da      	strb	r2, [r3, #15]
	cx[16] = user.beginYear>>8&0xFF;
 8004102:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	b29b      	uxth	r3, r3
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	741a      	strb	r2, [r3, #16]
	cx[17] = user.beginYear&0xFF;
 8004110:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	745a      	strb	r2, [r3, #17]
	cx[18] = user.beginHour;
 800411a:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	749a      	strb	r2, [r3, #18]
	cx[19] = user.beginMinute;
 8004122:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	74da      	strb	r2, [r3, #19]
	cx[20] = user.endDate;
 800412a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	751a      	strb	r2, [r3, #20]
	cx[21] = user.endMonth;
 8004132:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	755a      	strb	r2, [r3, #21]
	cx[22] = user.endYear>>8&0xFF;
 800413a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	759a      	strb	r2, [r3, #22]
	cx[23] = user.endYear&0xFF;
 8004148:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	75da      	strb	r2, [r3, #23]
	cx[24] = user.endHour;
 8004152:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	761a      	strb	r2, [r3, #24]
	cx[25] = user.endMinute;
 800415a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	765a      	strb	r2, [r3, #25]
	cx[26] = 0x0D;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	220d      	movs	r2, #13
 8004166:	769a      	strb	r2, [r3, #26]
	cx[27] = 0x0A;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	220a      	movs	r2, #10
 800416c:	76da      	strb	r2, [r3, #27]
	send(SOCK_NUM,(uint8_t *) cx, 28);
 800416e:	221c      	movs	r2, #28
 8004170:	68f9      	ldr	r1, [r7, #12]
 8004172:	2000      	movs	r0, #0
 8004174:	f7fc fdcc 	bl	8000d10 <send>
 8004178:	46b5      	mov	sp, r6
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004184:	b004      	add	sp, #16
 8004186:	4770      	bx	lr

08004188 <sendData_uart>:

void sendData_uart (char *CMD, uint8_t data)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
	char cmd[4];
	cmd[0] = CMD[0];
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	733b      	strb	r3, [r7, #12]
	cmd[1] = data;
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	737b      	strb	r3, [r7, #13]
	cmd[2] = 0x0D;
 800419e:	230d      	movs	r3, #13
 80041a0:	73bb      	strb	r3, [r7, #14]
	cmd[3] = 0x0A;
 80041a2:	230a      	movs	r3, #10
 80041a4:	73fb      	strb	r3, [r7, #15]
//	strcpy(cmd,CMD);
//	strcat(cmd,data);
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 80041a6:	2201      	movs	r2, #1
 80041a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041ac:	480a      	ldr	r0, [pc, #40]	@ (80041d8 <sendData_uart+0x50>)
 80041ae:	f002 fd7a 	bl	8006ca6 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,(uint8_t *) cmd, 4, 500);
 80041b2:	f107 010c 	add.w	r1, r7, #12
 80041b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80041ba:	2204      	movs	r2, #4
 80041bc:	4807      	ldr	r0, [pc, #28]	@ (80041dc <sendData_uart+0x54>)
 80041be:	f004 fbf7 	bl	80089b0 <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 80041c2:	2200      	movs	r2, #0
 80041c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041c8:	4803      	ldr	r0, [pc, #12]	@ (80041d8 <sendData_uart+0x50>)
 80041ca:	f002 fd6c 	bl	8006ca6 <HAL_GPIO_WritePin>
}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40010800 	.word	0x40010800
 80041dc:	20000210 	.word	0x20000210

080041e0 <save_data>:
void save_data()
{
 80041e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e4:	b096      	sub	sp, #88	@ 0x58
 80041e6:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80041e8:	f002 fa32 	bl	8006650 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 80041ec:	4958      	ldr	r1, [pc, #352]	@ (8004350 <save_data+0x170>)
 80041ee:	4859      	ldr	r0, [pc, #356]	@ (8004354 <save_data+0x174>)
 80041f0:	f002 fb16 	bl	8006820 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC00, ip1);
 80041f4:	4b58      	ldr	r3, [pc, #352]	@ (8004358 <save_data+0x178>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2200      	movs	r2, #0
 80041fc:	461c      	mov	r4, r3
 80041fe:	4615      	mov	r5, r2
 8004200:	4622      	mov	r2, r4
 8004202:	462b      	mov	r3, r5
 8004204:	4955      	ldr	r1, [pc, #340]	@ (800435c <save_data+0x17c>)
 8004206:	2002      	movs	r0, #2
 8004208:	f002 f9b2 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC04, ip2);
 800420c:	4b54      	ldr	r3, [pc, #336]	@ (8004360 <save_data+0x180>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2200      	movs	r2, #0
 8004214:	4698      	mov	r8, r3
 8004216:	4691      	mov	r9, r2
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	4951      	ldr	r1, [pc, #324]	@ (8004364 <save_data+0x184>)
 800421e:	2002      	movs	r0, #2
 8004220:	f002 f9a6 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC08, ip3);
 8004224:	4b50      	ldr	r3, [pc, #320]	@ (8004368 <save_data+0x188>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2200      	movs	r2, #0
 800422c:	469a      	mov	sl, r3
 800422e:	4693      	mov	fp, r2
 8004230:	4652      	mov	r2, sl
 8004232:	465b      	mov	r3, fp
 8004234:	494d      	ldr	r1, [pc, #308]	@ (800436c <save_data+0x18c>)
 8004236:	2002      	movs	r0, #2
 8004238:	f002 f99a 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC0C, ip4);
 800423c:	4b4c      	ldr	r3, [pc, #304]	@ (8004370 <save_data+0x190>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2200      	movs	r2, #0
 8004244:	653b      	str	r3, [r7, #80]	@ 0x50
 8004246:	657a      	str	r2, [r7, #84]	@ 0x54
 8004248:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800424c:	4949      	ldr	r1, [pc, #292]	@ (8004374 <save_data+0x194>)
 800424e:	2002      	movs	r0, #2
 8004250:	f002 f98e 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC10, port_client);
 8004254:	4b48      	ldr	r3, [pc, #288]	@ (8004378 <save_data+0x198>)
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	2200      	movs	r2, #0
 800425c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800425e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004264:	4945      	ldr	r1, [pc, #276]	@ (800437c <save_data+0x19c>)
 8004266:	2002      	movs	r0, #2
 8004268:	f002 f982 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC14, ip_server1);
 800426c:	4b44      	ldr	r3, [pc, #272]	@ (8004380 <save_data+0x1a0>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2200      	movs	r2, #0
 8004274:	643b      	str	r3, [r7, #64]	@ 0x40
 8004276:	647a      	str	r2, [r7, #68]	@ 0x44
 8004278:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800427c:	4941      	ldr	r1, [pc, #260]	@ (8004384 <save_data+0x1a4>)
 800427e:	2002      	movs	r0, #2
 8004280:	f002 f976 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC18, ip_server2);
 8004284:	4b40      	ldr	r3, [pc, #256]	@ (8004388 <save_data+0x1a8>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2200      	movs	r2, #0
 800428c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800428e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004294:	493d      	ldr	r1, [pc, #244]	@ (800438c <save_data+0x1ac>)
 8004296:	2002      	movs	r0, #2
 8004298:	f002 f96a 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC1C, ip_server3);
 800429c:	4b3c      	ldr	r3, [pc, #240]	@ (8004390 <save_data+0x1b0>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2200      	movs	r2, #0
 80042a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80042a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80042ac:	4939      	ldr	r1, [pc, #228]	@ (8004394 <save_data+0x1b4>)
 80042ae:	2002      	movs	r0, #2
 80042b0:	f002 f95e 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC20, ip_server4);
 80042b4:	4b38      	ldr	r3, [pc, #224]	@ (8004398 <save_data+0x1b8>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2200      	movs	r2, #0
 80042bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042c4:	4935      	ldr	r1, [pc, #212]	@ (800439c <save_data+0x1bc>)
 80042c6:	2002      	movs	r0, #2
 80042c8:	f002 f952 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC24, port_server);
 80042cc:	4b34      	ldr	r3, [pc, #208]	@ (80043a0 <save_data+0x1c0>)
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2200      	movs	r2, #0
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80042d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042dc:	4931      	ldr	r1, [pc, #196]	@ (80043a4 <save_data+0x1c4>)
 80042de:	2002      	movs	r0, #2
 80042e0:	f002 f946 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC28, time_delay);
 80042e4:	4b30      	ldr	r3, [pc, #192]	@ (80043a8 <save_data+0x1c8>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2200      	movs	r2, #0
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	61fa      	str	r2, [r7, #28]
 80042f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042f4:	492d      	ldr	r1, [pc, #180]	@ (80043ac <save_data+0x1cc>)
 80042f6:	2002      	movs	r0, #2
 80042f8:	f002 f93a 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC2C, elevator_mode);
 80042fc:	4b2c      	ldr	r3, [pc, #176]	@ (80043b0 <save_data+0x1d0>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2200      	movs	r2, #0
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	617a      	str	r2, [r7, #20]
 8004308:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800430c:	4929      	ldr	r1, [pc, #164]	@ (80043b4 <save_data+0x1d4>)
 800430e:	2002      	movs	r0, #2
 8004310:	f002 f92e 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC30, lock_default_1);
 8004314:	4b28      	ldr	r3, [pc, #160]	@ (80043b8 <save_data+0x1d8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2200      	movs	r2, #0
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	60fa      	str	r2, [r7, #12]
 800431e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004322:	4926      	ldr	r1, [pc, #152]	@ (80043bc <save_data+0x1dc>)
 8004324:	2002      	movs	r0, #2
 8004326:	f002 f923 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC34, lock_default_2);
 800432a:	4b25      	ldr	r3, [pc, #148]	@ (80043c0 <save_data+0x1e0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2200      	movs	r2, #0
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004338:	4922      	ldr	r1, [pc, #136]	@ (80043c4 <save_data+0x1e4>)
 800433a:	2002      	movs	r0, #2
 800433c:	f002 f918 	bl	8006570 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8004340:	f002 f9ac 	bl	800669c <HAL_FLASH_Lock>
}
 8004344:	bf00      	nop
 8004346:	3758      	adds	r7, #88	@ 0x58
 8004348:	46bd      	mov	sp, r7
 800434a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434e:	bf00      	nop
 8004350:	20000588 	.word	0x20000588
 8004354:	2000008c 	.word	0x2000008c
 8004358:	2000051c 	.word	0x2000051c
 800435c:	0800fc00 	.word	0x0800fc00
 8004360:	2000051d 	.word	0x2000051d
 8004364:	0800fc04 	.word	0x0800fc04
 8004368:	2000051e 	.word	0x2000051e
 800436c:	0800fc08 	.word	0x0800fc08
 8004370:	2000051f 	.word	0x2000051f
 8004374:	0800fc0c 	.word	0x0800fc0c
 8004378:	20000584 	.word	0x20000584
 800437c:	0800fc10 	.word	0x0800fc10
 8004380:	20000520 	.word	0x20000520
 8004384:	0800fc14 	.word	0x0800fc14
 8004388:	20000521 	.word	0x20000521
 800438c:	0800fc18 	.word	0x0800fc18
 8004390:	20000522 	.word	0x20000522
 8004394:	0800fc1c 	.word	0x0800fc1c
 8004398:	20000523 	.word	0x20000523
 800439c:	0800fc20 	.word	0x0800fc20
 80043a0:	20000582 	.word	0x20000582
 80043a4:	0800fc24 	.word	0x0800fc24
 80043a8:	20000510 	.word	0x20000510
 80043ac:	0800fc28 	.word	0x0800fc28
 80043b0:	20000542 	.word	0x20000542
 80043b4:	0800fc2c 	.word	0x0800fc2c
 80043b8:	200006a8 	.word	0x200006a8
 80043bc:	0800fc30 	.word	0x0800fc30
 80043c0:	200006ac 	.word	0x200006ac
 80043c4:	0800fc34 	.word	0x0800fc34

080043c8 <binary_search>:

user_info_t binary_search(uint32_t Number_card, uint32_t code)
{
 80043c8:	b5b0      	push	{r4, r5, r7, lr}
 80043ca:	b090      	sub	sp, #64	@ 0x40
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
	uint32_t low = 1, high = Number_card;
 80043d4:	2301      	movs	r3, #1
 80043d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	63bb      	str	r3, [r7, #56]	@ 0x38
	user_info_t user_compare;

    while (low <= high)
 80043dc:	e02e      	b.n	800443c <binary_search+0x74>
    {
    	uint32_t mid = (low + high) / 2;
 80043de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e2:	4413      	add	r3, r2
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	637b      	str	r3, [r7, #52]	@ 0x34
		W25Q_FastRead((mid-1)/16, ((mid-1)%16)*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&user_compare);
 80043e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ea:	3b01      	subs	r3, #1
 80043ec:	0918      	lsrs	r0, r3, #4
 80043ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	015b      	lsls	r3, r3, #5
 80043fc:	b2d9      	uxtb	r1, r3
 80043fe:	f107 0314 	add.w	r3, r7, #20
 8004402:	2220      	movs	r2, #32
 8004404:	f7fd fb6e 	bl	8001ae4 <W25Q_FastRead>
        if (user_compare.cardID == code)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	d10a      	bne.n	8004426 <binary_search+0x5e>
        {
            return user_compare;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	461d      	mov	r5, r3
 8004414:	f107 0414 	add.w	r4, r7, #20
 8004418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800441a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800441c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004420:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004424:	e01a      	b.n	800445c <binary_search+0x94>
        } else if (user_compare.cardID < code) {
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	429a      	cmp	r2, r3
 800442c:	d903      	bls.n	8004436 <binary_search+0x6e>
            low = mid + 1;
 800442e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004430:	3301      	adds	r3, #1
 8004432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004434:	e002      	b.n	800443c <binary_search+0x74>
        } else {
            high = mid - 1;
 8004436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004438:	3b01      	subs	r3, #1
 800443a:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (low <= high)
 800443c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800443e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004440:	429a      	cmp	r2, r3
 8004442:	d9cc      	bls.n	80043de <binary_search+0x16>
        }
    }
    user_compare.STT = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
    return user_compare;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	461d      	mov	r5, r3
 800444c:	f107 0414 	add.w	r4, r7, #20
 8004450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004454:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004458:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	3740      	adds	r7, #64	@ 0x40
 8004460:	46bd      	mov	sp, r7
 8004462:	bdb0      	pop	{r4, r5, r7, pc}

08004464 <new_card_update>:
void new_card_update(uint8_t *data, bool *input, uint32_t *input_timer)
{
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
	for (uint8_t i=0; i<8; i++)
 8004470:	2300      	movs	r3, #0
 8004472:	75fb      	strb	r3, [r7, #23]
 8004474:	e02b      	b.n	80044ce <new_card_update+0x6a>
	{
		for (uint8_t j=0; j<8; j++)
 8004476:	2300      	movs	r3, #0
 8004478:	75bb      	strb	r3, [r7, #22]
 800447a:	e022      	b.n	80044c2 <new_card_update+0x5e>
		{
			if((data[i]>>j)&0x01)//2 + i
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	7dbb      	ldrb	r3, [r7, #22]
 8004488:	fa42 f303 	asr.w	r3, r2, r3
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d013      	beq.n	80044bc <new_card_update+0x58>
			{
				input[i*8+j] = true;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	00da      	lsls	r2, r3, #3
 8004498:	7dbb      	ldrb	r3, [r7, #22]
 800449a:	4413      	add	r3, r2
 800449c:	461a      	mov	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4413      	add	r3, r2
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
				input_timer[i*8+j] = HAL_GetTick();
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
 80044a8:	00da      	lsls	r2, r3, #3
 80044aa:	7dbb      	ldrb	r3, [r7, #22]
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	18d4      	adds	r4, r2, r3
 80044b4:	f000 fd8e 	bl	8004fd4 <HAL_GetTick>
 80044b8:	4603      	mov	r3, r0
 80044ba:	6023      	str	r3, [r4, #0]
		for (uint8_t j=0; j<8; j++)
 80044bc:	7dbb      	ldrb	r3, [r7, #22]
 80044be:	3301      	adds	r3, #1
 80044c0:	75bb      	strb	r3, [r7, #22]
 80044c2:	7dbb      	ldrb	r3, [r7, #22]
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	d9d9      	bls.n	800447c <new_card_update+0x18>
	for (uint8_t i=0; i<8; i++)
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	3301      	adds	r3, #1
 80044cc:	75fb      	strb	r3, [r7, #23]
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
 80044d0:	2b07      	cmp	r3, #7
 80044d2:	d9d0      	bls.n	8004476 <new_card_update+0x12>
			}
		}
	}
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd90      	pop	{r4, r7, pc}

080044de <shift_left_1bit>:
void shift_left_1bit( uint8_t input[8], uint8_t output[8])
{
 80044de:	b480      	push	{r7}
 80044e0:	b087      	sub	sp, #28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
    uint8_t carry = 0;  // Khởi tạo carry ban đầu
 80044e8:	2300      	movs	r3, #0
 80044ea:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 8; i++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e01a      	b.n	8004528 <shift_left_1bit+0x4a>
    {
        // Lấy bit MSB của byte hiện tại trước khi dịch
        uint8_t new_carry = (input[i] >> 7) & 0x01;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	09db      	lsrs	r3, r3, #7
 80044fc:	73fb      	strb	r3, [r7, #15]
        // Dịch trái 1 bit và kết hợp với carry từ byte trước
        output[i] = (input[i] << 1) | carry;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b25b      	sxtb	r3, r3
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	b25a      	sxtb	r2, r3
 800450c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004510:	4313      	orrs	r3, r2
 8004512:	b259      	sxtb	r1, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	4413      	add	r3, r2
 800451a:	b2ca      	uxtb	r2, r1
 800451c:	701a      	strb	r2, [r3, #0]
        // Cập nhật carry cho byte tiếp theo
        carry = new_carry;
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 8; i++)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	3301      	adds	r3, #1
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b07      	cmp	r3, #7
 800452c:	dde1      	ble.n	80044f2 <shift_left_1bit+0x14>
    }
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <calculate_data_can>:
void calculate_data_can(bool *input, uint32_t *input_timer, uint8_t *data_can, uint8_t *lock_df, uint8_t delay_time, uint8_t *counter_start)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b088      	sub	sp, #32
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
	uint8_t data[8] = {0};
 8004548:	f107 0310 	add.w	r3, r7, #16
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
	if (*counter_start < delay_time)
 8004552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800455a:	429a      	cmp	r2, r3
 800455c:	d948      	bls.n	80045f0 <calculate_data_can+0xb6>
	{
		for (uint8_t i=0; i<8; i++)
 800455e:	2300      	movs	r3, #0
 8004560:	77fb      	strb	r3, [r7, #31]
 8004562:	e040      	b.n	80045e6 <calculate_data_can+0xac>
		{
			for (uint8_t j=0; j<8; j++)
 8004564:	2300      	movs	r3, #0
 8004566:	77bb      	strb	r3, [r7, #30]
 8004568:	e031      	b.n	80045ce <calculate_data_can+0x94>
			{
				if (input_timer[i*8+j] == 0)
 800456a:	7ffb      	ldrb	r3, [r7, #31]
 800456c:	00da      	lsls	r2, r3, #3
 800456e:	7fbb      	ldrb	r3, [r7, #30]
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	4413      	add	r3, r2
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11f      	bne.n	80045be <calculate_data_can+0x84>
				{
					if ((lock_df[i]>>j)&0x01)
 800457e:	7ffb      	ldrb	r3, [r7, #31]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	4413      	add	r3, r2
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	7fbb      	ldrb	r3, [r7, #30]
 800458a:	fa42 f303 	asr.w	r3, r2, r3
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <calculate_data_can+0x70>
					{
						input[i*8+j] = true;
 8004596:	7ffb      	ldrb	r3, [r7, #31]
 8004598:	00da      	lsls	r2, r3, #3
 800459a:	7fbb      	ldrb	r3, [r7, #30]
 800459c:	4413      	add	r3, r2
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	e00e      	b.n	80045c8 <calculate_data_can+0x8e>
					} else
					{
						input[i*8+j] = false;
 80045aa:	7ffb      	ldrb	r3, [r7, #31]
 80045ac:	00da      	lsls	r2, r3, #3
 80045ae:	7fbb      	ldrb	r3, [r7, #30]
 80045b0:	4413      	add	r3, r2
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	e004      	b.n	80045c8 <calculate_data_can+0x8e>
					}
				} else
				{
					*counter_start = delay_time;
 80045be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80045c4:	701a      	strb	r2, [r3, #0]
					break;
 80045c6:	e005      	b.n	80045d4 <calculate_data_can+0x9a>
			for (uint8_t j=0; j<8; j++)
 80045c8:	7fbb      	ldrb	r3, [r7, #30]
 80045ca:	3301      	adds	r3, #1
 80045cc:	77bb      	strb	r3, [r7, #30]
 80045ce:	7fbb      	ldrb	r3, [r7, #30]
 80045d0:	2b07      	cmp	r3, #7
 80045d2:	d9ca      	bls.n	800456a <calculate_data_can+0x30>
				}
			}
			if (*counter_start == delay_time) break;
 80045d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80045dc:	429a      	cmp	r2, r3
 80045de:	d006      	beq.n	80045ee <calculate_data_can+0xb4>
		for (uint8_t i=0; i<8; i++)
 80045e0:	7ffb      	ldrb	r3, [r7, #31]
 80045e2:	3301      	adds	r3, #1
 80045e4:	77fb      	strb	r3, [r7, #31]
 80045e6:	7ffb      	ldrb	r3, [r7, #31]
 80045e8:	2b07      	cmp	r3, #7
 80045ea:	d9bb      	bls.n	8004564 <calculate_data_can+0x2a>
 80045ec:	e000      	b.n	80045f0 <calculate_data_can+0xb6>
			if (*counter_start == delay_time) break;
 80045ee:	bf00      	nop
		}
	}
	if (*counter_start >= delay_time)
 80045f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d848      	bhi.n	800468e <calculate_data_can+0x154>
	{
		for (uint8_t i=0; i<8; i++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	777b      	strb	r3, [r7, #29]
 8004600:	e042      	b.n	8004688 <calculate_data_can+0x14e>
		{
			for (uint8_t j=0; j<8; j++)
 8004602:	2300      	movs	r3, #0
 8004604:	773b      	strb	r3, [r7, #28]
 8004606:	e039      	b.n	800467c <calculate_data_can+0x142>
			{
				if (((lock_df[i]>>j)&0x01) && (abs(HAL_GetTick() - input_timer[i*8+j]) > delay_time*1000))
 8004608:	7f7b      	ldrb	r3, [r7, #29]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	4413      	add	r3, r2
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	7f3b      	ldrb	r3, [r7, #28]
 8004614:	fa42 f303 	asr.w	r3, r2, r3
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d021      	beq.n	8004664 <calculate_data_can+0x12a>
 8004620:	f000 fcd8 	bl	8004fd4 <HAL_GetTick>
 8004624:	4601      	mov	r1, r0
 8004626:	7f7b      	ldrb	r3, [r7, #29]
 8004628:	00da      	lsls	r2, r3, #3
 800462a:	7f3b      	ldrb	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	4413      	add	r3, r2
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	1acb      	subs	r3, r1, r3
 8004638:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800463c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004640:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004644:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	429a      	cmp	r2, r3
 800464e:	dd09      	ble.n	8004664 <calculate_data_can+0x12a>
				{
					input[i*8+j] = true;
 8004650:	7f7b      	ldrb	r3, [r7, #29]
 8004652:	00da      	lsls	r2, r3, #3
 8004654:	7f3b      	ldrb	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	461a      	mov	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	2201      	movs	r2, #1
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	e008      	b.n	8004676 <calculate_data_can+0x13c>
				} else
				{
					input[i*8+j] = false;
 8004664:	7f7b      	ldrb	r3, [r7, #29]
 8004666:	00da      	lsls	r2, r3, #3
 8004668:	7f3b      	ldrb	r3, [r7, #28]
 800466a:	4413      	add	r3, r2
 800466c:	461a      	mov	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
			for (uint8_t j=0; j<8; j++)
 8004676:	7f3b      	ldrb	r3, [r7, #28]
 8004678:	3301      	adds	r3, #1
 800467a:	773b      	strb	r3, [r7, #28]
 800467c:	7f3b      	ldrb	r3, [r7, #28]
 800467e:	2b07      	cmp	r3, #7
 8004680:	d9c2      	bls.n	8004608 <calculate_data_can+0xce>
		for (uint8_t i=0; i<8; i++)
 8004682:	7f7b      	ldrb	r3, [r7, #29]
 8004684:	3301      	adds	r3, #1
 8004686:	777b      	strb	r3, [r7, #29]
 8004688:	7f7b      	ldrb	r3, [r7, #29]
 800468a:	2b07      	cmp	r3, #7
 800468c:	d9b9      	bls.n	8004602 <calculate_data_can+0xc8>
				}
			}
		}
	}
	for (uint8_t i=0; i<8; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	76fb      	strb	r3, [r7, #27]
 8004692:	e026      	b.n	80046e2 <calculate_data_can+0x1a8>
	{
		for (uint8_t j=0; j<8; j++)
 8004694:	2300      	movs	r3, #0
 8004696:	76bb      	strb	r3, [r7, #26]
 8004698:	e01d      	b.n	80046d6 <calculate_data_can+0x19c>
		{
			data[i] |= input[i*8+j]<<j;
 800469a:	7efb      	ldrb	r3, [r7, #27]
 800469c:	3320      	adds	r3, #32
 800469e:	443b      	add	r3, r7
 80046a0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80046a4:	b25a      	sxtb	r2, r3
 80046a6:	7efb      	ldrb	r3, [r7, #27]
 80046a8:	00d9      	lsls	r1, r3, #3
 80046aa:	7ebb      	ldrb	r3, [r7, #26]
 80046ac:	440b      	add	r3, r1
 80046ae:	4619      	mov	r1, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	440b      	add	r3, r1
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4619      	mov	r1, r3
 80046b8:	7ebb      	ldrb	r3, [r7, #26]
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	b25b      	sxtb	r3, r3
 80046c0:	4313      	orrs	r3, r2
 80046c2:	b25a      	sxtb	r2, r3
 80046c4:	7efb      	ldrb	r3, [r7, #27]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	3320      	adds	r3, #32
 80046ca:	443b      	add	r3, r7
 80046cc:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t j=0; j<8; j++)
 80046d0:	7ebb      	ldrb	r3, [r7, #26]
 80046d2:	3301      	adds	r3, #1
 80046d4:	76bb      	strb	r3, [r7, #26]
 80046d6:	7ebb      	ldrb	r3, [r7, #26]
 80046d8:	2b07      	cmp	r3, #7
 80046da:	d9de      	bls.n	800469a <calculate_data_can+0x160>
	for (uint8_t i=0; i<8; i++)
 80046dc:	7efb      	ldrb	r3, [r7, #27]
 80046de:	3301      	adds	r3, #1
 80046e0:	76fb      	strb	r3, [r7, #27]
 80046e2:	7efb      	ldrb	r3, [r7, #27]
 80046e4:	2b07      	cmp	r3, #7
 80046e6:	d9d5      	bls.n	8004694 <calculate_data_can+0x15a>
		}
	}
	shift_left_1bit(data, data_can);
 80046e8:	f107 0310 	add.w	r3, r7, #16
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fef5 	bl	80044de <shift_left_1bit>
}
 80046f4:	bf00      	nop
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <reconect_eth>:
uint8_t reconect_eth(uint8_t sn)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
//	bool linkport = false;
	uint8_t Status_SN;
	Status_SN = getSn_SR(sn);
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	3301      	adds	r3, #1
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004712:	4618      	mov	r0, r3
 8004714:	f7fb fd22 	bl	800015c <WIZCHIP_READ>
 8004718:	4603      	mov	r3, r0
 800471a:	73fb      	strb	r3, [r7, #15]
	time_check = HAL_GetTick();
 800471c:	f000 fc5a 	bl	8004fd4 <HAL_GetTick>
 8004720:	4603      	mov	r3, r0
 8004722:	4a38      	ldr	r2, [pc, #224]	@ (8004804 <reconect_eth+0x108>)
 8004724:	6013      	str	r3, [r2, #0]
	if (Status_SN == SOCK_CLOSE_WAIT || wizphy_getphylink() == PHY_LINK_OFF)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b1c      	cmp	r3, #28
 800472a:	d004      	beq.n	8004736 <reconect_eth+0x3a>
 800472c:	f7fc ffc1 	bl	80016b2 <wizphy_getphylink>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d115      	bne.n	8004762 <reconect_eth+0x66>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_RESET);
 8004736:	2200      	movs	r2, #0
 8004738:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800473c:	4832      	ldr	r0, [pc, #200]	@ (8004808 <reconect_eth+0x10c>)
 800473e:	f002 fab2 	bl	8006ca6 <HAL_GPIO_WritePin>
		timeBreak = HAL_GetTick();
 8004742:	f000 fc47 	bl	8004fd4 <HAL_GetTick>
 8004746:	4603      	mov	r3, r0
 8004748:	4a30      	ldr	r2, [pc, #192]	@ (800480c <reconect_eth+0x110>)
 800474a:	6013      	str	r3, [r2, #0]
		close(sn);
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fc f968 	bl	8000a24 <close>
		time_check -= 5000;
 8004754:	4b2b      	ldr	r3, [pc, #172]	@ (8004804 <reconect_eth+0x108>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 800475c:	3b08      	subs	r3, #8
 800475e:	4a29      	ldr	r2, [pc, #164]	@ (8004804 <reconect_eth+0x108>)
 8004760:	6013      	str	r3, [r2, #0]
	}
	if (wizphy_getphylink() == PHY_LINK_ON && Status_SN == SOCK_CLOSED)
 8004762:	f7fc ffa6 	bl	80016b2 <wizphy_getphylink>
 8004766:	4603      	mov	r3, r0
 8004768:	2b01      	cmp	r3, #1
 800476a:	d126      	bne.n	80047ba <reconect_eth+0xbe>
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d123      	bne.n	80047ba <reconect_eth+0xbe>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_RESET);
 8004772:	2200      	movs	r2, #0
 8004774:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004778:	4823      	ldr	r0, [pc, #140]	@ (8004808 <reconect_eth+0x10c>)
 800477a:	f002 fa94 	bl	8006ca6 <HAL_GPIO_WritePin>
		timeBreak = HAL_GetTick();
 800477e:	f000 fc29 	bl	8004fd4 <HAL_GetTick>
 8004782:	4603      	mov	r3, r0
 8004784:	4a21      	ldr	r2, [pc, #132]	@ (800480c <reconect_eth+0x110>)
 8004786:	6013      	str	r3, [r2, #0]
		socket(sn, Sn_MR_TCP, port_client, SF_TCP_NODELAY);
 8004788:	4b21      	ldr	r3, [pc, #132]	@ (8004810 <reconect_eth+0x114>)
 800478a:	881a      	ldrh	r2, [r3, #0]
 800478c:	79f8      	ldrb	r0, [r7, #7]
 800478e:	2320      	movs	r3, #32
 8004790:	2101      	movs	r1, #1
 8004792:	f7fc f833 	bl	80007fc <socket>
		connect(sn, server_ip, port_server);
 8004796:	4b1f      	ldr	r3, [pc, #124]	@ (8004814 <reconect_eth+0x118>)
 8004798:	881a      	ldrh	r2, [r3, #0]
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	491e      	ldr	r1, [pc, #120]	@ (8004818 <reconect_eth+0x11c>)
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fc f9c4 	bl	8000b2c <connect>
		counter_reset++;
 80047a4:	4b1d      	ldr	r3, [pc, #116]	@ (800481c <reconect_eth+0x120>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	4a1c      	ldr	r2, [pc, #112]	@ (800481c <reconect_eth+0x120>)
 80047ac:	6013      	str	r3, [r2, #0]
		time_check -= 4000;
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <reconect_eth+0x108>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 80047b6:	4a13      	ldr	r2, [pc, #76]	@ (8004804 <reconect_eth+0x108>)
 80047b8:	6013      	str	r3, [r2, #0]
	}
	Status_SN = getSn_SR(sn);
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	3301      	adds	r3, #1
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fb fcc8 	bl	800015c <WIZCHIP_READ>
 80047cc:	4603      	mov	r3, r0
 80047ce:	73fb      	strb	r3, [r7, #15]
	if (Status_SN == SOCK_ESTABLISHED)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b17      	cmp	r3, #23
 80047d4:	d105      	bne.n	80047e2 <reconect_eth+0xe6>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_SET);
 80047d6:	2201      	movs	r2, #1
 80047d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047dc:	480a      	ldr	r0, [pc, #40]	@ (8004808 <reconect_eth+0x10c>)
 80047de:	f002 fa62 	bl	8006ca6 <HAL_GPIO_WritePin>
	}
	Status_SN = getSn_SR(sn);
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	3301      	adds	r3, #1
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fb fcb4 	bl	800015c <WIZCHIP_READ>
 80047f4:	4603      	mov	r3, r0
 80047f6:	73fb      	strb	r3, [r7, #15]
	return Status_SN;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200006b0 	.word	0x200006b0
 8004808:	40011000 	.word	0x40011000
 800480c:	200006bc 	.word	0x200006bc
 8004810:	20000584 	.word	0x20000584
 8004814:	20000582 	.word	0x20000582
 8004818:	2000050c 	.word	0x2000050c
 800481c:	200006d0 	.word	0x200006d0

08004820 <Set_speed_can>:

void Set_speed_can(uint8_t speed)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08c      	sub	sp, #48	@ 0x30
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	71fb      	strb	r3, [r7, #7]
	if (speed == 0)// 100kps
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10b      	bne.n	8004848 <Set_speed_can+0x28>
	{
		hcan.Init.Prescaler = 30;
 8004830:	4b2c      	ldr	r3, [pc, #176]	@ (80048e4 <Set_speed_can+0xc4>)
 8004832:	221e      	movs	r2, #30
 8004834:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8004836:	4b2b      	ldr	r3, [pc, #172]	@ (80048e4 <Set_speed_can+0xc4>)
 8004838:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800483c:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800483e:	4b29      	ldr	r3, [pc, #164]	@ (80048e4 <Set_speed_can+0xc4>)
 8004840:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004844:	615a      	str	r2, [r3, #20]
 8004846:	e01c      	b.n	8004882 <Set_speed_can+0x62>
	} else if (speed == 1)// 50kps
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10b      	bne.n	8004866 <Set_speed_can+0x46>
	{
		hcan.Init.Prescaler = 40;
 800484e:	4b25      	ldr	r3, [pc, #148]	@ (80048e4 <Set_speed_can+0xc4>)
 8004850:	2228      	movs	r2, #40	@ 0x28
 8004852:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8004854:	4b23      	ldr	r3, [pc, #140]	@ (80048e4 <Set_speed_can+0xc4>)
 8004856:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800485a:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 800485c:	4b21      	ldr	r3, [pc, #132]	@ (80048e4 <Set_speed_can+0xc4>)
 800485e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004862:	615a      	str	r2, [r3, #20]
 8004864:	e00d      	b.n	8004882 <Set_speed_can+0x62>
	} else if (speed == 2)// 25kps
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d10a      	bne.n	8004882 <Set_speed_can+0x62>
	{
		hcan.Init.Prescaler = 60;
 800486c:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <Set_speed_can+0xc4>)
 800486e:	223c      	movs	r2, #60	@ 0x3c
 8004870:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8004872:	4b1c      	ldr	r3, [pc, #112]	@ (80048e4 <Set_speed_can+0xc4>)
 8004874:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8004878:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 800487a:	4b1a      	ldr	r3, [pc, #104]	@ (80048e4 <Set_speed_can+0xc4>)
 800487c:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8004880:	615a      	str	r2, [r3, #20]
	}
	hcan.Init.AutoRetransmission = ENABLE;
 8004882:	4b18      	ldr	r3, [pc, #96]	@ (80048e4 <Set_speed_can+0xc4>)
 8004884:	2201      	movs	r2, #1
 8004886:	76da      	strb	r2, [r3, #27]
	hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8004888:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <Set_speed_can+0xc4>)
 800488a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800488e:	60da      	str	r2, [r3, #12]
	HAL_CAN_Init(&hcan);
 8004890:	4814      	ldr	r0, [pc, #80]	@ (80048e4 <Set_speed_can+0xc4>)
 8004892:	f000 fbeb 	bl	800506c <HAL_CAN_Init>

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8004896:	2301      	movs	r3, #1
 8004898:	62bb      	str	r3, [r7, #40]	@ 0x28
	canfilterconfig.FilterBank = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterIdHigh = 0x740<<5;
 80048a2:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 80048a6:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterIdLow = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 80048ac:	4b0e      	ldr	r3, [pc, #56]	@ (80048e8 <Set_speed_can+0xc8>)
 80048ae:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdLow = 6;
 80048b0:	2306      	movs	r3, #6
 80048b2:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80048b8:	2301      	movs	r3, #1
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24
	canfilterconfig.SlaveStartFilterBank = 13;
 80048bc:	230d      	movs	r3, #13
 80048be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	4619      	mov	r1, r3
 80048c6:	4807      	ldr	r0, [pc, #28]	@ (80048e4 <Set_speed_can+0xc4>)
 80048c8:	f000 fccb 	bl	8005262 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 80048cc:	4805      	ldr	r0, [pc, #20]	@ (80048e4 <Set_speed_can+0xc4>)
 80048ce:	f000 fd91 	bl	80053f4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80048d2:	2102      	movs	r1, #2
 80048d4:	4803      	ldr	r0, [pc, #12]	@ (80048e4 <Set_speed_can+0xc4>)
 80048d6:	f001 f839 	bl	800594c <HAL_CAN_ActivateNotification>
}
 80048da:	bf00      	nop
 80048dc:	3730      	adds	r7, #48	@ 0x30
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	2000009c 	.word	0x2000009c
 80048e8:	0001ffe0 	.word	0x0001ffe0

080048ec <is_leap_year>:


// Hàm kiểm tra năm nhuận
static uint8_t is_leap_year(uint16_t year)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]
    if (year % 400 == 0) {
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	4a14      	ldr	r2, [pc, #80]	@ (800494c <is_leap_year+0x60>)
 80048fa:	fba2 1203 	umull	r1, r2, r2, r3
 80048fe:	09d2      	lsrs	r2, r2, #7
 8004900:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004904:	fb01 f202 	mul.w	r2, r1, r2
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <is_leap_year+0x28>
        return 1;
 8004910:	2301      	movs	r3, #1
 8004912:	e016      	b.n	8004942 <is_leap_year+0x56>
    }
    if (year % 100 == 0) {
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	4a0d      	ldr	r2, [pc, #52]	@ (800494c <is_leap_year+0x60>)
 8004918:	fba2 1203 	umull	r1, r2, r2, r3
 800491c:	0952      	lsrs	r2, r2, #5
 800491e:	2164      	movs	r1, #100	@ 0x64
 8004920:	fb01 f202 	mul.w	r2, r1, r2
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <is_leap_year+0x44>
        return 0;
 800492c:	2300      	movs	r3, #0
 800492e:	e008      	b.n	8004942 <is_leap_year+0x56>
    }
    if (year % 4 == 0) {
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <is_leap_year+0x54>
        return 1;
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <is_leap_year+0x56>
    }
    return 0;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	51eb851f 	.word	0x51eb851f

08004950 <mktime>:

// Hàm tùy chỉnh tương tự mktime
uint32_t mktime(uint16_t year, uint8_t month, uint8_t date, uint8_t hour, uint8_t minute)
{
 8004950:	b590      	push	{r4, r7, lr}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	4604      	mov	r4, r0
 8004958:	4608      	mov	r0, r1
 800495a:	4611      	mov	r1, r2
 800495c:	461a      	mov	r2, r3
 800495e:	4623      	mov	r3, r4
 8004960:	80fb      	strh	r3, [r7, #6]
 8004962:	4603      	mov	r3, r0
 8004964:	717b      	strb	r3, [r7, #5]
 8004966:	460b      	mov	r3, r1
 8004968:	713b      	strb	r3, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	70fb      	strb	r3, [r7, #3]
	uint32_t time = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    // 1. Cộng dồn số giây từ các năm đã qua
    // Giả sử epoch là 1/1/2000
	if (year >= EPOCH_YEAR)
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	f240 72e3 	movw	r2, #2019	@ 0x7e3
 8004978:	4293      	cmp	r3, r2
 800497a:	d91b      	bls.n	80049b4 <mktime+0x64>
	{
		for (i = EPOCH_YEAR; i < year; i++) {
 800497c:	f240 73e4 	movw	r3, #2020	@ 0x7e4
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	e012      	b.n	80049aa <mktime+0x5a>
			time += (365 + is_leap_year(i)) * 24 * 60;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	b29b      	uxth	r3, r3
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff ffaf 	bl	80048ec <is_leap_year>
 800498e:	4603      	mov	r3, r0
 8004990:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 8004994:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	461a      	mov	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
		for (i = EPOCH_YEAR; i < year; i++) {
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d3e8      	bcc.n	8004984 <mktime+0x34>
 80049b2:	e001      	b.n	80049b8 <mktime+0x68>
		}
	} else
	{
		return 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e045      	b.n	8004a44 <mktime+0xf4>
	}
    // 2. Cộng dồn số giây từ các tháng đã qua trong năm hiện tại
	if (month >= 1 && month <= 12)
 80049b8:	797b      	ldrb	r3, [r7, #5]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d027      	beq.n	8004a0e <mktime+0xbe>
 80049be:	797b      	ldrb	r3, [r7, #5]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d824      	bhi.n	8004a0e <mktime+0xbe>
	{
		for (i = 0; i < month; i++) {
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	e01c      	b.n	8004a04 <mktime+0xb4>
			time += days_in_month[i] * 24 * 60;
 80049ca:	4a20      	ldr	r2, [pc, #128]	@ (8004a4c <mktime+0xfc>)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d2:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
			// Cộng thêm một ngày nếu là tháng 2 của năm nhuận
			if (i == 1 && is_leap_year(year)) {
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10a      	bne.n	80049fe <mktime+0xae>
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff ff7e 	bl	80048ec <is_leap_year>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <mktime+0xae>
				time += 24 * 60;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80049fc:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < month; i++) {
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	3301      	adds	r3, #1
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	797b      	ldrb	r3, [r7, #5]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d3de      	bcc.n	80049ca <mktime+0x7a>
	if (month >= 1 && month <= 12)
 8004a0c:	e001      	b.n	8004a12 <mktime+0xc2>
			}
		}
	} else
	{
		return 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e018      	b.n	8004a44 <mktime+0xf4>
	}

    // 3. Cộng dồn số giây từ các ngày, giờ, phút và giây
    time += (uint32_t)(date - 1) * 24 * 60;
 8004a12:	793b      	ldrb	r3, [r7, #4]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	461a      	mov	r2, r3
 8004a18:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
 8004a1c:	fb02 f303 	mul.w	r3, r2, r3
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
    time += (uint32_t)hour * 60;
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	461a      	mov	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
    time += (uint32_t)minute;
 8004a38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
    return time;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd90      	pop	{r4, r7, pc}
 8004a4c:	08009a5c 	.word	0x08009a5c

08004a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a54:	b672      	cpsid	i
}
 8004a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a58:	bf00      	nop
 8004a5a:	e7fd      	b.n	8004a58 <Error_Handler+0x8>

08004a5c <HAL_MspInit>:
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4b15      	ldr	r3, [pc, #84]	@ (8004ab8 <HAL_MspInit+0x5c>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	4a14      	ldr	r2, [pc, #80]	@ (8004ab8 <HAL_MspInit+0x5c>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	6193      	str	r3, [r2, #24]
 8004a6e:	4b12      	ldr	r3, [pc, #72]	@ (8004ab8 <HAL_MspInit+0x5c>)
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab8 <HAL_MspInit+0x5c>)
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab8 <HAL_MspInit+0x5c>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a84:	61d3      	str	r3, [r2, #28]
 8004a86:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <HAL_MspInit+0x5c>)
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <HAL_MspInit+0x60>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	4a04      	ldr	r2, [pc, #16]	@ (8004abc <HAL_MspInit+0x60>)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6053      	str	r3, [r2, #4]
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40010000 	.word	0x40010000

08004ac0 <HAL_CAN_MspInit>:
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	f107 0310 	add.w	r3, r7, #16
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a20      	ldr	r2, [pc, #128]	@ (8004b5c <HAL_CAN_MspInit+0x9c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d139      	bne.n	8004b54 <HAL_CAN_MspInit+0x94>
 8004ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b60 <HAL_CAN_MspInit+0xa0>)
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b60 <HAL_CAN_MspInit+0xa0>)
 8004ae6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004aea:	61d3      	str	r3, [r2, #28]
 8004aec:	4b1c      	ldr	r3, [pc, #112]	@ (8004b60 <HAL_CAN_MspInit+0xa0>)
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <HAL_CAN_MspInit+0xa0>)
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	4a18      	ldr	r2, [pc, #96]	@ (8004b60 <HAL_CAN_MspInit+0xa0>)
 8004afe:	f043 0304 	orr.w	r3, r3, #4
 8004b02:	6193      	str	r3, [r2, #24]
 8004b04:	4b16      	ldr	r3, [pc, #88]	@ (8004b60 <HAL_CAN_MspInit+0xa0>)
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	f107 0310 	add.w	r3, r7, #16
 8004b22:	4619      	mov	r1, r3
 8004b24:	480f      	ldr	r0, [pc, #60]	@ (8004b64 <HAL_CAN_MspInit+0xa4>)
 8004b26:	f001 ff23 	bl	8006970 <HAL_GPIO_Init>
 8004b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	2302      	movs	r3, #2
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	2303      	movs	r3, #3
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	f107 0310 	add.w	r3, r7, #16
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4809      	ldr	r0, [pc, #36]	@ (8004b64 <HAL_CAN_MspInit+0xa4>)
 8004b40:	f001 ff16 	bl	8006970 <HAL_GPIO_Init>
 8004b44:	2200      	movs	r2, #0
 8004b46:	2103      	movs	r1, #3
 8004b48:	2014      	movs	r0, #20
 8004b4a:	f001 fa34 	bl	8005fb6 <HAL_NVIC_SetPriority>
 8004b4e:	2014      	movs	r0, #20
 8004b50:	f001 fa4d 	bl	8005fee <HAL_NVIC_EnableIRQ>
 8004b54:	bf00      	nop
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40006400 	.word	0x40006400
 8004b60:	40021000 	.word	0x40021000
 8004b64:	40010800 	.word	0x40010800

08004b68 <HAL_SPI_MspInit>:
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	@ 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	f107 0318 	add.w	r3, r7, #24
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a37      	ldr	r2, [pc, #220]	@ (8004c60 <HAL_SPI_MspInit+0xf8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d130      	bne.n	8004bea <HAL_SPI_MspInit+0x82>
 8004b88:	4b36      	ldr	r3, [pc, #216]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	4a35      	ldr	r2, [pc, #212]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004b8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b92:	6193      	str	r3, [r2, #24]
 8004b94:	4b33      	ldr	r3, [pc, #204]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	4b30      	ldr	r3, [pc, #192]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004ba6:	f043 0304 	orr.w	r3, r3, #4
 8004baa:	6193      	str	r3, [r2, #24]
 8004bac:	4b2d      	ldr	r3, [pc, #180]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	23a0      	movs	r3, #160	@ 0xa0
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc4:	f107 0318 	add.w	r3, r7, #24
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4827      	ldr	r0, [pc, #156]	@ (8004c68 <HAL_SPI_MspInit+0x100>)
 8004bcc:	f001 fed0 	bl	8006970 <HAL_GPIO_Init>
 8004bd0:	2340      	movs	r3, #64	@ 0x40
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	623b      	str	r3, [r7, #32]
 8004bdc:	f107 0318 	add.w	r3, r7, #24
 8004be0:	4619      	mov	r1, r3
 8004be2:	4821      	ldr	r0, [pc, #132]	@ (8004c68 <HAL_SPI_MspInit+0x100>)
 8004be4:	f001 fec4 	bl	8006970 <HAL_GPIO_Init>
 8004be8:	e036      	b.n	8004c58 <HAL_SPI_MspInit+0xf0>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1f      	ldr	r2, [pc, #124]	@ (8004c6c <HAL_SPI_MspInit+0x104>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d131      	bne.n	8004c58 <HAL_SPI_MspInit+0xf0>
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bfe:	61d3      	str	r3, [r2, #28]
 8004c00:	4b18      	ldr	r3, [pc, #96]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	4a14      	ldr	r2, [pc, #80]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004c12:	f043 0308 	orr.w	r3, r3, #8
 8004c16:	6193      	str	r3, [r2, #24]
 8004c18:	4b12      	ldr	r3, [pc, #72]	@ (8004c64 <HAL_SPI_MspInit+0xfc>)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	2303      	movs	r3, #3
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c32:	f107 0318 	add.w	r3, r7, #24
 8004c36:	4619      	mov	r1, r3
 8004c38:	480d      	ldr	r0, [pc, #52]	@ (8004c70 <HAL_SPI_MspInit+0x108>)
 8004c3a:	f001 fe99 	bl	8006970 <HAL_GPIO_Init>
 8004c3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	623b      	str	r3, [r7, #32]
 8004c4c:	f107 0318 	add.w	r3, r7, #24
 8004c50:	4619      	mov	r1, r3
 8004c52:	4807      	ldr	r0, [pc, #28]	@ (8004c70 <HAL_SPI_MspInit+0x108>)
 8004c54:	f001 fe8c 	bl	8006970 <HAL_GPIO_Init>
 8004c58:	bf00      	nop
 8004c5a:	3728      	adds	r7, #40	@ 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40013000 	.word	0x40013000
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40010800 	.word	0x40010800
 8004c6c:	40003800 	.word	0x40003800
 8004c70:	40010c00 	.word	0x40010c00

08004c74 <HAL_TIM_Base_MspInit>:
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c84:	d114      	bne.n	8004cb0 <HAL_TIM_Base_MspInit+0x3c>
 8004c86:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <HAL_TIM_Base_MspInit+0x78>)
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	4a18      	ldr	r2, [pc, #96]	@ (8004cec <HAL_TIM_Base_MspInit+0x78>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	61d3      	str	r3, [r2, #28]
 8004c92:	4b16      	ldr	r3, [pc, #88]	@ (8004cec <HAL_TIM_Base_MspInit+0x78>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	201c      	movs	r0, #28
 8004ca4:	f001 f987 	bl	8005fb6 <HAL_NVIC_SetPriority>
 8004ca8:	201c      	movs	r0, #28
 8004caa:	f001 f9a0 	bl	8005fee <HAL_NVIC_EnableIRQ>
 8004cae:	e018      	b.n	8004ce2 <HAL_TIM_Base_MspInit+0x6e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d113      	bne.n	8004ce2 <HAL_TIM_Base_MspInit+0x6e>
 8004cba:	4b0c      	ldr	r3, [pc, #48]	@ (8004cec <HAL_TIM_Base_MspInit+0x78>)
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8004cec <HAL_TIM_Base_MspInit+0x78>)
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	61d3      	str	r3, [r2, #28]
 8004cc6:	4b09      	ldr	r3, [pc, #36]	@ (8004cec <HAL_TIM_Base_MspInit+0x78>)
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2105      	movs	r1, #5
 8004cd6:	201d      	movs	r0, #29
 8004cd8:	f001 f96d 	bl	8005fb6 <HAL_NVIC_SetPriority>
 8004cdc:	201d      	movs	r0, #29
 8004cde:	f001 f986 	bl	8005fee <HAL_NVIC_EnableIRQ>
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	40000400 	.word	0x40000400

08004cf4 <HAL_UART_MspInit>:
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	f107 0310 	add.w	r3, r7, #16
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	60da      	str	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a33      	ldr	r2, [pc, #204]	@ (8004ddc <HAL_UART_MspInit+0xe8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d15f      	bne.n	8004dd4 <HAL_UART_MspInit+0xe0>
 8004d14:	4b32      	ldr	r3, [pc, #200]	@ (8004de0 <HAL_UART_MspInit+0xec>)
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	4a31      	ldr	r2, [pc, #196]	@ (8004de0 <HAL_UART_MspInit+0xec>)
 8004d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d1e:	6193      	str	r3, [r2, #24]
 8004d20:	4b2f      	ldr	r3, [pc, #188]	@ (8004de0 <HAL_UART_MspInit+0xec>)
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8004de0 <HAL_UART_MspInit+0xec>)
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	4a2b      	ldr	r2, [pc, #172]	@ (8004de0 <HAL_UART_MspInit+0xec>)
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	6193      	str	r3, [r2, #24]
 8004d38:	4b29      	ldr	r3, [pc, #164]	@ (8004de0 <HAL_UART_MspInit+0xec>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	2303      	movs	r3, #3
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	f107 0310 	add.w	r3, r7, #16
 8004d56:	4619      	mov	r1, r3
 8004d58:	4822      	ldr	r0, [pc, #136]	@ (8004de4 <HAL_UART_MspInit+0xf0>)
 8004d5a:	f001 fe09 	bl	8006970 <HAL_GPIO_Init>
 8004d5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	f107 0310 	add.w	r3, r7, #16
 8004d70:	4619      	mov	r1, r3
 8004d72:	481c      	ldr	r0, [pc, #112]	@ (8004de4 <HAL_UART_MspInit+0xf0>)
 8004d74:	f001 fdfc 	bl	8006970 <HAL_GPIO_Init>
 8004d78:	4b1b      	ldr	r3, [pc, #108]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dec <HAL_UART_MspInit+0xf8>)
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	605a      	str	r2, [r3, #4]
 8004d84:	4b18      	ldr	r3, [pc, #96]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
 8004d8a:	4b17      	ldr	r3, [pc, #92]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004d8c:	2280      	movs	r2, #128	@ 0x80
 8004d8e:	60da      	str	r2, [r3, #12]
 8004d90:	4b15      	ldr	r3, [pc, #84]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	611a      	str	r2, [r3, #16]
 8004d96:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	615a      	str	r2, [r3, #20]
 8004d9c:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	619a      	str	r2, [r3, #24]
 8004da2:	4b11      	ldr	r3, [pc, #68]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	61da      	str	r2, [r3, #28]
 8004da8:	480f      	ldr	r0, [pc, #60]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004daa:	f001 f93f 	bl	800602c <HAL_DMA_Init>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_UART_MspInit+0xc4>
 8004db4:	f7ff fe4c 	bl	8004a50 <Error_Handler>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0b      	ldr	r2, [pc, #44]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004de8 <HAL_UART_MspInit+0xf4>)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6253      	str	r3, [r2, #36]	@ 0x24
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	2025      	movs	r0, #37	@ 0x25
 8004dca:	f001 f8f4 	bl	8005fb6 <HAL_NVIC_SetPriority>
 8004dce:	2025      	movs	r0, #37	@ 0x25
 8004dd0:	f001 f90d 	bl	8005fee <HAL_NVIC_EnableIRQ>
 8004dd4:	bf00      	nop
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40013800 	.word	0x40013800
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40010800 	.word	0x40010800
 8004de8:	20000258 	.word	0x20000258
 8004dec:	40020058 	.word	0x40020058

08004df0 <NMI_Handler>:
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <NMI_Handler+0x4>

08004df8 <HardFault_Handler>:
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <HardFault_Handler+0x4>

08004e00 <MemManage_Handler>:
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <MemManage_Handler+0x4>

08004e08 <BusFault_Handler>:
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	bf00      	nop
 8004e0e:	e7fd      	b.n	8004e0c <BusFault_Handler+0x4>

08004e10 <UsageFault_Handler>:
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	bf00      	nop
 8004e16:	e7fd      	b.n	8004e14 <UsageFault_Handler+0x4>

08004e18 <SVC_Handler>:
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <DebugMon_Handler>:
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <PendSV_Handler>:
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <SysTick_Handler>:
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	f000 f8b6 	bl	8004fb0 <HAL_IncTick>
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <EXTI0_IRQHandler>:
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f001 ff5b 	bl	8006d08 <HAL_GPIO_EXTI_IRQHandler>
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <DMA1_Channel5_IRQHandler>:
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	4802      	ldr	r0, [pc, #8]	@ (8004e68 <DMA1_Channel5_IRQHandler+0x10>)
 8004e5e:	f001 fa53 	bl	8006308 <HAL_DMA_IRQHandler>
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000258 	.word	0x20000258

08004e6c <USB_LP_CAN1_RX0_IRQHandler>:
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	4802      	ldr	r0, [pc, #8]	@ (8004e7c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004e72:	f000 fd90 	bl	8005996 <HAL_CAN_IRQHandler>
 8004e76:	bf00      	nop
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	2000009c 	.word	0x2000009c

08004e80 <EXTI9_5_IRQHandler>:
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	2040      	movs	r0, #64	@ 0x40
 8004e86:	f001 ff3f 	bl	8006d08 <HAL_GPIO_EXTI_IRQHandler>
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <TIM2_IRQHandler>:
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	4802      	ldr	r0, [pc, #8]	@ (8004ea0 <TIM2_IRQHandler+0x10>)
 8004e96:	f003 f9eb 	bl	8008270 <HAL_TIM_IRQHandler>
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000180 	.word	0x20000180

08004ea4 <TIM3_IRQHandler>:
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	4802      	ldr	r0, [pc, #8]	@ (8004eb4 <TIM3_IRQHandler+0x10>)
 8004eaa:	f003 f9e1 	bl	8008270 <HAL_TIM_IRQHandler>
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	200001c8 	.word	0x200001c8

08004eb8 <USART1_IRQHandler>:
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	4802      	ldr	r0, [pc, #8]	@ (8004ec8 <USART1_IRQHandler+0x10>)
 8004ebe:	f003 fe5b 	bl	8008b78 <HAL_UART_IRQHandler>
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000210 	.word	0x20000210

08004ecc <SystemInit>:
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	bf00      	nop
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr

08004ed8 <Reset_Handler>:
 8004ed8:	f7ff fff8 	bl	8004ecc <SystemInit>
 8004edc:	480b      	ldr	r0, [pc, #44]	@ (8004f0c <LoopFillZerobss+0xe>)
 8004ede:	490c      	ldr	r1, [pc, #48]	@ (8004f10 <LoopFillZerobss+0x12>)
 8004ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8004f14 <LoopFillZerobss+0x16>)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e002      	b.n	8004eec <LoopCopyDataInit>

08004ee6 <CopyDataInit>:
 8004ee6:	58d4      	ldr	r4, [r2, r3]
 8004ee8:	50c4      	str	r4, [r0, r3]
 8004eea:	3304      	adds	r3, #4

08004eec <LoopCopyDataInit>:
 8004eec:	18c4      	adds	r4, r0, r3
 8004eee:	428c      	cmp	r4, r1
 8004ef0:	d3f9      	bcc.n	8004ee6 <CopyDataInit>
 8004ef2:	4a09      	ldr	r2, [pc, #36]	@ (8004f18 <LoopFillZerobss+0x1a>)
 8004ef4:	4c09      	ldr	r4, [pc, #36]	@ (8004f1c <LoopFillZerobss+0x1e>)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e001      	b.n	8004efe <LoopFillZerobss>

08004efa <FillZerobss>:
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	3204      	adds	r2, #4

08004efe <LoopFillZerobss>:
 8004efe:	42a2      	cmp	r2, r4
 8004f00:	d3fb      	bcc.n	8004efa <FillZerobss>
 8004f02:	f004 fd49 	bl	8009998 <__libc_init_array>
 8004f06:	f7fd f985 	bl	8002214 <main>
 8004f0a:	4770      	bx	lr
 8004f0c:	20000000 	.word	0x20000000
 8004f10:	20000044 	.word	0x20000044
 8004f14:	08009ac8 	.word	0x08009ac8
 8004f18:	20000048 	.word	0x20000048
 8004f1c:	200007f8 	.word	0x200007f8

08004f20 <ADC1_2_IRQHandler>:
 8004f20:	e7fe      	b.n	8004f20 <ADC1_2_IRQHandler>
	...

08004f24 <HAL_Init>:
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	4b08      	ldr	r3, [pc, #32]	@ (8004f4c <HAL_Init+0x28>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a07      	ldr	r2, [pc, #28]	@ (8004f4c <HAL_Init+0x28>)
 8004f2e:	f043 0310 	orr.w	r3, r3, #16
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	2003      	movs	r0, #3
 8004f36:	f001 f833 	bl	8005fa0 <HAL_NVIC_SetPriorityGrouping>
 8004f3a:	2006      	movs	r0, #6
 8004f3c:	f000 f808 	bl	8004f50 <HAL_InitTick>
 8004f40:	f7ff fd8c 	bl	8004a5c <HAL_MspInit>
 8004f44:	2300      	movs	r3, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40022000 	.word	0x40022000

08004f50 <HAL_InitTick>:
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	4b12      	ldr	r3, [pc, #72]	@ (8004fa4 <HAL_InitTick+0x54>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b12      	ldr	r3, [pc, #72]	@ (8004fa8 <HAL_InitTick+0x58>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 f84f 	bl	8006012 <HAL_SYSTICK_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_InitTick+0x2e>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e00e      	b.n	8004f9c <HAL_InitTick+0x4c>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b0f      	cmp	r3, #15
 8004f82:	d80a      	bhi.n	8004f9a <HAL_InitTick+0x4a>
 8004f84:	2200      	movs	r2, #0
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	f001 f813 	bl	8005fb6 <HAL_NVIC_SetPriority>
 8004f90:	4a06      	ldr	r2, [pc, #24]	@ (8004fac <HAL_InitTick+0x5c>)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	2300      	movs	r3, #0
 8004f98:	e000      	b.n	8004f9c <HAL_InitTick+0x4c>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000038 	.word	0x20000038
 8004fa8:	20000040 	.word	0x20000040
 8004fac:	2000003c 	.word	0x2000003c

08004fb0 <HAL_IncTick>:
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <HAL_IncTick+0x1c>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <HAL_IncTick+0x20>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	4a03      	ldr	r2, [pc, #12]	@ (8004fd0 <HAL_IncTick+0x20>)
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	20000040 	.word	0x20000040
 8004fd0:	200007d4 	.word	0x200007d4

08004fd4 <HAL_GetTick>:
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	4b02      	ldr	r3, [pc, #8]	@ (8004fe4 <HAL_GetTick+0x10>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	200007d4 	.word	0x200007d4

08004fe8 <HAL_Delay>:
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	f7ff fff0 	bl	8004fd4 <HAL_GetTick>
 8004ff4:	60b8      	str	r0, [r7, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d005      	beq.n	800500e <HAL_Delay+0x26>
 8005002:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <HAL_Delay+0x44>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	bf00      	nop
 8005010:	f7ff ffe0 	bl	8004fd4 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	429a      	cmp	r2, r3
 800501e:	d8f7      	bhi.n	8005010 <HAL_Delay+0x28>
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000040 	.word	0x20000040

08005030 <HAL_GetUIDw0>:
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
 8005034:	4b02      	ldr	r3, [pc, #8]	@ (8005040 <HAL_GetUIDw0+0x10>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr
 8005040:	1ffff7e8 	.word	0x1ffff7e8

08005044 <HAL_GetUIDw1>:
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
 8005048:	4b02      	ldr	r3, [pc, #8]	@ (8005054 <HAL_GetUIDw1+0x10>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	1ffff7ec 	.word	0x1ffff7ec

08005058 <HAL_GetUIDw2>:
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
 800505c:	4b02      	ldr	r3, [pc, #8]	@ (8005068 <HAL_GetUIDw2+0x10>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	1ffff7f0 	.word	0x1ffff7f0

0800506c <HAL_CAN_Init>:
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_CAN_Init+0x12>
 800507a:	2301      	movs	r3, #1
 800507c:	e0ed      	b.n	800525a <HAL_CAN_Init+0x1ee>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d102      	bne.n	8005090 <HAL_CAN_Init+0x24>
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff fd18 	bl	8004ac0 <HAL_CAN_MspInit>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	f7ff ff98 	bl	8004fd4 <HAL_GetTick>
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	e012      	b.n	80050ce <HAL_CAN_Init+0x62>
 80050a8:	f7ff ff94 	bl	8004fd4 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b0a      	cmp	r3, #10
 80050b4:	d90b      	bls.n	80050ce <HAL_CAN_Init+0x62>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2205      	movs	r2, #5
 80050c6:	f883 2020 	strb.w	r2, [r3, #32]
 80050ca:	2301      	movs	r3, #1
 80050cc:	e0c5      	b.n	800525a <HAL_CAN_Init+0x1ee>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0e5      	beq.n	80050a8 <HAL_CAN_Init+0x3c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0202 	bic.w	r2, r2, #2
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	f7ff ff72 	bl	8004fd4 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	e012      	b.n	800511a <HAL_CAN_Init+0xae>
 80050f4:	f7ff ff6e 	bl	8004fd4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b0a      	cmp	r3, #10
 8005100:	d90b      	bls.n	800511a <HAL_CAN_Init+0xae>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	625a      	str	r2, [r3, #36]	@ 0x24
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2205      	movs	r2, #5
 8005112:	f883 2020 	strb.w	r2, [r3, #32]
 8005116:	2301      	movs	r3, #1
 8005118:	e09f      	b.n	800525a <HAL_CAN_Init+0x1ee>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <HAL_CAN_Init+0x88>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	7e1b      	ldrb	r3, [r3, #24]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d108      	bne.n	8005142 <HAL_CAN_Init+0xd6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e007      	b.n	8005152 <HAL_CAN_Init+0xe6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	7e5b      	ldrb	r3, [r3, #25]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d108      	bne.n	800516c <HAL_CAN_Init+0x100>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e007      	b.n	800517c <HAL_CAN_Init+0x110>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	7e9b      	ldrb	r3, [r3, #26]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d108      	bne.n	8005196 <HAL_CAN_Init+0x12a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0220 	orr.w	r2, r2, #32
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e007      	b.n	80051a6 <HAL_CAN_Init+0x13a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0220 	bic.w	r2, r2, #32
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	7edb      	ldrb	r3, [r3, #27]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d108      	bne.n	80051c0 <HAL_CAN_Init+0x154>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0210 	bic.w	r2, r2, #16
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e007      	b.n	80051d0 <HAL_CAN_Init+0x164>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0210 	orr.w	r2, r2, #16
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	7f1b      	ldrb	r3, [r3, #28]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d108      	bne.n	80051ea <HAL_CAN_Init+0x17e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0208 	orr.w	r2, r2, #8
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e007      	b.n	80051fa <HAL_CAN_Init+0x18e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0208 	bic.w	r2, r2, #8
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	7f5b      	ldrb	r3, [r3, #29]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d108      	bne.n	8005214 <HAL_CAN_Init+0x1a8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0204 	orr.w	r2, r2, #4
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	e007      	b.n	8005224 <HAL_CAN_Init+0x1b8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0204 	bic.w	r2, r2, #4
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	ea42 0103 	orr.w	r1, r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	1e5a      	subs	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	61da      	str	r2, [r3, #28]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2020 	strb.w	r2, [r3, #32]
 8005258:	2300      	movs	r3, #0
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_CAN_ConfigFilter>:
 8005262:	b480      	push	{r7}
 8005264:	b087      	sub	sp, #28
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005278:	74fb      	strb	r3, [r7, #19]
 800527a:	7cfb      	ldrb	r3, [r7, #19]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d003      	beq.n	8005288 <HAL_CAN_ConfigFilter+0x26>
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	2b02      	cmp	r3, #2
 8005284:	f040 80aa 	bne.w	80053dc <HAL_CAN_ConfigFilter+0x17a>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800528e:	f043 0201 	orr.w	r2, r3, #1
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2201      	movs	r2, #1
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	401a      	ands	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d123      	bne.n	800530a <HAL_CAN_ConfigFilter+0xa8>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	43db      	mvns	r3, r3
 80052cc:	401a      	ands	r2, r3
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	0419      	lsls	r1, r3, #16
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	6952      	ldr	r2, [r2, #20]
 80052e4:	4319      	orrs	r1, r3
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3248      	adds	r2, #72	@ 0x48
 80052ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	0419      	lsls	r1, r3, #16
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	430a      	orrs	r2, r1
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	3348      	adds	r3, #72	@ 0x48
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	440b      	add	r3, r1
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d122      	bne.n	8005358 <HAL_CAN_ConfigFilter+0xf6>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	431a      	orrs	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	0419      	lsls	r1, r3, #16
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	b29b      	uxth	r3, r3
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	6952      	ldr	r2, [r2, #20]
 8005332:	4319      	orrs	r1, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3248      	adds	r2, #72	@ 0x48
 8005338:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	0419      	lsls	r1, r3, #16
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	b29a      	uxth	r2, r3
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	430a      	orrs	r2, r1
 800534e:	6979      	ldr	r1, [r7, #20]
 8005350:	3348      	adds	r3, #72	@ 0x48
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	440b      	add	r3, r1
 8005356:	605a      	str	r2, [r3, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <HAL_CAN_ConfigFilter+0x112>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	43db      	mvns	r3, r3
 800536a:	401a      	ands	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005372:	e007      	b.n	8005384 <HAL_CAN_ConfigFilter+0x122>
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	431a      	orrs	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <HAL_CAN_ConfigFilter+0x13e>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	43db      	mvns	r3, r3
 8005396:	401a      	ands	r2, r3
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800539e:	e007      	b.n	80053b0 <HAL_CAN_ConfigFilter+0x14e>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	431a      	orrs	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d107      	bne.n	80053c8 <HAL_CAN_ConfigFilter+0x166>
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053ce:	f023 0201 	bic.w	r2, r3, #1
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 80053d8:	2300      	movs	r3, #0
 80053da:	e006      	b.n	80053ea <HAL_CAN_ConfigFilter+0x188>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80053e8:	2301      	movs	r3, #1
 80053ea:	4618      	mov	r0, r3
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <HAL_CAN_Start>:
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d12e      	bne.n	8005466 <HAL_CAN_Start+0x72>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2020 	strb.w	r2, [r3, #32]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f7ff fdd8 	bl	8004fd4 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	e012      	b.n	800544e <HAL_CAN_Start+0x5a>
 8005428:	f7ff fdd4 	bl	8004fd4 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b0a      	cmp	r3, #10
 8005434:	d90b      	bls.n	800544e <HAL_CAN_Start+0x5a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	625a      	str	r2, [r3, #36]	@ 0x24
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2205      	movs	r2, #5
 8005446:	f883 2020 	strb.w	r2, [r3, #32]
 800544a:	2301      	movs	r3, #1
 800544c:	e012      	b.n	8005474 <HAL_CAN_Start+0x80>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e5      	bne.n	8005428 <HAL_CAN_Start+0x34>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	625a      	str	r2, [r3, #36]	@ 0x24
 8005462:	2300      	movs	r3, #0
 8005464:	e006      	b.n	8005474 <HAL_CAN_Start+0x80>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	625a      	str	r2, [r3, #36]	@ 0x24
 8005472:	2301      	movs	r3, #1
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_CAN_AddTxMessage>:
 800547c:	b480      	push	{r7}
 800547e:	b089      	sub	sp, #36	@ 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005490:	77fb      	strb	r3, [r7, #31]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	7ffb      	ldrb	r3, [r7, #31]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d003      	beq.n	80054a8 <HAL_CAN_AddTxMessage+0x2c>
 80054a0:	7ffb      	ldrb	r3, [r7, #31]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	f040 80ad 	bne.w	8005602 <HAL_CAN_AddTxMessage+0x186>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <HAL_CAN_AddTxMessage+0x4c>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <HAL_CAN_AddTxMessage+0x4c>
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8095 	beq.w	80055f2 <HAL_CAN_AddTxMessage+0x176>
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	0e1b      	lsrs	r3, r3, #24
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	2201      	movs	r2, #1
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	409a      	lsls	r2, r3
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10d      	bne.n	8005500 <HAL_CAN_AddTxMessage+0x84>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	055a      	lsls	r2, r3, #21
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	68f9      	ldr	r1, [r7, #12]
 80054f0:	6809      	ldr	r1, [r1, #0]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	3318      	adds	r3, #24
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	440b      	add	r3, r1
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e00f      	b.n	8005520 <HAL_CAN_AddTxMessage+0xa4>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	00da      	lsls	r2, r3, #3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	431a      	orrs	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	68f9      	ldr	r1, [r7, #12]
 8005512:	6809      	ldr	r1, [r1, #0]
 8005514:	431a      	orrs	r2, r3
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	3318      	adds	r3, #24
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	440b      	add	r3, r1
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6819      	ldr	r1, [r3, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3318      	adds	r3, #24
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	440b      	add	r3, r1
 8005530:	3304      	adds	r3, #4
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	7d1b      	ldrb	r3, [r3, #20]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d111      	bne.n	8005560 <HAL_CAN_AddTxMessage+0xe4>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	3318      	adds	r3, #24
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	4413      	add	r3, r2
 8005548:	3304      	adds	r3, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	6811      	ldr	r1, [r2, #0]
 8005550:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	3318      	adds	r3, #24
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	440b      	add	r3, r1
 800555c:	3304      	adds	r3, #4
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3307      	adds	r3, #7
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	061a      	lsls	r2, r3, #24
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3306      	adds	r3, #6
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3305      	adds	r3, #5
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	4313      	orrs	r3, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	3204      	adds	r2, #4
 8005580:	7812      	ldrb	r2, [r2, #0]
 8005582:	4610      	mov	r0, r2
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	6811      	ldr	r1, [r2, #0]
 8005588:	ea43 0200 	orr.w	r2, r3, r0
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	440b      	add	r3, r1
 8005592:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3303      	adds	r3, #3
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	061a      	lsls	r2, r3, #24
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3302      	adds	r3, #2
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3301      	adds	r3, #1
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	4313      	orrs	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	7812      	ldrb	r2, [r2, #0]
 80055b8:	4610      	mov	r0, r2
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	6811      	ldr	r1, [r2, #0]
 80055be:	ea43 0200 	orr.w	r2, r3, r0
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	440b      	add	r3, r1
 80055c8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	3318      	adds	r3, #24
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	4413      	add	r3, r2
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	6811      	ldr	r1, [r2, #0]
 80055e0:	f043 0201 	orr.w	r2, r3, #1
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	3318      	adds	r3, #24
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	440b      	add	r3, r1
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	2300      	movs	r3, #0
 80055f0:	e00e      	b.n	8005610 <HAL_CAN_AddTxMessage+0x194>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80055fe:	2301      	movs	r3, #1
 8005600:	e006      	b.n	8005610 <HAL_CAN_AddTxMessage+0x194>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	625a      	str	r2, [r3, #36]	@ 0x24
 800560e:	2301      	movs	r3, #1
 8005610:	4618      	mov	r0, r3
 8005612:	3724      	adds	r7, #36	@ 0x24
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <HAL_CAN_AbortTxRequest>:
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800562a:	73fb      	strb	r3, [r7, #15]
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d002      	beq.n	8005638 <HAL_CAN_AbortTxRequest+0x1e>
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2b02      	cmp	r3, #2
 8005636:	d128      	bne.n	800568a <HAL_CAN_AbortTxRequest+0x70>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d007      	beq.n	8005652 <HAL_CAN_AbortTxRequest+0x38>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005650:	609a      	str	r2, [r3, #8]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <HAL_CAN_AbortTxRequest+0x52>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800566a:	609a      	str	r2, [r3, #8]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <HAL_CAN_AbortTxRequest+0x6c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	2300      	movs	r3, #0
 8005688:	e006      	b.n	8005698 <HAL_CAN_AbortTxRequest+0x7e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	625a      	str	r2, [r3, #36]	@ 0x24
 8005696:	2301      	movs	r3, #1
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <HAL_CAN_GetTxMailboxesFreeLevel>:
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056b4:	72fb      	strb	r3, [r7, #11]
 80056b6:	7afb      	ldrb	r3, [r7, #11]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d002      	beq.n	80056c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80056bc:	7afb      	ldrb	r3, [r7, #11]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d11d      	bne.n	80056fe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3301      	adds	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <HAL_CAN_GetRxMessage>:
 800570a:	b480      	push	{r7}
 800570c:	b087      	sub	sp, #28
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	607a      	str	r2, [r7, #4]
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800571e:	75fb      	strb	r3, [r7, #23]
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d003      	beq.n	800572e <HAL_CAN_GetRxMessage+0x24>
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	2b02      	cmp	r3, #2
 800572a:	f040 8103 	bne.w	8005934 <HAL_CAN_GetRxMessage+0x22a>
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10e      	bne.n	8005752 <HAL_CAN_GetRxMessage+0x48>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d116      	bne.n	8005770 <HAL_CAN_GetRxMessage+0x66>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005746:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	625a      	str	r2, [r3, #36]	@ 0x24
 800574e:	2301      	movs	r3, #1
 8005750:	e0f7      	b.n	8005942 <HAL_CAN_GetRxMessage+0x238>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d107      	bne.n	8005770 <HAL_CAN_GetRxMessage+0x66>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	625a      	str	r2, [r3, #36]	@ 0x24
 800576c:	2301      	movs	r3, #1
 800576e:	e0e8      	b.n	8005942 <HAL_CAN_GetRxMessage+0x238>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	331b      	adds	r3, #27
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	4413      	add	r3, r2
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0204 	and.w	r2, r3, #4
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	609a      	str	r2, [r3, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10c      	bne.n	80057a8 <HAL_CAN_GetRxMessage+0x9e>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	331b      	adds	r3, #27
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	4413      	add	r3, r2
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	0d5b      	lsrs	r3, r3, #21
 800579e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e00b      	b.n	80057c0 <HAL_CAN_GetRxMessage+0xb6>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	331b      	adds	r3, #27
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	4413      	add	r3, r2
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	08db      	lsrs	r3, r3, #3
 80057b8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	331b      	adds	r3, #27
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	4413      	add	r3, r2
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0202 	and.w	r2, r3, #2
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60da      	str	r2, [r3, #12]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	331b      	adds	r3, #27
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	4413      	add	r3, r2
 80057e2:	3304      	adds	r3, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_CAN_GetRxMessage+0xec>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2208      	movs	r2, #8
 80057f2:	611a      	str	r2, [r3, #16]
 80057f4:	e00b      	b.n	800580e <HAL_CAN_GetRxMessage+0x104>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	331b      	adds	r3, #27
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	4413      	add	r3, r2
 8005802:	3304      	adds	r3, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 020f 	and.w	r2, r3, #15
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	611a      	str	r2, [r3, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	331b      	adds	r3, #27
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	4413      	add	r3, r2
 800581a:	3304      	adds	r3, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	b2da      	uxtb	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	619a      	str	r2, [r3, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	331b      	adds	r3, #27
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	4413      	add	r3, r2
 8005832:	3304      	adds	r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	0c1b      	lsrs	r3, r3, #16
 8005838:	b29a      	uxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	615a      	str	r2, [r3, #20]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	4413      	add	r3, r2
 8005848:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	b2da      	uxtb	r2, r3
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	4413      	add	r3, r2
 800585e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	0a1a      	lsrs	r2, r3, #8
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	4413      	add	r3, r2
 8005878:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	0c1a      	lsrs	r2, r3, #16
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	3302      	adds	r3, #2
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	4413      	add	r3, r2
 8005892:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	0e1a      	lsrs	r2, r3, #24
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	3303      	adds	r3, #3
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	3304      	adds	r3, #4
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	0a1a      	lsrs	r2, r3, #8
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	3305      	adds	r3, #5
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	4413      	add	r3, r2
 80058de:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	0c1a      	lsrs	r2, r3, #16
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	3306      	adds	r3, #6
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	0e1a      	lsrs	r2, r3, #24
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	3307      	adds	r3, #7
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d108      	bne.n	8005920 <HAL_CAN_GetRxMessage+0x216>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0220 	orr.w	r2, r2, #32
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	e007      	b.n	8005930 <HAL_CAN_GetRxMessage+0x226>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0220 	orr.w	r2, r2, #32
 800592e:	611a      	str	r2, [r3, #16]
 8005930:	2300      	movs	r3, #0
 8005932:	e006      	b.n	8005942 <HAL_CAN_GetRxMessage+0x238>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005940:	2301      	movs	r3, #1
 8005942:	4618      	mov	r0, r3
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr

0800594c <HAL_CAN_ActivateNotification>:
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800595c:	73fb      	strb	r3, [r7, #15]
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d002      	beq.n	800596a <HAL_CAN_ActivateNotification+0x1e>
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d109      	bne.n	800597e <HAL_CAN_ActivateNotification+0x32>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6959      	ldr	r1, [r3, #20]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	615a      	str	r2, [r3, #20]
 800597a:	2300      	movs	r3, #0
 800597c:	e006      	b.n	800598c <HAL_CAN_ActivateNotification+0x40>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	625a      	str	r2, [r3, #36]	@ 0x24
 800598a:	2301      	movs	r3, #1
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <HAL_CAN_IRQHandler>:
 8005996:	b580      	push	{r7, lr}
 8005998:	b08a      	sub	sp, #40	@ 0x28
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	623b      	str	r3, [r7, #32]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d07c      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x140>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d023      	beq.n	8005a2e <HAL_CAN_IRQHandler+0x98>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2201      	movs	r2, #1
 80059ec:	609a      	str	r2, [r3, #8]
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_CAN_IRQHandler+0x6a>
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f983 	bl	8005d04 <HAL_CAN_TxMailbox0CompleteCallback>
 80059fe:	e016      	b.n	8005a2e <HAL_CAN_IRQHandler+0x98>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d004      	beq.n	8005a14 <HAL_CAN_IRQHandler+0x7e>
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a12:	e00c      	b.n	8005a2e <HAL_CAN_IRQHandler+0x98>
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d004      	beq.n	8005a28 <HAL_CAN_IRQHandler+0x92>
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a26:	e002      	b.n	8005a2e <HAL_CAN_IRQHandler+0x98>
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f986 	bl	8005d3a <HAL_CAN_TxMailbox0AbortCallback>
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d024      	beq.n	8005a82 <HAL_CAN_IRQHandler+0xec>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a40:	609a      	str	r2, [r3, #8]
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_CAN_IRQHandler+0xbe>
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f962 	bl	8005d16 <HAL_CAN_TxMailbox1CompleteCallback>
 8005a52:	e016      	b.n	8005a82 <HAL_CAN_IRQHandler+0xec>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <HAL_CAN_IRQHandler+0xd2>
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a66:	e00c      	b.n	8005a82 <HAL_CAN_IRQHandler+0xec>
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <HAL_CAN_IRQHandler+0xe6>
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a7a:	e002      	b.n	8005a82 <HAL_CAN_IRQHandler+0xec>
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f965 	bl	8005d4c <HAL_CAN_TxMailbox1AbortCallback>
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d024      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x140>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005a94:	609a      	str	r2, [r3, #8]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_CAN_IRQHandler+0x112>
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f941 	bl	8005d28 <HAL_CAN_TxMailbox2CompleteCallback>
 8005aa6:	e016      	b.n	8005ad6 <HAL_CAN_IRQHandler+0x140>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <HAL_CAN_IRQHandler+0x126>
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aba:	e00c      	b.n	8005ad6 <HAL_CAN_IRQHandler+0x140>
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d004      	beq.n	8005ad0 <HAL_CAN_IRQHandler+0x13a>
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ace:	e002      	b.n	8005ad6 <HAL_CAN_IRQHandler+0x140>
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f944 	bl	8005d5e <HAL_CAN_TxMailbox2AbortCallback>
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00c      	beq.n	8005afa <HAL_CAN_IRQHandler+0x164>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_CAN_IRQHandler+0x164>
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2210      	movs	r2, #16
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00b      	beq.n	8005b1c <HAL_CAN_IRQHandler+0x186>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d006      	beq.n	8005b1c <HAL_CAN_IRQHandler+0x186>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2208      	movs	r2, #8
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f92a 	bl	8005d70 <HAL_CAN_RxFifo0FullCallback>
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <HAL_CAN_IRQHandler+0x1a4>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <HAL_CAN_IRQHandler+0x1a4>
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fc fb3d 	bl	80021b4 <HAL_CAN_RxFifo0MsgPendingCallback>
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <HAL_CAN_IRQHandler+0x1c8>
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_CAN_IRQHandler+0x1c8>
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2210      	movs	r2, #16
 8005b5c:	611a      	str	r2, [r3, #16]
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <HAL_CAN_IRQHandler+0x1ea>
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <HAL_CAN_IRQHandler+0x1ea>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2208      	movs	r2, #8
 8005b78:	611a      	str	r2, [r3, #16]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f90a 	bl	8005d94 <HAL_CAN_RxFifo1FullCallback>
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <HAL_CAN_IRQHandler+0x208>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_CAN_IRQHandler+0x208>
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f8f2 	bl	8005d82 <HAL_CAN_RxFifo1MsgPendingCallback>
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <HAL_CAN_IRQHandler+0x22a>
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d006      	beq.n	8005bc0 <HAL_CAN_IRQHandler+0x22a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2210      	movs	r2, #16
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f8f3 	bl	8005da6 <HAL_CAN_SleepCallback>
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <HAL_CAN_IRQHandler+0x24c>
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d006      	beq.n	8005be2 <HAL_CAN_IRQHandler+0x24c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2208      	movs	r2, #8
 8005bda:	605a      	str	r2, [r3, #4]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f8eb 	bl	8005db8 <HAL_CAN_WakeUpFromRxMsgCallback>
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d07b      	beq.n	8005ce4 <HAL_CAN_IRQHandler+0x34e>
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d072      	beq.n	8005cdc <HAL_CAN_IRQHandler+0x346>
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <HAL_CAN_IRQHandler+0x27c>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_CAN_IRQHandler+0x27c>
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d008      	beq.n	8005c2e <HAL_CAN_IRQHandler+0x298>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_CAN_IRQHandler+0x298>
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	f043 0302 	orr.w	r3, r3, #2
 8005c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_CAN_IRQHandler+0x2b4>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_CAN_IRQHandler+0x2b4>
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	f043 0304 	orr.w	r3, r3, #4
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d043      	beq.n	8005cdc <HAL_CAN_IRQHandler+0x346>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d03e      	beq.n	8005cdc <HAL_CAN_IRQHandler+0x346>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c64:	2b60      	cmp	r3, #96	@ 0x60
 8005c66:	d02b      	beq.n	8005cc0 <HAL_CAN_IRQHandler+0x32a>
 8005c68:	2b60      	cmp	r3, #96	@ 0x60
 8005c6a:	d82e      	bhi.n	8005cca <HAL_CAN_IRQHandler+0x334>
 8005c6c:	2b50      	cmp	r3, #80	@ 0x50
 8005c6e:	d022      	beq.n	8005cb6 <HAL_CAN_IRQHandler+0x320>
 8005c70:	2b50      	cmp	r3, #80	@ 0x50
 8005c72:	d82a      	bhi.n	8005cca <HAL_CAN_IRQHandler+0x334>
 8005c74:	2b40      	cmp	r3, #64	@ 0x40
 8005c76:	d019      	beq.n	8005cac <HAL_CAN_IRQHandler+0x316>
 8005c78:	2b40      	cmp	r3, #64	@ 0x40
 8005c7a:	d826      	bhi.n	8005cca <HAL_CAN_IRQHandler+0x334>
 8005c7c:	2b30      	cmp	r3, #48	@ 0x30
 8005c7e:	d010      	beq.n	8005ca2 <HAL_CAN_IRQHandler+0x30c>
 8005c80:	2b30      	cmp	r3, #48	@ 0x30
 8005c82:	d822      	bhi.n	8005cca <HAL_CAN_IRQHandler+0x334>
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d002      	beq.n	8005c8e <HAL_CAN_IRQHandler+0x2f8>
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d005      	beq.n	8005c98 <HAL_CAN_IRQHandler+0x302>
 8005c8c:	e01d      	b.n	8005cca <HAL_CAN_IRQHandler+0x334>
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	f043 0308 	orr.w	r3, r3, #8
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c96:	e019      	b.n	8005ccc <HAL_CAN_IRQHandler+0x336>
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	f043 0310 	orr.w	r3, r3, #16
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ca0:	e014      	b.n	8005ccc <HAL_CAN_IRQHandler+0x336>
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	f043 0320 	orr.w	r3, r3, #32
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005caa:	e00f      	b.n	8005ccc <HAL_CAN_IRQHandler+0x336>
 8005cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb4:	e00a      	b.n	8005ccc <HAL_CAN_IRQHandler+0x336>
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cbe:	e005      	b.n	8005ccc <HAL_CAN_IRQHandler+0x336>
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cc8:	e000      	b.n	8005ccc <HAL_CAN_IRQHandler+0x336>
 8005cca:	bf00      	nop
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005cda:	619a      	str	r2, [r3, #24]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2204      	movs	r2, #4
 8005ce2:	605a      	str	r2, [r3, #4]
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <HAL_CAN_IRQHandler+0x366>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	625a      	str	r2, [r3, #36]	@ 0x24
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f867 	bl	8005dca <HAL_CAN_ErrorCallback>
 8005cfc:	bf00      	nop
 8005cfe:	3728      	adds	r7, #40	@ 0x28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_CAN_TxMailbox0CompleteCallback>:
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <HAL_CAN_TxMailbox1CompleteCallback>:
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <HAL_CAN_TxMailbox2CompleteCallback>:
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <HAL_CAN_TxMailbox0AbortCallback>:
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr

08005d4c <HAL_CAN_TxMailbox1AbortCallback>:
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr

08005d5e <HAL_CAN_TxMailbox2AbortCallback>:
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <HAL_CAN_RxFifo0FullCallback>:
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr

08005d82 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <HAL_CAN_RxFifo1FullCallback>:
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <HAL_CAN_SleepCallback>:
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <HAL_CAN_ErrorCallback>:
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <__NVIC_SetPriorityGrouping>:
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	4b0c      	ldr	r3, [pc, #48]	@ (8005e20 <__NVIC_SetPriorityGrouping+0x44>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005df8:	4013      	ands	r3, r2
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	021a      	lsls	r2, r3, #8
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	4a04      	ldr	r2, [pc, #16]	@ (8005e20 <__NVIC_SetPriorityGrouping+0x44>)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	60d3      	str	r3, [r2, #12]
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000ed00 	.word	0xe000ed00

08005e24 <__NVIC_GetPriorityGrouping>:
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	4b04      	ldr	r3, [pc, #16]	@ (8005e3c <__NVIC_GetPriorityGrouping+0x18>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	4618      	mov	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	e000ed00 	.word	0xe000ed00

08005e40 <__NVIC_EnableIRQ>:
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	71fb      	strb	r3, [r7, #7]
 8005e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	db0b      	blt.n	8005e6a <__NVIC_EnableIRQ+0x2a>
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	f003 021f 	and.w	r2, r3, #31
 8005e58:	4906      	ldr	r1, [pc, #24]	@ (8005e74 <__NVIC_EnableIRQ+0x34>)
 8005e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	2001      	movs	r0, #1
 8005e62:	fa00 f202 	lsl.w	r2, r0, r2
 8005e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr
 8005e74:	e000e100 	.word	0xe000e100

08005e78 <__NVIC_SetPriority>:
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	6039      	str	r1, [r7, #0]
 8005e82:	71fb      	strb	r3, [r7, #7]
 8005e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	db0a      	blt.n	8005ea2 <__NVIC_SetPriority+0x2a>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	490c      	ldr	r1, [pc, #48]	@ (8005ec4 <__NVIC_SetPriority+0x4c>)
 8005e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e96:	0112      	lsls	r2, r2, #4
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8005ea0:	e00a      	b.n	8005eb8 <__NVIC_SetPriority+0x40>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	4908      	ldr	r1, [pc, #32]	@ (8005ec8 <__NVIC_SetPriority+0x50>)
 8005ea8:	79fb      	ldrb	r3, [r7, #7]
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	3b04      	subs	r3, #4
 8005eb0:	0112      	lsls	r2, r2, #4
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	761a      	strb	r2, [r3, #24]
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	e000e100 	.word	0xe000e100
 8005ec8:	e000ed00 	.word	0xe000ed00

08005ecc <NVIC_EncodePriority>:
 8005ecc:	b480      	push	{r7}
 8005ece:	b089      	sub	sp, #36	@ 0x24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f1c3 0307 	rsb	r3, r3, #7
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	bf28      	it	cs
 8005eea:	2304      	movcs	r3, #4
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	2b06      	cmp	r3, #6
 8005ef4:	d902      	bls.n	8005efc <NVIC_EncodePriority+0x30>
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	3b03      	subs	r3, #3
 8005efa:	e000      	b.n	8005efe <NVIC_EncodePriority+0x32>
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	f04f 32ff 	mov.w	r2, #4294967295
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	43da      	mvns	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	401a      	ands	r2, r3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	409a      	lsls	r2, r3
 8005f14:	f04f 31ff 	mov.w	r1, #4294967295
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1e:	43d9      	mvns	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	400b      	ands	r3, r1
 8005f24:	4313      	orrs	r3, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	3724      	adds	r7, #36	@ 0x24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr

08005f30 <__NVIC_SystemReset>:
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	bf00      	nop
 8005f3a:	4b06      	ldr	r3, [pc, #24]	@ (8005f54 <__NVIC_SystemReset+0x24>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f42:	4904      	ldr	r1, [pc, #16]	@ (8005f54 <__NVIC_SystemReset+0x24>)
 8005f44:	4b04      	ldr	r3, [pc, #16]	@ (8005f58 <__NVIC_SystemReset+0x28>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60cb      	str	r3, [r1, #12]
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	bf00      	nop
 8005f50:	bf00      	nop
 8005f52:	e7fd      	b.n	8005f50 <__NVIC_SystemReset+0x20>
 8005f54:	e000ed00 	.word	0xe000ed00
 8005f58:	05fa0004 	.word	0x05fa0004

08005f5c <SysTick_Config>:
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f6c:	d301      	bcc.n	8005f72 <SysTick_Config+0x16>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e00f      	b.n	8005f92 <SysTick_Config+0x36>
 8005f72:	4a0a      	ldr	r2, [pc, #40]	@ (8005f9c <SysTick_Config+0x40>)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	6053      	str	r3, [r2, #4]
 8005f7a:	210f      	movs	r1, #15
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	f7ff ff7a 	bl	8005e78 <__NVIC_SetPriority>
 8005f84:	4b05      	ldr	r3, [pc, #20]	@ (8005f9c <SysTick_Config+0x40>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	609a      	str	r2, [r3, #8]
 8005f8a:	4b04      	ldr	r3, [pc, #16]	@ (8005f9c <SysTick_Config+0x40>)
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	2300      	movs	r3, #0
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	e000e010 	.word	0xe000e010

08005fa0 <HAL_NVIC_SetPriorityGrouping>:
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ff17 	bl	8005ddc <__NVIC_SetPriorityGrouping>
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <HAL_NVIC_SetPriority>:
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	73fb      	strb	r3, [r7, #15]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	f7ff ff2c 	bl	8005e24 <__NVIC_GetPriorityGrouping>
 8005fcc:	6178      	str	r0, [r7, #20]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	6978      	ldr	r0, [r7, #20]
 8005fd4:	f7ff ff7a 	bl	8005ecc <NVIC_EncodePriority>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fde:	4611      	mov	r1, r2
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff ff49 	bl	8005e78 <__NVIC_SetPriority>
 8005fe6:	bf00      	nop
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_NVIC_EnableIRQ>:
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	71fb      	strb	r3, [r7, #7]
 8005ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff ff1f 	bl	8005e40 <__NVIC_EnableIRQ>
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_NVIC_SystemReset>:
 800600a:	b580      	push	{r7, lr}
 800600c:	af00      	add	r7, sp, #0
 800600e:	f7ff ff8f 	bl	8005f30 <__NVIC_SystemReset>

08006012 <HAL_SYSTICK_Config>:
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff ff9e 	bl	8005f5c <SysTick_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <HAL_DMA_Init>:
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_DMA_Init+0x16>
 800603e:	2301      	movs	r3, #1
 8006040:	e043      	b.n	80060ca <HAL_DMA_Init+0x9e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	4b22      	ldr	r3, [pc, #136]	@ (80060d4 <HAL_DMA_Init+0xa8>)
 800604a:	4413      	add	r3, r2
 800604c:	4a22      	ldr	r2, [pc, #136]	@ (80060d8 <HAL_DMA_Init+0xac>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	091b      	lsrs	r3, r3, #4
 8006054:	009a      	lsls	r2, r3, #2
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	641a      	str	r2, [r3, #64]	@ 0x40
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1f      	ldr	r2, [pc, #124]	@ (80060dc <HAL_DMA_Init+0xb0>)
 800605e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006076:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2020 	strb.w	r2, [r3, #32]
 80060c8:	2300      	movs	r3, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr
 80060d4:	bffdfff8 	.word	0xbffdfff8
 80060d8:	cccccccd 	.word	0xcccccccd
 80060dc:	40020000 	.word	0x40020000

080060e0 <HAL_DMA_Start_IT>:
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	2300      	movs	r3, #0
 80060f0:	75fb      	strb	r3, [r7, #23]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_DMA_Start_IT+0x20>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e04b      	b.n	8006198 <HAL_DMA_Start_IT+0xb8>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2020 	strb.w	r2, [r3, #32]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	d13a      	bne.n	800618a <HAL_DMA_Start_IT+0xaa>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	639a      	str	r2, [r3, #56]	@ 0x38
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0201 	bic.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f9eb 	bl	8006514 <DMA_SetConfig>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <HAL_DMA_Start_IT+0x78>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 020e 	orr.w	r2, r2, #14
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	e00f      	b.n	8006178 <HAL_DMA_Start_IT+0x98>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0204 	bic.w	r2, r2, #4
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 020a 	orr.w	r2, r2, #10
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e005      	b.n	8006196 <HAL_DMA_Start_IT+0xb6>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2020 	strb.w	r2, [r3, #32]
 8006192:	2302      	movs	r3, #2
 8006194:	75fb      	strb	r3, [r7, #23]
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_DMA_Abort>:
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	2300      	movs	r3, #0
 80061aa:	73fb      	strb	r3, [r7, #15]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d008      	beq.n	80061ca <HAL_DMA_Abort+0x2a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2204      	movs	r2, #4
 80061bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2020 	strb.w	r2, [r3, #32]
 80061c6:	2301      	movs	r3, #1
 80061c8:	e020      	b.n	800620c <HAL_DMA_Abort+0x6c>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 020e 	bic.w	r2, r2, #14
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f2:	2101      	movs	r1, #1
 80061f4:	fa01 f202 	lsl.w	r2, r1, r2
 80061f8:	605a      	str	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2020 	strb.w	r2, [r3, #32]
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
	...

08006218 <HAL_DMA_Abort_IT>:
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d005      	beq.n	800623c <HAL_DMA_Abort_IT+0x24>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2204      	movs	r2, #4
 8006234:	639a      	str	r2, [r3, #56]	@ 0x38
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
 800623a:	e051      	b.n	80062e0 <HAL_DMA_Abort_IT+0xc8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 020e 	bic.w	r2, r2, #14
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0201 	bic.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a22      	ldr	r2, [pc, #136]	@ (80062ec <HAL_DMA_Abort_IT+0xd4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d029      	beq.n	80062ba <HAL_DMA_Abort_IT+0xa2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a21      	ldr	r2, [pc, #132]	@ (80062f0 <HAL_DMA_Abort_IT+0xd8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d022      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x9e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1f      	ldr	r2, [pc, #124]	@ (80062f4 <HAL_DMA_Abort_IT+0xdc>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d01a      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x98>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1e      	ldr	r2, [pc, #120]	@ (80062f8 <HAL_DMA_Abort_IT+0xe0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d012      	beq.n	80062aa <HAL_DMA_Abort_IT+0x92>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1c      	ldr	r2, [pc, #112]	@ (80062fc <HAL_DMA_Abort_IT+0xe4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00a      	beq.n	80062a4 <HAL_DMA_Abort_IT+0x8c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1b      	ldr	r2, [pc, #108]	@ (8006300 <HAL_DMA_Abort_IT+0xe8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d102      	bne.n	800629e <HAL_DMA_Abort_IT+0x86>
 8006298:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800629c:	e00e      	b.n	80062bc <HAL_DMA_Abort_IT+0xa4>
 800629e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062a2:	e00b      	b.n	80062bc <HAL_DMA_Abort_IT+0xa4>
 80062a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80062a8:	e008      	b.n	80062bc <HAL_DMA_Abort_IT+0xa4>
 80062aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062ae:	e005      	b.n	80062bc <HAL_DMA_Abort_IT+0xa4>
 80062b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062b4:	e002      	b.n	80062bc <HAL_DMA_Abort_IT+0xa4>
 80062b6:	2310      	movs	r3, #16
 80062b8:	e000      	b.n	80062bc <HAL_DMA_Abort_IT+0xa4>
 80062ba:	2301      	movs	r3, #1
 80062bc:	4a11      	ldr	r2, [pc, #68]	@ (8006304 <HAL_DMA_Abort_IT+0xec>)
 80062be:	6053      	str	r3, [r2, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2020 	strb.w	r2, [r3, #32]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_DMA_Abort_IT+0xc8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40020008 	.word	0x40020008
 80062f0:	4002001c 	.word	0x4002001c
 80062f4:	40020030 	.word	0x40020030
 80062f8:	40020044 	.word	0x40020044
 80062fc:	40020058 	.word	0x40020058
 8006300:	4002006c 	.word	0x4002006c
 8006304:	40020000 	.word	0x40020000

08006308 <HAL_DMA_IRQHandler>:
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006324:	2204      	movs	r2, #4
 8006326:	409a      	lsls	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d04f      	beq.n	80063d0 <HAL_DMA_IRQHandler+0xc8>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d04a      	beq.n	80063d0 <HAL_DMA_IRQHandler+0xc8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d107      	bne.n	8006358 <HAL_DMA_IRQHandler+0x50>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0204 	bic.w	r2, r2, #4
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a66      	ldr	r2, [pc, #408]	@ (80064f8 <HAL_DMA_IRQHandler+0x1f0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d029      	beq.n	80063b6 <HAL_DMA_IRQHandler+0xae>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a65      	ldr	r2, [pc, #404]	@ (80064fc <HAL_DMA_IRQHandler+0x1f4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d022      	beq.n	80063b2 <HAL_DMA_IRQHandler+0xaa>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a63      	ldr	r2, [pc, #396]	@ (8006500 <HAL_DMA_IRQHandler+0x1f8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d01a      	beq.n	80063ac <HAL_DMA_IRQHandler+0xa4>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a62      	ldr	r2, [pc, #392]	@ (8006504 <HAL_DMA_IRQHandler+0x1fc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d012      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x9e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a60      	ldr	r2, [pc, #384]	@ (8006508 <HAL_DMA_IRQHandler+0x200>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00a      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x98>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a5f      	ldr	r2, [pc, #380]	@ (800650c <HAL_DMA_IRQHandler+0x204>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d102      	bne.n	800639a <HAL_DMA_IRQHandler+0x92>
 8006394:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006398:	e00e      	b.n	80063b8 <HAL_DMA_IRQHandler+0xb0>
 800639a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800639e:	e00b      	b.n	80063b8 <HAL_DMA_IRQHandler+0xb0>
 80063a0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80063a4:	e008      	b.n	80063b8 <HAL_DMA_IRQHandler+0xb0>
 80063a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80063aa:	e005      	b.n	80063b8 <HAL_DMA_IRQHandler+0xb0>
 80063ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063b0:	e002      	b.n	80063b8 <HAL_DMA_IRQHandler+0xb0>
 80063b2:	2340      	movs	r3, #64	@ 0x40
 80063b4:	e000      	b.n	80063b8 <HAL_DMA_IRQHandler+0xb0>
 80063b6:	2304      	movs	r3, #4
 80063b8:	4a55      	ldr	r2, [pc, #340]	@ (8006510 <HAL_DMA_IRQHandler+0x208>)
 80063ba:	6053      	str	r3, [r2, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8094 	beq.w	80064ee <HAL_DMA_IRQHandler+0x1e6>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
 80063ce:	e08e      	b.n	80064ee <HAL_DMA_IRQHandler+0x1e6>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d4:	2202      	movs	r2, #2
 80063d6:	409a      	lsls	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d056      	beq.n	800648e <HAL_DMA_IRQHandler+0x186>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d051      	beq.n	800648e <HAL_DMA_IRQHandler+0x186>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10b      	bne.n	8006410 <HAL_DMA_IRQHandler+0x108>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 020a 	bic.w	r2, r2, #10
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a38      	ldr	r2, [pc, #224]	@ (80064f8 <HAL_DMA_IRQHandler+0x1f0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d029      	beq.n	800646e <HAL_DMA_IRQHandler+0x166>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a37      	ldr	r2, [pc, #220]	@ (80064fc <HAL_DMA_IRQHandler+0x1f4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d022      	beq.n	800646a <HAL_DMA_IRQHandler+0x162>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a35      	ldr	r2, [pc, #212]	@ (8006500 <HAL_DMA_IRQHandler+0x1f8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01a      	beq.n	8006464 <HAL_DMA_IRQHandler+0x15c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a34      	ldr	r2, [pc, #208]	@ (8006504 <HAL_DMA_IRQHandler+0x1fc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d012      	beq.n	800645e <HAL_DMA_IRQHandler+0x156>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a32      	ldr	r2, [pc, #200]	@ (8006508 <HAL_DMA_IRQHandler+0x200>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00a      	beq.n	8006458 <HAL_DMA_IRQHandler+0x150>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a31      	ldr	r2, [pc, #196]	@ (800650c <HAL_DMA_IRQHandler+0x204>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d102      	bne.n	8006452 <HAL_DMA_IRQHandler+0x14a>
 800644c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006450:	e00e      	b.n	8006470 <HAL_DMA_IRQHandler+0x168>
 8006452:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006456:	e00b      	b.n	8006470 <HAL_DMA_IRQHandler+0x168>
 8006458:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800645c:	e008      	b.n	8006470 <HAL_DMA_IRQHandler+0x168>
 800645e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006462:	e005      	b.n	8006470 <HAL_DMA_IRQHandler+0x168>
 8006464:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006468:	e002      	b.n	8006470 <HAL_DMA_IRQHandler+0x168>
 800646a:	2320      	movs	r3, #32
 800646c:	e000      	b.n	8006470 <HAL_DMA_IRQHandler+0x168>
 800646e:	2302      	movs	r3, #2
 8006470:	4a27      	ldr	r2, [pc, #156]	@ (8006510 <HAL_DMA_IRQHandler+0x208>)
 8006472:	6053      	str	r3, [r2, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2020 	strb.w	r2, [r3, #32]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006480:	2b00      	cmp	r3, #0
 8006482:	d034      	beq.n	80064ee <HAL_DMA_IRQHandler+0x1e6>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
 800648c:	e02f      	b.n	80064ee <HAL_DMA_IRQHandler+0x1e6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	2208      	movs	r2, #8
 8006494:	409a      	lsls	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d028      	beq.n	80064f0 <HAL_DMA_IRQHandler+0x1e8>
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d023      	beq.n	80064f0 <HAL_DMA_IRQHandler+0x1e8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 020e 	bic.w	r2, r2, #14
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c0:	2101      	movs	r1, #1
 80064c2:	fa01 f202 	lsl.w	r2, r1, r2
 80064c6:	605a      	str	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2020 	strb.w	r2, [r3, #32]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <HAL_DMA_IRQHandler+0x1e8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40020008 	.word	0x40020008
 80064fc:	4002001c 	.word	0x4002001c
 8006500:	40020030 	.word	0x40020030
 8006504:	40020044 	.word	0x40020044
 8006508:	40020058 	.word	0x40020058
 800650c:	4002006c 	.word	0x4002006c
 8006510:	40020000 	.word	0x40020000

08006514 <DMA_SetConfig>:
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652a:	2101      	movs	r1, #1
 800652c:	fa01 f202 	lsl.w	r2, r1, r2
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	605a      	str	r2, [r3, #4]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b10      	cmp	r3, #16
 8006540:	d108      	bne.n	8006554 <DMA_SetConfig+0x40>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	609a      	str	r2, [r3, #8]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	e007      	b.n	8006564 <DMA_SetConfig+0x50>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	609a      	str	r2, [r3, #8]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]
 8006564:	bf00      	nop
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr
	...

08006570 <HAL_FLASH_Program>:
 8006570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	e9c7 2300 	strd	r2, r3, [r7]
 800657e:	2301      	movs	r3, #1
 8006580:	75fb      	strb	r3, [r7, #23]
 8006582:	2300      	movs	r3, #0
 8006584:	75bb      	strb	r3, [r7, #22]
 8006586:	2300      	movs	r3, #0
 8006588:	757b      	strb	r3, [r7, #21]
 800658a:	4b2f      	ldr	r3, [pc, #188]	@ (8006648 <HAL_FLASH_Program+0xd8>)
 800658c:	7e1b      	ldrb	r3, [r3, #24]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <HAL_FLASH_Program+0x26>
 8006592:	2302      	movs	r3, #2
 8006594:	e054      	b.n	8006640 <HAL_FLASH_Program+0xd0>
 8006596:	4b2c      	ldr	r3, [pc, #176]	@ (8006648 <HAL_FLASH_Program+0xd8>)
 8006598:	2201      	movs	r2, #1
 800659a:	761a      	strb	r2, [r3, #24]
 800659c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80065a0:	f000 f8a8 	bl	80066f4 <FLASH_WaitForLastOperation>
 80065a4:	4603      	mov	r3, r0
 80065a6:	75fb      	strb	r3, [r7, #23]
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d144      	bne.n	8006638 <HAL_FLASH_Program+0xc8>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d102      	bne.n	80065ba <HAL_FLASH_Program+0x4a>
 80065b4:	2301      	movs	r3, #1
 80065b6:	757b      	strb	r3, [r7, #21]
 80065b8:	e007      	b.n	80065ca <HAL_FLASH_Program+0x5a>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d102      	bne.n	80065c6 <HAL_FLASH_Program+0x56>
 80065c0:	2302      	movs	r3, #2
 80065c2:	757b      	strb	r3, [r7, #21]
 80065c4:	e001      	b.n	80065ca <HAL_FLASH_Program+0x5a>
 80065c6:	2304      	movs	r3, #4
 80065c8:	757b      	strb	r3, [r7, #21]
 80065ca:	2300      	movs	r3, #0
 80065cc:	75bb      	strb	r3, [r7, #22]
 80065ce:	e02d      	b.n	800662c <HAL_FLASH_Program+0xbc>
 80065d0:	7dbb      	ldrb	r3, [r7, #22]
 80065d2:	005a      	lsls	r2, r3, #1
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	eb02 0c03 	add.w	ip, r2, r3
 80065da:	7dbb      	ldrb	r3, [r7, #22]
 80065dc:	0119      	lsls	r1, r3, #4
 80065de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065e2:	f1c1 0620 	rsb	r6, r1, #32
 80065e6:	f1a1 0020 	sub.w	r0, r1, #32
 80065ea:	fa22 f401 	lsr.w	r4, r2, r1
 80065ee:	fa03 f606 	lsl.w	r6, r3, r6
 80065f2:	4334      	orrs	r4, r6
 80065f4:	fa23 f000 	lsr.w	r0, r3, r0
 80065f8:	4304      	orrs	r4, r0
 80065fa:	fa23 f501 	lsr.w	r5, r3, r1
 80065fe:	b2a3      	uxth	r3, r4
 8006600:	4619      	mov	r1, r3
 8006602:	4660      	mov	r0, ip
 8006604:	f000 f85a 	bl	80066bc <FLASH_Program_HalfWord>
 8006608:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800660c:	f000 f872 	bl	80066f4 <FLASH_WaitForLastOperation>
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]
 8006614:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <HAL_FLASH_Program+0xdc>)
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	4a0c      	ldr	r2, [pc, #48]	@ (800664c <HAL_FLASH_Program+0xdc>)
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	6113      	str	r3, [r2, #16]
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d107      	bne.n	8006636 <HAL_FLASH_Program+0xc6>
 8006626:	7dbb      	ldrb	r3, [r7, #22]
 8006628:	3301      	adds	r3, #1
 800662a:	75bb      	strb	r3, [r7, #22]
 800662c:	7dba      	ldrb	r2, [r7, #22]
 800662e:	7d7b      	ldrb	r3, [r7, #21]
 8006630:	429a      	cmp	r2, r3
 8006632:	d3cd      	bcc.n	80065d0 <HAL_FLASH_Program+0x60>
 8006634:	e000      	b.n	8006638 <HAL_FLASH_Program+0xc8>
 8006636:	bf00      	nop
 8006638:	4b03      	ldr	r3, [pc, #12]	@ (8006648 <HAL_FLASH_Program+0xd8>)
 800663a:	2200      	movs	r2, #0
 800663c:	761a      	strb	r2, [r3, #24]
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	4618      	mov	r0, r3
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006648:	200007d8 	.word	0x200007d8
 800664c:	40022000 	.word	0x40022000

08006650 <HAL_FLASH_Unlock>:
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	2300      	movs	r3, #0
 8006658:	71fb      	strb	r3, [r7, #7]
 800665a:	4b0d      	ldr	r3, [pc, #52]	@ (8006690 <HAL_FLASH_Unlock+0x40>)
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <HAL_FLASH_Unlock+0x32>
 8006666:	4b0a      	ldr	r3, [pc, #40]	@ (8006690 <HAL_FLASH_Unlock+0x40>)
 8006668:	4a0a      	ldr	r2, [pc, #40]	@ (8006694 <HAL_FLASH_Unlock+0x44>)
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	4b08      	ldr	r3, [pc, #32]	@ (8006690 <HAL_FLASH_Unlock+0x40>)
 800666e:	4a0a      	ldr	r2, [pc, #40]	@ (8006698 <HAL_FLASH_Unlock+0x48>)
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <HAL_FLASH_Unlock+0x40>)
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_FLASH_Unlock+0x32>
 800667e:	2301      	movs	r3, #1
 8006680:	71fb      	strb	r3, [r7, #7]
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40022000 	.word	0x40022000
 8006694:	45670123 	.word	0x45670123
 8006698:	cdef89ab 	.word	0xcdef89ab

0800669c <HAL_FLASH_Lock>:
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
 80066a0:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <HAL_FLASH_Lock+0x1c>)
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	4a04      	ldr	r2, [pc, #16]	@ (80066b8 <HAL_FLASH_Lock+0x1c>)
 80066a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066aa:	6113      	str	r3, [r2, #16]
 80066ac:	2300      	movs	r3, #0
 80066ae:	4618      	mov	r0, r3
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40022000 	.word	0x40022000

080066bc <FLASH_Program_HalfWord>:
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	807b      	strh	r3, [r7, #2]
 80066c8:	4b08      	ldr	r3, [pc, #32]	@ (80066ec <FLASH_Program_HalfWord+0x30>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	61da      	str	r2, [r3, #28]
 80066ce:	4b08      	ldr	r3, [pc, #32]	@ (80066f0 <FLASH_Program_HalfWord+0x34>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	4a07      	ldr	r2, [pc, #28]	@ (80066f0 <FLASH_Program_HalfWord+0x34>)
 80066d4:	f043 0301 	orr.w	r3, r3, #1
 80066d8:	6113      	str	r3, [r2, #16]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	887a      	ldrh	r2, [r7, #2]
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	200007d8 	.word	0x200007d8
 80066f0:	40022000 	.word	0x40022000

080066f4 <FLASH_WaitForLastOperation>:
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	f7fe fc6a 	bl	8004fd4 <HAL_GetTick>
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	e010      	b.n	8006726 <FLASH_WaitForLastOperation+0x32>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d00c      	beq.n	8006726 <FLASH_WaitForLastOperation+0x32>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <FLASH_WaitForLastOperation+0x2e>
 8006712:	f7fe fc5f 	bl	8004fd4 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	429a      	cmp	r2, r3
 8006720:	d201      	bcs.n	8006726 <FLASH_WaitForLastOperation+0x32>
 8006722:	2303      	movs	r3, #3
 8006724:	e025      	b.n	8006772 <FLASH_WaitForLastOperation+0x7e>
 8006726:	4b15      	ldr	r3, [pc, #84]	@ (800677c <FLASH_WaitForLastOperation+0x88>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e8      	bne.n	8006704 <FLASH_WaitForLastOperation+0x10>
 8006732:	4b12      	ldr	r3, [pc, #72]	@ (800677c <FLASH_WaitForLastOperation+0x88>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <FLASH_WaitForLastOperation+0x50>
 800673e:	4b0f      	ldr	r3, [pc, #60]	@ (800677c <FLASH_WaitForLastOperation+0x88>)
 8006740:	2220      	movs	r2, #32
 8006742:	60da      	str	r2, [r3, #12]
 8006744:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <FLASH_WaitForLastOperation+0x88>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0310 	and.w	r3, r3, #16
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <FLASH_WaitForLastOperation+0x74>
 8006750:	4b0a      	ldr	r3, [pc, #40]	@ (800677c <FLASH_WaitForLastOperation+0x88>)
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <FLASH_WaitForLastOperation+0x74>
 800675c:	4b07      	ldr	r3, [pc, #28]	@ (800677c <FLASH_WaitForLastOperation+0x88>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <FLASH_WaitForLastOperation+0x7c>
 8006768:	f000 f80a 	bl	8006780 <FLASH_SetErrorCode>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <FLASH_WaitForLastOperation+0x7e>
 8006770:	2300      	movs	r3, #0
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40022000 	.word	0x40022000

08006780 <FLASH_SetErrorCode>:
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	2300      	movs	r3, #0
 8006788:	607b      	str	r3, [r7, #4]
 800678a:	4b23      	ldr	r3, [pc, #140]	@ (8006818 <FLASH_SetErrorCode+0x98>)
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <FLASH_SetErrorCode+0x2a>
 8006796:	4b21      	ldr	r3, [pc, #132]	@ (800681c <FLASH_SetErrorCode+0x9c>)
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f043 0302 	orr.w	r3, r3, #2
 800679e:	4a1f      	ldr	r2, [pc, #124]	@ (800681c <FLASH_SetErrorCode+0x9c>)
 80067a0:	61d3      	str	r3, [r2, #28]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f043 0310 	orr.w	r3, r3, #16
 80067a8:	607b      	str	r3, [r7, #4]
 80067aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006818 <FLASH_SetErrorCode+0x98>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <FLASH_SetErrorCode+0x4a>
 80067b6:	4b19      	ldr	r3, [pc, #100]	@ (800681c <FLASH_SetErrorCode+0x9c>)
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f043 0301 	orr.w	r3, r3, #1
 80067be:	4a17      	ldr	r2, [pc, #92]	@ (800681c <FLASH_SetErrorCode+0x9c>)
 80067c0:	61d3      	str	r3, [r2, #28]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f043 0304 	orr.w	r3, r3, #4
 80067c8:	607b      	str	r3, [r7, #4]
 80067ca:	4b13      	ldr	r3, [pc, #76]	@ (8006818 <FLASH_SetErrorCode+0x98>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <FLASH_SetErrorCode+0x6e>
 80067d6:	4b11      	ldr	r3, [pc, #68]	@ (800681c <FLASH_SetErrorCode+0x9c>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f043 0304 	orr.w	r3, r3, #4
 80067de:	4a0f      	ldr	r2, [pc, #60]	@ (800681c <FLASH_SetErrorCode+0x9c>)
 80067e0:	61d3      	str	r3, [r2, #28]
 80067e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006818 <FLASH_SetErrorCode+0x98>)
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006818 <FLASH_SetErrorCode+0x98>)
 80067e8:	f023 0301 	bic.w	r3, r3, #1
 80067ec:	61d3      	str	r3, [r2, #28]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f240 1201 	movw	r2, #257	@ 0x101
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d106      	bne.n	8006806 <FLASH_SetErrorCode+0x86>
 80067f8:	4b07      	ldr	r3, [pc, #28]	@ (8006818 <FLASH_SetErrorCode+0x98>)
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	4a06      	ldr	r2, [pc, #24]	@ (8006818 <FLASH_SetErrorCode+0x98>)
 80067fe:	f023 0301 	bic.w	r3, r3, #1
 8006802:	61d3      	str	r3, [r2, #28]
 8006804:	e002      	b.n	800680c <FLASH_SetErrorCode+0x8c>
 8006806:	4a04      	ldr	r2, [pc, #16]	@ (8006818 <FLASH_SetErrorCode+0x98>)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60d3      	str	r3, [r2, #12]
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40022000 	.word	0x40022000
 800681c:	200007d8 	.word	0x200007d8

08006820 <HAL_FLASHEx_Erase>:
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	4b2f      	ldr	r3, [pc, #188]	@ (80068f0 <HAL_FLASHEx_Erase+0xd0>)
 8006834:	7e1b      	ldrb	r3, [r3, #24]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_FLASHEx_Erase+0x1e>
 800683a:	2302      	movs	r3, #2
 800683c:	e053      	b.n	80068e6 <HAL_FLASHEx_Erase+0xc6>
 800683e:	4b2c      	ldr	r3, [pc, #176]	@ (80068f0 <HAL_FLASHEx_Erase+0xd0>)
 8006840:	2201      	movs	r2, #1
 8006842:	761a      	strb	r2, [r3, #24]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d116      	bne.n	800687a <HAL_FLASHEx_Erase+0x5a>
 800684c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006850:	f7ff ff50 	bl	80066f4 <FLASH_WaitForLastOperation>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d141      	bne.n	80068de <HAL_FLASHEx_Erase+0xbe>
 800685a:	2001      	movs	r0, #1
 800685c:	f000 f84c 	bl	80068f8 <FLASH_MassErase>
 8006860:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006864:	f7ff ff46 	bl	80066f4 <FLASH_WaitForLastOperation>
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
 800686c:	4b21      	ldr	r3, [pc, #132]	@ (80068f4 <HAL_FLASHEx_Erase+0xd4>)
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	4a20      	ldr	r2, [pc, #128]	@ (80068f4 <HAL_FLASHEx_Erase+0xd4>)
 8006872:	f023 0304 	bic.w	r3, r3, #4
 8006876:	6113      	str	r3, [r2, #16]
 8006878:	e031      	b.n	80068de <HAL_FLASHEx_Erase+0xbe>
 800687a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800687e:	f7ff ff39 	bl	80066f4 <FLASH_WaitForLastOperation>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d12a      	bne.n	80068de <HAL_FLASHEx_Erase+0xbe>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	f04f 32ff 	mov.w	r2, #4294967295
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	e019      	b.n	80068cc <HAL_FLASHEx_Erase+0xac>
 8006898:	68b8      	ldr	r0, [r7, #8]
 800689a:	f000 f849 	bl	8006930 <FLASH_PageErase>
 800689e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80068a2:	f7ff ff27 	bl	80066f4 <FLASH_WaitForLastOperation>
 80068a6:	4603      	mov	r3, r0
 80068a8:	73fb      	strb	r3, [r7, #15]
 80068aa:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <HAL_FLASHEx_Erase+0xd4>)
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <HAL_FLASHEx_Erase+0xd4>)
 80068b0:	f023 0302 	bic.w	r3, r3, #2
 80068b4:	6113      	str	r3, [r2, #16]
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_FLASHEx_Erase+0xa4>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e00c      	b.n	80068de <HAL_FLASHEx_Erase+0xbe>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068ca:	60bb      	str	r3, [r7, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	029a      	lsls	r2, r3, #10
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	4413      	add	r3, r2
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d3dc      	bcc.n	8006898 <HAL_FLASHEx_Erase+0x78>
 80068de:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <HAL_FLASHEx_Erase+0xd0>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	761a      	strb	r2, [r3, #24]
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	200007d8 	.word	0x200007d8
 80068f4:	40022000 	.word	0x40022000

080068f8 <FLASH_MassErase>:
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	4b09      	ldr	r3, [pc, #36]	@ (8006928 <FLASH_MassErase+0x30>)
 8006902:	2200      	movs	r2, #0
 8006904:	61da      	str	r2, [r3, #28]
 8006906:	4b09      	ldr	r3, [pc, #36]	@ (800692c <FLASH_MassErase+0x34>)
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	4a08      	ldr	r2, [pc, #32]	@ (800692c <FLASH_MassErase+0x34>)
 800690c:	f043 0304 	orr.w	r3, r3, #4
 8006910:	6113      	str	r3, [r2, #16]
 8006912:	4b06      	ldr	r3, [pc, #24]	@ (800692c <FLASH_MassErase+0x34>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	4a05      	ldr	r2, [pc, #20]	@ (800692c <FLASH_MassErase+0x34>)
 8006918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800691c:	6113      	str	r3, [r2, #16]
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr
 8006928:	200007d8 	.word	0x200007d8
 800692c:	40022000 	.word	0x40022000

08006930 <FLASH_PageErase>:
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	4b0b      	ldr	r3, [pc, #44]	@ (8006968 <FLASH_PageErase+0x38>)
 800693a:	2200      	movs	r2, #0
 800693c:	61da      	str	r2, [r3, #28]
 800693e:	4b0b      	ldr	r3, [pc, #44]	@ (800696c <FLASH_PageErase+0x3c>)
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	4a0a      	ldr	r2, [pc, #40]	@ (800696c <FLASH_PageErase+0x3c>)
 8006944:	f043 0302 	orr.w	r3, r3, #2
 8006948:	6113      	str	r3, [r2, #16]
 800694a:	4a08      	ldr	r2, [pc, #32]	@ (800696c <FLASH_PageErase+0x3c>)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6153      	str	r3, [r2, #20]
 8006950:	4b06      	ldr	r3, [pc, #24]	@ (800696c <FLASH_PageErase+0x3c>)
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	4a05      	ldr	r2, [pc, #20]	@ (800696c <FLASH_PageErase+0x3c>)
 8006956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800695a:	6113      	str	r3, [r2, #16]
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	200007d8 	.word	0x200007d8
 800696c:	40022000 	.word	0x40022000

08006970 <HAL_GPIO_Init>:
 8006970:	b480      	push	{r7}
 8006972:	b08b      	sub	sp, #44	@ 0x2c
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
 800697a:	2300      	movs	r3, #0
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
 800697e:	2300      	movs	r3, #0
 8006980:	623b      	str	r3, [r7, #32]
 8006982:	e169      	b.n	8006c58 <HAL_GPIO_Init+0x2e8>
 8006984:	2201      	movs	r2, #1
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	61fb      	str	r3, [r7, #28]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	4013      	ands	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	429a      	cmp	r2, r3
 800699e:	f040 8158 	bne.w	8006c52 <HAL_GPIO_Init+0x2e2>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	4a9a      	ldr	r2, [pc, #616]	@ (8006c10 <HAL_GPIO_Init+0x2a0>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d05e      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 80069ac:	4a98      	ldr	r2, [pc, #608]	@ (8006c10 <HAL_GPIO_Init+0x2a0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d875      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069b2:	4a98      	ldr	r2, [pc, #608]	@ (8006c14 <HAL_GPIO_Init+0x2a4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d058      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 80069b8:	4a96      	ldr	r2, [pc, #600]	@ (8006c14 <HAL_GPIO_Init+0x2a4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d86f      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069be:	4a96      	ldr	r2, [pc, #600]	@ (8006c18 <HAL_GPIO_Init+0x2a8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d052      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 80069c4:	4a94      	ldr	r2, [pc, #592]	@ (8006c18 <HAL_GPIO_Init+0x2a8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d869      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069ca:	4a94      	ldr	r2, [pc, #592]	@ (8006c1c <HAL_GPIO_Init+0x2ac>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d04c      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 80069d0:	4a92      	ldr	r2, [pc, #584]	@ (8006c1c <HAL_GPIO_Init+0x2ac>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d863      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069d6:	4a92      	ldr	r2, [pc, #584]	@ (8006c20 <HAL_GPIO_Init+0x2b0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d046      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 80069dc:	4a90      	ldr	r2, [pc, #576]	@ (8006c20 <HAL_GPIO_Init+0x2b0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d85d      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069e2:	2b12      	cmp	r3, #18
 80069e4:	d82a      	bhi.n	8006a3c <HAL_GPIO_Init+0xcc>
 80069e6:	2b12      	cmp	r3, #18
 80069e8:	d859      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069ea:	a201      	add	r2, pc, #4	@ (adr r2, 80069f0 <HAL_GPIO_Init+0x80>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a6b 	.word	0x08006a6b
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006a57 	.word	0x08006a57
 80069fc:	08006a99 	.word	0x08006a99
 8006a00:	08006a9f 	.word	0x08006a9f
 8006a04:	08006a9f 	.word	0x08006a9f
 8006a08:	08006a9f 	.word	0x08006a9f
 8006a0c:	08006a9f 	.word	0x08006a9f
 8006a10:	08006a9f 	.word	0x08006a9f
 8006a14:	08006a9f 	.word	0x08006a9f
 8006a18:	08006a9f 	.word	0x08006a9f
 8006a1c:	08006a9f 	.word	0x08006a9f
 8006a20:	08006a9f 	.word	0x08006a9f
 8006a24:	08006a9f 	.word	0x08006a9f
 8006a28:	08006a9f 	.word	0x08006a9f
 8006a2c:	08006a9f 	.word	0x08006a9f
 8006a30:	08006a9f 	.word	0x08006a9f
 8006a34:	08006a4d 	.word	0x08006a4d
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	4a79      	ldr	r2, [pc, #484]	@ (8006c24 <HAL_GPIO_Init+0x2b4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 8006a42:	e02c      	b.n	8006a9e <HAL_GPIO_Init+0x12e>
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	623b      	str	r3, [r7, #32]
 8006a4a:	e029      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	3304      	adds	r3, #4
 8006a52:	623b      	str	r3, [r7, #32]
 8006a54:	e024      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	623b      	str	r3, [r7, #32]
 8006a5e:	e01f      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	330c      	adds	r3, #12
 8006a66:	623b      	str	r3, [r7, #32]
 8006a68:	e01a      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <HAL_GPIO_Init+0x108>
 8006a72:	2304      	movs	r3, #4
 8006a74:	623b      	str	r3, [r7, #32]
 8006a76:	e013      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d105      	bne.n	8006a8c <HAL_GPIO_Init+0x11c>
 8006a80:	2308      	movs	r3, #8
 8006a82:	623b      	str	r3, [r7, #32]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	611a      	str	r2, [r3, #16]
 8006a8a:	e009      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
 8006a8c:	2308      	movs	r3, #8
 8006a8e:	623b      	str	r3, [r7, #32]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	615a      	str	r2, [r3, #20]
 8006a96:	e003      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	623b      	str	r3, [r7, #32]
 8006a9c:	e000      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
 8006a9e:	bf00      	nop
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2bff      	cmp	r3, #255	@ 0xff
 8006aa4:	d801      	bhi.n	8006aaa <HAL_GPIO_Init+0x13a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	e001      	b.n	8006aae <HAL_GPIO_Init+0x13e>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3304      	adds	r3, #4
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2bff      	cmp	r3, #255	@ 0xff
 8006ab4:	d802      	bhi.n	8006abc <HAL_GPIO_Init+0x14c>
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	e002      	b.n	8006ac2 <HAL_GPIO_Init+0x152>
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	3b08      	subs	r3, #8
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	210f      	movs	r1, #15
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	6a39      	ldr	r1, [r7, #32]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8006adc:	431a      	orrs	r2, r3
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 80b1 	beq.w	8006c52 <HAL_GPIO_Init+0x2e2>
 8006af0:	4b4d      	ldr	r3, [pc, #308]	@ (8006c28 <HAL_GPIO_Init+0x2b8>)
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	4a4c      	ldr	r2, [pc, #304]	@ (8006c28 <HAL_GPIO_Init+0x2b8>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6193      	str	r3, [r2, #24]
 8006afc:	4b4a      	ldr	r3, [pc, #296]	@ (8006c28 <HAL_GPIO_Init+0x2b8>)
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4a48      	ldr	r2, [pc, #288]	@ (8006c2c <HAL_GPIO_Init+0x2bc>)
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	089b      	lsrs	r3, r3, #2
 8006b0e:	3302      	adds	r3, #2
 8006b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	220f      	movs	r2, #15
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a40      	ldr	r2, [pc, #256]	@ (8006c30 <HAL_GPIO_Init+0x2c0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d013      	beq.n	8006b5c <HAL_GPIO_Init+0x1ec>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a3f      	ldr	r2, [pc, #252]	@ (8006c34 <HAL_GPIO_Init+0x2c4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00d      	beq.n	8006b58 <HAL_GPIO_Init+0x1e8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8006c38 <HAL_GPIO_Init+0x2c8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <HAL_GPIO_Init+0x1e4>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a3d      	ldr	r2, [pc, #244]	@ (8006c3c <HAL_GPIO_Init+0x2cc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d101      	bne.n	8006b50 <HAL_GPIO_Init+0x1e0>
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e006      	b.n	8006b5e <HAL_GPIO_Init+0x1ee>
 8006b50:	2304      	movs	r3, #4
 8006b52:	e004      	b.n	8006b5e <HAL_GPIO_Init+0x1ee>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e002      	b.n	8006b5e <HAL_GPIO_Init+0x1ee>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <HAL_GPIO_Init+0x1ee>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b60:	f002 0203 	and.w	r2, r2, #3
 8006b64:	0092      	lsls	r2, r2, #2
 8006b66:	4093      	lsls	r3, r2
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	492f      	ldr	r1, [pc, #188]	@ (8006c2c <HAL_GPIO_Init+0x2bc>)
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	089b      	lsrs	r3, r3, #2
 8006b74:	3302      	adds	r3, #2
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <HAL_GPIO_Init+0x226>
 8006b88:	4b2d      	ldr	r3, [pc, #180]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	492c      	ldr	r1, [pc, #176]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	608b      	str	r3, [r1, #8]
 8006b94:	e006      	b.n	8006ba4 <HAL_GPIO_Init+0x234>
 8006b96:	4b2a      	ldr	r3, [pc, #168]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	4928      	ldr	r1, [pc, #160]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	608b      	str	r3, [r1, #8]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d006      	beq.n	8006bbe <HAL_GPIO_Init+0x24e>
 8006bb0:	4b23      	ldr	r3, [pc, #140]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	4922      	ldr	r1, [pc, #136]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60cb      	str	r3, [r1, #12]
 8006bbc:	e006      	b.n	8006bcc <HAL_GPIO_Init+0x25c>
 8006bbe:	4b20      	ldr	r3, [pc, #128]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	491e      	ldr	r1, [pc, #120]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	60cb      	str	r3, [r1, #12]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <HAL_GPIO_Init+0x276>
 8006bd8:	4b19      	ldr	r3, [pc, #100]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	4918      	ldr	r1, [pc, #96]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	604b      	str	r3, [r1, #4]
 8006be4:	e006      	b.n	8006bf4 <HAL_GPIO_Init+0x284>
 8006be6:	4b16      	ldr	r3, [pc, #88]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	43db      	mvns	r3, r3
 8006bee:	4914      	ldr	r1, [pc, #80]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	604b      	str	r3, [r1, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d021      	beq.n	8006c44 <HAL_GPIO_Init+0x2d4>
 8006c00:	4b0f      	ldr	r3, [pc, #60]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	490e      	ldr	r1, [pc, #56]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	600b      	str	r3, [r1, #0]
 8006c0c:	e021      	b.n	8006c52 <HAL_GPIO_Init+0x2e2>
 8006c0e:	bf00      	nop
 8006c10:	10320000 	.word	0x10320000
 8006c14:	10310000 	.word	0x10310000
 8006c18:	10220000 	.word	0x10220000
 8006c1c:	10210000 	.word	0x10210000
 8006c20:	10120000 	.word	0x10120000
 8006c24:	10110000 	.word	0x10110000
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40010800 	.word	0x40010800
 8006c34:	40010c00 	.word	0x40010c00
 8006c38:	40011000 	.word	0x40011000
 8006c3c:	40011400 	.word	0x40011400
 8006c40:	40010400 	.word	0x40010400
 8006c44:	4b0b      	ldr	r3, [pc, #44]	@ (8006c74 <HAL_GPIO_Init+0x304>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	4909      	ldr	r1, [pc, #36]	@ (8006c74 <HAL_GPIO_Init+0x304>)
 8006c4e:	4013      	ands	r3, r2
 8006c50:	600b      	str	r3, [r1, #0]
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	3301      	adds	r3, #1
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f47f ae8e 	bne.w	8006984 <HAL_GPIO_Init+0x14>
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	372c      	adds	r7, #44	@ 0x2c
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr
 8006c74:	40010400 	.word	0x40010400

08006c78 <HAL_GPIO_ReadPin>:
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	807b      	strh	r3, [r7, #2]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	887b      	ldrh	r3, [r7, #2]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <HAL_GPIO_ReadPin+0x1e>
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
 8006c94:	e001      	b.n	8006c9a <HAL_GPIO_ReadPin+0x22>
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_GPIO_WritePin>:
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	807b      	strh	r3, [r7, #2]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	707b      	strb	r3, [r7, #1]
 8006cb6:	787b      	ldrb	r3, [r7, #1]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <HAL_GPIO_WritePin+0x1e>
 8006cbc:	887a      	ldrh	r2, [r7, #2]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	611a      	str	r2, [r3, #16]
 8006cc2:	e003      	b.n	8006ccc <HAL_GPIO_WritePin+0x26>
 8006cc4:	887b      	ldrh	r3, [r7, #2]
 8006cc6:	041a      	lsls	r2, r3, #16
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	611a      	str	r2, [r3, #16]
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc80      	pop	{r7}
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_GPIO_TogglePin>:
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	807b      	strh	r3, [r7, #2]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	887a      	ldrh	r2, [r7, #2]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4013      	ands	r3, r2
 8006cee:	041a      	lsls	r2, r3, #16
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	43d9      	mvns	r1, r3
 8006cf4:	887b      	ldrh	r3, [r7, #2]
 8006cf6:	400b      	ands	r3, r1
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	611a      	str	r2, [r3, #16]
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr

08006d08 <HAL_GPIO_EXTI_IRQHandler>:
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	4603      	mov	r3, r0
 8006d10:	80fb      	strh	r3, [r7, #6]
 8006d12:	4b08      	ldr	r3, [pc, #32]	@ (8006d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d006      	beq.n	8006d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
 8006d1e:	4a05      	ldr	r2, [pc, #20]	@ (8006d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	6153      	str	r3, [r2, #20]
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fb f91a 	bl	8001f60 <HAL_GPIO_EXTI_Callback>
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40010400 	.word	0x40010400

08006d38 <HAL_IWDG_Init>:
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_IWDG_Init+0x12>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e036      	b.n	8006db8 <HAL_IWDG_Init+0x80>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6852      	ldr	r2, [r2, #4]
 8006d66:	605a      	str	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6892      	ldr	r2, [r2, #8]
 8006d70:	609a      	str	r2, [r3, #8]
 8006d72:	f7fe f92f 	bl	8004fd4 <HAL_GetTick>
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	e011      	b.n	8006d9e <HAL_IWDG_Init+0x66>
 8006d7a:	f7fe f92b 	bl	8004fd4 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	f241 323c 	movw	r2, #4924	@ 0x133c
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d908      	bls.n	8006d9e <HAL_IWDG_Init+0x66>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_IWDG_Init+0x66>
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e00c      	b.n	8006db8 <HAL_IWDG_Init+0x80>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f003 0303 	and.w	r3, r3, #3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e6      	bne.n	8006d7a <HAL_IWDG_Init+0x42>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_IWDG_Refresh>:
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr
	...

08006de0 <HAL_RCC_OscConfig>:
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_RCC_OscConfig+0x12>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e272      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 8087 	beq.w	8006f0e <HAL_RCC_OscConfig+0x12e>
 8006e00:	4b92      	ldr	r3, [pc, #584]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f003 030c 	and.w	r3, r3, #12
 8006e08:	2b04      	cmp	r3, #4
 8006e0a:	d00c      	beq.n	8006e26 <HAL_RCC_OscConfig+0x46>
 8006e0c:	4b8f      	ldr	r3, [pc, #572]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f003 030c 	and.w	r3, r3, #12
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d112      	bne.n	8006e3e <HAL_RCC_OscConfig+0x5e>
 8006e18:	4b8c      	ldr	r3, [pc, #560]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e24:	d10b      	bne.n	8006e3e <HAL_RCC_OscConfig+0x5e>
 8006e26:	4b89      	ldr	r3, [pc, #548]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d06c      	beq.n	8006f0c <HAL_RCC_OscConfig+0x12c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d168      	bne.n	8006f0c <HAL_RCC_OscConfig+0x12c>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e24c      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e46:	d106      	bne.n	8006e56 <HAL_RCC_OscConfig+0x76>
 8006e48:	4b80      	ldr	r3, [pc, #512]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a7f      	ldr	r2, [pc, #508]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	e02e      	b.n	8006eb4 <HAL_RCC_OscConfig+0xd4>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10c      	bne.n	8006e78 <HAL_RCC_OscConfig+0x98>
 8006e5e:	4b7b      	ldr	r3, [pc, #492]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a7a      	ldr	r2, [pc, #488]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	4b78      	ldr	r3, [pc, #480]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a77      	ldr	r2, [pc, #476]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e01d      	b.n	8006eb4 <HAL_RCC_OscConfig+0xd4>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e80:	d10c      	bne.n	8006e9c <HAL_RCC_OscConfig+0xbc>
 8006e82:	4b72      	ldr	r3, [pc, #456]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a71      	ldr	r2, [pc, #452]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	4b6f      	ldr	r3, [pc, #444]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a6e      	ldr	r2, [pc, #440]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	e00b      	b.n	8006eb4 <HAL_RCC_OscConfig+0xd4>
 8006e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a6a      	ldr	r2, [pc, #424]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	4b68      	ldr	r3, [pc, #416]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a67      	ldr	r2, [pc, #412]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d013      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x104>
 8006ebc:	f7fe f88a 	bl	8004fd4 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0xf6>
 8006ec4:	f7fe f886 	bl	8004fd4 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b64      	cmp	r3, #100	@ 0x64
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0xf6>
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e200      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 8006ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0f0      	beq.n	8006ec4 <HAL_RCC_OscConfig+0xe4>
 8006ee2:	e014      	b.n	8006f0e <HAL_RCC_OscConfig+0x12e>
 8006ee4:	f7fe f876 	bl	8004fd4 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x11e>
 8006eec:	f7fe f872 	bl	8004fd4 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b64      	cmp	r3, #100	@ 0x64
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x11e>
 8006efa:	2303      	movs	r3, #3
 8006efc:	e1ec      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 8006efe:	4b53      	ldr	r3, [pc, #332]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <HAL_RCC_OscConfig+0x10c>
 8006f0a:	e000      	b.n	8006f0e <HAL_RCC_OscConfig+0x12e>
 8006f0c:	bf00      	nop
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d063      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x202>
 8006f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f003 030c 	and.w	r3, r3, #12
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00b      	beq.n	8006f3e <HAL_RCC_OscConfig+0x15e>
 8006f26:	4b49      	ldr	r3, [pc, #292]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f003 030c 	and.w	r3, r3, #12
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	d11c      	bne.n	8006f6c <HAL_RCC_OscConfig+0x18c>
 8006f32:	4b46      	ldr	r3, [pc, #280]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d116      	bne.n	8006f6c <HAL_RCC_OscConfig+0x18c>
 8006f3e:	4b43      	ldr	r3, [pc, #268]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <HAL_RCC_OscConfig+0x176>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d001      	beq.n	8006f56 <HAL_RCC_OscConfig+0x176>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e1c0      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 8006f56:	4b3d      	ldr	r3, [pc, #244]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	4939      	ldr	r1, [pc, #228]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]
 8006f6a:	e03a      	b.n	8006fe2 <HAL_RCC_OscConfig+0x202>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d020      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x1d6>
 8006f74:	4b36      	ldr	r3, [pc, #216]	@ (8007050 <HAL_RCC_OscConfig+0x270>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	f7fe f82b 	bl	8004fd4 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x1b4>
 8006f82:	f7fe f827 	bl	8004fd4 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x1b4>
 8006f90:	2303      	movs	r3, #3
 8006f92:	e1a1      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 8006f94:	4b2d      	ldr	r3, [pc, #180]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0f0      	beq.n	8006f82 <HAL_RCC_OscConfig+0x1a2>
 8006fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	4927      	ldr	r1, [pc, #156]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	600b      	str	r3, [r1, #0]
 8006fb4:	e015      	b.n	8006fe2 <HAL_RCC_OscConfig+0x202>
 8006fb6:	4b26      	ldr	r3, [pc, #152]	@ (8007050 <HAL_RCC_OscConfig+0x270>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	f7fe f80a 	bl	8004fd4 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x1f6>
 8006fc4:	f7fe f806 	bl	8004fd4 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x1f6>
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e180      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 8006fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1f0      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x1e4>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d03a      	beq.n	8007064 <HAL_RCC_OscConfig+0x284>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d019      	beq.n	800702a <HAL_RCC_OscConfig+0x24a>
 8006ff6:	4b17      	ldr	r3, [pc, #92]	@ (8007054 <HAL_RCC_OscConfig+0x274>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	f7fd ffea 	bl	8004fd4 <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0x236>
 8007004:	f7fd ffe6 	bl	8004fd4 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b02      	cmp	r3, #2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x236>
 8007012:	2303      	movs	r3, #3
 8007014:	e160      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 8007016:	4b0d      	ldr	r3, [pc, #52]	@ (800704c <HAL_RCC_OscConfig+0x26c>)
 8007018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0f0      	beq.n	8007004 <HAL_RCC_OscConfig+0x224>
 8007022:	2001      	movs	r0, #1
 8007024:	f000 fad0 	bl	80075c8 <RCC_Delay>
 8007028:	e01c      	b.n	8007064 <HAL_RCC_OscConfig+0x284>
 800702a:	4b0a      	ldr	r3, [pc, #40]	@ (8007054 <HAL_RCC_OscConfig+0x274>)
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	f7fd ffd0 	bl	8004fd4 <HAL_GetTick>
 8007034:	6138      	str	r0, [r7, #16]
 8007036:	e00f      	b.n	8007058 <HAL_RCC_OscConfig+0x278>
 8007038:	f7fd ffcc 	bl	8004fd4 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b02      	cmp	r3, #2
 8007044:	d908      	bls.n	8007058 <HAL_RCC_OscConfig+0x278>
 8007046:	2303      	movs	r3, #3
 8007048:	e146      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 800704a:	bf00      	nop
 800704c:	40021000 	.word	0x40021000
 8007050:	42420000 	.word	0x42420000
 8007054:	42420480 	.word	0x42420480
 8007058:	4b92      	ldr	r3, [pc, #584]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e9      	bne.n	8007038 <HAL_RCC_OscConfig+0x258>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80a6 	beq.w	80071be <HAL_RCC_OscConfig+0x3de>
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]
 8007076:	4b8b      	ldr	r3, [pc, #556]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10d      	bne.n	800709e <HAL_RCC_OscConfig+0x2be>
 8007082:	4b88      	ldr	r3, [pc, #544]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	4a87      	ldr	r2, [pc, #540]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800708c:	61d3      	str	r3, [r2, #28]
 800708e:	4b85      	ldr	r3, [pc, #532]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007096:	60bb      	str	r3, [r7, #8]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2301      	movs	r3, #1
 800709c:	75fb      	strb	r3, [r7, #23]
 800709e:	4b82      	ldr	r3, [pc, #520]	@ (80072a8 <HAL_RCC_OscConfig+0x4c8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d118      	bne.n	80070dc <HAL_RCC_OscConfig+0x2fc>
 80070aa:	4b7f      	ldr	r3, [pc, #508]	@ (80072a8 <HAL_RCC_OscConfig+0x4c8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a7e      	ldr	r2, [pc, #504]	@ (80072a8 <HAL_RCC_OscConfig+0x4c8>)
 80070b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	f7fd ff8d 	bl	8004fd4 <HAL_GetTick>
 80070ba:	6138      	str	r0, [r7, #16]
 80070bc:	e008      	b.n	80070d0 <HAL_RCC_OscConfig+0x2f0>
 80070be:	f7fd ff89 	bl	8004fd4 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b64      	cmp	r3, #100	@ 0x64
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x2f0>
 80070cc:	2303      	movs	r3, #3
 80070ce:	e103      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 80070d0:	4b75      	ldr	r3, [pc, #468]	@ (80072a8 <HAL_RCC_OscConfig+0x4c8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0f0      	beq.n	80070be <HAL_RCC_OscConfig+0x2de>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d106      	bne.n	80070f2 <HAL_RCC_OscConfig+0x312>
 80070e4:	4b6f      	ldr	r3, [pc, #444]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	4a6e      	ldr	r2, [pc, #440]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 80070ea:	f043 0301 	orr.w	r3, r3, #1
 80070ee:	6213      	str	r3, [r2, #32]
 80070f0:	e02d      	b.n	800714e <HAL_RCC_OscConfig+0x36e>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10c      	bne.n	8007114 <HAL_RCC_OscConfig+0x334>
 80070fa:	4b6a      	ldr	r3, [pc, #424]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	4a69      	ldr	r2, [pc, #420]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	6213      	str	r3, [r2, #32]
 8007106:	4b67      	ldr	r3, [pc, #412]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	4a66      	ldr	r2, [pc, #408]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 800710c:	f023 0304 	bic.w	r3, r3, #4
 8007110:	6213      	str	r3, [r2, #32]
 8007112:	e01c      	b.n	800714e <HAL_RCC_OscConfig+0x36e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b05      	cmp	r3, #5
 800711a:	d10c      	bne.n	8007136 <HAL_RCC_OscConfig+0x356>
 800711c:	4b61      	ldr	r3, [pc, #388]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	4a60      	ldr	r2, [pc, #384]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007122:	f043 0304 	orr.w	r3, r3, #4
 8007126:	6213      	str	r3, [r2, #32]
 8007128:	4b5e      	ldr	r3, [pc, #376]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	4a5d      	ldr	r2, [pc, #372]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 800712e:	f043 0301 	orr.w	r3, r3, #1
 8007132:	6213      	str	r3, [r2, #32]
 8007134:	e00b      	b.n	800714e <HAL_RCC_OscConfig+0x36e>
 8007136:	4b5b      	ldr	r3, [pc, #364]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	4a5a      	ldr	r2, [pc, #360]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	6213      	str	r3, [r2, #32]
 8007142:	4b58      	ldr	r3, [pc, #352]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	4a57      	ldr	r2, [pc, #348]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007148:	f023 0304 	bic.w	r3, r3, #4
 800714c:	6213      	str	r3, [r2, #32]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d015      	beq.n	8007182 <HAL_RCC_OscConfig+0x3a2>
 8007156:	f7fd ff3d 	bl	8004fd4 <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]
 800715c:	e00a      	b.n	8007174 <HAL_RCC_OscConfig+0x394>
 800715e:	f7fd ff39 	bl	8004fd4 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x394>
 8007170:	2303      	movs	r3, #3
 8007172:	e0b1      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 8007174:	4b4b      	ldr	r3, [pc, #300]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0ee      	beq.n	800715e <HAL_RCC_OscConfig+0x37e>
 8007180:	e014      	b.n	80071ac <HAL_RCC_OscConfig+0x3cc>
 8007182:	f7fd ff27 	bl	8004fd4 <HAL_GetTick>
 8007186:	6138      	str	r0, [r7, #16]
 8007188:	e00a      	b.n	80071a0 <HAL_RCC_OscConfig+0x3c0>
 800718a:	f7fd ff23 	bl	8004fd4 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007198:	4293      	cmp	r3, r2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x3c0>
 800719c:	2303      	movs	r3, #3
 800719e:	e09b      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 80071a0:	4b40      	ldr	r3, [pc, #256]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1ee      	bne.n	800718a <HAL_RCC_OscConfig+0x3aa>
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d105      	bne.n	80071be <HAL_RCC_OscConfig+0x3de>
 80071b2:	4b3c      	ldr	r3, [pc, #240]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	4a3b      	ldr	r2, [pc, #236]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 80071b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071bc:	61d3      	str	r3, [r2, #28]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 8087 	beq.w	80072d6 <HAL_RCC_OscConfig+0x4f6>
 80071c8:	4b36      	ldr	r3, [pc, #216]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f003 030c 	and.w	r3, r3, #12
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d061      	beq.n	8007298 <HAL_RCC_OscConfig+0x4b8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d146      	bne.n	800726a <HAL_RCC_OscConfig+0x48a>
 80071dc:	4b33      	ldr	r3, [pc, #204]	@ (80072ac <HAL_RCC_OscConfig+0x4cc>)
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	f7fd fef7 	bl	8004fd4 <HAL_GetTick>
 80071e6:	6138      	str	r0, [r7, #16]
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x41c>
 80071ea:	f7fd fef3 	bl	8004fd4 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x41c>
 80071f8:	2303      	movs	r3, #3
 80071fa:	e06d      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 80071fc:	4b29      	ldr	r3, [pc, #164]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f0      	bne.n	80071ea <HAL_RCC_OscConfig+0x40a>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007210:	d108      	bne.n	8007224 <HAL_RCC_OscConfig+0x444>
 8007212:	4b24      	ldr	r3, [pc, #144]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	4921      	ldr	r1, [pc, #132]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007220:	4313      	orrs	r3, r2
 8007222:	604b      	str	r3, [r1, #4]
 8007224:	4b1f      	ldr	r3, [pc, #124]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a19      	ldr	r1, [r3, #32]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	430b      	orrs	r3, r1
 8007236:	491b      	ldr	r1, [pc, #108]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 8007238:	4313      	orrs	r3, r2
 800723a:	604b      	str	r3, [r1, #4]
 800723c:	4b1b      	ldr	r3, [pc, #108]	@ (80072ac <HAL_RCC_OscConfig+0x4cc>)
 800723e:	2201      	movs	r2, #1
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	f7fd fec7 	bl	8004fd4 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x47c>
 800724a:	f7fd fec3 	bl	8004fd4 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x47c>
 8007258:	2303      	movs	r3, #3
 800725a:	e03d      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 800725c:	4b11      	ldr	r3, [pc, #68]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0f0      	beq.n	800724a <HAL_RCC_OscConfig+0x46a>
 8007268:	e035      	b.n	80072d6 <HAL_RCC_OscConfig+0x4f6>
 800726a:	4b10      	ldr	r3, [pc, #64]	@ (80072ac <HAL_RCC_OscConfig+0x4cc>)
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f7fd feb0 	bl	8004fd4 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x4aa>
 8007278:	f7fd feac 	bl	8004fd4 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x4aa>
 8007286:	2303      	movs	r3, #3
 8007288:	e026      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 800728a:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <HAL_RCC_OscConfig+0x4c4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x498>
 8007296:	e01e      	b.n	80072d6 <HAL_RCC_OscConfig+0x4f6>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d107      	bne.n	80072b0 <HAL_RCC_OscConfig+0x4d0>
 80072a0:	2301      	movs	r3, #1
 80072a2:	e019      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 80072a4:	40021000 	.word	0x40021000
 80072a8:	40007000 	.word	0x40007000
 80072ac:	42420060 	.word	0x42420060
 80072b0:	4b0b      	ldr	r3, [pc, #44]	@ (80072e0 <HAL_RCC_OscConfig+0x500>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d106      	bne.n	80072d2 <HAL_RCC_OscConfig+0x4f2>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d001      	beq.n	80072d6 <HAL_RCC_OscConfig+0x4f6>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <HAL_RCC_OscConfig+0x4f8>
 80072d6:	2300      	movs	r3, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	40021000 	.word	0x40021000

080072e4 <HAL_RCC_ClockConfig>:
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_RCC_ClockConfig+0x14>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e0d0      	b.n	800749a <HAL_RCC_ClockConfig+0x1b6>
 80072f8:	4b6a      	ldr	r3, [pc, #424]	@ (80074a4 <HAL_RCC_ClockConfig+0x1c0>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d910      	bls.n	8007328 <HAL_RCC_ClockConfig+0x44>
 8007306:	4b67      	ldr	r3, [pc, #412]	@ (80074a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 0207 	bic.w	r2, r3, #7
 800730e:	4965      	ldr	r1, [pc, #404]	@ (80074a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]
 8007316:	4b63      	ldr	r3, [pc, #396]	@ (80074a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d001      	beq.n	8007328 <HAL_RCC_ClockConfig+0x44>
 8007324:	2301      	movs	r3, #1
 8007326:	e0b8      	b.n	800749a <HAL_RCC_ClockConfig+0x1b6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d020      	beq.n	8007376 <HAL_RCC_ClockConfig+0x92>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d005      	beq.n	800734c <HAL_RCC_ClockConfig+0x68>
 8007340:	4b59      	ldr	r3, [pc, #356]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	4a58      	ldr	r2, [pc, #352]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007346:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800734a:	6053      	str	r3, [r2, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_RCC_ClockConfig+0x80>
 8007358:	4b53      	ldr	r3, [pc, #332]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	4a52      	ldr	r2, [pc, #328]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 800735e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007362:	6053      	str	r3, [r2, #4]
 8007364:	4b50      	ldr	r3, [pc, #320]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	494d      	ldr	r1, [pc, #308]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007372:	4313      	orrs	r3, r2
 8007374:	604b      	str	r3, [r1, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d040      	beq.n	8007404 <HAL_RCC_ClockConfig+0x120>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d107      	bne.n	800739a <HAL_RCC_ClockConfig+0xb6>
 800738a:	4b47      	ldr	r3, [pc, #284]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d115      	bne.n	80073c2 <HAL_RCC_ClockConfig+0xde>
 8007396:	2301      	movs	r3, #1
 8007398:	e07f      	b.n	800749a <HAL_RCC_ClockConfig+0x1b6>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d107      	bne.n	80073b2 <HAL_RCC_ClockConfig+0xce>
 80073a2:	4b41      	ldr	r3, [pc, #260]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d109      	bne.n	80073c2 <HAL_RCC_ClockConfig+0xde>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e073      	b.n	800749a <HAL_RCC_ClockConfig+0x1b6>
 80073b2:	4b3d      	ldr	r3, [pc, #244]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_RCC_ClockConfig+0xde>
 80073be:	2301      	movs	r3, #1
 80073c0:	e06b      	b.n	800749a <HAL_RCC_ClockConfig+0x1b6>
 80073c2:	4b39      	ldr	r3, [pc, #228]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f023 0203 	bic.w	r2, r3, #3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	4936      	ldr	r1, [pc, #216]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	604b      	str	r3, [r1, #4]
 80073d4:	f7fd fdfe 	bl	8004fd4 <HAL_GetTick>
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	e00a      	b.n	80073f2 <HAL_RCC_ClockConfig+0x10e>
 80073dc:	f7fd fdfa 	bl	8004fd4 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_ClockConfig+0x10e>
 80073ee:	2303      	movs	r3, #3
 80073f0:	e053      	b.n	800749a <HAL_RCC_ClockConfig+0x1b6>
 80073f2:	4b2d      	ldr	r3, [pc, #180]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f003 020c 	and.w	r2, r3, #12
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	429a      	cmp	r2, r3
 8007402:	d1eb      	bne.n	80073dc <HAL_RCC_ClockConfig+0xf8>
 8007404:	4b27      	ldr	r3, [pc, #156]	@ (80074a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d210      	bcs.n	8007434 <HAL_RCC_ClockConfig+0x150>
 8007412:	4b24      	ldr	r3, [pc, #144]	@ (80074a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f023 0207 	bic.w	r2, r3, #7
 800741a:	4922      	ldr	r1, [pc, #136]	@ (80074a4 <HAL_RCC_ClockConfig+0x1c0>)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	4313      	orrs	r3, r2
 8007420:	600b      	str	r3, [r1, #0]
 8007422:	4b20      	ldr	r3, [pc, #128]	@ (80074a4 <HAL_RCC_ClockConfig+0x1c0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d001      	beq.n	8007434 <HAL_RCC_ClockConfig+0x150>
 8007430:	2301      	movs	r3, #1
 8007432:	e032      	b.n	800749a <HAL_RCC_ClockConfig+0x1b6>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d008      	beq.n	8007452 <HAL_RCC_ClockConfig+0x16e>
 8007440:	4b19      	ldr	r3, [pc, #100]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	4916      	ldr	r1, [pc, #88]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 800744e:	4313      	orrs	r3, r2
 8007450:	604b      	str	r3, [r1, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0308 	and.w	r3, r3, #8
 800745a:	2b00      	cmp	r3, #0
 800745c:	d009      	beq.n	8007472 <HAL_RCC_ClockConfig+0x18e>
 800745e:	4b12      	ldr	r3, [pc, #72]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	490e      	ldr	r1, [pc, #56]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 800746e:	4313      	orrs	r3, r2
 8007470:	604b      	str	r3, [r1, #4]
 8007472:	f000 f821 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 8007476:	4602      	mov	r2, r0
 8007478:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <HAL_RCC_ClockConfig+0x1c4>)
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	091b      	lsrs	r3, r3, #4
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	490a      	ldr	r1, [pc, #40]	@ (80074ac <HAL_RCC_ClockConfig+0x1c8>)
 8007484:	5ccb      	ldrb	r3, [r1, r3]
 8007486:	fa22 f303 	lsr.w	r3, r2, r3
 800748a:	4a09      	ldr	r2, [pc, #36]	@ (80074b0 <HAL_RCC_ClockConfig+0x1cc>)
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	4b09      	ldr	r3, [pc, #36]	@ (80074b4 <HAL_RCC_ClockConfig+0x1d0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f7fd fd5c 	bl	8004f50 <HAL_InitTick>
 8007498:	2300      	movs	r3, #0
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	40022000 	.word	0x40022000
 80074a8:	40021000 	.word	0x40021000
 80074ac:	08009a8c 	.word	0x08009a8c
 80074b0:	20000038 	.word	0x20000038
 80074b4:	2000003c 	.word	0x2000003c

080074b8 <HAL_RCC_GetSysClockFreq>:
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	2300      	movs	r3, #0
 80074c4:	60bb      	str	r3, [r7, #8]
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	2300      	movs	r3, #0
 80074cc:	607b      	str	r3, [r7, #4]
 80074ce:	2300      	movs	r3, #0
 80074d0:	613b      	str	r3, [r7, #16]
 80074d2:	4b1e      	ldr	r3, [pc, #120]	@ (800754c <HAL_RCC_GetSysClockFreq+0x94>)
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f003 030c 	and.w	r3, r3, #12
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d002      	beq.n	80074e8 <HAL_RCC_GetSysClockFreq+0x30>
 80074e2:	2b08      	cmp	r3, #8
 80074e4:	d003      	beq.n	80074ee <HAL_RCC_GetSysClockFreq+0x36>
 80074e6:	e027      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x80>
 80074e8:	4b19      	ldr	r3, [pc, #100]	@ (8007550 <HAL_RCC_GetSysClockFreq+0x98>)
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	e027      	b.n	800753e <HAL_RCC_GetSysClockFreq+0x86>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	0c9b      	lsrs	r3, r3, #18
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	4a17      	ldr	r2, [pc, #92]	@ (8007554 <HAL_RCC_GetSysClockFreq+0x9c>)
 80074f8:	5cd3      	ldrb	r3, [r2, r3]
 80074fa:	607b      	str	r3, [r7, #4]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <HAL_RCC_GetSysClockFreq+0x70>
 8007506:	4b11      	ldr	r3, [pc, #68]	@ (800754c <HAL_RCC_GetSysClockFreq+0x94>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	0c5b      	lsrs	r3, r3, #17
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	4a11      	ldr	r2, [pc, #68]	@ (8007558 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007512:	5cd3      	ldrb	r3, [r2, r3]
 8007514:	60bb      	str	r3, [r7, #8]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a0d      	ldr	r2, [pc, #52]	@ (8007550 <HAL_RCC_GetSysClockFreq+0x98>)
 800751a:	fb03 f202 	mul.w	r2, r3, r2
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	fbb2 f3f3 	udiv	r3, r2, r3
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	e004      	b.n	8007532 <HAL_RCC_GetSysClockFreq+0x7a>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a0c      	ldr	r2, [pc, #48]	@ (800755c <HAL_RCC_GetSysClockFreq+0xa4>)
 800752c:	fb02 f303 	mul.w	r3, r2, r3
 8007530:	617b      	str	r3, [r7, #20]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	613b      	str	r3, [r7, #16]
 8007536:	e002      	b.n	800753e <HAL_RCC_GetSysClockFreq+0x86>
 8007538:	4b09      	ldr	r3, [pc, #36]	@ (8007560 <HAL_RCC_GetSysClockFreq+0xa8>)
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	bf00      	nop
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	4618      	mov	r0, r3
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	40021000 	.word	0x40021000
 8007550:	00f42400 	.word	0x00f42400
 8007554:	08009aa4 	.word	0x08009aa4
 8007558:	08009ab4 	.word	0x08009ab4
 800755c:	003d0900 	.word	0x003d0900
 8007560:	007a1200 	.word	0x007a1200

08007564 <HAL_RCC_GetHCLKFreq>:
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
 8007568:	4b02      	ldr	r3, [pc, #8]	@ (8007574 <HAL_RCC_GetHCLKFreq+0x10>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr
 8007574:	20000038 	.word	0x20000038

08007578 <HAL_RCC_GetPCLK1Freq>:
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
 800757c:	f7ff fff2 	bl	8007564 <HAL_RCC_GetHCLKFreq>
 8007580:	4602      	mov	r2, r0
 8007582:	4b05      	ldr	r3, [pc, #20]	@ (8007598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	4903      	ldr	r1, [pc, #12]	@ (800759c <HAL_RCC_GetPCLK1Freq+0x24>)
 800758e:	5ccb      	ldrb	r3, [r1, r3]
 8007590:	fa22 f303 	lsr.w	r3, r2, r3
 8007594:	4618      	mov	r0, r3
 8007596:	bd80      	pop	{r7, pc}
 8007598:	40021000 	.word	0x40021000
 800759c:	08009a9c 	.word	0x08009a9c

080075a0 <HAL_RCC_GetPCLK2Freq>:
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	f7ff ffde 	bl	8007564 <HAL_RCC_GetHCLKFreq>
 80075a8:	4602      	mov	r2, r0
 80075aa:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	0adb      	lsrs	r3, r3, #11
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	4903      	ldr	r1, [pc, #12]	@ (80075c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075b6:	5ccb      	ldrb	r3, [r1, r3]
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
 80075bc:	4618      	mov	r0, r3
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40021000 	.word	0x40021000
 80075c4:	08009a9c 	.word	0x08009a9c

080075c8 <RCC_Delay>:
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <RCC_Delay+0x34>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a0a      	ldr	r2, [pc, #40]	@ (8007600 <RCC_Delay+0x38>)
 80075d6:	fba2 2303 	umull	r2, r3, r2, r3
 80075da:	0a5b      	lsrs	r3, r3, #9
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	fb02 f303 	mul.w	r3, r2, r3
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	bf00      	nop
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	1e5a      	subs	r2, r3, #1
 80075ea:	60fa      	str	r2, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1f9      	bne.n	80075e4 <RCC_Delay+0x1c>
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bc80      	pop	{r7}
 80075fa:	4770      	bx	lr
 80075fc:	20000038 	.word	0x20000038
 8007600:	10624dd3 	.word	0x10624dd3

08007604 <HAL_SPI_Init>:
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_SPI_Init+0x12>
 8007612:	2301      	movs	r3, #1
 8007614:	e076      	b.n	8007704 <HAL_SPI_Init+0x100>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d108      	bne.n	8007630 <HAL_SPI_Init+0x2c>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007626:	d009      	beq.n	800763c <HAL_SPI_Init+0x38>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	61da      	str	r2, [r3, #28]
 800762e:	e005      	b.n	800763c <HAL_SPI_Init+0x38>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	611a      	str	r2, [r3, #16]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	615a      	str	r2, [r3, #20]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	629a      	str	r2, [r3, #40]	@ 0x28
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <HAL_SPI_Init+0x58>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fd fa86 	bl	8004b68 <HAL_SPI_MspInit>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076ac:	431a      	orrs	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c0:	ea42 0103 	orr.w	r1, r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	0c1a      	lsrs	r2, r3, #16
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f002 0204 	and.w	r2, r2, #4
 80076e2:	605a      	str	r2, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69da      	ldr	r2, [r3, #28]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076f2:	61da      	str	r2, [r3, #28]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007702:	2300      	movs	r3, #0
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_SPI_Transmit>:
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	4613      	mov	r3, r2
 800771a:	80fb      	strh	r3, [r7, #6]
 800771c:	f7fd fc5a 	bl	8004fd4 <HAL_GetTick>
 8007720:	61f8      	str	r0, [r7, #28]
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	837b      	strh	r3, [r7, #26]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b01      	cmp	r3, #1
 8007730:	d001      	beq.n	8007736 <HAL_SPI_Transmit+0x2a>
 8007732:	2302      	movs	r3, #2
 8007734:	e12a      	b.n	800798c <HAL_SPI_Transmit+0x280>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <HAL_SPI_Transmit+0x36>
 800773c:	88fb      	ldrh	r3, [r7, #6]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_SPI_Transmit+0x3a>
 8007742:	2301      	movs	r3, #1
 8007744:	e122      	b.n	800798c <HAL_SPI_Transmit+0x280>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_SPI_Transmit+0x48>
 8007750:	2302      	movs	r3, #2
 8007752:	e11b      	b.n	800798c <HAL_SPI_Transmit+0x280>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2203      	movs	r2, #3
 8007760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	655a      	str	r2, [r3, #84]	@ 0x54
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	88fa      	ldrh	r2, [r7, #6]
 8007774:	869a      	strh	r2, [r3, #52]	@ 0x34
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	88fa      	ldrh	r2, [r7, #6]
 800777a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	639a      	str	r2, [r3, #56]	@ 0x38
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	645a      	str	r2, [r3, #68]	@ 0x44
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	641a      	str	r2, [r3, #64]	@ 0x40
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077a2:	d10f      	bne.n	80077c4 <HAL_SPI_Transmit+0xb8>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ce:	2b40      	cmp	r3, #64	@ 0x40
 80077d0:	d007      	beq.n	80077e2 <HAL_SPI_Transmit+0xd6>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077ea:	d152      	bne.n	8007892 <HAL_SPI_Transmit+0x186>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <HAL_SPI_Transmit+0xee>
 80077f4:	8b7b      	ldrh	r3, [r7, #26]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d145      	bne.n	8007886 <HAL_SPI_Transmit+0x17a>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fe:	881a      	ldrh	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	60da      	str	r2, [r3, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780a:	1c9a      	adds	r2, r3, #2
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007814:	b29b      	uxth	r3, r3
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800781e:	e032      	b.n	8007886 <HAL_SPI_Transmit+0x17a>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d112      	bne.n	8007854 <HAL_SPI_Transmit+0x148>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007832:	881a      	ldrh	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60da      	str	r2, [r3, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783e:	1c9a      	adds	r2, r3, #2
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	631a      	str	r2, [r3, #48]	@ 0x30
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007852:	e018      	b.n	8007886 <HAL_SPI_Transmit+0x17a>
 8007854:	f7fd fbbe 	bl	8004fd4 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d803      	bhi.n	800786c <HAL_SPI_Transmit+0x160>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786a:	d102      	bne.n	8007872 <HAL_SPI_Transmit+0x166>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <HAL_SPI_Transmit+0x17a>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007882:	2303      	movs	r3, #3
 8007884:	e082      	b.n	800798c <HAL_SPI_Transmit+0x280>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800788a:	b29b      	uxth	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1c7      	bne.n	8007820 <HAL_SPI_Transmit+0x114>
 8007890:	e053      	b.n	800793a <HAL_SPI_Transmit+0x22e>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_SPI_Transmit+0x194>
 800789a:	8b7b      	ldrh	r3, [r7, #26]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d147      	bne.n	8007930 <HAL_SPI_Transmit+0x224>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	330c      	adds	r3, #12
 80078aa:	7812      	ldrb	r2, [r2, #0]
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80078c6:	e033      	b.n	8007930 <HAL_SPI_Transmit+0x224>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d113      	bne.n	80078fe <HAL_SPI_Transmit+0x1f2>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	330c      	adds	r3, #12
 80078e0:	7812      	ldrb	r2, [r2, #0]
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80078fc:	e018      	b.n	8007930 <HAL_SPI_Transmit+0x224>
 80078fe:	f7fd fb69 	bl	8004fd4 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d803      	bhi.n	8007916 <HAL_SPI_Transmit+0x20a>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d102      	bne.n	800791c <HAL_SPI_Transmit+0x210>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d109      	bne.n	8007930 <HAL_SPI_Transmit+0x224>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800792c:	2303      	movs	r3, #3
 800792e:	e02d      	b.n	800798c <HAL_SPI_Transmit+0x280>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007934:	b29b      	uxth	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1c6      	bne.n	80078c8 <HAL_SPI_Transmit+0x1bc>
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fbc4 	bl	80080cc <SPI_EndRxTxTransaction>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <HAL_SPI_Transmit+0x244>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2220      	movs	r2, #32
 800794e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <HAL_SPI_Transmit+0x262>
 8007958:	2300      	movs	r3, #0
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	617b      	str	r3, [r7, #20]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <HAL_SPI_Transmit+0x27e>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <HAL_SPI_Transmit+0x280>
 800798a:	2300      	movs	r3, #0
 800798c:	4618      	mov	r0, r3
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_SPI_Receive>:
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af02      	add	r7, sp, #8
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	4613      	mov	r3, r2
 80079a2:	80fb      	strh	r3, [r7, #6]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d001      	beq.n	80079b4 <HAL_SPI_Receive+0x20>
 80079b0:	2302      	movs	r3, #2
 80079b2:	e104      	b.n	8007bbe <HAL_SPI_Receive+0x22a>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079bc:	d112      	bne.n	80079e4 <HAL_SPI_Receive+0x50>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10e      	bne.n	80079e4 <HAL_SPI_Receive+0x50>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2204      	movs	r2, #4
 80079ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	4613      	mov	r3, r2
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	68b9      	ldr	r1, [r7, #8]
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 f8f3 	bl	8007bc6 <HAL_SPI_TransmitReceive>
 80079e0:	4603      	mov	r3, r0
 80079e2:	e0ec      	b.n	8007bbe <HAL_SPI_Receive+0x22a>
 80079e4:	f7fd faf6 	bl	8004fd4 <HAL_GetTick>
 80079e8:	6178      	str	r0, [r7, #20]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <HAL_SPI_Receive+0x62>
 80079f0:	88fb      	ldrh	r3, [r7, #6]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_SPI_Receive+0x66>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e0e1      	b.n	8007bbe <HAL_SPI_Receive+0x22a>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_SPI_Receive+0x74>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e0da      	b.n	8007bbe <HAL_SPI_Receive+0x22a>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2204      	movs	r2, #4
 8007a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	88fa      	ldrh	r2, [r7, #6]
 8007a28:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	88fa      	ldrh	r2, [r7, #6]
 8007a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	869a      	strh	r2, [r3, #52]	@ 0x34
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	645a      	str	r2, [r3, #68]	@ 0x44
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a56:	d10f      	bne.n	8007a78 <HAL_SPI_Receive+0xe4>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a82:	2b40      	cmp	r3, #64	@ 0x40
 8007a84:	d007      	beq.n	8007a96 <HAL_SPI_Receive+0x102>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d170      	bne.n	8007b80 <HAL_SPI_Receive+0x1ec>
 8007a9e:	e035      	b.n	8007b0c <HAL_SPI_Receive+0x178>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d115      	bne.n	8007ada <HAL_SPI_Receive+0x146>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f103 020c 	add.w	r2, r3, #12
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aba:	7812      	ldrb	r2, [r2, #0]
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ad8:	e018      	b.n	8007b0c <HAL_SPI_Receive+0x178>
 8007ada:	f7fd fa7b 	bl	8004fd4 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d803      	bhi.n	8007af2 <HAL_SPI_Receive+0x15e>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af0:	d102      	bne.n	8007af8 <HAL_SPI_Receive+0x164>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <HAL_SPI_Receive+0x178>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e058      	b.n	8007bbe <HAL_SPI_Receive+0x22a>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1c4      	bne.n	8007aa0 <HAL_SPI_Receive+0x10c>
 8007b16:	e038      	b.n	8007b8a <HAL_SPI_Receive+0x1f6>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d113      	bne.n	8007b4e <HAL_SPI_Receive+0x1ba>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b30:	b292      	uxth	r2, r2
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b38:	1c9a      	adds	r2, r3, #2
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b4c:	e018      	b.n	8007b80 <HAL_SPI_Receive+0x1ec>
 8007b4e:	f7fd fa41 	bl	8004fd4 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d803      	bhi.n	8007b66 <HAL_SPI_Receive+0x1d2>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b64:	d102      	bne.n	8007b6c <HAL_SPI_Receive+0x1d8>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d109      	bne.n	8007b80 <HAL_SPI_Receive+0x1ec>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e01e      	b.n	8007bbe <HAL_SPI_Receive+0x22a>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1c6      	bne.n	8007b18 <HAL_SPI_Receive+0x184>
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fa4a 	bl	8008028 <SPI_EndRxTransaction>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <HAL_SPI_Receive+0x20c>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <HAL_SPI_Receive+0x228>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e000      	b.n	8007bbe <HAL_SPI_Receive+0x22a>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <HAL_SPI_TransmitReceive>:
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b08a      	sub	sp, #40	@ 0x28
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	60b9      	str	r1, [r7, #8]
 8007bd0:	607a      	str	r2, [r7, #4]
 8007bd2:	807b      	strh	r3, [r7, #2]
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bd8:	f7fd f9fc 	bl	8004fd4 <HAL_GetTick>
 8007bdc:	6238      	str	r0, [r7, #32]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007be4:	77fb      	strb	r3, [r7, #31]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	887b      	ldrh	r3, [r7, #2]
 8007bee:	82fb      	strh	r3, [r7, #22]
 8007bf0:	7ffb      	ldrb	r3, [r7, #31]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d00c      	beq.n	8007c10 <HAL_SPI_TransmitReceive+0x4a>
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bfc:	d106      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x46>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x46>
 8007c06:	7ffb      	ldrb	r3, [r7, #31]
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d001      	beq.n	8007c10 <HAL_SPI_TransmitReceive+0x4a>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e17f      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x34a>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d005      	beq.n	8007c22 <HAL_SPI_TransmitReceive+0x5c>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <HAL_SPI_TransmitReceive+0x5c>
 8007c1c:	887b      	ldrh	r3, [r7, #2]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_SPI_TransmitReceive+0x60>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e174      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x34a>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <HAL_SPI_TransmitReceive+0x6e>
 8007c30:	2302      	movs	r3, #2
 8007c32:	e16d      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x34a>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d003      	beq.n	8007c50 <HAL_SPI_TransmitReceive+0x8a>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2205      	movs	r2, #5
 8007c4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	655a      	str	r2, [r3, #84]	@ 0x54
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	887a      	ldrh	r2, [r7, #2]
 8007c60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	887a      	ldrh	r2, [r7, #2]
 8007c66:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	887a      	ldrh	r2, [r7, #2]
 8007c72:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	887a      	ldrh	r2, [r7, #2]
 8007c78:	869a      	strh	r2, [r3, #52]	@ 0x34
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	645a      	str	r2, [r3, #68]	@ 0x44
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c90:	2b40      	cmp	r3, #64	@ 0x40
 8007c92:	d007      	beq.n	8007ca4 <HAL_SPI_TransmitReceive+0xde>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cac:	d17e      	bne.n	8007dac <HAL_SPI_TransmitReceive+0x1e6>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_SPI_TransmitReceive+0xf6>
 8007cb6:	8afb      	ldrh	r3, [r7, #22]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d16c      	bne.n	8007d96 <HAL_SPI_TransmitReceive+0x1d0>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc0:	881a      	ldrh	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60da      	str	r2, [r3, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ccc:	1c9a      	adds	r2, r3, #2
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ce0:	e059      	b.n	8007d96 <HAL_SPI_TransmitReceive+0x1d0>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d11b      	bne.n	8007d28 <HAL_SPI_TransmitReceive+0x162>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d016      	beq.n	8007d28 <HAL_SPI_TransmitReceive+0x162>
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d113      	bne.n	8007d28 <HAL_SPI_TransmitReceive+0x162>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d04:	881a      	ldrh	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60da      	str	r2, [r3, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d10:	1c9a      	adds	r2, r3, #2
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007d24:	2300      	movs	r3, #0
 8007d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d119      	bne.n	8007d6a <HAL_SPI_TransmitReceive+0x1a4>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d014      	beq.n	8007d6a <HAL_SPI_TransmitReceive+0x1a4>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d4a:	b292      	uxth	r2, r2
 8007d4c:	801a      	strh	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d52:	1c9a      	adds	r2, r3, #2
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d66:	2301      	movs	r3, #1
 8007d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d6a:	f7fd f933 	bl	8004fd4 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d80d      	bhi.n	8007d96 <HAL_SPI_TransmitReceive+0x1d0>
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d80:	d009      	beq.n	8007d96 <HAL_SPI_TransmitReceive+0x1d0>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007d92:	2303      	movs	r3, #3
 8007d94:	e0bc      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x34a>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1a0      	bne.n	8007ce2 <HAL_SPI_TransmitReceive+0x11c>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d19b      	bne.n	8007ce2 <HAL_SPI_TransmitReceive+0x11c>
 8007daa:	e082      	b.n	8007eb2 <HAL_SPI_TransmitReceive+0x2ec>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <HAL_SPI_TransmitReceive+0x1f4>
 8007db4:	8afb      	ldrh	r3, [r7, #22]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d171      	bne.n	8007e9e <HAL_SPI_TransmitReceive+0x2d8>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007de0:	e05d      	b.n	8007e9e <HAL_SPI_TransmitReceive+0x2d8>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d11c      	bne.n	8007e2a <HAL_SPI_TransmitReceive+0x264>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d017      	beq.n	8007e2a <HAL_SPI_TransmitReceive+0x264>
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d114      	bne.n	8007e2a <HAL_SPI_TransmitReceive+0x264>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	330c      	adds	r3, #12
 8007e0a:	7812      	ldrb	r2, [r2, #0]
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007e26:	2300      	movs	r3, #0
 8007e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d119      	bne.n	8007e6c <HAL_SPI_TransmitReceive+0x2a6>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d014      	beq.n	8007e6c <HAL_SPI_TransmitReceive+0x2a6>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	3b01      	subs	r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e68:	2301      	movs	r3, #1
 8007e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e6c:	f7fd f8b2 	bl	8004fd4 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d803      	bhi.n	8007e84 <HAL_SPI_TransmitReceive+0x2be>
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	d102      	bne.n	8007e8a <HAL_SPI_TransmitReceive+0x2c4>
 8007e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <HAL_SPI_TransmitReceive+0x2d8>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e038      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x34a>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d19c      	bne.n	8007de2 <HAL_SPI_TransmitReceive+0x21c>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d197      	bne.n	8007de2 <HAL_SPI_TransmitReceive+0x21c>
 8007eb2:	6a3a      	ldr	r2, [r7, #32]
 8007eb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f908 	bl	80080cc <SPI_EndRxTxTransaction>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d008      	beq.n	8007ed4 <HAL_SPI_TransmitReceive+0x30e>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	655a      	str	r2, [r3, #84]	@ 0x54
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e01d      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x34a>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <HAL_SPI_TransmitReceive+0x32c>
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	613b      	str	r3, [r7, #16]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <HAL_SPI_TransmitReceive+0x348>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x34a>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	4618      	mov	r0, r3
 8007f12:	3728      	adds	r7, #40	@ 0x28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <SPI_WaitFlagStateUntilTimeout>:
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	4613      	mov	r3, r2
 8007f26:	71fb      	strb	r3, [r7, #7]
 8007f28:	f7fd f854 	bl	8004fd4 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f30:	1a9b      	subs	r3, r3, r2
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	4413      	add	r3, r2
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	f7fd f84c 	bl	8004fd4 <HAL_GetTick>
 8007f3c:	61b8      	str	r0, [r7, #24]
 8007f3e:	4b39      	ldr	r3, [pc, #228]	@ (8008024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	015b      	lsls	r3, r3, #5
 8007f44:	0d1b      	lsrs	r3, r3, #20
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	fb02 f303 	mul.w	r3, r2, r3
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e054      	b.n	8007ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d050      	beq.n	8007ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
 8007f58:	f7fd f83c 	bl	8004fd4 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d902      	bls.n	8007f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d13d      	bne.n	8007fea <SPI_WaitFlagStateUntilTimeout+0xd2>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f7c:	605a      	str	r2, [r3, #4]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f86:	d111      	bne.n	8007fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f90:	d004      	beq.n	8007f9c <SPI_WaitFlagStateUntilTimeout+0x84>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f9a:	d107      	bne.n	8007fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fb4:	d10f      	bne.n	8007fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e017      	b.n	800801a <SPI_WaitFlagStateUntilTimeout+0x102>
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	4013      	ands	r3, r2
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	429a      	cmp	r2, r3
 8008008:	bf0c      	ite	eq
 800800a:	2301      	moveq	r3, #1
 800800c:	2300      	movne	r3, #0
 800800e:	b2db      	uxtb	r3, r3
 8008010:	461a      	mov	r2, r3
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	429a      	cmp	r2, r3
 8008016:	d19b      	bne.n	8007f50 <SPI_WaitFlagStateUntilTimeout+0x38>
 8008018:	2300      	movs	r3, #0
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	20000038 	.word	0x20000038

08008028 <SPI_EndRxTransaction>:
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800803c:	d111      	bne.n	8008062 <SPI_EndRxTransaction+0x3a>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008046:	d004      	beq.n	8008052 <SPI_EndRxTransaction+0x2a>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008050:	d107      	bne.n	8008062 <SPI_EndRxTransaction+0x3a>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800806a:	d117      	bne.n	800809c <SPI_EndRxTransaction+0x74>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008074:	d112      	bne.n	800809c <SPI_EndRxTransaction+0x74>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	2101      	movs	r1, #1
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff ff49 	bl	8007f18 <SPI_WaitFlagStateUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01a      	beq.n	80080c2 <SPI_EndRxTransaction+0x9a>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008090:	f043 0220 	orr.w	r2, r3, #32
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	655a      	str	r2, [r3, #84]	@ 0x54
 8008098:	2303      	movs	r3, #3
 800809a:	e013      	b.n	80080c4 <SPI_EndRxTransaction+0x9c>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2200      	movs	r2, #0
 80080a4:	2180      	movs	r1, #128	@ 0x80
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff ff36 	bl	8007f18 <SPI_WaitFlagStateUntilTimeout>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <SPI_EndRxTransaction+0x9a>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b6:	f043 0220 	orr.w	r2, r3, #32
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80080be:	2303      	movs	r3, #3
 80080c0:	e000      	b.n	80080c4 <SPI_EndRxTransaction+0x9c>
 80080c2:	2300      	movs	r3, #0
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <SPI_EndRxTxTransaction>:
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af02      	add	r7, sp, #8
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2201      	movs	r2, #1
 80080e0:	2102      	movs	r1, #2
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff ff18 	bl	8007f18 <SPI_WaitFlagStateUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <SPI_EndRxTxTransaction+0x32>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f2:	f043 0220 	orr.w	r2, r3, #32
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80080fa:	2303      	movs	r3, #3
 80080fc:	e013      	b.n	8008126 <SPI_EndRxTxTransaction+0x5a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2200      	movs	r2, #0
 8008106:	2180      	movs	r1, #128	@ 0x80
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff ff05 	bl	8007f18 <SPI_WaitFlagStateUntilTimeout>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <SPI_EndRxTxTransaction+0x58>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008118:	f043 0220 	orr.w	r2, r3, #32
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008120:	2303      	movs	r3, #3
 8008122:	e000      	b.n	8008126 <SPI_EndRxTxTransaction+0x5a>
 8008124:	2300      	movs	r3, #0
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <HAL_TIM_Base_Init>:
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <HAL_TIM_Base_Init+0x12>
 800813c:	2301      	movs	r3, #1
 800813e:	e041      	b.n	80081c4 <HAL_TIM_Base_Init+0x96>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <HAL_TIM_Base_Init+0x2c>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7fc fd8d 	bl	8004c74 <HAL_TIM_Base_MspInit>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	3304      	adds	r3, #4
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f000 fa5b 	bl	8008628 <TIM_Base_SetConfig>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80081c2:	2300      	movs	r3, #0
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_TIM_Base_Start_IT>:
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d001      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x18>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e03a      	b.n	800825a <HAL_TIM_Base_Start_IT+0x8e>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68da      	ldr	r2, [r3, #12]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0201 	orr.w	r2, r2, #1
 80081fa:	60da      	str	r2, [r3, #12]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a18      	ldr	r2, [pc, #96]	@ (8008264 <HAL_TIM_Base_Start_IT+0x98>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00e      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0x58>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800820e:	d009      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0x58>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a14      	ldr	r2, [pc, #80]	@ (8008268 <HAL_TIM_Base_Start_IT+0x9c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d004      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0x58>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a13      	ldr	r2, [pc, #76]	@ (800826c <HAL_TIM_Base_Start_IT+0xa0>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d111      	bne.n	8008248 <HAL_TIM_Base_Start_IT+0x7c>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b06      	cmp	r3, #6
 8008234:	d010      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x8c>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f042 0201 	orr.w	r2, r2, #1
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	e007      	b.n	8008258 <HAL_TIM_Base_Start_IT+0x8c>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0201 	orr.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	2300      	movs	r3, #0
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr
 8008264:	40012c00 	.word	0x40012c00
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800

08008270 <HAL_TIM_IRQHandler>:
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	60bb      	str	r3, [r7, #8]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d020      	beq.n	80082d4 <HAL_TIM_IRQHandler+0x64>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01b      	beq.n	80082d4 <HAL_TIM_IRQHandler+0x64>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f06f 0202 	mvn.w	r2, #2
 80082a4:	611a      	str	r2, [r3, #16]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	771a      	strb	r2, [r3, #28]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_TIM_IRQHandler+0x52>
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f998 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 80082c0:	e005      	b.n	80082ce <HAL_TIM_IRQHandler+0x5e>
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f98b 	bl	80085de <HAL_TIM_OC_DelayElapsedCallback>
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f99a 	bl	8008602 <HAL_TIM_PWM_PulseFinishedCallback>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	771a      	strb	r2, [r3, #28]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f003 0304 	and.w	r3, r3, #4
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d020      	beq.n	8008320 <HAL_TIM_IRQHandler+0xb0>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01b      	beq.n	8008320 <HAL_TIM_IRQHandler+0xb0>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0204 	mvn.w	r2, #4
 80082f0:	611a      	str	r2, [r3, #16]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2202      	movs	r2, #2
 80082f6:	771a      	strb	r2, [r3, #28]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_TIM_IRQHandler+0x9e>
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f972 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 800830c:	e005      	b.n	800831a <HAL_TIM_IRQHandler+0xaa>
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f965 	bl	80085de <HAL_TIM_OC_DelayElapsedCallback>
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f974 	bl	8008602 <HAL_TIM_PWM_PulseFinishedCallback>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	771a      	strb	r2, [r3, #28]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f003 0308 	and.w	r3, r3, #8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d020      	beq.n	800836c <HAL_TIM_IRQHandler+0xfc>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f003 0308 	and.w	r3, r3, #8
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01b      	beq.n	800836c <HAL_TIM_IRQHandler+0xfc>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0208 	mvn.w	r2, #8
 800833c:	611a      	str	r2, [r3, #16]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2204      	movs	r2, #4
 8008342:	771a      	strb	r2, [r3, #28]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_TIM_IRQHandler+0xea>
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f94c 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 8008358:	e005      	b.n	8008366 <HAL_TIM_IRQHandler+0xf6>
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f93f 	bl	80085de <HAL_TIM_OC_DelayElapsedCallback>
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f94e 	bl	8008602 <HAL_TIM_PWM_PulseFinishedCallback>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	771a      	strb	r2, [r3, #28]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f003 0310 	and.w	r3, r3, #16
 8008372:	2b00      	cmp	r3, #0
 8008374:	d020      	beq.n	80083b8 <HAL_TIM_IRQHandler+0x148>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01b      	beq.n	80083b8 <HAL_TIM_IRQHandler+0x148>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f06f 0210 	mvn.w	r2, #16
 8008388:	611a      	str	r2, [r3, #16]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2208      	movs	r2, #8
 800838e:	771a      	strb	r2, [r3, #28]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <HAL_TIM_IRQHandler+0x136>
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f926 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 80083a4:	e005      	b.n	80083b2 <HAL_TIM_IRQHandler+0x142>
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f919 	bl	80085de <HAL_TIM_OC_DelayElapsedCallback>
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f928 	bl	8008602 <HAL_TIM_PWM_PulseFinishedCallback>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	771a      	strb	r2, [r3, #28]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00c      	beq.n	80083dc <HAL_TIM_IRQHandler+0x16c>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f003 0301 	and.w	r3, r3, #1
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <HAL_TIM_IRQHandler+0x16c>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f06f 0201 	mvn.w	r2, #1
 80083d4:	611a      	str	r2, [r3, #16]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7f9 fe22 	bl	8002020 <HAL_TIM_PeriodElapsedCallback>
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00c      	beq.n	8008400 <HAL_TIM_IRQHandler+0x190>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d007      	beq.n	8008400 <HAL_TIM_IRQHandler+0x190>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80083f8:	611a      	str	r2, [r3, #16]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa7f 	bl	80088fe <HAL_TIMEx_BreakCallback>
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00c      	beq.n	8008424 <HAL_TIM_IRQHandler+0x1b4>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <HAL_TIM_IRQHandler+0x1b4>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800841c:	611a      	str	r2, [r3, #16]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f8f8 	bl	8008614 <HAL_TIM_TriggerCallback>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00c      	beq.n	8008448 <HAL_TIM_IRQHandler+0x1d8>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 0320 	and.w	r3, r3, #32
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <HAL_TIM_IRQHandler+0x1d8>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f06f 0220 	mvn.w	r2, #32
 8008440:	611a      	str	r2, [r3, #16]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fa52 	bl	80088ec <HAL_TIMEx_CommutCallback>
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_TIM_ConfigClockSource>:
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008464:	2b01      	cmp	r3, #1
 8008466:	d101      	bne.n	800846c <HAL_TIM_ConfigClockSource+0x1c>
 8008468:	2302      	movs	r3, #2
 800846a:	e0b4      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x186>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	60bb      	str	r3, [r7, #8]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800848a:	60bb      	str	r3, [r7, #8]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008492:	60bb      	str	r3, [r7, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	609a      	str	r2, [r3, #8]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084a4:	d03e      	beq.n	8008524 <HAL_TIM_ConfigClockSource+0xd4>
 80084a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084aa:	f200 8087 	bhi.w	80085bc <HAL_TIM_ConfigClockSource+0x16c>
 80084ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b2:	f000 8086 	beq.w	80085c2 <HAL_TIM_ConfigClockSource+0x172>
 80084b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ba:	d87f      	bhi.n	80085bc <HAL_TIM_ConfigClockSource+0x16c>
 80084bc:	2b70      	cmp	r3, #112	@ 0x70
 80084be:	d01a      	beq.n	80084f6 <HAL_TIM_ConfigClockSource+0xa6>
 80084c0:	2b70      	cmp	r3, #112	@ 0x70
 80084c2:	d87b      	bhi.n	80085bc <HAL_TIM_ConfigClockSource+0x16c>
 80084c4:	2b60      	cmp	r3, #96	@ 0x60
 80084c6:	d050      	beq.n	800856a <HAL_TIM_ConfigClockSource+0x11a>
 80084c8:	2b60      	cmp	r3, #96	@ 0x60
 80084ca:	d877      	bhi.n	80085bc <HAL_TIM_ConfigClockSource+0x16c>
 80084cc:	2b50      	cmp	r3, #80	@ 0x50
 80084ce:	d03c      	beq.n	800854a <HAL_TIM_ConfigClockSource+0xfa>
 80084d0:	2b50      	cmp	r3, #80	@ 0x50
 80084d2:	d873      	bhi.n	80085bc <HAL_TIM_ConfigClockSource+0x16c>
 80084d4:	2b40      	cmp	r3, #64	@ 0x40
 80084d6:	d058      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x13a>
 80084d8:	2b40      	cmp	r3, #64	@ 0x40
 80084da:	d86f      	bhi.n	80085bc <HAL_TIM_ConfigClockSource+0x16c>
 80084dc:	2b30      	cmp	r3, #48	@ 0x30
 80084de:	d064      	beq.n	80085aa <HAL_TIM_ConfigClockSource+0x15a>
 80084e0:	2b30      	cmp	r3, #48	@ 0x30
 80084e2:	d86b      	bhi.n	80085bc <HAL_TIM_ConfigClockSource+0x16c>
 80084e4:	2b20      	cmp	r3, #32
 80084e6:	d060      	beq.n	80085aa <HAL_TIM_ConfigClockSource+0x15a>
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d867      	bhi.n	80085bc <HAL_TIM_ConfigClockSource+0x16c>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d05c      	beq.n	80085aa <HAL_TIM_ConfigClockSource+0x15a>
 80084f0:	2b10      	cmp	r3, #16
 80084f2:	d05a      	beq.n	80085aa <HAL_TIM_ConfigClockSource+0x15a>
 80084f4:	e062      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x16c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	6899      	ldr	r1, [r3, #8]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f000 f974 	bl	80087f2 <TIM_ETR_SetConfig>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	60bb      	str	r3, [r7, #8]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	609a      	str	r2, [r3, #8]
 8008522:	e04f      	b.n	80085c4 <HAL_TIM_ConfigClockSource+0x174>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	6899      	ldr	r1, [r3, #8]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f000 f95d 	bl	80087f2 <TIM_ETR_SetConfig>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008546:	609a      	str	r2, [r3, #8]
 8008548:	e03c      	b.n	80085c4 <HAL_TIM_ConfigClockSource+0x174>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	6859      	ldr	r1, [r3, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	461a      	mov	r2, r3
 8008558:	f000 f8d4 	bl	8008704 <TIM_TI1_ConfigInputStage>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2150      	movs	r1, #80	@ 0x50
 8008562:	4618      	mov	r0, r3
 8008564:	f000 f92b 	bl	80087be <TIM_ITRx_SetConfig>
 8008568:	e02c      	b.n	80085c4 <HAL_TIM_ConfigClockSource+0x174>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6818      	ldr	r0, [r3, #0]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	6859      	ldr	r1, [r3, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	461a      	mov	r2, r3
 8008578:	f000 f8f2 	bl	8008760 <TIM_TI2_ConfigInputStage>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2160      	movs	r1, #96	@ 0x60
 8008582:	4618      	mov	r0, r3
 8008584:	f000 f91b 	bl	80087be <TIM_ITRx_SetConfig>
 8008588:	e01c      	b.n	80085c4 <HAL_TIM_ConfigClockSource+0x174>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6859      	ldr	r1, [r3, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	461a      	mov	r2, r3
 8008598:	f000 f8b4 	bl	8008704 <TIM_TI1_ConfigInputStage>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2140      	movs	r1, #64	@ 0x40
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 f90b 	bl	80087be <TIM_ITRx_SetConfig>
 80085a8:	e00c      	b.n	80085c4 <HAL_TIM_ConfigClockSource+0x174>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4619      	mov	r1, r3
 80085b4:	4610      	mov	r0, r2
 80085b6:	f000 f902 	bl	80087be <TIM_ITRx_SetConfig>
 80085ba:	e003      	b.n	80085c4 <HAL_TIM_ConfigClockSource+0x174>
 80085bc:	2301      	movs	r3, #1
 80085be:	73fb      	strb	r3, [r7, #15]
 80085c0:	e000      	b.n	80085c4 <HAL_TIM_ConfigClockSource+0x174>
 80085c2:	bf00      	nop
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <HAL_TIM_OC_DelayElapsedCallback>:
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bc80      	pop	{r7}
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIM_IC_CaptureCallback>:
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bc80      	pop	{r7}
 8008600:	4770      	bx	lr

08008602 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	bf00      	nop
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	bc80      	pop	{r7}
 8008612:	4770      	bx	lr

08008614 <HAL_TIM_TriggerCallback>:
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr
	...

08008628 <TIM_Base_SetConfig>:
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a2f      	ldr	r2, [pc, #188]	@ (80086f8 <TIM_Base_SetConfig+0xd0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00b      	beq.n	8008658 <TIM_Base_SetConfig+0x30>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008646:	d007      	beq.n	8008658 <TIM_Base_SetConfig+0x30>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a2c      	ldr	r2, [pc, #176]	@ (80086fc <TIM_Base_SetConfig+0xd4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d003      	beq.n	8008658 <TIM_Base_SetConfig+0x30>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a2b      	ldr	r2, [pc, #172]	@ (8008700 <TIM_Base_SetConfig+0xd8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d108      	bne.n	800866a <TIM_Base_SetConfig+0x42>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a22      	ldr	r2, [pc, #136]	@ (80086f8 <TIM_Base_SetConfig+0xd0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00b      	beq.n	800868a <TIM_Base_SetConfig+0x62>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008678:	d007      	beq.n	800868a <TIM_Base_SetConfig+0x62>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a1f      	ldr	r2, [pc, #124]	@ (80086fc <TIM_Base_SetConfig+0xd4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d003      	beq.n	800868a <TIM_Base_SetConfig+0x62>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a1e      	ldr	r2, [pc, #120]	@ (8008700 <TIM_Base_SetConfig+0xd8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d108      	bne.n	800869c <TIM_Base_SetConfig+0x74>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	629a      	str	r2, [r3, #40]	@ 0x28
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a0d      	ldr	r2, [pc, #52]	@ (80086f8 <TIM_Base_SetConfig+0xd0>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d103      	bne.n	80086d0 <TIM_Base_SetConfig+0xa8>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	615a      	str	r2, [r3, #20]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <TIM_Base_SetConfig+0xc6>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f023 0201 	bic.w	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	611a      	str	r2, [r3, #16]
 80086ee:	bf00      	nop
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr
 80086f8:	40012c00 	.word	0x40012c00
 80086fc:	40000400 	.word	0x40000400
 8008700:	40000800 	.word	0x40000800

08008704 <TIM_TI1_ConfigInputStage>:
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	f023 0201 	bic.w	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	621a      	str	r2, [r3, #32]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	613b      	str	r3, [r7, #16]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800872e:	613b      	str	r3, [r7, #16]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	613b      	str	r3, [r7, #16]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f023 030a 	bic.w	r3, r3, #10
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	619a      	str	r2, [r3, #24]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	621a      	str	r2, [r3, #32]
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <TIM_TI2_ConfigInputStage>:
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	617b      	str	r3, [r7, #20]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	f023 0210 	bic.w	r2, r3, #16
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	621a      	str	r2, [r3, #32]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800878a:	613b      	str	r3, [r7, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	031b      	lsls	r3, r3, #12
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800879c:	617b      	str	r3, [r7, #20]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	619a      	str	r2, [r3, #24]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	621a      	str	r2, [r3, #32]
 80087b4:	bf00      	nop
 80087b6:	371c      	adds	r7, #28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr

080087be <TIM_ITRx_SetConfig>:
 80087be:	b480      	push	{r7}
 80087c0:	b085      	sub	sp, #20
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	f043 0307 	orr.w	r3, r3, #7
 80087e0:	60fb      	str	r3, [r7, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	609a      	str	r2, [r3, #8]
 80087e8:	bf00      	nop
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bc80      	pop	{r7}
 80087f0:	4770      	bx	lr

080087f2 <TIM_ETR_SetConfig>:
 80087f2:	b480      	push	{r7}
 80087f4:	b087      	sub	sp, #28
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	617b      	str	r3, [r7, #20]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	021a      	lsls	r2, r3, #8
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	431a      	orrs	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	4313      	orrs	r3, r2
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	609a      	str	r2, [r3, #8]
 8008826:	bf00      	nop
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	bc80      	pop	{r7}
 800882e:	4770      	bx	lr

08008830 <HAL_TIMEx_MasterConfigSynchronization>:
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008844:	2302      	movs	r3, #2
 8008846:	e046      	b.n	80088d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	60bb      	str	r3, [r7, #8]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	4313      	orrs	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	605a      	str	r2, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a16      	ldr	r2, [pc, #88]	@ (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d00e      	beq.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008894:	d009      	beq.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a12      	ldr	r2, [pc, #72]	@ (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d004      	beq.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a10      	ldr	r2, [pc, #64]	@ (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d10c      	bne.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088b0:	60bb      	str	r3, [r7, #8]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60bb      	str	r3, [r7, #8]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	609a      	str	r2, [r3, #8]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80088d4:	2300      	movs	r3, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	bc80      	pop	{r7}
 80088de:	4770      	bx	lr
 80088e0:	40012c00 	.word	0x40012c00
 80088e4:	40000400 	.word	0x40000400
 80088e8:	40000800 	.word	0x40000800

080088ec <HAL_TIMEx_CommutCallback>:
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bc80      	pop	{r7}
 80088fc:	4770      	bx	lr

080088fe <HAL_TIMEx_BreakCallback>:
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr

08008910 <HAL_UART_Init>:
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <HAL_UART_Init+0x12>
 800891e:	2301      	movs	r3, #1
 8008920:	e042      	b.n	80089a8 <HAL_UART_Init+0x98>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <HAL_UART_Init+0x2c>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7fc f9dc 	bl	8004cf4 <HAL_UART_MspInit>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2224      	movs	r2, #36	@ 0x24
 8008940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008952:	60da      	str	r2, [r3, #12]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 ff79 	bl	800984c <UART_SetConfig>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	691a      	ldr	r2, [r3, #16]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008968:	611a      	str	r2, [r3, #16]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695a      	ldr	r2, [r3, #20]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008978:	615a      	str	r2, [r3, #20]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008988:	60da      	str	r2, [r3, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	645a      	str	r2, [r3, #68]	@ 0x44
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80089a6:	2300      	movs	r3, #0
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <HAL_UART_Transmit>:
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08a      	sub	sp, #40	@ 0x28
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	4613      	mov	r3, r2
 80089be:	80fb      	strh	r3, [r7, #6]
 80089c0:	2300      	movs	r3, #0
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d175      	bne.n	8008abc <HAL_UART_Transmit+0x10c>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d002      	beq.n	80089dc <HAL_UART_Transmit+0x2c>
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <HAL_UART_Transmit+0x30>
 80089dc:	2301      	movs	r3, #1
 80089de:	e06e      	b.n	8008abe <HAL_UART_Transmit+0x10e>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2221      	movs	r2, #33	@ 0x21
 80089ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089ee:	f7fc faf1 	bl	8004fd4 <HAL_GetTick>
 80089f2:	6178      	str	r0, [r7, #20]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	88fa      	ldrh	r2, [r7, #6]
 80089f8:	849a      	strh	r2, [r3, #36]	@ 0x24
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	88fa      	ldrh	r2, [r7, #6]
 80089fe:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a08:	d108      	bne.n	8008a1c <HAL_UART_Transmit+0x6c>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d104      	bne.n	8008a1c <HAL_UART_Transmit+0x6c>
 8008a12:	2300      	movs	r3, #0
 8008a14:	61fb      	str	r3, [r7, #28]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	61bb      	str	r3, [r7, #24]
 8008a1a:	e003      	b.n	8008a24 <HAL_UART_Transmit+0x74>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	61fb      	str	r3, [r7, #28]
 8008a20:	2300      	movs	r3, #0
 8008a22:	61bb      	str	r3, [r7, #24]
 8008a24:	e02e      	b.n	8008a84 <HAL_UART_Transmit+0xd4>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2180      	movs	r1, #128	@ 0x80
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 fc55 	bl	80092e0 <UART_WaitOnFlagUntilTimeout>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <HAL_UART_Transmit+0x98>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a44:	2303      	movs	r3, #3
 8008a46:	e03a      	b.n	8008abe <HAL_UART_Transmit+0x10e>
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10b      	bne.n	8008a66 <HAL_UART_Transmit+0xb6>
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a5c:	605a      	str	r2, [r3, #4]
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	3302      	adds	r3, #2
 8008a62:	61bb      	str	r3, [r7, #24]
 8008a64:	e007      	b.n	8008a76 <HAL_UART_Transmit+0xc6>
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	781a      	ldrb	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	605a      	str	r2, [r3, #4]
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	3301      	adds	r3, #1
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1cb      	bne.n	8008a26 <HAL_UART_Transmit+0x76>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2200      	movs	r2, #0
 8008a96:	2140      	movs	r1, #64	@ 0x40
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 fc21 	bl	80092e0 <UART_WaitOnFlagUntilTimeout>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <HAL_UART_Transmit+0x100>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008aac:	2303      	movs	r3, #3
 8008aae:	e006      	b.n	8008abe <HAL_UART_Transmit+0x10e>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e000      	b.n	8008abe <HAL_UART_Transmit+0x10e>
 8008abc:	2302      	movs	r3, #2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3720      	adds	r7, #32
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <HAL_UARTEx_ReceiveToIdle_DMA>:
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b08c      	sub	sp, #48	@ 0x30
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	80fb      	strh	r3, [r7, #6]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d146      	bne.n	8008b6e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008ae6:	88fb      	ldrh	r3, [r7, #6]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e03f      	b.n	8008b70 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	635a      	str	r2, [r3, #52]	@ 0x34
 8008afc:	88fb      	ldrh	r3, [r7, #6]
 8008afe:	461a      	mov	r2, r3
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 fc46 	bl	8009394 <UART_Start_Receive_DMA>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d125      	bne.n	8008b62 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
 8008b16:	2300      	movs	r3, #0
 8008b18:	613b      	str	r3, [r7, #16]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	613b      	str	r3, [r7, #16]
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	330c      	adds	r3, #12
 8008b32:	61bb      	str	r3, [r7, #24]
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f043 0310 	orr.w	r3, r3, #16
 8008b42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	330c      	adds	r3, #12
 8008b4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b4e:	623b      	str	r3, [r7, #32]
 8008b50:	6a39      	ldr	r1, [r7, #32]
 8008b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	61fb      	str	r3, [r7, #28]
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e5      	bne.n	8008b2c <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8008b60:	e002      	b.n	8008b68 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
 8008b62:	2301      	movs	r3, #1
 8008b64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b6c:	e000      	b.n	8008b70 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
 8008b6e:	2302      	movs	r3, #2
 8008b70:	4618      	mov	r0, r3
 8008b72:	3730      	adds	r7, #48	@ 0x30
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_UART_IRQHandler>:
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b0ba      	sub	sp, #232	@ 0xe8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10f      	bne.n	8008bde <HAL_UART_IRQHandler+0x66>
 8008bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc2:	f003 0320 	and.w	r3, r3, #32
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <HAL_UART_IRQHandler+0x66>
 8008bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_UART_IRQHandler+0x66>
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fd7a 	bl	80096d0 <UART_Receive_IT>
 8008bdc:	e25b      	b.n	8009096 <HAL_UART_IRQHandler+0x51e>
 8008bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 80de 	beq.w	8008da4 <HAL_UART_IRQHandler+0x22c>
 8008be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d106      	bne.n	8008c02 <HAL_UART_IRQHandler+0x8a>
 8008bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 80d1 	beq.w	8008da4 <HAL_UART_IRQHandler+0x22c>
 8008c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00b      	beq.n	8008c26 <HAL_UART_IRQHandler+0xae>
 8008c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d005      	beq.n	8008c26 <HAL_UART_IRQHandler+0xae>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c1e:	f043 0201 	orr.w	r2, r3, #1
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	645a      	str	r2, [r3, #68]	@ 0x44
 8008c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c2a:	f003 0304 	and.w	r3, r3, #4
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00b      	beq.n	8008c4a <HAL_UART_IRQHandler+0xd2>
 8008c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <HAL_UART_IRQHandler+0xd2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c42:	f043 0202 	orr.w	r2, r3, #2
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	645a      	str	r2, [r3, #68]	@ 0x44
 8008c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00b      	beq.n	8008c6e <HAL_UART_IRQHandler+0xf6>
 8008c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d005      	beq.n	8008c6e <HAL_UART_IRQHandler+0xf6>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c66:	f043 0204 	orr.w	r2, r3, #4
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	645a      	str	r2, [r3, #68]	@ 0x44
 8008c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d011      	beq.n	8008c9e <HAL_UART_IRQHandler+0x126>
 8008c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d105      	bne.n	8008c92 <HAL_UART_IRQHandler+0x11a>
 8008c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d005      	beq.n	8008c9e <HAL_UART_IRQHandler+0x126>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c96:	f043 0208 	orr.w	r2, r3, #8
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 81f2 	beq.w	800908c <HAL_UART_IRQHandler+0x514>
 8008ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cac:	f003 0320 	and.w	r3, r3, #32
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d008      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x14e>
 8008cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x14e>
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fd05 	bl	80096d0 <UART_Receive_IT>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bf14      	ite	ne
 8008cd4:	2301      	movne	r3, #1
 8008cd6:	2300      	moveq	r3, #0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <HAL_UART_IRQHandler+0x17a>
 8008cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d04f      	beq.n	8008d92 <HAL_UART_IRQHandler+0x21a>
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fc0f 	bl	8009516 <UART_EndRxTransfer>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d041      	beq.n	8008d8a <HAL_UART_IRQHandler+0x212>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3314      	adds	r3, #20
 8008d2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008d3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1d9      	bne.n	8008d06 <HAL_UART_IRQHandler+0x18e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d013      	beq.n	8008d82 <HAL_UART_IRQHandler+0x20a>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d5e:	4a7e      	ldr	r2, [pc, #504]	@ (8008f58 <HAL_UART_IRQHandler+0x3e0>)
 8008d60:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fd fa56 	bl	8006218 <HAL_DMA_Abort_IT>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d016      	beq.n	8008da0 <HAL_UART_IRQHandler+0x228>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	4798      	blx	r3
 8008d80:	e00e      	b.n	8008da0 <HAL_UART_IRQHandler+0x228>
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f9a5 	bl	80090d2 <HAL_UART_ErrorCallback>
 8008d88:	e00a      	b.n	8008da0 <HAL_UART_IRQHandler+0x228>
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f9a1 	bl	80090d2 <HAL_UART_ErrorCallback>
 8008d90:	e006      	b.n	8008da0 <HAL_UART_IRQHandler+0x228>
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f99d 	bl	80090d2 <HAL_UART_ErrorCallback>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8008d9e:	e175      	b.n	800908c <HAL_UART_IRQHandler+0x514>
 8008da0:	bf00      	nop
 8008da2:	e173      	b.n	800908c <HAL_UART_IRQHandler+0x514>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	f040 814f 	bne.w	800904c <HAL_UART_IRQHandler+0x4d4>
 8008dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db2:	f003 0310 	and.w	r3, r3, #16
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 8148 	beq.w	800904c <HAL_UART_IRQHandler+0x4d4>
 8008dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dc0:	f003 0310 	and.w	r3, r3, #16
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8141 	beq.w	800904c <HAL_UART_IRQHandler+0x4d4>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60bb      	str	r3, [r7, #8]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60bb      	str	r3, [r7, #8]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	60bb      	str	r3, [r7, #8]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 80b6 	beq.w	8008f5c <HAL_UART_IRQHandler+0x3e4>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8008dfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 8145 	beq.w	8009090 <HAL_UART_IRQHandler+0x518>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	f080 813e 	bcs.w	8009090 <HAL_UART_IRQHandler+0x518>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	f000 8088 	beq.w	8008f38 <HAL_UART_IRQHandler+0x3c0>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	330c      	adds	r3, #12
 8008e50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008e54:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1d9      	bne.n	8008e28 <HAL_UART_IRQHandler+0x2b0>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3314      	adds	r3, #20
 8008e7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e7e:	e853 3f00 	ldrex	r3, [r3]
 8008e82:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e86:	f023 0301 	bic.w	r3, r3, #1
 8008e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3314      	adds	r3, #20
 8008e94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e98:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e9e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ea0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e1      	bne.n	8008e74 <HAL_UART_IRQHandler+0x2fc>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3314      	adds	r3, #20
 8008eb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eba:	e853 3f00 	ldrex	r3, [r3]
 8008ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ec0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3314      	adds	r3, #20
 8008ed0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ed4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ed6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ed8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008eda:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ee2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e3      	bne.n	8008eb0 <HAL_UART_IRQHandler+0x338>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	330c      	adds	r3, #12
 8008efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f08:	f023 0310 	bic.w	r3, r3, #16
 8008f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	330c      	adds	r3, #12
 8008f16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008f1a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008f1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1e3      	bne.n	8008ef6 <HAL_UART_IRQHandler+0x37e>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fd f934 	bl	80061a0 <HAL_DMA_Abort>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7f8 ff60 	bl	8001e14 <HAL_UARTEx_RxEventCallback>
 8008f54:	e09c      	b.n	8009090 <HAL_UART_IRQHandler+0x518>
 8008f56:	bf00      	nop
 8008f58:	080095db 	.word	0x080095db
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 808e 	beq.w	8009094 <HAL_UART_IRQHandler+0x51c>
 8008f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 8089 	beq.w	8009094 <HAL_UART_IRQHandler+0x51c>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	330c      	adds	r3, #12
 8008f88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	330c      	adds	r3, #12
 8008fa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008fa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008faa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e3      	bne.n	8008f82 <HAL_UART_IRQHandler+0x40a>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3314      	adds	r3, #20
 8008fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	623b      	str	r3, [r7, #32]
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	f023 0301 	bic.w	r3, r3, #1
 8008fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3314      	adds	r3, #20
 8008fda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008fde:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e3      	bne.n	8008fba <HAL_UART_IRQHandler+0x442>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	631a      	str	r2, [r3, #48]	@ 0x30
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	330c      	adds	r3, #12
 8009006:	613b      	str	r3, [r7, #16]
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0310 	bic.w	r3, r3, #16
 8009016:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	330c      	adds	r3, #12
 8009020:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009024:	61fa      	str	r2, [r7, #28]
 8009026:	61bb      	str	r3, [r7, #24]
 8009028:	69b9      	ldr	r1, [r7, #24]
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	617b      	str	r3, [r7, #20]
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e3      	bne.n	8009000 <HAL_UART_IRQHandler+0x488>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	635a      	str	r2, [r3, #52]	@ 0x34
 800903e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7f8 fee5 	bl	8001e14 <HAL_UARTEx_RxEventCallback>
 800904a:	e023      	b.n	8009094 <HAL_UART_IRQHandler+0x51c>
 800904c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009054:	2b00      	cmp	r3, #0
 8009056:	d009      	beq.n	800906c <HAL_UART_IRQHandler+0x4f4>
 8009058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800905c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <HAL_UART_IRQHandler+0x4f4>
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 facc 	bl	8009602 <UART_Transmit_IT>
 800906a:	e014      	b.n	8009096 <HAL_UART_IRQHandler+0x51e>
 800906c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00e      	beq.n	8009096 <HAL_UART_IRQHandler+0x51e>
 8009078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800907c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009080:	2b00      	cmp	r3, #0
 8009082:	d008      	beq.n	8009096 <HAL_UART_IRQHandler+0x51e>
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fb0b 	bl	80096a0 <UART_EndTransmit_IT>
 800908a:	e004      	b.n	8009096 <HAL_UART_IRQHandler+0x51e>
 800908c:	bf00      	nop
 800908e:	e002      	b.n	8009096 <HAL_UART_IRQHandler+0x51e>
 8009090:	bf00      	nop
 8009092:	e000      	b.n	8009096 <HAL_UART_IRQHandler+0x51e>
 8009094:	bf00      	nop
 8009096:	37e8      	adds	r7, #232	@ 0xe8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_UART_TxCpltCallback>:
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr

080090ae <HAL_UART_RxCpltCallback>:
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bc80      	pop	{r7}
 80090be:	4770      	bx	lr

080090c0 <HAL_UART_RxHalfCpltCallback>:
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr

080090d2 <HAL_UART_ErrorCallback>:
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr

080090e4 <UART_DMAReceiveCplt>:
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b09c      	sub	sp, #112	@ 0x70
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d172      	bne.n	80091e6 <UART_DMAReceiveCplt+0x102>
 8009100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009102:	2200      	movs	r2, #0
 8009104:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8009106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	330c      	adds	r3, #12
 800910c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800910e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800911c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800911e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	330c      	adds	r3, #12
 8009124:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009126:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009128:	657b      	str	r3, [r7, #84]	@ 0x54
 800912a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800912c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	653b      	str	r3, [r7, #80]	@ 0x50
 8009134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e5      	bne.n	8009106 <UART_DMAReceiveCplt+0x22>
 800913a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3314      	adds	r3, #20
 8009140:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	637b      	str	r3, [r7, #52]	@ 0x34
 800914a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800914c:	f023 0301 	bic.w	r3, r3, #1
 8009150:	667b      	str	r3, [r7, #100]	@ 0x64
 8009152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3314      	adds	r3, #20
 8009158:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800915a:	647a      	str	r2, [r7, #68]	@ 0x44
 800915c:	643b      	str	r3, [r7, #64]	@ 0x40
 800915e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e5      	bne.n	800913a <UART_DMAReceiveCplt+0x56>
 800916e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3314      	adds	r3, #20
 8009174:	627b      	str	r3, [r7, #36]	@ 0x24
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	623b      	str	r3, [r7, #32]
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009184:	663b      	str	r3, [r7, #96]	@ 0x60
 8009186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3314      	adds	r3, #20
 800918c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800918e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e5      	bne.n	800916e <UART_DMAReceiveCplt+0x8a>
 80091a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091a4:	2220      	movs	r2, #32
 80091a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d119      	bne.n	80091e6 <UART_DMAReceiveCplt+0x102>
 80091b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	330c      	adds	r3, #12
 80091b8:	613b      	str	r3, [r7, #16]
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	e853 3f00 	ldrex	r3, [r3]
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f023 0310 	bic.w	r3, r3, #16
 80091c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	330c      	adds	r3, #12
 80091d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80091d2:	61fa      	str	r2, [r7, #28]
 80091d4:	61bb      	str	r3, [r7, #24]
 80091d6:	69b9      	ldr	r1, [r7, #24]
 80091d8:	69fa      	ldr	r2, [r7, #28]
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	617b      	str	r3, [r7, #20]
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e5      	bne.n	80091b2 <UART_DMAReceiveCplt+0xce>
 80091e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091e8:	2200      	movs	r2, #0
 80091ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80091ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d106      	bne.n	8009202 <UART_DMAReceiveCplt+0x11e>
 80091f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091f8:	4619      	mov	r1, r3
 80091fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80091fc:	f7f8 fe0a 	bl	8001e14 <HAL_UARTEx_RxEventCallback>
 8009200:	e002      	b.n	8009208 <UART_DMAReceiveCplt+0x124>
 8009202:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009204:	f7ff ff53 	bl	80090ae <HAL_UART_RxCpltCallback>
 8009208:	bf00      	nop
 800920a:	3770      	adds	r7, #112	@ 0x70
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <UART_DMARxHalfCplt>:
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	635a      	str	r2, [r3, #52]	@ 0x34
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009228:	2b01      	cmp	r3, #1
 800922a:	d108      	bne.n	800923e <UART_DMARxHalfCplt+0x2e>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009230:	085b      	lsrs	r3, r3, #1
 8009232:	b29b      	uxth	r3, r3
 8009234:	4619      	mov	r1, r3
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f7f8 fdec 	bl	8001e14 <HAL_UARTEx_RxEventCallback>
 800923c:	e002      	b.n	8009244 <UART_DMARxHalfCplt+0x34>
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff ff3e 	bl	80090c0 <HAL_UART_RxHalfCpltCallback>
 8009244:	bf00      	nop
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <UART_DMAError>:
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925c:	60bb      	str	r3, [r7, #8]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009268:	2b00      	cmp	r3, #0
 800926a:	bf14      	ite	ne
 800926c:	2301      	movne	r3, #1
 800926e:	2300      	moveq	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b21      	cmp	r3, #33	@ 0x21
 800927e:	d108      	bne.n	8009292 <UART_DMAError+0x46>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d005      	beq.n	8009292 <UART_DMAError+0x46>
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2200      	movs	r2, #0
 800928a:	84da      	strh	r2, [r3, #38]	@ 0x26
 800928c:	68b8      	ldr	r0, [r7, #8]
 800928e:	f000 f91b 	bl	80094c8 <UART_EndTxTransfer>
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b22      	cmp	r3, #34	@ 0x22
 80092b2:	d108      	bne.n	80092c6 <UART_DMAError+0x7a>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <UART_DMAError+0x7a>
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2200      	movs	r2, #0
 80092be:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80092c0:	68b8      	ldr	r0, [r7, #8]
 80092c2:	f000 f928 	bl	8009516 <UART_EndRxTransfer>
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ca:	f043 0210 	orr.w	r2, r3, #16
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80092d2:	68b8      	ldr	r0, [r7, #8]
 80092d4:	f7ff fefd 	bl	80090d2 <HAL_UART_ErrorCallback>
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <UART_WaitOnFlagUntilTimeout>:
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	4613      	mov	r3, r2
 80092ee:	71fb      	strb	r3, [r7, #7]
 80092f0:	e03b      	b.n	800936a <UART_WaitOnFlagUntilTimeout+0x8a>
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f8:	d037      	beq.n	800936a <UART_WaitOnFlagUntilTimeout+0x8a>
 80092fa:	f7fb fe6b 	bl	8004fd4 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	6a3a      	ldr	r2, [r7, #32]
 8009306:	429a      	cmp	r2, r3
 8009308:	d302      	bcc.n	8009310 <UART_WaitOnFlagUntilTimeout+0x30>
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d101      	bne.n	8009314 <UART_WaitOnFlagUntilTimeout+0x34>
 8009310:	2303      	movs	r3, #3
 8009312:	e03a      	b.n	800938a <UART_WaitOnFlagUntilTimeout+0xaa>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f003 0304 	and.w	r3, r3, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	d023      	beq.n	800936a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2b80      	cmp	r3, #128	@ 0x80
 8009326:	d020      	beq.n	800936a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	2b40      	cmp	r3, #64	@ 0x40
 800932c:	d01d      	beq.n	800936a <UART_WaitOnFlagUntilTimeout+0x8a>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0308 	and.w	r3, r3, #8
 8009338:	2b08      	cmp	r3, #8
 800933a:	d116      	bne.n	800936a <UART_WaitOnFlagUntilTimeout+0x8a>
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	617b      	str	r3, [r7, #20]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f8df 	bl	8009516 <UART_EndRxTransfer>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2208      	movs	r2, #8
 800935c:	645a      	str	r2, [r3, #68]	@ 0x44
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009366:	2301      	movs	r3, #1
 8009368:	e00f      	b.n	800938a <UART_WaitOnFlagUntilTimeout+0xaa>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4013      	ands	r3, r2
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	429a      	cmp	r2, r3
 8009378:	bf0c      	ite	eq
 800937a:	2301      	moveq	r3, #1
 800937c:	2300      	movne	r3, #0
 800937e:	b2db      	uxtb	r3, r3
 8009380:	461a      	mov	r2, r3
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	429a      	cmp	r2, r3
 8009386:	d0b4      	beq.n	80092f2 <UART_WaitOnFlagUntilTimeout+0x12>
 8009388:	2300      	movs	r3, #0
 800938a:	4618      	mov	r0, r3
 800938c:	3718      	adds	r7, #24
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <UART_Start_Receive_DMA>:
 8009394:	b580      	push	{r7, lr}
 8009396:	b098      	sub	sp, #96	@ 0x60
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	88fa      	ldrh	r2, [r7, #6]
 80093ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2222      	movs	r2, #34	@ 0x22
 80093b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c0:	4a3e      	ldr	r2, [pc, #248]	@ (80094bc <UART_Start_Receive_DMA+0x128>)
 80093c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c8:	4a3d      	ldr	r2, [pc, #244]	@ (80094c0 <UART_Start_Receive_DMA+0x12c>)
 80093ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d0:	4a3c      	ldr	r2, [pc, #240]	@ (80094c4 <UART_Start_Receive_DMA+0x130>)
 80093d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d8:	2200      	movs	r2, #0
 80093da:	635a      	str	r2, [r3, #52]	@ 0x34
 80093dc:	f107 0308 	add.w	r3, r7, #8
 80093e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4619      	mov	r1, r3
 80093ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	88fb      	ldrh	r3, [r7, #6]
 80093f4:	f7fc fe74 	bl	80060e0 <HAL_DMA_Start_IT>
 80093f8:	2300      	movs	r3, #0
 80093fa:	613b      	str	r3, [r7, #16]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	613b      	str	r3, [r7, #16]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	613b      	str	r3, [r7, #16]
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d019      	beq.n	800944a <UART_Start_Receive_DMA+0xb6>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	330c      	adds	r3, #12
 800941c:	643b      	str	r3, [r7, #64]	@ 0x40
 800941e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800942c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	330c      	adds	r3, #12
 8009434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009436:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800943a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800943c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800943e:	e841 2300 	strex	r3, r2, [r1]
 8009442:	647b      	str	r3, [r7, #68]	@ 0x44
 8009444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1e5      	bne.n	8009416 <UART_Start_Receive_DMA+0x82>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3314      	adds	r3, #20
 8009450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800945a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945c:	f043 0301 	orr.w	r3, r3, #1
 8009460:	657b      	str	r3, [r7, #84]	@ 0x54
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3314      	adds	r3, #20
 8009468:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800946a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800946c:	637b      	str	r3, [r7, #52]	@ 0x34
 800946e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009470:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	633b      	str	r3, [r7, #48]	@ 0x30
 8009478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e5      	bne.n	800944a <UART_Start_Receive_DMA+0xb6>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3314      	adds	r3, #20
 8009484:	61bb      	str	r3, [r7, #24]
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009494:	653b      	str	r3, [r7, #80]	@ 0x50
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3314      	adds	r3, #20
 800949c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800949e:	627a      	str	r2, [r7, #36]	@ 0x24
 80094a0:	623b      	str	r3, [r7, #32]
 80094a2:	6a39      	ldr	r1, [r7, #32]
 80094a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	61fb      	str	r3, [r7, #28]
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e5      	bne.n	800947e <UART_Start_Receive_DMA+0xea>
 80094b2:	2300      	movs	r3, #0
 80094b4:	4618      	mov	r0, r3
 80094b6:	3760      	adds	r7, #96	@ 0x60
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	080090e5 	.word	0x080090e5
 80094c0:	08009211 	.word	0x08009211
 80094c4:	0800924d 	.word	0x0800924d

080094c8 <UART_EndTxTransfer>:
 80094c8:	b480      	push	{r7}
 80094ca:	b089      	sub	sp, #36	@ 0x24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	330c      	adds	r3, #12
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	60bb      	str	r3, [r7, #8]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80094e6:	61fb      	str	r3, [r7, #28]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	330c      	adds	r3, #12
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	61ba      	str	r2, [r7, #24]
 80094f2:	617b      	str	r3, [r7, #20]
 80094f4:	6979      	ldr	r1, [r7, #20]
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e5      	bne.n	80094d0 <UART_EndTxTransfer+0x8>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800950c:	bf00      	nop
 800950e:	3724      	adds	r7, #36	@ 0x24
 8009510:	46bd      	mov	sp, r7
 8009512:	bc80      	pop	{r7}
 8009514:	4770      	bx	lr

08009516 <UART_EndRxTransfer>:
 8009516:	b480      	push	{r7}
 8009518:	b095      	sub	sp, #84	@ 0x54
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	330c      	adds	r3, #12
 8009524:	637b      	str	r3, [r7, #52]	@ 0x34
 8009526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	633b      	str	r3, [r7, #48]	@ 0x30
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	330c      	adds	r3, #12
 800953c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800953e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009542:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800954c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e5      	bne.n	800951e <UART_EndRxTransfer+0x8>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3314      	adds	r3, #20
 8009558:	623b      	str	r3, [r7, #32]
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	61fb      	str	r3, [r7, #28]
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	f023 0301 	bic.w	r3, r3, #1
 8009568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3314      	adds	r3, #20
 8009570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e5      	bne.n	8009552 <UART_EndRxTransfer+0x3c>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800958a:	2b01      	cmp	r3, #1
 800958c:	d119      	bne.n	80095c2 <UART_EndRxTransfer+0xac>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	330c      	adds	r3, #12
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	60bb      	str	r3, [r7, #8]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f023 0310 	bic.w	r3, r3, #16
 80095a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	330c      	adds	r3, #12
 80095ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095ae:	61ba      	str	r2, [r7, #24]
 80095b0:	617b      	str	r3, [r7, #20]
 80095b2:	6979      	ldr	r1, [r7, #20]
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	613b      	str	r3, [r7, #16]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e5      	bne.n	800958e <UART_EndRxTransfer+0x78>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80095d0:	bf00      	nop
 80095d2:	3754      	adds	r7, #84	@ 0x54
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bc80      	pop	{r7}
 80095d8:	4770      	bx	lr

080095da <UART_DMAAbortOnError>:
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	84da      	strh	r2, [r3, #38]	@ 0x26
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f7ff fd6c 	bl	80090d2 <HAL_UART_ErrorCallback>
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <UART_Transmit_IT>:
 8009602:	b480      	push	{r7}
 8009604:	b085      	sub	sp, #20
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b21      	cmp	r3, #33	@ 0x21
 8009614:	d13e      	bne.n	8009694 <UART_Transmit_IT+0x92>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800961e:	d114      	bne.n	800964a <UART_Transmit_IT+0x48>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d110      	bne.n	800964a <UART_Transmit_IT+0x48>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800963c:	605a      	str	r2, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	1c9a      	adds	r2, r3, #2
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	621a      	str	r2, [r3, #32]
 8009648:	e008      	b.n	800965c <UART_Transmit_IT+0x5a>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	1c59      	adds	r1, r3, #1
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	6211      	str	r1, [r2, #32]
 8009654:	781a      	ldrb	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	605a      	str	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	b29b      	uxth	r3, r3
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	4619      	mov	r1, r3
 800966a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10f      	bne.n	8009690 <UART_Transmit_IT+0x8e>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68da      	ldr	r2, [r3, #12]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800967e:	60da      	str	r2, [r3, #12]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68da      	ldr	r2, [r3, #12]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800968e:	60da      	str	r2, [r3, #12]
 8009690:	2300      	movs	r3, #0
 8009692:	e000      	b.n	8009696 <UART_Transmit_IT+0x94>
 8009694:	2302      	movs	r3, #2
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr

080096a0 <UART_EndTransmit_IT>:
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096b6:	60da      	str	r2, [r3, #12]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2220      	movs	r2, #32
 80096bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff fceb 	bl	800909c <HAL_UART_TxCpltCallback>
 80096c6:	2300      	movs	r3, #0
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <UART_Receive_IT>:
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08c      	sub	sp, #48	@ 0x30
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	2b22      	cmp	r3, #34	@ 0x22
 80096e2:	f040 80ae 	bne.w	8009842 <UART_Receive_IT+0x172>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ee:	d117      	bne.n	8009720 <UART_Receive_IT+0x50>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d113      	bne.n	8009720 <UART_Receive_IT+0x50>
 80096f8:	2300      	movs	r3, #0
 80096fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	b29b      	uxth	r3, r3
 800970a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970e:	b29a      	uxth	r2, r3
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	801a      	strh	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009718:	1c9a      	adds	r2, r3, #2
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	629a      	str	r2, [r3, #40]	@ 0x28
 800971e:	e026      	b.n	800976e <UART_Receive_IT+0x9e>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009726:	2300      	movs	r3, #0
 8009728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009732:	d007      	beq.n	8009744 <UART_Receive_IT+0x74>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <UART_Receive_IT+0x82>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d106      	bne.n	8009752 <UART_Receive_IT+0x82>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	b2da      	uxtb	r2, r3
 800974c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974e:	701a      	strb	r2, [r3, #0]
 8009750:	e008      	b.n	8009764 <UART_Receive_IT+0x94>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	b2db      	uxtb	r3, r3
 800975a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800975e:	b2da      	uxtb	r2, r3
 8009760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009762:	701a      	strb	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	629a      	str	r2, [r3, #40]	@ 0x28
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009772:	b29b      	uxth	r3, r3
 8009774:	3b01      	subs	r3, #1
 8009776:	b29b      	uxth	r3, r3
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	4619      	mov	r1, r3
 800977c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800977e:	2b00      	cmp	r3, #0
 8009780:	d15d      	bne.n	800983e <UART_Receive_IT+0x16e>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f022 0220 	bic.w	r2, r2, #32
 8009790:	60da      	str	r2, [r3, #12]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68da      	ldr	r2, [r3, #12]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097a0:	60da      	str	r2, [r3, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	695a      	ldr	r2, [r3, #20]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0201 	bic.w	r2, r2, #1
 80097b0:	615a      	str	r2, [r3, #20]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	635a      	str	r2, [r3, #52]	@ 0x34
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d135      	bne.n	8009834 <UART_Receive_IT+0x164>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	330c      	adds	r3, #12
 80097d4:	617b      	str	r3, [r7, #20]
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f023 0310 	bic.w	r3, r3, #16
 80097e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	330c      	adds	r3, #12
 80097ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097ee:	623a      	str	r2, [r7, #32]
 80097f0:	61fb      	str	r3, [r7, #28]
 80097f2:	69f9      	ldr	r1, [r7, #28]
 80097f4:	6a3a      	ldr	r2, [r7, #32]
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	61bb      	str	r3, [r7, #24]
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e5      	bne.n	80097ce <UART_Receive_IT+0xfe>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0310 	and.w	r3, r3, #16
 800980c:	2b10      	cmp	r3, #16
 800980e:	d10a      	bne.n	8009826 <UART_Receive_IT+0x156>
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7f8 faf1 	bl	8001e14 <HAL_UARTEx_RxEventCallback>
 8009832:	e002      	b.n	800983a <UART_Receive_IT+0x16a>
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff fc3a 	bl	80090ae <HAL_UART_RxCpltCallback>
 800983a:	2300      	movs	r3, #0
 800983c:	e002      	b.n	8009844 <UART_Receive_IT+0x174>
 800983e:	2300      	movs	r3, #0
 8009840:	e000      	b.n	8009844 <UART_Receive_IT+0x174>
 8009842:	2302      	movs	r3, #2
 8009844:	4618      	mov	r0, r3
 8009846:	3730      	adds	r7, #48	@ 0x30
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <UART_SetConfig>:
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	611a      	str	r2, [r3, #16]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689a      	ldr	r2, [r3, #8]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	431a      	orrs	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	60bb      	str	r3, [r7, #8]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009886:	f023 030c 	bic.w	r3, r3, #12
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	6812      	ldr	r2, [r2, #0]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	430b      	orrs	r3, r1
 8009892:	60d3      	str	r3, [r2, #12]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699a      	ldr	r2, [r3, #24]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	615a      	str	r2, [r3, #20]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009960 <UART_SetConfig+0x114>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d103      	bne.n	80098bc <UART_SetConfig+0x70>
 80098b4:	f7fd fe74 	bl	80075a0 <HAL_RCC_GetPCLK2Freq>
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	e002      	b.n	80098c2 <UART_SetConfig+0x76>
 80098bc:	f7fd fe5c 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009a      	lsls	r2, r3, #2
 80098cc:	441a      	add	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d8:	4a22      	ldr	r2, [pc, #136]	@ (8009964 <UART_SetConfig+0x118>)
 80098da:	fba2 2303 	umull	r2, r3, r2, r3
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	0119      	lsls	r1, r3, #4
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	009a      	lsls	r2, r3, #2
 80098ec:	441a      	add	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80098f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009964 <UART_SetConfig+0x118>)
 80098fa:	fba3 0302 	umull	r0, r3, r3, r2
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	2064      	movs	r0, #100	@ 0x64
 8009902:	fb00 f303 	mul.w	r3, r0, r3
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	011b      	lsls	r3, r3, #4
 800990a:	3332      	adds	r3, #50	@ 0x32
 800990c:	4a15      	ldr	r2, [pc, #84]	@ (8009964 <UART_SetConfig+0x118>)
 800990e:	fba2 2303 	umull	r2, r3, r2, r3
 8009912:	095b      	lsrs	r3, r3, #5
 8009914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009918:	4419      	add	r1, r3
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	4613      	mov	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	009a      	lsls	r2, r3, #2
 8009924:	441a      	add	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009930:	4b0c      	ldr	r3, [pc, #48]	@ (8009964 <UART_SetConfig+0x118>)
 8009932:	fba3 0302 	umull	r0, r3, r3, r2
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	2064      	movs	r0, #100	@ 0x64
 800993a:	fb00 f303 	mul.w	r3, r0, r3
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	011b      	lsls	r3, r3, #4
 8009942:	3332      	adds	r3, #50	@ 0x32
 8009944:	4a07      	ldr	r2, [pc, #28]	@ (8009964 <UART_SetConfig+0x118>)
 8009946:	fba2 2303 	umull	r2, r3, r2, r3
 800994a:	095b      	lsrs	r3, r3, #5
 800994c:	f003 020f 	and.w	r2, r3, #15
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	440a      	add	r2, r1
 8009956:	609a      	str	r2, [r3, #8]
 8009958:	bf00      	nop
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	40013800 	.word	0x40013800
 8009964:	51eb851f 	.word	0x51eb851f

08009968 <memset>:
 8009968:	4603      	mov	r3, r0
 800996a:	4402      	add	r2, r0
 800996c:	4293      	cmp	r3, r2
 800996e:	d100      	bne.n	8009972 <memset+0xa>
 8009970:	4770      	bx	lr
 8009972:	f803 1b01 	strb.w	r1, [r3], #1
 8009976:	e7f9      	b.n	800996c <memset+0x4>

08009978 <strcat>:
 8009978:	4602      	mov	r2, r0
 800997a:	b510      	push	{r4, lr}
 800997c:	7814      	ldrb	r4, [r2, #0]
 800997e:	4613      	mov	r3, r2
 8009980:	3201      	adds	r2, #1
 8009982:	2c00      	cmp	r4, #0
 8009984:	d1fa      	bne.n	800997c <strcat+0x4>
 8009986:	3b01      	subs	r3, #1
 8009988:	f811 2b01 	ldrb.w	r2, [r1], #1
 800998c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009990:	2a00      	cmp	r2, #0
 8009992:	d1f9      	bne.n	8009988 <strcat+0x10>
 8009994:	bd10      	pop	{r4, pc}
	...

08009998 <__libc_init_array>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	2600      	movs	r6, #0
 800999c:	4d0c      	ldr	r5, [pc, #48]	@ (80099d0 <__libc_init_array+0x38>)
 800999e:	4c0d      	ldr	r4, [pc, #52]	@ (80099d4 <__libc_init_array+0x3c>)
 80099a0:	1b64      	subs	r4, r4, r5
 80099a2:	10a4      	asrs	r4, r4, #2
 80099a4:	42a6      	cmp	r6, r4
 80099a6:	d109      	bne.n	80099bc <__libc_init_array+0x24>
 80099a8:	f000 f822 	bl	80099f0 <_init>
 80099ac:	2600      	movs	r6, #0
 80099ae:	4d0a      	ldr	r5, [pc, #40]	@ (80099d8 <__libc_init_array+0x40>)
 80099b0:	4c0a      	ldr	r4, [pc, #40]	@ (80099dc <__libc_init_array+0x44>)
 80099b2:	1b64      	subs	r4, r4, r5
 80099b4:	10a4      	asrs	r4, r4, #2
 80099b6:	42a6      	cmp	r6, r4
 80099b8:	d105      	bne.n	80099c6 <__libc_init_array+0x2e>
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c0:	4798      	blx	r3
 80099c2:	3601      	adds	r6, #1
 80099c4:	e7ee      	b.n	80099a4 <__libc_init_array+0xc>
 80099c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ca:	4798      	blx	r3
 80099cc:	3601      	adds	r6, #1
 80099ce:	e7f2      	b.n	80099b6 <__libc_init_array+0x1e>
 80099d0:	08009ac0 	.word	0x08009ac0
 80099d4:	08009ac0 	.word	0x08009ac0
 80099d8:	08009ac0 	.word	0x08009ac0
 80099dc:	08009ac4 	.word	0x08009ac4

080099e0 <strcpy>:
 80099e0:	4603      	mov	r3, r0
 80099e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099e6:	f803 2b01 	strb.w	r2, [r3], #1
 80099ea:	2a00      	cmp	r2, #0
 80099ec:	d1f9      	bne.n	80099e2 <strcpy+0x2>
 80099ee:	4770      	bx	lr

080099f0 <_init>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	bf00      	nop
 80099f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f6:	bc08      	pop	{r3}
 80099f8:	469e      	mov	lr, r3
 80099fa:	4770      	bx	lr

080099fc <_fini>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	bf00      	nop
 8009a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a02:	bc08      	pop	{r3}
 8009a04:	469e      	mov	lr, r3
 8009a06:	4770      	bx	lr
