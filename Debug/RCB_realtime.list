
RCB_realtime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a94  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08009ba0  08009ba0  0000aba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c68  08009c68  0000b044  2**0
                  CONTENTS
  4 .ARM          00000008  08009c68  08009c68  0000ac68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c70  08009c70  0000b044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c70  08009c70  0000ac70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c74  08009c74  0000ac74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08009c78  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000978  20000048  08009cbc  0000b048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  08009cbc  0000b9c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014998  00000000  00000000  0000b06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ce  00000000  00000000  0001fa05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00022ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001017  00000000  00000000  00024370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019710  00000000  00000000  00025387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001734d  00000000  00000000  0003ea97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093808  00000000  00000000  00055de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e95ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056dc  00000000  00000000  000e9630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000eed0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08009b88 	.word	0x08009b88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08009b88 	.word	0x08009b88

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000164:	4b22      	ldr	r3, [pc, #136]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000166:	68db      	ldr	r3, [r3, #12]
 8000168:	4798      	blx	r3
   WIZCHIP.CS._select();
 800016a:	4b21      	ldr	r3, [pc, #132]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800016c:	695b      	ldr	r3, [r3, #20]
 800016e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000170:	4b1f      	ldr	r3, [pc, #124]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000174:	2b00      	cmp	r3, #0
 8000176:	d003      	beq.n	8000180 <WIZCHIP_READ+0x24>
 8000178:	4b1d      	ldr	r3, [pc, #116]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800017a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800017c:	2b00      	cmp	r3, #0
 800017e:	d114      	bne.n	80001aa <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000180:	4b1b      	ldr	r3, [pc, #108]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000182:	6a1b      	ldr	r3, [r3, #32]
 8000184:	687a      	ldr	r2, [r7, #4]
 8000186:	0c12      	lsrs	r2, r2, #16
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	4610      	mov	r0, r2
 800018c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800018e:	4b18      	ldr	r3, [pc, #96]	@ (80001f0 <WIZCHIP_READ+0x94>)
 8000190:	6a1b      	ldr	r3, [r3, #32]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	0a12      	lsrs	r2, r2, #8
 8000196:	b2d2      	uxtb	r2, r2
 8000198:	4610      	mov	r0, r2
 800019a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800019c:	4b14      	ldr	r3, [pc, #80]	@ (80001f0 <WIZCHIP_READ+0x94>)
 800019e:	6a1b      	ldr	r3, [r3, #32]
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	b2d2      	uxtb	r2, r2
 80001a4:	4610      	mov	r0, r2
 80001a6:	4798      	blx	r3
 80001a8:	e011      	b.n	80001ce <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	0c1b      	lsrs	r3, r3, #16
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	0a1b      	lsrs	r3, r3, #8
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80001c0:	4b0b      	ldr	r3, [pc, #44]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80001c4:	f107 020c 	add.w	r2, r7, #12
 80001c8:	2103      	movs	r1, #3
 80001ca:	4610      	mov	r0, r2
 80001cc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80001ce:	4b08      	ldr	r3, [pc, #32]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001d0:	69db      	ldr	r3, [r3, #28]
 80001d2:	4798      	blx	r3
 80001d4:	4603      	mov	r3, r0
 80001d6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80001de:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <WIZCHIP_READ+0x94>)
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	4798      	blx	r3
   return ret;
 80001e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000004 	.word	0x20000004

080001f4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	460b      	mov	r3, r1
 80001fe:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000200:	4b22      	ldr	r3, [pc, #136]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000206:	4b21      	ldr	r3, [pc, #132]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000214:	4b1d      	ldr	r3, [pc, #116]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000218:	2b00      	cmp	r3, #0
 800021a:	d119      	bne.n	8000250 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800021c:	4b1b      	ldr	r3, [pc, #108]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	0c12      	lsrs	r2, r2, #16
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800022a:	4b18      	ldr	r3, [pc, #96]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800022c:	6a1b      	ldr	r3, [r3, #32]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	0a12      	lsrs	r2, r2, #8
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	4610      	mov	r0, r2
 8000236:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000238:	4b14      	ldr	r3, [pc, #80]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	4610      	mov	r0, r2
 8000242:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000244:	4b11      	ldr	r3, [pc, #68]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	78fa      	ldrb	r2, [r7, #3]
 800024a:	4610      	mov	r0, r2
 800024c:	4798      	blx	r3
 800024e:	e013      	b.n	8000278 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	0c1b      	lsrs	r3, r3, #16
 8000254:	b2db      	uxtb	r3, r3
 8000256:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	0a1b      	lsrs	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000266:	78fb      	ldrb	r3, [r7, #3]
 8000268:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800026a:	4b08      	ldr	r3, [pc, #32]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800026c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800026e:	f107 020c 	add.w	r2, r7, #12
 8000272:	2104      	movs	r1, #4
 8000274:	4610      	mov	r0, r2
 8000276:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000278:	4b04      	ldr	r3, [pc, #16]	@ (800028c <WIZCHIP_WRITE+0x98>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <WIZCHIP_WRITE+0x98>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	4798      	blx	r3
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000004 	.word	0x20000004

08000290 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800029e:	4b2b      	ldr	r3, [pc, #172]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80002a4:	4b29      	ldr	r3, [pc, #164]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80002aa:	4b28      	ldr	r3, [pc, #160]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d003      	beq.n	80002ba <WIZCHIP_READ_BUF+0x2a>
 80002b2:	4b26      	ldr	r3, [pc, #152]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d126      	bne.n	8000308 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80002ba:	4b24      	ldr	r3, [pc, #144]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002bc:	6a1b      	ldr	r3, [r3, #32]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	0c12      	lsrs	r2, r2, #16
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	4610      	mov	r0, r2
 80002c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80002c8:	4b20      	ldr	r3, [pc, #128]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	0a12      	lsrs	r2, r2, #8
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	4610      	mov	r0, r2
 80002d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80002d6:	4b1d      	ldr	r3, [pc, #116]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002d8:	6a1b      	ldr	r3, [r3, #32]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80002e2:	2300      	movs	r3, #0
 80002e4:	82fb      	strh	r3, [r7, #22]
 80002e6:	e00a      	b.n	80002fe <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	8afa      	ldrh	r2, [r7, #22]
 80002ee:	68b9      	ldr	r1, [r7, #8]
 80002f0:	188c      	adds	r4, r1, r2
 80002f2:	4798      	blx	r3
 80002f4:	4603      	mov	r3, r0
 80002f6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80002f8:	8afb      	ldrh	r3, [r7, #22]
 80002fa:	3301      	adds	r3, #1
 80002fc:	82fb      	strh	r3, [r7, #22]
 80002fe:	8afa      	ldrh	r2, [r7, #22]
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	429a      	cmp	r2, r3
 8000304:	d3f0      	bcc.n	80002e8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000306:	e017      	b.n	8000338 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	b2db      	uxtb	r3, r3
 800030e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	0a1b      	lsrs	r3, r3, #8
 8000314:	b2db      	uxtb	r3, r3
 8000316:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800031e:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 8000320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000322:	f107 0210 	add.w	r2, r7, #16
 8000326:	2103      	movs	r1, #3
 8000328:	4610      	mov	r0, r2
 800032a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 800032e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000330:	88fa      	ldrh	r2, [r7, #6]
 8000332:	4611      	mov	r1, r2
 8000334:	68b8      	ldr	r0, [r7, #8]
 8000336:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000338:	4b04      	ldr	r3, [pc, #16]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800033e:	4b03      	ldr	r3, [pc, #12]	@ (800034c <WIZCHIP_READ_BUF+0xbc>)
 8000340:	691b      	ldr	r3, [r3, #16]
 8000342:	4798      	blx	r3
}
 8000344:	bf00      	nop
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	bd90      	pop	{r4, r7, pc}
 800034c:	20000004 	.word	0x20000004

08000350 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	4613      	mov	r3, r2
 800035c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800035e:	4b2b      	ldr	r3, [pc, #172]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000364:	4b29      	ldr	r3, [pc, #164]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000376:	2b00      	cmp	r3, #0
 8000378:	d126      	bne.n	80003c8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800037a:	4b24      	ldr	r3, [pc, #144]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 800037c:	6a1b      	ldr	r3, [r3, #32]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	0c12      	lsrs	r2, r2, #16
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	4610      	mov	r0, r2
 8000386:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000388:	4b20      	ldr	r3, [pc, #128]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	68fa      	ldr	r2, [r7, #12]
 800038e:	0a12      	lsrs	r2, r2, #8
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	4610      	mov	r0, r2
 8000394:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000398:	6a1b      	ldr	r3, [r3, #32]
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	4610      	mov	r0, r2
 80003a0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	82fb      	strh	r3, [r7, #22]
 80003a6:	e00a      	b.n	80003be <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80003a8:	4b18      	ldr	r3, [pc, #96]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003aa:	6a1b      	ldr	r3, [r3, #32]
 80003ac:	8afa      	ldrh	r2, [r7, #22]
 80003ae:	68b9      	ldr	r1, [r7, #8]
 80003b0:	440a      	add	r2, r1
 80003b2:	7812      	ldrb	r2, [r2, #0]
 80003b4:	4610      	mov	r0, r2
 80003b6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	3301      	adds	r3, #1
 80003bc:	82fb      	strh	r3, [r7, #22]
 80003be:	8afa      	ldrh	r2, [r7, #22]
 80003c0:	88fb      	ldrh	r3, [r7, #6]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3f0      	bcc.n	80003a8 <WIZCHIP_WRITE_BUF+0x58>
 80003c6:	e017      	b.n	80003f8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	0a1b      	lsrs	r3, r3, #8
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003e2:	f107 0210 	add.w	r2, r7, #16
 80003e6:	2103      	movs	r1, #3
 80003e8:	4610      	mov	r0, r2
 80003ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80003ec:	4b07      	ldr	r3, [pc, #28]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003f0:	88fa      	ldrh	r2, [r7, #6]
 80003f2:	4611      	mov	r1, r2
 80003f4:	68b8      	ldr	r0, [r7, #8]
 80003f6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80003f8:	4b04      	ldr	r3, [pc, #16]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80003fe:	4b03      	ldr	r3, [pc, #12]	@ (800040c <WIZCHIP_WRITE_BUF+0xbc>)
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	4798      	blx	r3
}
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000004 	.word	0x20000004

08000410 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800041a:	2300      	movs	r3, #0
 800041c:	81fb      	strh	r3, [r7, #14]
 800041e:	2300      	movs	r3, #0
 8000420:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	3301      	adds	r3, #1
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fe94 	bl	800015c <WIZCHIP_READ>
 8000434:	4603      	mov	r3, r0
 8000436:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000438:	89bb      	ldrh	r3, [r7, #12]
 800043a:	021b      	lsls	r3, r3, #8
 800043c:	b29c      	uxth	r4, r3
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	3301      	adds	r3, #1
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fe86 	bl	800015c <WIZCHIP_READ>
 8000450:	4603      	mov	r3, r0
 8000452:	4423      	add	r3, r4
 8000454:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000456:	89bb      	ldrh	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d019      	beq.n	8000490 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	3301      	adds	r3, #1
 8000462:	00db      	lsls	r3, r3, #3
 8000464:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fe77 	bl	800015c <WIZCHIP_READ>
 800046e:	4603      	mov	r3, r0
 8000470:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000472:	89fb      	ldrh	r3, [r7, #14]
 8000474:	021b      	lsls	r3, r3, #8
 8000476:	b29c      	uxth	r4, r3
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	3301      	adds	r3, #1
 800047e:	00db      	lsls	r3, r3, #3
 8000480:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe69 	bl	800015c <WIZCHIP_READ>
 800048a:	4603      	mov	r3, r0
 800048c:	4423      	add	r3, r4
 800048e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000490:	89fa      	ldrh	r2, [r7, #14]
 8000492:	89bb      	ldrh	r3, [r7, #12]
 8000494:	429a      	cmp	r2, r3
 8000496:	d1c4      	bne.n	8000422 <getSn_TX_FSR+0x12>
   return val;
 8000498:	89fb      	ldrh	r3, [r7, #14]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd90      	pop	{r4, r7, pc}

080004a2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80004a2:	b590      	push	{r4, r7, lr}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	81fb      	strh	r3, [r7, #14]
 80004b0:	2300      	movs	r3, #0
 80004b2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	3301      	adds	r3, #1
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fe4b 	bl	800015c <WIZCHIP_READ>
 80004c6:	4603      	mov	r3, r0
 80004c8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80004ca:	89bb      	ldrh	r3, [r7, #12]
 80004cc:	021b      	lsls	r3, r3, #8
 80004ce:	b29c      	uxth	r4, r3
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	3301      	adds	r3, #1
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fe3d 	bl	800015c <WIZCHIP_READ>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4423      	add	r3, r4
 80004e6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80004e8:	89bb      	ldrh	r3, [r7, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d019      	beq.n	8000522 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	3301      	adds	r3, #1
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe2e 	bl	800015c <WIZCHIP_READ>
 8000500:	4603      	mov	r3, r0
 8000502:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	b29c      	uxth	r4, r3
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	3301      	adds	r3, #1
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe20 	bl	800015c <WIZCHIP_READ>
 800051c:	4603      	mov	r3, r0
 800051e:	4423      	add	r3, r4
 8000520:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000522:	89fa      	ldrh	r2, [r7, #14]
 8000524:	89bb      	ldrh	r3, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d1c4      	bne.n	80004b4 <getSn_RX_RSR+0x12>
   return val;
 800052a:	89fb      	ldrh	r3, [r7, #14]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bd90      	pop	{r4, r7, pc}

08000534 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d046      	beq.n	80005e0 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	3301      	adds	r3, #1
 8000558:	00db      	lsls	r3, r3, #3
 800055a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fdfc 	bl	800015c <WIZCHIP_READ>
 8000564:	4603      	mov	r3, r0
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	b29c      	uxth	r4, r3
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	3301      	adds	r3, #1
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fdf0 	bl	800015c <WIZCHIP_READ>
 800057c:	4603      	mov	r3, r0
 800057e:	4423      	add	r3, r4
 8000580:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000582:	89fb      	ldrh	r3, [r7, #14]
 8000584:	021a      	lsls	r2, r3, #8
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	3302      	adds	r3, #2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4413      	add	r3, r2
 8000590:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	461a      	mov	r2, r3
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	68b8      	ldr	r0, [r7, #8]
 800059a:	f7ff fed9 	bl	8000350 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800059e:	89fa      	ldrh	r2, [r7, #14]
 80005a0:	88bb      	ldrh	r3, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	3301      	adds	r3, #1
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80005b2:	461a      	mov	r2, r3
 80005b4:	89fb      	ldrh	r3, [r7, #14]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	4610      	mov	r0, r2
 80005c0:	f7ff fe18 	bl	80001f4 <WIZCHIP_WRITE>
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	3301      	adds	r3, #1
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80005d0:	461a      	mov	r2, r3
 80005d2:	89fb      	ldrh	r3, [r7, #14]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	4610      	mov	r0, r2
 80005da:	f7ff fe0b 	bl	80001f4 <WIZCHIP_WRITE>
 80005de:	e000      	b.n	80005e2 <wiz_send_data+0xae>
   if(len == 0)  return;
 80005e0:	bf00      	nop
}
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd90      	pop	{r4, r7, pc}

080005e8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d046      	beq.n	8000694 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	3301      	adds	r3, #1
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fda2 	bl	800015c <WIZCHIP_READ>
 8000618:	4603      	mov	r3, r0
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	b29c      	uxth	r4, r3
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	3301      	adds	r3, #1
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fd96 	bl	800015c <WIZCHIP_READ>
 8000630:	4603      	mov	r3, r0
 8000632:	4423      	add	r3, r4
 8000634:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	021a      	lsls	r2, r3, #8
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3303      	adds	r3, #3
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	4413      	add	r3, r2
 8000644:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000646:	88bb      	ldrh	r3, [r7, #4]
 8000648:	461a      	mov	r2, r3
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	68b8      	ldr	r0, [r7, #8]
 800064e:	f7ff fe1f 	bl	8000290 <WIZCHIP_READ_BUF>
   ptr += len;
 8000652:	89fa      	ldrh	r2, [r7, #14]
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	3301      	adds	r3, #1
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000666:	461a      	mov	r2, r3
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	b29b      	uxth	r3, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff fdbe 	bl	80001f4 <WIZCHIP_WRITE>
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3301      	adds	r3, #1
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8000684:	461a      	mov	r2, r3
 8000686:	89fb      	ldrh	r3, [r7, #14]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	4610      	mov	r0, r2
 800068e:	f7ff fdb1 	bl	80001f4 <WIZCHIP_WRITE>
 8000692:	e000      	b.n	8000696 <wiz_recv_data+0xae>
   if(len == 0) return;
 8000694:	bf00      	nop
}
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <wizchip_select>:
#include "../Ethernet/wizchip_conf.h"

extern SPI_HandleTypeDef hspi1;

void wizchip_select(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2110      	movs	r1, #16
 80006a4:	4802      	ldr	r0, [pc, #8]	@ (80006b0 <wizchip_select+0x14>)
 80006a6:	f006 fbca 	bl	8006e3e <HAL_GPIO_WritePin>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40010800 	.word	0x40010800

080006b4 <wizchip_deselect>:

void wizchip_deselect(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4802      	ldr	r0, [pc, #8]	@ (80006c8 <wizchip_deselect+0x14>)
 80006be:	f006 fbbe 	bl	8006e3e <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010800 	.word	0x40010800

080006cc <wizchip_read>:

uint8_t wizchip_read(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80006d2:	1df9      	adds	r1, r7, #7
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2201      	movs	r2, #1
 80006da:	4804      	ldr	r0, [pc, #16]	@ (80006ec <wizchip_read+0x20>)
 80006dc:	f007 fa26 	bl	8007b2c <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&hspi1, &rbuf, 1);
	return rbuf;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000d0 	.word	0x200000d0

080006f0 <wizchip_write>:

void wizchip_write(uint8_t b) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80006fa:	1df9      	adds	r1, r7, #7
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2201      	movs	r2, #1
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <wizchip_write+0x20>)
 8000704:	f007 f8ce 	bl	80078a4 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, &b, 1);
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000d0 	.word	0x200000d0

08000714 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, pBuf, len, 0xFFFFFFFF);
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4803      	ldr	r0, [pc, #12]	@ (8000738 <wizchip_readburst+0x24>)
 800072a:	f007 f9ff 	bl	8007b2c <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&hspi1, pBuf, len);
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000d0 	.word	0x200000d0

0800073c <wizchip_writeburst>:

void wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, pBuf, len, 0xFFFFFFFF);
 8000748:	887a      	ldrh	r2, [r7, #2]
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <wizchip_writeburst+0x24>)
 8000752:	f007 f8a7 	bl	80078a4 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, pBuf, len);
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000d0 	.word	0x200000d0

08000764 <W5500Init>:

void W5500Init()
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 800076a:	23ff      	movs	r3, #255	@ 0xff
 800076c:	75fb      	strb	r3, [r7, #23]
	uint8_t memsize[2][8] = {{16,0,0,0,0,0,0,0},{16,0,0,0,0,0,0,0}};
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <W5500Init+0x74>)
 8000770:	1d3c      	adds	r4, r7, #4
 8000772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	4817      	ldr	r0, [pc, #92]	@ (80007dc <W5500Init+0x78>)
 800077e:	f006 fb5e 	bl	8006e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2102      	movs	r1, #2
 8000786:	4816      	ldr	r0, [pc, #88]	@ (80007e0 <W5500Init+0x7c>)
 8000788:	f006 fb59 	bl	8006e3e <HAL_GPIO_WritePin>
	while (tmp--);
 800078c:	bf00      	nop
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	75fa      	strb	r2, [r7, #23]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1fa      	bne.n	800078e <W5500Init+0x2a>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2102      	movs	r1, #2
 800079c:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <W5500Init+0x7c>)
 800079e:	f006 fb4e 	bl	8006e3e <HAL_GPIO_WritePin>
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80007a2:	4910      	ldr	r1, [pc, #64]	@ (80007e4 <W5500Init+0x80>)
 80007a4:	4810      	ldr	r0, [pc, #64]	@ (80007e8 <W5500Init+0x84>)
 80007a6:	f000 fd29 	bl	80011fc <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 80007aa:	4910      	ldr	r1, [pc, #64]	@ (80007ec <W5500Init+0x88>)
 80007ac:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <W5500Init+0x8c>)
 80007ae:	f000 fd49 	bl	8001244 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 80007b2:	4910      	ldr	r1, [pc, #64]	@ (80007f4 <W5500Init+0x90>)
 80007b4:	4810      	ldr	r0, [pc, #64]	@ (80007f8 <W5500Init+0x94>)
 80007b6:	f000 fd71 	bl	800129c <reg_wizchip_spiburst_cbfunc>
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fd98 	bl	80012f4 <ctlwizchip>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ca:	d101      	bne.n	80007d0 <W5500Init+0x6c>
	{
		while (1);
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <W5500Init+0x68>
	}
}
 80007d0:	bf00      	nop
 80007d2:	371c      	adds	r7, #28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	08009ba0 	.word	0x08009ba0
 80007dc:	40010800 	.word	0x40010800
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	080006b5 	.word	0x080006b5
 80007e8:	0800069d 	.word	0x0800069d
 80007ec:	080006f1 	.word	0x080006f1
 80007f0:	080006cd 	.word	0x080006cd
 80007f4:	0800073d 	.word	0x0800073d
 80007f8:	08000715 	.word	0x08000715

080007fc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	4604      	mov	r4, r0
 8000804:	4608      	mov	r0, r1
 8000806:	4611      	mov	r1, r2
 8000808:	461a      	mov	r2, r3
 800080a:	4623      	mov	r3, r4
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	460b      	mov	r3, r1
 8000814:	80bb      	strh	r3, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b08      	cmp	r3, #8
 800081e:	d902      	bls.n	8000826 <socket+0x2a>
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	e0ef      	b.n	8000a06 <socket+0x20a>
	switch(protocol)
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d005      	beq.n	8000838 <socket+0x3c>
 800082c:	2b00      	cmp	r3, #0
 800082e:	dd11      	ble.n	8000854 <socket+0x58>
 8000830:	3b02      	subs	r3, #2
 8000832:	2b02      	cmp	r3, #2
 8000834:	d80e      	bhi.n	8000854 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000836:	e011      	b.n	800085c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2204      	movs	r2, #4
 800083e:	4619      	mov	r1, r3
 8000840:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000844:	f7ff fd24 	bl	8000290 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <socket+0x5e>
 800084e:	f06f 0302 	mvn.w	r3, #2
 8000852:	e0d8      	b.n	8000a06 <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000854:	f06f 0304 	mvn.w	r3, #4
 8000858:	e0d5      	b.n	8000a06 <socket+0x20a>
	    break;
 800085a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <socket+0x70>
 8000866:	f06f 0305 	mvn.w	r3, #5
 800086a:	e0cc      	b.n	8000a06 <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d028      	beq.n	80008c4 <socket+0xc8>
	{
   	switch(protocol)
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d002      	beq.n	800087e <socket+0x82>
 8000878:	2b02      	cmp	r3, #2
 800087a:	d008      	beq.n	800088e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800087c:	e022      	b.n	80008c4 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11a      	bne.n	80008be <socket+0xc2>
 8000888:	f06f 0305 	mvn.w	r3, #5
 800088c:	e0bb      	b.n	8000a06 <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	f003 0320 	and.w	r3, r3, #32
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db02      	blt.n	80008a6 <socket+0xaa>
 80008a0:	f06f 0305 	mvn.w	r3, #5
 80008a4:	e0af      	b.n	8000a06 <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d008      	beq.n	80008c2 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80008b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db04      	blt.n	80008c2 <socket+0xc6>
 80008b8:	f06f 0305 	mvn.w	r3, #5
 80008bc:	e0a3      	b.n	8000a06 <socket+0x20a>
   	      break;
 80008be:	bf00      	nop
 80008c0:	e000      	b.n	80008c4 <socket+0xc8>
   	      break;
 80008c2:	bf00      	nop
   	}
   }
	close(sn);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f8ac 	bl	8000a24 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	3301      	adds	r3, #1
 80008d2:	00d8      	lsls	r0, r3, #3
 80008d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008d8:	f023 030f 	bic.w	r3, r3, #15
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	f7ff fc83 	bl	80001f4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d110      	bne.n	8000916 <socket+0x11a>
	{
	   port = sock_any_port++;
 80008f4:	4b46      	ldr	r3, [pc, #280]	@ (8000a10 <socket+0x214>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	b291      	uxth	r1, r2
 80008fc:	4a44      	ldr	r2, [pc, #272]	@ (8000a10 <socket+0x214>)
 80008fe:	8011      	strh	r1, [r2, #0]
 8000900:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000902:	4b43      	ldr	r3, [pc, #268]	@ (8000a10 <socket+0x214>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800090a:	4293      	cmp	r3, r2
 800090c:	d103      	bne.n	8000916 <socket+0x11a>
 800090e:	4b40      	ldr	r3, [pc, #256]	@ (8000a10 <socket+0x214>)
 8000910:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000914:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	3301      	adds	r3, #1
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000922:	461a      	mov	r2, r3
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	0a1b      	lsrs	r3, r3, #8
 8000928:	b29b      	uxth	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4619      	mov	r1, r3
 800092e:	4610      	mov	r0, r2
 8000930:	f7ff fc60 	bl	80001f4 <WIZCHIP_WRITE>
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	3301      	adds	r3, #1
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000940:	461a      	mov	r2, r3
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f7ff fc53 	bl	80001f4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	3301      	adds	r3, #1
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc49 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000962:	bf00      	nop
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	3301      	adds	r3, #1
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fbf3 	bl	800015c <WIZCHIP_READ>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f3      	bne.n	8000964 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2201      	movs	r2, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	b21b      	sxth	r3, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	b21a      	sxth	r2, r3
 800098a:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <socket+0x218>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b21b      	sxth	r3, r3
 8000990:	4013      	ands	r3, r2
 8000992:	b21b      	sxth	r3, r3
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <socket+0x218>)
 8000998:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	f003 0201 	and.w	r2, r3, #1
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <socket+0x218>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <socket+0x218>)
 80009b6:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2201      	movs	r2, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <socket+0x21c>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <socket+0x21c>)
 80009d4:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <socket+0x220>)
 80009da:	2100      	movs	r1, #0
 80009dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <socket+0x224>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80009e8:	bf00      	nop
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	3301      	adds	r3, #1
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fbb0 	bl	800015c <WIZCHIP_READ>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f3      	beq.n	80009ea <socket+0x1ee>
   return (int8_t)sn;
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000a06:	4618      	mov	r0, r3
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000064 	.word	0x20000064
 8000a18:	20000066 	.word	0x20000066
 8000a1c:	20000068 	.word	0x20000068
 8000a20:	2000007c 	.word	0x2000007c

08000a24 <close>:

int8_t close(uint8_t sn)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b08      	cmp	r3, #8
 8000a32:	d902      	bls.n	8000a3a <close+0x16>
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	e060      	b.n	8000afc <close+0xd8>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	3301      	adds	r3, #1
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a46:	2110      	movs	r1, #16
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbd3 	bl	80001f4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000a4e:	bf00      	nop
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	3301      	adds	r3, #1
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fb7d 	bl	800015c <WIZCHIP_READ>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f3      	bne.n	8000a50 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000a74:	211f      	movs	r1, #31
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fbbc 	bl	80001f4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	b21a      	sxth	r2, r3
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <close+0xe0>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <close+0xe0>)
 8000a98:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <close+0xe4>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4013      	ands	r3, r2
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <close+0xe4>)
 8000ab6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <close+0xe8>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <close+0xec>)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000aca:	e00a      	b.n	8000ae2 <close+0xbe>
	{
		if (g_uart_request_exit == 1)
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <close+0xf0>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d105      	bne.n	8000ae2 <close+0xbe>
		{
			g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <close+0xf0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
			return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000adc:	f06f 030c 	mvn.w	r3, #12
 8000ae0:	e00c      	b.n	8000afc <close+0xd8>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb34 	bl	800015c <WIZCHIP_READ>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1e8      	bne.n	8000acc <close+0xa8>
		}
	}
	return SOCK_OK;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000064 	.word	0x20000064
 8000b08:	20000066 	.word	0x20000066
 8000b0c:	20000068 	.word	0x20000068
 8000b10:	2000007c 	.word	0x2000007c
 8000b14:	20000078 	.word	0x20000078

08000b18 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d902      	bls.n	8000b34 <connect+0x1c>
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e0d1      	b.n	8000cd8 <connect+0x1c0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	3301      	adds	r3, #1
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fb0d 	bl	800015c <WIZCHIP_READ>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f003 030f 	and.w	r3, r3, #15
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d002      	beq.n	8000b52 <connect+0x3a>
 8000b4c:	f06f 0304 	mvn.w	r3, #4
 8000b50:	e0c2      	b.n	8000cd8 <connect+0x1c0>
   CHECK_SOCKINIT();
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	3301      	adds	r3, #1
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fafc 	bl	800015c <WIZCHIP_READ>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b13      	cmp	r3, #19
 8000b68:	d002      	beq.n	8000b70 <connect+0x58>
 8000b6a:	f06f 0302 	mvn.w	r3, #2
 8000b6e:	e0b3      	b.n	8000cd8 <connect+0x1c0>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	021b      	lsls	r3, r3, #8
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	3201      	adds	r2, #1
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021b      	lsls	r3, r3, #8
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	3202      	adds	r2, #2
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	3203      	adds	r2, #3
 8000b9a:	7812      	ldrb	r2, [r2, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba6:	d002      	beq.n	8000bae <connect+0x96>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <connect+0x9c>
 8000bae:	f06f 030b 	mvn.w	r3, #11
 8000bb2:	e091      	b.n	8000cd8 <connect+0x1c0>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8000bb4:	88bb      	ldrh	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <connect+0xa8>
 8000bba:	f06f 030a 	mvn.w	r3, #10
 8000bbe:	e08b      	b.n	8000cd8 <connect+0x1c0>
	setSn_DIPR(sn,addr);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8000bcc:	2204      	movs	r2, #4
 8000bce:	6839      	ldr	r1, [r7, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fbbd 	bl	8000350 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	3301      	adds	r3, #1
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000be2:	461a      	mov	r2, r3
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4619      	mov	r1, r3
 8000bee:	4610      	mov	r0, r2
 8000bf0:	f7ff fb00 	bl	80001f4 <WIZCHIP_WRITE>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8000c00:	461a      	mov	r2, r3
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4619      	mov	r1, r3
 8000c08:	4610      	mov	r0, r2
 8000c0a:	f7ff faf3 	bl	80001f4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	3301      	adds	r3, #1
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fae9 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000c22:	bf00      	nop
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	3301      	adds	r3, #1
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fa93 	bl	800015c <WIZCHIP_READ>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f3      	bne.n	8000c24 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000c3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <connect+0x1c8>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	fa42 f303 	asr.w	r3, r2, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d036      	beq.n	8000cbe <connect+0x1a6>
 8000c50:	2300      	movs	r3, #0
 8000c52:	e041      	b.n	8000cd8 <connect+0x1c0>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	3301      	adds	r3, #1
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fa7b 	bl	800015c <WIZCHIP_READ>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00c      	beq.n	8000c8a <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	3301      	adds	r3, #1
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fab8 	bl	80001f4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8000c84:	f06f 030c 	mvn.w	r3, #12
 8000c88:	e026      	b.n	8000cd8 <connect+0x1c0>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3301      	adds	r3, #1
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fa60 	bl	800015c <WIZCHIP_READ>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8000ca2:	f06f 0303 	mvn.w	r3, #3
 8000ca6:	e017      	b.n	8000cd8 <connect+0x1c0>
		}
		if (g_uart_request_exit == 1)
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <connect+0x1cc>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d105      	bne.n	8000cbe <connect+0x1a6>
		{
			g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <connect+0x1cc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000cb8:	f06f 030c 	mvn.w	r3, #12
 8000cbc:	e00c      	b.n	8000cd8 <connect+0x1c0>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fa46 	bl	800015c <WIZCHIP_READ>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b17      	cmp	r3, #23
 8000cd4:	d1be      	bne.n	8000c54 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000064 	.word	0x20000064
 8000ce4:	20000078 	.word	0x20000078

08000ce8 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d902      	bls.n	8000cfe <disconnect+0x16>
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfc:	e06d      	b.n	8000dda <disconnect+0xf2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	3301      	adds	r3, #1
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fa28 	bl	800015c <WIZCHIP_READ>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d002      	beq.n	8000d1c <disconnect+0x34>
 8000d16:	f06f 0304 	mvn.w	r3, #4
 8000d1a:	e05e      	b.n	8000dda <disconnect+0xf2>
	setSn_CR(sn,Sn_CR_DISCON);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	3301      	adds	r3, #1
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fa62 	bl	80001f4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000d30:	bf00      	nop
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	3301      	adds	r3, #1
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fa0c 	bl	800015c <WIZCHIP_READ>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f3      	bne.n	8000d32 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <disconnect+0xfc>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <disconnect+0xfc>)
 8000d66:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	@ (8000de8 <disconnect+0x100>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	fa42 f303 	asr.w	r3, r2, r3
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d021      	beq.n	8000dc0 <disconnect+0xd8>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e02c      	b.n	8000dda <disconnect+0xf2>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	3301      	adds	r3, #1
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff f9e5 	bl	800015c <WIZCHIP_READ>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <disconnect+0xc2>
	   {
	      close(sn);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fe40 	bl	8000a24 <close>
	      return SOCKERR_TIMEOUT;
 8000da4:	f06f 030c 	mvn.w	r3, #12
 8000da8:	e017      	b.n	8000dda <disconnect+0xf2>
	   }
	   if (g_uart_request_exit == 1)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <disconnect+0x104>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d105      	bne.n	8000dc0 <disconnect+0xd8>
	   {
		   g_uart_request_exit = 0; // Xóa cờ sau khi xử lý
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <disconnect+0x104>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
		   return SOCKERR_TIMEOUT	; // Trả về mã lỗi tùy chỉnh
 8000dba:	f06f 030c 	mvn.w	r3, #12
 8000dbe:	e00c      	b.n	8000dda <disconnect+0xf2>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff f9c5 	bl	800015c <WIZCHIP_READ>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1d3      	bne.n	8000d80 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8000dd8:	2301      	movs	r3, #1
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000066 	.word	0x20000066
 8000de8:	20000064 	.word	0x20000064
 8000dec:	20000078 	.word	0x20000078

08000df0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d902      	bls.n	8000e14 <send+0x24>
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e0dd      	b.n	8000fd0 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	3301      	adds	r3, #1
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff f99d 	bl	800015c <WIZCHIP_READ>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d002      	beq.n	8000e32 <send+0x42>
 8000e2c:	f06f 0304 	mvn.w	r3, #4
 8000e30:	e0ce      	b.n	8000fd0 <send+0x1e0>
   CHECK_SOCKDATA();
 8000e32:	88bb      	ldrh	r3, [r7, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <send+0x4e>
 8000e38:	f06f 030d 	mvn.w	r3, #13
 8000e3c:	e0c8      	b.n	8000fd0 <send+0x1e0>
   tmp = getSn_SR(sn);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	3301      	adds	r3, #1
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff f986 	bl	800015c <WIZCHIP_READ>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b17      	cmp	r3, #23
 8000e58:	d005      	beq.n	8000e66 <send+0x76>
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b1c      	cmp	r3, #28
 8000e5e:	d002      	beq.n	8000e66 <send+0x76>
 8000e60:	f06f 0306 	mvn.w	r3, #6
 8000e64:	e0b4      	b.n	8000fd0 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8000e66:	4b5c      	ldr	r3, [pc, #368]	@ (8000fd8 <send+0x1e8>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	fa42 f303 	asr.w	r3, r2, r3
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d039      	beq.n	8000eee <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	3301      	adds	r3, #1
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff f968 	bl	800015c <WIZCHIP_READ>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d019      	beq.n	8000ed2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff f9a1 	bl	80001f4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	4b45      	ldr	r3, [pc, #276]	@ (8000fd8 <send+0x1e8>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b42      	ldr	r3, [pc, #264]	@ (8000fd8 <send+0x1e8>)
 8000ece:	801a      	strh	r2, [r3, #0]
 8000ed0:	e00d      	b.n	8000eee <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <send+0xfa>
      {
         close(sn);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fda0 	bl	8000a24 <close>
         return SOCKERR_TIMEOUT;
 8000ee4:	f06f 030c 	mvn.w	r3, #12
 8000ee8:	e072      	b.n	8000fd0 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e070      	b.n	8000fd0 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff f92e 	bl	800015c <WIZCHIP_READ>
 8000f00:	4603      	mov	r3, r0
 8000f02:	029b      	lsls	r3, r3, #10
 8000f04:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000f06:	88ba      	ldrh	r2, [r7, #4]
 8000f08:	89bb      	ldrh	r3, [r7, #12]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d901      	bls.n	8000f12 <send+0x122>
 8000f0e:	89bb      	ldrh	r3, [r7, #12]
 8000f10:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fa7b 	bl	8000410 <getSn_TX_FSR>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	3301      	adds	r3, #1
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff f916 	bl	800015c <WIZCHIP_READ>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b17      	cmp	r3, #23
 8000f38:	d009      	beq.n	8000f4e <send+0x15e>
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	2b1c      	cmp	r3, #28
 8000f3e:	d006      	beq.n	8000f4e <send+0x15e>
      {
         close(sn);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fd6e 	bl	8000a24 <close>
         return SOCKERR_SOCKSTATUS;
 8000f48:	f06f 0306 	mvn.w	r3, #6
 8000f4c:	e040      	b.n	8000fd0 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <send+0x1ec>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	fa42 f303 	asr.w	r3, r2, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d005      	beq.n	8000f6e <send+0x17e>
 8000f62:	88ba      	ldrh	r2, [r7, #4]
 8000f64:	89bb      	ldrh	r3, [r7, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d901      	bls.n	8000f6e <send+0x17e>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e030      	b.n	8000fd0 <send+0x1e0>
      if(len <= freesize) break;
 8000f6e:	88ba      	ldrh	r2, [r7, #4]
 8000f70:	89bb      	ldrh	r3, [r7, #12]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d900      	bls.n	8000f78 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8000f76:	e7cc      	b.n	8000f12 <send+0x122>
      if(len <= freesize) break;
 8000f78:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000f7a:	88ba      	ldrh	r2, [r7, #4]
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	6839      	ldr	r1, [r7, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fad7 	bl	8000534 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f92:	2120      	movs	r1, #32
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff f92d 	bl	80001f4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000f9a:	bf00      	nop
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff f8d7 	bl	800015c <WIZCHIP_READ>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f3      	bne.n	8000f9c <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <send+0x1e8>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <send+0x1e8>)
 8000fcc:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000fce:	88bb      	ldrh	r3, [r7, #4]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000066 	.word	0x20000066
 8000fdc:	20000064 	.word	0x20000064

08000fe0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d902      	bls.n	8001004 <recv+0x24>
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e09b      	b.n	800113c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	3301      	adds	r3, #1
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f8a5 	bl	800015c <WIZCHIP_READ>
 8001012:	4603      	mov	r3, r0
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	2b01      	cmp	r3, #1
 800101a:	d002      	beq.n	8001022 <recv+0x42>
 800101c:	f06f 0304 	mvn.w	r3, #4
 8001020:	e08c      	b.n	800113c <recv+0x15c>
   CHECK_SOCKDATA();
 8001022:	88bb      	ldrh	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <recv+0x4e>
 8001028:	f06f 030d 	mvn.w	r3, #13
 800102c:	e086      	b.n	800113c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	3301      	adds	r3, #1
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f88e 	bl	800015c <WIZCHIP_READ>
 8001040:	4603      	mov	r3, r0
 8001042:	029b      	lsls	r3, r3, #10
 8001044:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001046:	89ba      	ldrh	r2, [r7, #12]
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	d201      	bcs.n	8001052 <recv+0x72>
 800104e:	89bb      	ldrh	r3, [r7, #12]
 8001050:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa24 	bl	80004a2 <getSn_RX_RSR>
 800105a:	4603      	mov	r3, r0
 800105c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	3301      	adds	r3, #1
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f876 	bl	800015c <WIZCHIP_READ>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b17      	cmp	r3, #23
 8001078:	d026      	beq.n	80010c8 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	2b1c      	cmp	r3, #28
 800107e:	d11c      	bne.n	80010ba <recv+0xda>
            {
               if(recvsize != 0) break;
 8001080:	89bb      	ldrh	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d133      	bne.n	80010ee <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f9c1 	bl	8000410 <getSn_TX_FSR>
 800108e:	4603      	mov	r3, r0
 8001090:	461c      	mov	r4, r3
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	3301      	adds	r3, #1
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f85c 	bl	800015c <WIZCHIP_READ>
 80010a4:	4603      	mov	r3, r0
 80010a6:	029b      	lsls	r3, r3, #10
 80010a8:	429c      	cmp	r4, r3
 80010aa:	d10d      	bne.n	80010c8 <recv+0xe8>
               {
                  close(sn);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fcb8 	bl	8000a24 <close>
                  return SOCKERR_SOCKSTATUS;
 80010b4:	f06f 0306 	mvn.w	r3, #6
 80010b8:	e040      	b.n	800113c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fcb1 	bl	8000a24 <close>
               return SOCKERR_SOCKSTATUS;
 80010c2:	f06f 0306 	mvn.w	r3, #6
 80010c6:	e039      	b.n	800113c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <recv+0x164>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	fa42 f303 	asr.w	r3, r2, r3
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <recv+0x106>
 80010dc:	89bb      	ldrh	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <recv+0x106>
 80010e2:	2300      	movs	r3, #0
 80010e4:	e02a      	b.n	800113c <recv+0x15c>
         if(recvsize != 0) break;
 80010e6:	89bb      	ldrh	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 80010ec:	e7b1      	b.n	8001052 <recv+0x72>
               if(recvsize != 0) break;
 80010ee:	bf00      	nop
 80010f0:	e000      	b.n	80010f4 <recv+0x114>
         if(recvsize != 0) break;
 80010f2:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80010f4:	89ba      	ldrh	r2, [r7, #12]
 80010f6:	88bb      	ldrh	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d201      	bcs.n	8001100 <recv+0x120>
 80010fc:	89bb      	ldrh	r3, [r7, #12]
 80010fe:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001100:	88ba      	ldrh	r2, [r7, #4]
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	6839      	ldr	r1, [r7, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa6e 	bl	80005e8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	3301      	adds	r3, #1
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001118:	2140      	movs	r1, #64	@ 0x40
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f86a 	bl	80001f4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001120:	bf00      	nop
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	3301      	adds	r3, #1
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f814 	bl	800015c <WIZCHIP_READ>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f3      	bne.n	8001122 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800113a:	88bb      	ldrh	r3, [r7, #4]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	20000064 	.word	0x20000064

08001148 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	70fb      	strb	r3, [r7, #3]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	2300      	movs	r3, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	807b      	strh	r3, [r7, #2]
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
	...

080011fc <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <reg_wizchip_cs_cbfunc+0x16>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d106      	bne.n	8001220 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <reg_wizchip_cs_cbfunc+0x3c>)
 8001214:	4a09      	ldr	r2, [pc, #36]	@ (800123c <reg_wizchip_cs_cbfunc+0x40>)
 8001216:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <reg_wizchip_cs_cbfunc+0x3c>)
 800121a:	4a09      	ldr	r2, [pc, #36]	@ (8001240 <reg_wizchip_cs_cbfunc+0x44>)
 800121c:	619a      	str	r2, [r3, #24]
 800121e:	e006      	b.n	800122e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001220:	4a05      	ldr	r2, [pc, #20]	@ (8001238 <reg_wizchip_cs_cbfunc+0x3c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001226:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <reg_wizchip_cs_cbfunc+0x3c>)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	6193      	str	r3, [r2, #24]
   }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000004 	.word	0x20000004
 800123c:	08001161 	.word	0x08001161
 8001240:	0800116d 	.word	0x0800116d

08001244 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800124e:	bf00      	nop
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <reg_wizchip_spi_cbfunc+0x4c>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f9      	beq.n	8001250 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <reg_wizchip_spi_cbfunc+0x24>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d106      	bne.n	8001276 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <reg_wizchip_spi_cbfunc+0x4c>)
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <reg_wizchip_spi_cbfunc+0x50>)
 800126c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <reg_wizchip_spi_cbfunc+0x4c>)
 8001270:	4a09      	ldr	r2, [pc, #36]	@ (8001298 <reg_wizchip_spi_cbfunc+0x54>)
 8001272:	621a      	str	r2, [r3, #32]
 8001274:	e006      	b.n	8001284 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001276:	4a06      	ldr	r2, [pc, #24]	@ (8001290 <reg_wizchip_spi_cbfunc+0x4c>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800127c:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <reg_wizchip_spi_cbfunc+0x4c>)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	6213      	str	r3, [r2, #32]
   }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000004 	.word	0x20000004
 8001294:	080011ad 	.word	0x080011ad
 8001298:	080011bb 	.word	0x080011bb

0800129c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80012a6:	bf00      	nop
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f9      	beq.n	80012a8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <reg_wizchip_spiburst_cbfunc+0x24>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <reg_wizchip_spiburst_cbfunc+0x50>)
 80012c4:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80012c8:	4a09      	ldr	r2, [pc, #36]	@ (80012f0 <reg_wizchip_spiburst_cbfunc+0x54>)
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80012cc:	e006      	b.n	80012dc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80012ce:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80012d4:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000004 	.word	0x20000004
 80012ec:	080011cf 	.word	0x080011cf
 80012f0:	080011e5 	.word	0x080011e5

080012f4 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	f200 80c5 	bhi.w	800149e <ctlwizchip+0x1aa>
 8001314:	a201      	add	r2, pc, #4	@ (adr r2, 800131c <ctlwizchip+0x28>)
 8001316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131a:	bf00      	nop
 800131c:	0800135d 	.word	0x0800135d
 8001320:	08001363 	.word	0x08001363
 8001324:	0800138f 	.word	0x0800138f
 8001328:	08001383 	.word	0x08001383
 800132c:	0800139d 	.word	0x0800139d
 8001330:	080013a9 	.word	0x080013a9
 8001334:	080013b7 	.word	0x080013b7
 8001338:	080013dd 	.word	0x080013dd
 800133c:	080013ff 	.word	0x080013ff
 8001340:	08001443 	.word	0x08001443
 8001344:	08001449 	.word	0x08001449
 8001348:	08001451 	.word	0x08001451
 800134c:	080014a5 	.word	0x080014a5
 8001350:	08001459 	.word	0x08001459
 8001354:	08001467 	.word	0x08001467
 8001358:	08001483 	.word	0x08001483
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800135c:	f000 f8aa 	bl	80014b4 <wizchip_sw_reset>
         break;
 8001360:	e0a1      	b.n	80014a6 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3308      	adds	r3, #8
 8001370:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f8e7 	bl	800154c <wizchip_init>
 800137e:	4603      	mov	r3, r0
 8001380:	e092      	b.n	80014a8 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f96c 	bl	8001664 <wizchip_clrinterrupt>
         break;
 800138c:	e08b      	b.n	80014a6 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800138e:	f000 f99d 	bl	80016cc <wizchip_getinterrupt>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	801a      	strh	r2, [r3, #0]
         break;
 800139a:	e084      	b.n	80014a6 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f9b8 	bl	8001716 <wizchip_setinterruptmask>
         break;         
 80013a6:	e07e      	b.n	80014a6 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80013a8:	f000 f9d0 	bl	800174c <wizchip_getinterruptmask>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	801a      	strh	r2, [r3, #0]
         break;
 80013b4:	e077      	b.n	80014a6 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80013c6:	f7fe ff15 	bl	80001f4 <WIZCHIP_WRITE>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80013d6:	f7fe ff0d 	bl	80001f4 <WIZCHIP_WRITE>
         break;
 80013da:	e064      	b.n	80014a6 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80013dc:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80013e0:	f7fe febc 	bl	800015c <WIZCHIP_READ>
 80013e4:	4603      	mov	r3, r0
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	b29c      	uxth	r4, r3
 80013ea:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80013ee:	f7fe feb5 	bl	800015c <WIZCHIP_READ>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4423      	add	r3, r4
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	801a      	strh	r2, [r3, #0]
         break;
 80013fc:	e053      	b.n	80014a6 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80013fe:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <ctlwizchip+0x1bc>)
 8001400:	789a      	ldrb	r2, [r3, #2]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	4a29      	ldr	r2, [pc, #164]	@ (80014b0 <ctlwizchip+0x1bc>)
 800140c:	78d2      	ldrb	r2, [r2, #3]
 800140e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	3302      	adds	r3, #2
 8001414:	4a26      	ldr	r2, [pc, #152]	@ (80014b0 <ctlwizchip+0x1bc>)
 8001416:	7912      	ldrb	r2, [r2, #4]
 8001418:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3303      	adds	r3, #3
 800141e:	4a24      	ldr	r2, [pc, #144]	@ (80014b0 <ctlwizchip+0x1bc>)
 8001420:	7952      	ldrb	r2, [r2, #5]
 8001422:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3304      	adds	r3, #4
 8001428:	4a21      	ldr	r2, [pc, #132]	@ (80014b0 <ctlwizchip+0x1bc>)
 800142a:	7992      	ldrb	r2, [r2, #6]
 800142c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	3305      	adds	r3, #5
 8001432:	4a1f      	ldr	r2, [pc, #124]	@ (80014b0 <ctlwizchip+0x1bc>)
 8001434:	79d2      	ldrb	r2, [r2, #7]
 8001436:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3306      	adds	r3, #6
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
         break;
 8001440:	e031      	b.n	80014a6 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8001442:	f000 f9d5 	bl	80017f0 <wizphy_reset>
         break;
 8001446:	e02e      	b.n	80014a6 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f000 f9f8 	bl	800183e <wizphy_setphyconf>
         break;
 800144e:	e02a      	b.n	80014a6 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8001450:	6838      	ldr	r0, [r7, #0]
 8001452:	f000 fa37 	bl	80018c4 <wizphy_getphyconf>
         break;
 8001456:	e026      	b.n	80014a6 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fa9b 	bl	8001998 <wizphy_setphypmode>
 8001462:	4603      	mov	r3, r0
 8001464:	e020      	b.n	80014a8 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8001466:	f000 f9aa 	bl	80017be <wizphy_getphypmode>
 800146a:	4603      	mov	r3, r0
 800146c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2bff      	cmp	r3, #255	@ 0xff
 8001472:	d102      	bne.n	800147a <ctlwizchip+0x186>
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	e016      	b.n	80014a8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	7dfa      	ldrb	r2, [r7, #23]
 800147e:	701a      	strb	r2, [r3, #0]
         break;
 8001480:	e011      	b.n	80014a6 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8001482:	f000 f986 	bl	8001792 <wizphy_getphylink>
 8001486:	4603      	mov	r3, r0
 8001488:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800148a:	7dfb      	ldrb	r3, [r7, #23]
 800148c:	2bff      	cmp	r3, #255	@ 0xff
 800148e:	d102      	bne.n	8001496 <ctlwizchip+0x1a2>
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	e008      	b.n	80014a8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	7dfa      	ldrb	r2, [r7, #23]
 800149a:	701a      	strb	r2, [r3, #0]
         break;
 800149c:	e003      	b.n	80014a6 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e001      	b.n	80014a8 <ctlwizchip+0x1b4>
         break;
 80014a4:	bf00      	nop
   }
   return 0;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	20000004 	.word	0x20000004

080014b4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2206      	movs	r2, #6
 80014be:	4619      	mov	r1, r3
 80014c0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80014c4:	f7fe fee4 	bl	8000290 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2204      	movs	r2, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80014d4:	f7fe fedc 	bl	8000290 <WIZCHIP_READ_BUF>
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2204      	movs	r2, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80014e4:	f7fe fed4 	bl	8000290 <WIZCHIP_READ_BUF>
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2204      	movs	r2, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80014f4:	f7fe fecc 	bl	8000290 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80014f8:	2180      	movs	r1, #128	@ 0x80
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7fe fe7a 	bl	80001f4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001500:	2000      	movs	r0, #0
 8001502:	f7fe fe2b 	bl	800015c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2206      	movs	r2, #6
 800150a:	4619      	mov	r1, r3
 800150c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001510:	f7fe ff1e 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2204      	movs	r2, #4
 800151a:	4619      	mov	r1, r3
 800151c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001520:	f7fe ff16 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	2204      	movs	r2, #4
 800152a:	4619      	mov	r1, r3
 800152c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001530:	f7fe ff0e 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	2204      	movs	r2, #4
 800153a:	4619      	mov	r1, r3
 800153c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001540:	f7fe ff06 	bl	8000350 <WIZCHIP_WRITE_BUF>
}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800155a:	f7ff ffab 	bl	80014b4 <wizchip_sw_reset>
   if(txsize)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d03b      	beq.n	80015dc <wizchip_init+0x90>
   {
      tmp = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e015      	b.n	800159a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	4413      	add	r3, r2
 800157c:	b2db      	uxtb	r3, r3
 800157e:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001584:	2b10      	cmp	r3, #16
 8001586:	dd02      	ble.n	800158e <wizchip_init+0x42>
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
 800158c:	e066      	b.n	800165c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	3301      	adds	r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	dde5      	ble.n	800156e <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e015      	b.n	80015d4 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80015a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	3301      	adds	r3, #1
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80015b6:	4618      	mov	r0, r3
 80015b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7fe fe16 	bl	80001f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d8:	2b07      	cmp	r3, #7
 80015da:	dde5      	ble.n	80015a8 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d03b      	beq.n	800165a <wizchip_init+0x10e>
   {
      tmp = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e015      	b.n	8001618 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80015ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	7bbb      	ldrb	r3, [r7, #14]
 80015f8:	4413      	add	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80015fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001602:	2b10      	cmp	r3, #16
 8001604:	dd02      	ble.n	800160c <wizchip_init+0xc0>
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e027      	b.n	800165c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3301      	adds	r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161c:	2b07      	cmp	r3, #7
 800161e:	dde5      	ble.n	80015ec <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e015      	b.n	8001652 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	3301      	adds	r3, #1
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001634:	4618      	mov	r0, r3
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f7fe fdd7 	bl	80001f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	3301      	adds	r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	2b07      	cmp	r3, #7
 8001658:	dde5      	ble.n	8001626 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	b29b      	uxth	r3, r3
 8001678:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	f023 030f 	bic.w	r3, r3, #15
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8001688:	f7fe fdb4 	bl	80001f4 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e014      	b.n	80016bc <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8001692:	7bba      	ldrb	r2, [r7, #14]
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	fa42 f303 	asr.w	r3, r2, r3
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <wizchip_clrinterrupt+0x52>
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	3301      	adds	r3, #1
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016ae:	211f      	movs	r1, #31
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fd9f 	bl	80001f4 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	3301      	adds	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2b07      	cmp	r3, #7
 80016c0:	d9e7      	bls.n	8001692 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80016de:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80016e2:	f7fe fd3b 	bl	800015c <WIZCHIP_READ>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f023 030f 	bic.w	r3, r3, #15
 80016ec:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80016ee:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80016f2:	f7fe fd33 	bl	800015c <WIZCHIP_READ>
 80016f6:	4603      	mov	r3, r0
 80016f8:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b29a      	uxth	r2, r3
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4413      	add	r3, r2
 800170a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800170c:	88bb      	ldrh	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	b29b      	uxth	r3, r3
 800172a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	4619      	mov	r1, r3
 8001730:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001734:	f7fe fd5e 	bl	80001f4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	4619      	mov	r1, r3
 800173c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8001740:	f7fe fd58 	bl	80001f4 <WIZCHIP_WRITE>
#endif   
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800175e:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8001762:	f7fe fcfb 	bl	800015c <WIZCHIP_READ>
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800176a:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800176e:	f7fe fcf5 	bl	800015c <WIZCHIP_READ>
 8001772:	4603      	mov	r3, r0
 8001774:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800177a:	88bb      	ldrh	r3, [r7, #4]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b29a      	uxth	r2, r3
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	b29b      	uxth	r3, r3
 8001784:	4413      	add	r3, r2
 8001786:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001788:	88bb      	ldrh	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8001798:	2300      	movs	r3, #0
 800179a:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800179c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017a0:	f7fe fcdc 	bl	800015c <WIZCHIP_READ>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80017ae:	2301      	movs	r3, #1
 80017b0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80017c8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017cc:	f7fe fcc6 	bl	800015c <WIZCHIP_READ>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017d6:	2b30      	cmp	r3, #48	@ 0x30
 80017d8:	d102      	bne.n	80017e0 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80017da:	2301      	movs	r3, #1
 80017dc:	71fb      	strb	r3, [r7, #7]
 80017de:	e001      	b.n	80017e4 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80017e0:	2300      	movs	r3, #0
 80017e2:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80017f6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80017fa:	f7fe fcaf 	bl	800015c <WIZCHIP_READ>
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001808:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001812:	f7fe fcef 	bl	80001f4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8001816:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800181a:	f7fe fc9f 	bl	800015c <WIZCHIP_READ>
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001828:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8001832:	f7fe fcdf 	bl	80001f4 <WIZCHIP_WRITE>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d104      	bne.n	800185c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e003      	b.n	8001864 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001862:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d104      	bne.n	8001876 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e019      	b.n	80018aa <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	78db      	ldrb	r3, [r3, #3]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d10d      	bne.n	800189a <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	789b      	ldrb	r3, [r3, #2]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d104      	bne.n	8001890 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	f043 0318 	orr.w	r3, r3, #24
 800188c:	73fb      	strb	r3, [r7, #15]
 800188e:	e00c      	b.n	80018aa <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	73fb      	strb	r3, [r7, #15]
 8001898:	e007      	b.n	80018aa <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	789b      	ldrb	r3, [r3, #2]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d103      	bne.n	80018aa <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	f043 0310 	orr.w	r3, r3, #16
 80018a8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018b2:	f7fe fc9f 	bl	80001f4 <WIZCHIP_WRITE>
   wizphy_reset();
 80018b6:	f7ff ff9b 	bl	80017f0 <wizphy_reset>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80018d0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80018d4:	f7fe fc42 	bl	800015c <WIZCHIP_READ>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	119b      	asrs	r3, r3, #6
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	d001      	beq.n	80018fa <wizphy_getphyconf+0x36>
 80018f6:	2b38      	cmp	r3, #56	@ 0x38
 80018f8:	d103      	bne.n	8001902 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	705a      	strb	r2, [r3, #1]
         break;
 8001900:	e003      	b.n	800190a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	705a      	strb	r2, [r3, #1]
         break;
 8001908:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001910:	3b10      	subs	r3, #16
 8001912:	2b10      	cmp	r3, #16
 8001914:	bf8c      	ite	hi
 8001916:	2201      	movhi	r2, #1
 8001918:	2200      	movls	r2, #0
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	2a00      	cmp	r2, #0
 800191e:	d10f      	bne.n	8001940 <wizphy_getphyconf+0x7c>
 8001920:	4a1b      	ldr	r2, [pc, #108]	@ (8001990 <wizphy_getphyconf+0xcc>)
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	709a      	strb	r2, [r3, #2]
         break;
 800193e:	e003      	b.n	8001948 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	709a      	strb	r2, [r3, #2]
         break;
 8001946:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800194e:	3b08      	subs	r3, #8
 8001950:	2b18      	cmp	r3, #24
 8001952:	bf8c      	ite	hi
 8001954:	2201      	movhi	r2, #1
 8001956:	2200      	movls	r2, #0
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	2a00      	cmp	r2, #0
 800195c:	d10f      	bne.n	800197e <wizphy_getphyconf+0xba>
 800195e:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <wizphy_getphyconf+0xd0>)
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf14      	ite	ne
 800196c:	2301      	movne	r3, #1
 800196e:	2300      	moveq	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	70da      	strb	r2, [r3, #3]
         break;
 800197c:	e003      	b.n	8001986 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	70da      	strb	r2, [r3, #3]
         break;
 8001984:	bf00      	nop
   }
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	00010101 	.word	0x00010101
 8001994:	01010001 	.word	0x01010001

08001998 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80019a6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80019aa:	f7fe fbd7 	bl	800015c <WIZCHIP_READ>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <wizphy_setphypmode+0x2a>
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295
 80019c0:	e030      	b.n	8001a24 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80019c8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d104      	bne.n	80019da <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e003      	b.n	80019e2 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80019e0:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80019ea:	f7fe fc03 	bl	80001f4 <WIZCHIP_WRITE>
   wizphy_reset();
 80019ee:	f7ff feff 	bl	80017f0 <wizphy_reset>
   tmp = getPHYCFGR();
 80019f2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80019f6:	f7fe fbb1 	bl	800015c <WIZCHIP_READ>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <wizphy_setphypmode+0x88>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e008      	b.n	8001a24 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <wizphy_setphypmode+0x88>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e001      	b.n	8001a24 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2206      	movs	r2, #6
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001a3e:	f7fe fc87 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	330e      	adds	r3, #14
 8001a46:	2204      	movs	r2, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a4e:	f7fe fc7f 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	330a      	adds	r3, #10
 8001a56:	2204      	movs	r2, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001a5e:	f7fe fc77 	bl	8000350 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3306      	adds	r3, #6
 8001a66:	2204      	movs	r2, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001a6e:	f7fe fc6f 	bl	8000350 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7c9a      	ldrb	r2, [r3, #18]
 8001a76:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <wizchip_setnetinfo+0x78>)
 8001a78:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7cda      	ldrb	r2, [r3, #19]
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <wizchip_setnetinfo+0x78>)
 8001a80:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7d1a      	ldrb	r2, [r3, #20]
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <wizchip_setnetinfo+0x78>)
 8001a88:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7d5a      	ldrb	r2, [r3, #21]
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <wizchip_setnetinfo+0x78>)
 8001a90:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7d9a      	ldrb	r2, [r3, #22]
 8001a96:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <wizchip_setnetinfo+0x7c>)
 8001a98:	701a      	strb	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000084 	.word	0x20000084
 8001aa8:	20000088 	.word	0x20000088

08001aac <csLOW>:
#include "main.h"
#include "W25Qxx.h"

uint8_t tempBytes[4];
void csLOW(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ab6:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <csLOW+0x14>)
 8001ab8:	f005 f9c1 	bl	8006e3e <HAL_GPIO_WritePin>
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40010c00 	.word	0x40010c00

08001ac4 <csHIGH>:
void csHIGH(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ace:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <csHIGH+0x14>)
 8001ad0:	f005 f9b5 	bl	8006e3e <HAL_GPIO_WritePin>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40010c00 	.word	0x40010c00

08001adc <W25Q_delay>:
void W25Q_delay(uint32_t time)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f003 fb4b 	bl	8005180 <HAL_Delay>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <SPI_Write>:
void SPI_Write(uint8_t *data, uint16_t len)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <SPI_Write+0x24>)
 8001b0a:	f005 fecb 	bl	80078a4 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&W25Q_SPI, data, len);
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000128 	.word	0x20000128

08001b1c <SPI_Read>:
void SPI_Read(uint8_t *data, uint16_t len)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8001b28:	887a      	ldrh	r2, [r7, #2]
 8001b2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <SPI_Read+0x24>)
 8001b32:	f005 fffb 	bl	8007b2c <HAL_SPI_Receive>
//	HAL_SPI_Receive_DMA(&W25Q_SPI, data, len);
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000128 	.word	0x20000128

08001b44 <W25Q_WaitForWriteEnd>:
//	uint8_t	ret;
//	HAL_SPI_TransmitReceive(&W25Q_SPI,&Data,&ret,1,100);
//	return ret;
//}
void W25Q_WaitForWriteEnd(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
	uint8_t w25q_stt;
	uint8_t tData = 0x05;
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	71bb      	strb	r3, [r7, #6]
	W25Q_delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff ffc4 	bl	8001adc <W25Q_delay>

	csLOW();
 8001b54:	f7ff ffaa 	bl	8001aac <csLOW>
	HAL_SPI_Transmit(&W25Q_SPI, &tData, 1, 1000);
 8001b58:	1db9      	adds	r1, r7, #6
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	2201      	movs	r2, #1
 8001b60:	480b      	ldr	r0, [pc, #44]	@ (8001b90 <W25Q_WaitForWriteEnd+0x4c>)
 8001b62:	f005 fe9f 	bl	80078a4 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&W25Q_SPI, &tData, 1);
	do
	{
		HAL_SPI_Receive(&W25Q_SPI, &w25q_stt, 1, 1000);
 8001b66:	1df9      	adds	r1, r7, #7
 8001b68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4808      	ldr	r0, [pc, #32]	@ (8001b90 <W25Q_WaitForWriteEnd+0x4c>)
 8001b70:	f005 ffdc 	bl	8007b2c <HAL_SPI_Receive>
//		HAL_SPI_Receive_DMA(&W25Q_SPI, &w25q_stt, 1);
		W25Q_delay(1);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff ffb1 	bl	8001adc <W25Q_delay>
	}
	while ((w25q_stt & 0x01) == 0x01);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <W25Q_WaitForWriteEnd+0x22>
	csHIGH();
 8001b84:	f7ff ff9e 	bl	8001ac4 <csHIGH>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000128 	.word	0x20000128

08001b94 <W25Q_Reset>:
void W25Q_Reset (void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x66; //  enable reset
 8001b9a:	2366      	movs	r3, #102	@ 0x66
 8001b9c:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99; //reset
 8001b9e:	2399      	movs	r3, #153	@ 0x99
 8001ba0:	717b      	strb	r3, [r7, #5]
	csLOW();
 8001ba2:	f7ff ff83 	bl	8001aac <csLOW>
	HAL_SPI_Transmit(&W25Q_SPI, tData, 2, 1000);
 8001ba6:	1d39      	adds	r1, r7, #4
 8001ba8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bac:	2202      	movs	r2, #2
 8001bae:	4804      	ldr	r0, [pc, #16]	@ (8001bc0 <W25Q_Reset+0x2c>)
 8001bb0:	f005 fe78 	bl	80078a4 <HAL_SPI_Transmit>
	csHIGH();
 8001bb4:	f7ff ff86 	bl	8001ac4 <csHIGH>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000128 	.word	0x20000128

08001bc4 <W25Q_FastRead>:
	}
	SPI_Read(rData, size);
	csHIGH();
}
void W25Q_FastRead(uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	4413      	add	r3, r2
 8001bdc:	61fb      	str	r3, [r7, #28]
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x0B;// enable fast read
 8001bde:	230b      	movs	r3, #11
 8001be0:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	763b      	strb	r3, [r7, #24]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;// LSB addr;
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		tData[5] = 0;
	}
	csLOW();
 8001bfc:	f7ff ff56 	bl	8001aac <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 5);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2105      	movs	r1, #5
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff74 	bl	8001af4 <SPI_Write>
	} else
	{
		SPI_Write(tData, 6);
	}
	SPI_Read(rData, size);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4619      	mov	r1, r3
 8001c12:	6838      	ldr	r0, [r7, #0]
 8001c14:	f7ff ff82 	bl	8001b1c <SPI_Read>
	csHIGH();
 8001c18:	f7ff ff54 	bl	8001ac4 <csHIGH>
}
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <W25Q_FastRead_address>:

void W25Q_FastRead_address(uint32_t memAddr, uint32_t size, uint8_t *rData)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
	uint8_t tData[6];
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x0B;// enable fast read
 8001c30:	230b      	movs	r3, #11
 8001c32:	743b      	strb	r3, [r7, #16]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	0c1b      	lsrs	r3, r3, #16
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	747b      	strb	r3, [r7, #17]
		tData[2] = (memAddr>>8)&0xFF;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	74bb      	strb	r3, [r7, #18]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	74fb      	strb	r3, [r7, #19]
		tData[4] = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	753b      	strb	r3, [r7, #20]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;// LSB addr;
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		tData[5] = 0;
	}
	csLOW();
 8001c4e:	f7ff ff2d 	bl	8001aac <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 5);
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	2105      	movs	r1, #5
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff4b 	bl	8001af4 <SPI_Write>
	} else
	{
		SPI_Write(tData, 6);
	}
	SPI_Read(rData, size);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff59 	bl	8001b1c <SPI_Read>
	csHIGH();
 8001c6a:	f7ff ff2b 	bl	8001ac4 <csHIGH>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <write_enable>:


void write_enable(void)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06; // enable write
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001c80:	f7ff ff14 	bl	8001aac <csLOW>
	SPI_Write(&tData, 1);
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	2101      	movs	r1, #1
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff33 	bl	8001af4 <SPI_Write>
	csHIGH();
 8001c8e:	f7ff ff19 	bl	8001ac4 <csHIGH>
	W25Q_delay(1);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f7ff ff22 	bl	8001adc <W25Q_delay>
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <write_disable>:
void write_disable(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04; // disable write
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001caa:	f7ff feff 	bl	8001aac <csLOW>
	SPI_Write(&tData, 1);
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff1e 	bl	8001af4 <SPI_Write>
	csHIGH();
 8001cb8:	f7ff ff04 	bl	8001ac4 <csHIGH>
	W25Q_delay(1);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff ff0d 	bl	8001adc <W25Q_delay>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <W25Q_Erase_Sector>:
	csHIGH();
	W25Q_WaitForWriteEnd();
	W25Q_delay(5);
}
void W25Q_Erase_Sector (uint16_t numsector)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256; // mỗi sector có 16 page * 256 byte
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	031b      	lsls	r3, r3, #12
 8001cd8:	617b      	str	r3, [r7, #20]
	W25Q_WaitForWriteEnd();
 8001cda:	f7ff ff33 	bl	8001b44 <W25Q_WaitForWriteEnd>
	write_enable();
 8001cde:	f7ff ffca 	bl	8001c76 <write_enable>
	if (numBLOCK<512)
	{
		tData[0] = 0x20;//Erase sector
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;// MSB addr
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	0c1b      	lsrs	r3, r3, #16
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr>>0)&0xFF;// LSB addr
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	73fb      	strb	r3, [r7, #15]
		csLOW();
 8001cfc:	f7ff fed6 	bl	8001aac <csLOW>
		SPI_Write(tData, 4);
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2104      	movs	r1, #4
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fef4 	bl	8001af4 <SPI_Write>
		csHIGH();
 8001d0c:	f7ff feda 	bl	8001ac4 <csHIGH>
		tData[4] = (memAddr>>0)&0xFF;// LSB addr
		csLOW();
		SPI_Write(tData, 5);
		csHIGH();
	}
	W25Q_WaitForWriteEnd();
 8001d10:	f7ff ff18 	bl	8001b44 <W25Q_WaitForWriteEnd>
	write_disable();
 8001d14:	f7ff ffc4 	bl	8001ca0 <write_disable>
}
 8001d18:	bf00      	nop
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <W25Q_Read_Byte>:
		dataindx = dataindx + bytesRemaining;
		size = size - bytesRemaining;
	}
}
uint8_t W25Q_Read_Byte(uint32_t Addr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	uint8_t tData[5];
	uint8_t rData;
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x03;// enable read
 8001d28:	2303      	movs	r3, #3
 8001d2a:	743b      	strb	r3, [r7, #16]
		tData[1] = (Addr>>16)&0xFF;// MSB addr
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	747b      	strb	r3, [r7, #17]
		tData[2] = (Addr>>8)&0xFF;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	74bb      	strb	r3, [r7, #18]
		tData[3] = (Addr>>0)&0xFF;// LSB addr
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	74fb      	strb	r3, [r7, #19]
		tData[1] = (Addr>>24)&0xFF;// MSB addr
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;// LSB addr;
		tData[4] = (Addr>>0)&0xFF;// LSB addr
	}
	csLOW();
 8001d42:	f7ff feb3 	bl	8001aac <csLOW>
	if (numBLOCK<1024)// size < 512mb
	{
		SPI_Write(tData, 4);
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fed1 	bl	8001af4 <SPI_Write>
	} else
	{
		SPI_Write(tData, 5);
	}
	SPI_Read(&rData, 1);
 8001d52:	f107 030f 	add.w	r3, r7, #15
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fedf 	bl	8001b1c <SPI_Read>
	csHIGH();
 8001d5e:	f7ff feb1 	bl	8001ac4 <csHIGH>
	return rData;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <W25Q_Write_Nbytes>:
		W25Q_WaitForWriteEnd();
		write_disable();
	}
}
void W25Q_Write_Nbytes(uint32_t Addr, uint8_t *data, uint32_t len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b0c8      	sub	sp, #288	@ 0x120
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d76:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d7a:	6018      	str	r0, [r3, #0]
 8001d7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d80:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d84:	6019      	str	r1, [r3, #0]
 8001d86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d8e:	601a      	str	r2, [r3, #0]
	uint8_t tData[266];
	uint8_t indx;
	if (numBLOCK<1024)// size < 512mb
	{
		tData[0] = 0x02;// enable read
 8001d90:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d98:	2202      	movs	r2, #2
 8001d9a:	701a      	strb	r2, [r3, #0]
		tData[1] = (Addr>>16)&0xFF;// MSB addr
 8001d9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001da0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0c1b      	lsrs	r3, r3, #16
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001dae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001db2:	705a      	strb	r2, [r3, #1]
		tData[2] = (Addr>>8)&0xFF;
 8001db4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001db8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001dc6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001dca:	709a      	strb	r2, [r3, #2]
		tData[3] = (Addr>>0)&0xFF;// LSB addr
 8001dcc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001dd0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ddc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001de0:	70da      	strb	r2, [r3, #3]
		indx = 4;
 8001de2:	2304      	movs	r3, #4
 8001de4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;// LSB addr;
		tData[4] = (Addr>>0)&0xFF;// LSB addr
		indx = 5;
	}
	uint16_t bytestosend = len + indx;
 8001de8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001df2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
	for (uint16_t i=0; i<len; i++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8001e06:	e018      	b.n	8001e3a <W25Q_Write_Nbytes+0xce>
	{
		tData[indx++] = data[i];
 8001e08:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001e0c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001e10:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	441a      	add	r2, r3
 8001e18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	f887 111f 	strb.w	r1, [r7, #287]	@ 0x11f
 8001e22:	4619      	mov	r1, r3
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e2e:	545a      	strb	r2, [r3, r1]
	for (uint16_t i=0; i<len; i++)
 8001e30:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001e34:	3301      	adds	r3, #1
 8001e36:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8001e3a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001e3e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001e42:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8dd      	bhi.n	8001e08 <W25Q_Write_Nbytes+0x9c>
	}
	if (W25Q_Read_Byte(Addr) == 0xFF)
 8001e4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e50:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	f7ff ff63 	bl	8001d20 <W25Q_Read_Byte>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2bff      	cmp	r3, #255	@ 0xff
 8001e5e:	d12b      	bne.n	8001eb8 <W25Q_Write_Nbytes+0x14c>
	{
		write_enable();
 8001e60:	f7ff ff09 	bl	8001c76 <write_enable>
		if (bytestosend > 250)
 8001e64:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8001e68:	2bfa      	cmp	r3, #250	@ 0xfa
 8001e6a:	d915      	bls.n	8001e98 <W25Q_Write_Nbytes+0x12c>
		{
			csLOW();
 8001e6c:	f7ff fe1e 	bl	8001aac <csLOW>
			SPI_Write(tData, 100);
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	2164      	movs	r1, #100	@ 0x64
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fe3c 	bl	8001af4 <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 8001e7c:	f107 0310 	add.w	r3, r7, #16
 8001e80:	3364      	adds	r3, #100	@ 0x64
 8001e82:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8001e86:	3a64      	subs	r2, #100	@ 0x64
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fe31 	bl	8001af4 <SPI_Write>
			csHIGH();
 8001e92:	f7ff fe17 	bl	8001ac4 <csHIGH>
 8001e96:	e00b      	b.n	8001eb0 <W25Q_Write_Nbytes+0x144>
		} else
		{
			csLOW();
 8001e98:	f7ff fe08 	bl	8001aac <csLOW>
			SPI_Write(tData, bytestosend);
 8001e9c:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fe24 	bl	8001af4 <SPI_Write>
			csHIGH();
 8001eac:	f7ff fe0a 	bl	8001ac4 <csHIGH>
		}
//		W25Q_delay(5);
		W25Q_WaitForWriteEnd();
 8001eb0:	f7ff fe48 	bl	8001b44 <W25Q_WaitForWriteEnd>
		write_disable();
 8001eb4:	f7ff fef4 	bl	8001ca0 <write_disable>
	}
}
 8001eb8:	bf00      	nop
 8001eba:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == huart1.Instance)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4ba3      	ldr	r3, [pc, #652]	@ (8002164 <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f040 8131 	bne.w	8002140 <HAL_UARTEx_RxEventCallback+0x27c>
	{
		heardbit_REB = HAL_GetTick(); // Heard bit from REB
 8001ede:	f003 f945 	bl	800516c <HAL_GetTick>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4aa0      	ldr	r2, [pc, #640]	@ (8002168 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001ee6:	6013      	str	r3, [r2, #0]
		switch (uart_data[0])
 8001ee8:	4ba0      	ldr	r3, [pc, #640]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	3b43      	subs	r3, #67	@ 0x43
 8001eee:	2b14      	cmp	r3, #20
 8001ef0:	f200 8126 	bhi.w	8002140 <HAL_UARTEx_RxEventCallback+0x27c>
 8001ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8001efc <HAL_UARTEx_RxEventCallback+0x38>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001fb1 	.word	0x08001fb1
 8001f00:	08001f51 	.word	0x08001f51
 8001f04:	08002141 	.word	0x08002141
 8001f08:	08002141 	.word	0x08002141
 8001f0c:	08002141 	.word	0x08002141
 8001f10:	08002141 	.word	0x08002141
 8001f14:	08002141 	.word	0x08002141
 8001f18:	08002141 	.word	0x08002141
 8001f1c:	08002141 	.word	0x08002141
 8001f20:	08002141 	.word	0x08002141
 8001f24:	08002141 	.word	0x08002141
 8001f28:	08002141 	.word	0x08002141
 8001f2c:	08002141 	.word	0x08002141
 8001f30:	08002141 	.word	0x08002141
 8001f34:	08002141 	.word	0x08002141
 8001f38:	08002021 	.word	0x08002021
 8001f3c:	08001fed 	.word	0x08001fed
 8001f40:	08002141 	.word	0x08002141
 8001f44:	08002141 	.word	0x08002141
 8001f48:	08002141 	.word	0x08002141
 8001f4c:	08002045 	.word	0x08002045
		{
		case 0x44: //Data: D
			wcode = uart_data[1]<<24|uart_data[2]<<16|uart_data[3]<<8|uart_data[4];
 8001f50:	4b86      	ldr	r3, [pc, #536]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001f52:	785b      	ldrb	r3, [r3, #1]
 8001f54:	061a      	lsls	r2, r3, #24
 8001f56:	4b85      	ldr	r3, [pc, #532]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001f58:	789b      	ldrb	r3, [r3, #2]
 8001f5a:	041b      	lsls	r3, r3, #16
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	4b83      	ldr	r3, [pc, #524]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001f60:	78db      	ldrb	r3, [r3, #3]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	4313      	orrs	r3, r2
 8001f66:	4a81      	ldr	r2, [pc, #516]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001f68:	7912      	ldrb	r2, [r2, #4]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b80      	ldr	r3, [pc, #512]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001f70:	601a      	str	r2, [r3, #0]
			if (!write_mode && !write_mode_somecard)
 8001f72:	4b80      	ldr	r3, [pc, #512]	@ (8002174 <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	f083 0301 	eor.w	r3, r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80dc 	beq.w	800213a <HAL_UARTEx_RxEventCallback+0x276>
 8001f82:	4b7d      	ldr	r3, [pc, #500]	@ (8002178 <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	f083 0301 	eor.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80d4 	beq.w	800213a <HAL_UARTEx_RxEventCallback+0x276>
			{
				sendData_eth("D", wcode);
 8001f92:	4b77      	ldr	r3, [pc, #476]	@ (8002170 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	4878      	ldr	r0, [pc, #480]	@ (800217c <HAL_UARTEx_RxEventCallback+0x2b8>)
 8001f9a:	f002 f8b3 	bl	8004104 <sendData_eth>
				isSendDataEth = true;
 8001f9e:	4b78      	ldr	r3, [pc, #480]	@ (8002180 <HAL_UARTEx_RxEventCallback+0x2bc>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
				timeSendDataEth = HAL_GetTick();
 8001fa4:	f003 f8e2 	bl	800516c <HAL_GetTick>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4a76      	ldr	r2, [pc, #472]	@ (8002184 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001fac:	6013      	str	r3, [r2, #0]
			}
			break;
 8001fae:	e0c4      	b.n	800213a <HAL_UARTEx_RxEventCallback+0x276>
		case 0x43://Comand: C
//			send_uart_to_REB = true;
			if (send_uart_to_REB)
 8001fb0:	4b75      	ldr	r3, [pc, #468]	@ (8002188 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <HAL_UARTEx_RxEventCallback+0x108>
			{
				send_uart_to_REB = false;
 8001fb8:	4b73      	ldr	r3, [pc, #460]	@ (8002188 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
				sendData_uart("I", send_uart);
 8001fbe:	4b73      	ldr	r3, [pc, #460]	@ (800218c <HAL_UARTEx_RxEventCallback+0x2c8>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4872      	ldr	r0, [pc, #456]	@ (8002190 <HAL_UARTEx_RxEventCallback+0x2cc>)
 8001fc6:	f002 f967 	bl	8004298 <sendData_uart>
 8001fca:	e005      	b.n	8001fd8 <HAL_UARTEx_RxEventCallback+0x114>
			} else
			{
				sendData_uart("I", uart_bypass);
 8001fcc:	4b71      	ldr	r3, [pc, #452]	@ (8002194 <HAL_UARTEx_RxEventCallback+0x2d0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	486f      	ldr	r0, [pc, #444]	@ (8002190 <HAL_UARTEx_RxEventCallback+0x2cc>)
 8001fd4:	f002 f960 	bl	8004298 <sendData_uart>
			}
//			time_send_uart = HAL_GetTick();
			bypass_from_REB = uart_data[4];
 8001fd8:	4b64      	ldr	r3, [pc, #400]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001fda:	791b      	ldrb	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf14      	ite	ne
 8001fe0:	2301      	movne	r3, #1
 8001fe2:	2300      	moveq	r3, #0
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8002198 <HAL_UARTEx_RxEventCallback+0x2d4>)
 8001fe8:	701a      	strb	r2, [r3, #0]
			break;
 8001fea:	e0a9      	b.n	8002140 <HAL_UARTEx_RxEventCallback+0x27c>
		case 0x53://setting: S
			Ethernet_setting = true;
 8001fec:	4b6b      	ldr	r3, [pc, #428]	@ (800219c <HAL_UARTEx_RxEventCallback+0x2d8>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
			send_uart_to_PC = true;
 8001ff2:	4b6b      	ldr	r3, [pc, #428]	@ (80021a0 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
			for (uint8_t i =0; i<23; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e009      	b.n	8002012 <HAL_UARTEx_RxEventCallback+0x14e>
			{
				Ethernet_setting_data[i] = uart_data[i+1];
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	4959      	ldr	r1, [pc, #356]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8002006:	5c89      	ldrb	r1, [r1, r2]
 8002008:	4a66      	ldr	r2, [pc, #408]	@ (80021a4 <HAL_UARTEx_RxEventCallback+0x2e0>)
 800200a:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i =0; i<23; i++)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	3301      	adds	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b16      	cmp	r3, #22
 8002016:	d9f2      	bls.n	8001ffe <HAL_UARTEx_RxEventCallback+0x13a>
			}
			g_uart_request_exit = 1;
 8002018:	4b63      	ldr	r3, [pc, #396]	@ (80021a8 <HAL_UARTEx_RxEventCallback+0x2e4>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
			break;
 800201e:	e08f      	b.n	8002140 <HAL_UARTEx_RxEventCallback+0x27c>
		case 0x52://Read R
			if (uart_data[1] == 0x01)
 8002020:	4b52      	ldr	r3, [pc, #328]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d109      	bne.n	800203c <HAL_UARTEx_RxEventCallback+0x178>
			{
				  Ethernet_read_and_reset = true;
 8002028:	4b60      	ldr	r3, [pc, #384]	@ (80021ac <HAL_UARTEx_RxEventCallback+0x2e8>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
				  Ethernet_read_and_reset_data = uart_data[1];
 800202e:	4b4f      	ldr	r3, [pc, #316]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8002030:	785a      	ldrb	r2, [r3, #1]
 8002032:	4b5f      	ldr	r3, [pc, #380]	@ (80021b0 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8002034:	701a      	strb	r2, [r3, #0]
				  send_uart_to_PC = true;
 8002036:	4b5a      	ldr	r3, [pc, #360]	@ (80021a0 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
			}
			g_uart_request_exit = 1;
 800203c:	4b5a      	ldr	r3, [pc, #360]	@ (80021a8 <HAL_UARTEx_RxEventCallback+0x2e4>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
			break;
 8002042:	e07d      	b.n	8002140 <HAL_UARTEx_RxEventCallback+0x27c>
		case 0x57: // W
			switch (uart_data[1])
 8002044:	4b49      	ldr	r3, [pc, #292]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8002046:	785b      	ldrb	r3, [r3, #1]
 8002048:	3b41      	subs	r3, #65	@ 0x41
 800204a:	2b04      	cmp	r3, #4
 800204c:	d877      	bhi.n	800213e <HAL_UARTEx_RxEventCallback+0x27a>
 800204e:	a201      	add	r2, pc, #4	@ (adr r2, 8002054 <HAL_UARTEx_RxEventCallback+0x190>)
 8002050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002054:	08002069 	.word	0x08002069
 8002058:	0800213f 	.word	0x0800213f
 800205c:	0800212b 	.word	0x0800212b
 8002060:	080020b1 	.word	0x080020b1
 8002064:	0800208d 	.word	0x0800208d
			{
			case 0x41:// E: errase
				write_mode_somecard = true;
 8002068:	4b43      	ldr	r3, [pc, #268]	@ (8002178 <HAL_UARTEx_RxEventCallback+0x2b4>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
				time_break = HAL_GetTick();
 800206e:	f003 f87d 	bl	800516c <HAL_GetTick>
 8002072:	4603      	mov	r3, r0
 8002074:	4a4f      	ldr	r2, [pc, #316]	@ (80021b4 <HAL_UARTEx_RxEventCallback+0x2f0>)
 8002076:	6013      	str	r3, [r2, #0]
				send_uart_to_PC = true;
 8002078:	4b49      	ldr	r3, [pc, #292]	@ (80021a0 <HAL_UARTEx_RxEventCallback+0x2dc>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
				add_card_uart = true;
 800207e:	4b4e      	ldr	r3, [pc, #312]	@ (80021b8 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
				g_uart_request_exit = 1;
 8002084:	4b48      	ldr	r3, [pc, #288]	@ (80021a8 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
				break;
 800208a:	e055      	b.n	8002138 <HAL_UARTEx_RxEventCallback+0x274>
			case 0x45:// E: errase
				write_mode = true;
 800208c:	4b39      	ldr	r3, [pc, #228]	@ (8002174 <HAL_UARTEx_RxEventCallback+0x2b0>)
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
				time_break = HAL_GetTick();
 8002092:	f003 f86b 	bl	800516c <HAL_GetTick>
 8002096:	4603      	mov	r3, r0
 8002098:	4a46      	ldr	r2, [pc, #280]	@ (80021b4 <HAL_UARTEx_RxEventCallback+0x2f0>)
 800209a:	6013      	str	r3, [r2, #0]
				send_uart_to_PC = true;
 800209c:	4b40      	ldr	r3, [pc, #256]	@ (80021a0 <HAL_UARTEx_RxEventCallback+0x2dc>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
				add_card_uart = true;
 80020a2:	4b45      	ldr	r3, [pc, #276]	@ (80021b8 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
				g_uart_request_exit = 1;
 80020a8:	4b3f      	ldr	r3, [pc, #252]	@ (80021a8 <HAL_UARTEx_RxEventCallback+0x2e4>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
				break;
 80020ae:	e043      	b.n	8002138 <HAL_UARTEx_RxEventCallback+0x274>
			case 0x44:
				  write_user.STT++;
 80020b0:	4b42      	ldr	r3, [pc, #264]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	4a41      	ldr	r2, [pc, #260]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 80020b8:	6013      	str	r3, [r2, #0]
				  write_user.cardID =  uart_data[2]<<24|uart_data[3]<<16|uart_data[4]<<8|uart_data[5];
 80020ba:	4b2c      	ldr	r3, [pc, #176]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 80020bc:	789b      	ldrb	r3, [r3, #2]
 80020be:	061a      	lsls	r2, r3, #24
 80020c0:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 80020c2:	78db      	ldrb	r3, [r3, #3]
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	431a      	orrs	r2, r3
 80020c8:	4b28      	ldr	r3, [pc, #160]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 80020ca:	791b      	ldrb	r3, [r3, #4]
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	4313      	orrs	r3, r2
 80020d0:	4a26      	ldr	r2, [pc, #152]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 80020d2:	7952      	ldrb	r2, [r2, #5]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 80020da:	605a      	str	r2, [r3, #4]
				  write_user.permis[0] = uart_data[6];
 80020dc:	4b23      	ldr	r3, [pc, #140]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 80020de:	799a      	ldrb	r2, [r3, #6]
 80020e0:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 80020e2:	721a      	strb	r2, [r3, #8]
				  write_user.permis[1] = uart_data[7];
 80020e4:	4b21      	ldr	r3, [pc, #132]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 80020e6:	79da      	ldrb	r2, [r3, #7]
 80020e8:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 80020ea:	725a      	strb	r2, [r3, #9]
				  write_user.permis[2] = uart_data[8];
 80020ec:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 80020ee:	7a1a      	ldrb	r2, [r3, #8]
 80020f0:	4b32      	ldr	r3, [pc, #200]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 80020f2:	729a      	strb	r2, [r3, #10]
				  write_user.permis[3] = uart_data[9];
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 80020f6:	7a5a      	ldrb	r2, [r3, #9]
 80020f8:	4b30      	ldr	r3, [pc, #192]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 80020fa:	72da      	strb	r2, [r3, #11]
				  write_user.permis[4] = uart_data[10];
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 80020fe:	7a9a      	ldrb	r2, [r3, #10]
 8002100:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 8002102:	731a      	strb	r2, [r3, #12]
				  write_user.permis[5] = uart_data[11];
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8002106:	7ada      	ldrb	r2, [r3, #11]
 8002108:	4b2c      	ldr	r3, [pc, #176]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 800210a:	735a      	strb	r2, [r3, #13]
				  write_user.permis[6] = uart_data[12];
 800210c:	4b17      	ldr	r3, [pc, #92]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 800210e:	7b1a      	ldrb	r2, [r3, #12]
 8002110:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 8002112:	739a      	strb	r2, [r3, #14]
				  write_user.permis[7] = uart_data[13];
 8002114:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8002116:	7b5a      	ldrb	r2, [r3, #13]
 8002118:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <HAL_UARTEx_RxEventCallback+0x2f8>)
 800211a:	73da      	strb	r2, [r3, #15]
				  new_card = true;
 800211c:	4b28      	ldr	r3, [pc, #160]	@ (80021c0 <HAL_UARTEx_RxEventCallback+0x2fc>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
				  send_uart_to_PC = true;
 8002122:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
				break;
 8002128:	e006      	b.n	8002138 <HAL_UARTEx_RxEventCallback+0x274>
			case 0x43:
				  write_done = true;
 800212a:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <HAL_UARTEx_RxEventCallback+0x300>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
				  send_uart_to_PC = true;
 8002130:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
				break;
 8002136:	bf00      	nop
			}
			break;
 8002138:	e001      	b.n	800213e <HAL_UARTEx_RxEventCallback+0x27a>
			break;
 800213a:	bf00      	nop
 800213c:	e000      	b.n	8002140 <HAL_UARTEx_RxEventCallback+0x27c>
			break;
 800213e:	bf00      	nop
		}
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 50);
 8002140:	2232      	movs	r2, #50	@ 0x32
 8002142:	490a      	ldr	r1, [pc, #40]	@ (800216c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8002144:	4807      	ldr	r0, [pc, #28]	@ (8002164 <HAL_UARTEx_RxEventCallback+0x2a0>)
 8002146:	f006 fd8a 	bl	8008c5e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800214a:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <HAL_UARTEx_RxEventCallback+0x304>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b1d      	ldr	r3, [pc, #116]	@ (80021c8 <HAL_UARTEx_RxEventCallback+0x304>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0204 	bic.w	r2, r2, #4
 8002158:	601a      	str	r2, [r3, #0]
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000210 	.word	0x20000210
 8002168:	200008b0 	.word	0x200008b0
 800216c:	200002d0 	.word	0x200002d0
 8002170:	20000784 	.word	0x20000784
 8002174:	20000917 	.word	0x20000917
 8002178:	20000916 	.word	0x20000916
 800217c:	08009bb0 	.word	0x08009bb0
 8002180:	20000915 	.word	0x20000915
 8002184:	200008b4 	.word	0x200008b4
 8002188:	20000922 	.word	0x20000922
 800218c:	20000778 	.word	0x20000778
 8002190:	08009bb4 	.word	0x08009bb4
 8002194:	20000030 	.word	0x20000030
 8002198:	200008d0 	.word	0x200008d0
 800219c:	2000091d 	.word	0x2000091d
 80021a0:	20000923 	.word	0x20000923
 80021a4:	20000754 	.word	0x20000754
 80021a8:	20000078 	.word	0x20000078
 80021ac:	2000091f 	.word	0x2000091f
 80021b0:	2000076d 	.word	0x2000076d
 80021b4:	20000894 	.word	0x20000894
 80021b8:	2000091e 	.word	0x2000091e
 80021bc:	2000096c 	.word	0x2000096c
 80021c0:	20000919 	.word	0x20000919
 80021c4:	20000918 	.word	0x20000918
 80021c8:	20000258 	.word	0x20000258

080021cc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RST_Pin)
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	2b40      	cmp	r3, #64	@ 0x40
 80021da:	d145      	bne.n	8002268 <HAL_GPIO_EXTI_Callback+0x9c>
	{
		HAL_Delay(20);
 80021dc:	2014      	movs	r0, #20
 80021de:	f002 ffcf 	bl	8005180 <HAL_Delay>
		if (HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin) == 0)
 80021e2:	2140      	movs	r1, #64	@ 0x40
 80021e4:	4822      	ldr	r0, [pc, #136]	@ (8002270 <HAL_GPIO_EXTI_Callback+0xa4>)
 80021e6:	f004 fe13 	bl	8006e10 <HAL_GPIO_ReadPin>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d13b      	bne.n	8002268 <HAL_GPIO_EXTI_Callback+0x9c>
		{
			RST_set = true;
 80021f0:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <HAL_GPIO_EXTI_Callback+0xa8>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
			RST_timer = HAL_GetTick();
 80021f6:	f002 ffb9 	bl	800516c <HAL_GetTick>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002278 <HAL_GPIO_EXTI_Callback+0xac>)
 80021fe:	6013      	str	r3, [r2, #0]
			count_RST = 2000;
 8002200:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <HAL_GPIO_EXTI_Callback+0xb0>)
 8002202:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002206:	601a      	str	r2, [r3, #0]
			while (!HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin))
 8002208:	e027      	b.n	800225a <HAL_GPIO_EXTI_Callback+0x8e>
			{
				RST_timer_last = HAL_GetTick() - RST_timer;
 800220a:	f002 ffaf 	bl	800516c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <HAL_GPIO_EXTI_Callback+0xac>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	4a1a      	ldr	r2, [pc, #104]	@ (8002280 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002218:	6013      	str	r3, [r2, #0]
//				if ((RST_timer_last > 5000) && (RST_timer_last < 10000))
//				{
//					count_RST = 500;
//				} else
				if (RST_timer_last > 10000)
 800221a:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_GPIO_EXTI_Callback+0xb4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002222:	4293      	cmp	r3, r2
 8002224:	d902      	bls.n	800222c <HAL_GPIO_EXTI_Callback+0x60>
				{
					count_RST = 100;
 8002226:	4b15      	ldr	r3, [pc, #84]	@ (800227c <HAL_GPIO_EXTI_Callback+0xb0>)
 8002228:	2264      	movs	r2, #100	@ 0x64
 800222a:	601a      	str	r2, [r3, #0]
				}
				if (HAL_GetTick() - RST_timer_now > count_RST)
 800222c:	f002 ff9e 	bl	800516c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1ad2      	subs	r2, r2, r3
 8002238:	4b10      	ldr	r3, [pc, #64]	@ (800227c <HAL_GPIO_EXTI_Callback+0xb0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d909      	bls.n	8002254 <HAL_GPIO_EXTI_Callback+0x88>
				{
					RST_timer_now = HAL_GetTick();
 8002240:	f002 ff94 	bl	800516c <HAL_GetTick>
 8002244:	4603      	mov	r3, r0
 8002246:	4a0f      	ldr	r2, [pc, #60]	@ (8002284 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002248:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 800224a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800224e:	480e      	ldr	r0, [pc, #56]	@ (8002288 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002250:	f004 fe0d 	bl	8006e6e <HAL_GPIO_TogglePin>
				}
				HAL_Delay(10);
 8002254:	200a      	movs	r0, #10
 8002256:	f002 ff93 	bl	8005180 <HAL_Delay>
			while (!HAL_GPIO_ReadPin(RST_GPIO_Port, RST_Pin))
 800225a:	2140      	movs	r1, #64	@ 0x40
 800225c:	4804      	ldr	r0, [pc, #16]	@ (8002270 <HAL_GPIO_EXTI_Callback+0xa4>)
 800225e:	f004 fdd7 	bl	8006e10 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0d0      	beq.n	800220a <HAL_GPIO_EXTI_Callback+0x3e>
			}
		}
	}
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40010c00 	.word	0x40010c00
 8002274:	20000920 	.word	0x20000920
 8002278:	200008b8 	.word	0x200008b8
 800227c:	200008c4 	.word	0x200008c4
 8002280:	200008c0 	.word	0x200008c0
 8002284:	200008bc 	.word	0x200008bc
 8002288:	40011000 	.word	0x40011000

0800228c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af02      	add	r7, sp, #8
 8002292:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b43      	ldr	r3, [pc, #268]	@ (80023a8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d169      	bne.n	8002374 <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		// calculator data
		if (counter_start < time_delay)
 80022a0:	4b42      	ldr	r3, [pc, #264]	@ (80023ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	4b42      	ldr	r3, [pc, #264]	@ (80023b0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d205      	bcs.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			counter_start++;
 80022ac:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b3d      	ldr	r3, [pc, #244]	@ (80023ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 80022b6:	701a      	strb	r2, [r3, #0]
		}
		if (write_mode || write_mode_somecard || unlock_fire || bypass_from_Eth || bypass_from_REB || !REB_connected || !HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin))
 80022b8:	4b3e      	ldr	r3, [pc, #248]	@ (80023b4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d11d      	bne.n	80022fc <HAL_TIM_PeriodElapsedCallback+0x70>
 80022c0:	4b3d      	ldr	r3, [pc, #244]	@ (80023b8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d119      	bne.n	80022fc <HAL_TIM_PeriodElapsedCallback+0x70>
 80022c8:	4b3c      	ldr	r3, [pc, #240]	@ (80023bc <HAL_TIM_PeriodElapsedCallback+0x130>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d115      	bne.n	80022fc <HAL_TIM_PeriodElapsedCallback+0x70>
 80022d0:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d111      	bne.n	80022fc <HAL_TIM_PeriodElapsedCallback+0x70>
 80022d8:	4b3a      	ldr	r3, [pc, #232]	@ (80023c4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10d      	bne.n	80022fc <HAL_TIM_PeriodElapsedCallback+0x70>
 80022e0:	4b39      	ldr	r3, [pc, #228]	@ (80023c8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f083 0301 	eor.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_TIM_PeriodElapsedCallback+0x70>
 80022ee:	2104      	movs	r1, #4
 80022f0:	4836      	ldr	r0, [pc, #216]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x140>)
 80022f2:	f004 fd8d 	bl	8006e10 <HAL_GPIO_ReadPin>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d121      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
			data_MC2B[0] = 1;
 80022fc:	4b34      	ldr	r3, [pc, #208]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
			data_MC2B[1] = 0;
 8002302:	4b33      	ldr	r3, [pc, #204]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002304:	2200      	movs	r2, #0
 8002306:	705a      	strb	r2, [r3, #1]
			data_MC2B[2] = 0;
 8002308:	4b31      	ldr	r3, [pc, #196]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800230a:	2200      	movs	r2, #0
 800230c:	709a      	strb	r2, [r3, #2]
			data_MC2B[3] = 0;
 800230e:	4b30      	ldr	r3, [pc, #192]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002310:	2200      	movs	r2, #0
 8002312:	70da      	strb	r2, [r3, #3]
			data_MC2B[4] = 0;
 8002314:	4b2e      	ldr	r3, [pc, #184]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002316:	2200      	movs	r2, #0
 8002318:	711a      	strb	r2, [r3, #4]
			data_MC2B[5] = 0;
 800231a:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800231c:	2200      	movs	r2, #0
 800231e:	715a      	strb	r2, [r3, #5]
			data_MC2B[6] = 0;
 8002320:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002322:	2200      	movs	r2, #0
 8002324:	719a      	strb	r2, [r3, #6]
			data_MC2B[7] = 0;
 8002326:	4b2a      	ldr	r3, [pc, #168]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002328:	2200      	movs	r2, #0
 800232a:	71da      	strb	r2, [r3, #7]
			HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, 1);
 800232c:	2201      	movs	r2, #1
 800232e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002332:	4828      	ldr	r0, [pc, #160]	@ (80023d4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002334:	f004 fd83 	bl	8006e3e <HAL_GPIO_WritePin>
//			sendData_uart("I", 2);
			uart_bypass = 2;
 8002338:	4b27      	ldr	r3, [pc, #156]	@ (80023d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800233a:	2202      	movs	r2, #2
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e013      	b.n	8002368 <HAL_TIM_PeriodElapsedCallback+0xdc>
//			send_uart_to_REB = true;
		} else
		{
			calculate_data_can(x, x_timer, data_MC2B, lock_default, time_delay, &counter_start);
 8002340:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	@ (80023ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002346:	9201      	str	r2, [sp, #4]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	4b24      	ldr	r3, [pc, #144]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x150>)
 800234c:	4a20      	ldr	r2, [pc, #128]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800234e:	4924      	ldr	r1, [pc, #144]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002350:	4824      	ldr	r0, [pc, #144]	@ (80023e4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002352:	f002 f9e8 	bl	8004726 <calculate_data_can>
			HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800235c:	481d      	ldr	r0, [pc, #116]	@ (80023d4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800235e:	f004 fd6e 	bl	8006e3e <HAL_GPIO_WritePin>
			uart_bypass = 3;
 8002362:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002364:	2203      	movs	r2, #3
 8002366:	701a      	strb	r2, [r3, #0]
	//		send_uart_to_REB = true;
		}
		HAL_CAN_AddTxMessage(&hcan, &TxHeader_MC2B, data_MC2B, &TxMailbox);
 8002368:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800236a:	4a19      	ldr	r2, [pc, #100]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800236c:	491f      	ldr	r1, [pc, #124]	@ (80023ec <HAL_TIM_PeriodElapsedCallback+0x160>)
 800236e:	4820      	ldr	r0, [pc, #128]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002370:	f003 f950 	bl	8005614 <HAL_CAN_AddTxMessage>
//		sendData_uart("I", 3);
	}
	if (htim->Instance == htim3.Instance)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b1e      	ldr	r3, [pc, #120]	@ (80023f4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d10e      	bne.n	800239e <HAL_TIM_PeriodElapsedCallback+0x112>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8002380:	481d      	ldr	r0, [pc, #116]	@ (80023f8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002382:	f004 fde9 	bl	8006f58 <HAL_IWDG_Refresh>
		if (!RST_set)
 8002386:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	f083 0301 	eor.w	r3, r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_TIM_PeriodElapsedCallback+0x112>
		{
			HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 8002394:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002398:	480e      	ldr	r0, [pc, #56]	@ (80023d4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800239a:	f004 fd68 	bl	8006e6e <HAL_GPIO_TogglePin>
		}
	}
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000180 	.word	0x20000180
 80023ac:	2000076e 	.word	0x2000076e
 80023b0:	20000708 	.word	0x20000708
 80023b4:	20000917 	.word	0x20000917
 80023b8:	20000916 	.word	0x20000916
 80023bc:	20000921 	.word	0x20000921
 80023c0:	200008d1 	.word	0x200008d1
 80023c4:	200008d0 	.word	0x200008d0
 80023c8:	20000036 	.word	0x20000036
 80023cc:	40010800 	.word	0x40010800
 80023d0:	2000073c 	.word	0x2000073c
 80023d4:	40011000 	.word	0x40011000
 80023d8:	20000030 	.word	0x20000030
 80023dc:	2000070c 	.word	0x2000070c
 80023e0:	2000078c 	.word	0x2000078c
 80023e4:	200008d4 	.word	0x200008d4
 80023e8:	20000788 	.word	0x20000788
 80023ec:	200002b8 	.word	0x200002b8
 80023f0:	2000009c 	.word	0x2000009c
 80023f4:	200001c8 	.word	0x200001c8
 80023f8:	200000c4 	.word	0x200000c4
 80023fc:	20000920 	.word	0x20000920

08002400 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800240a:	4a13      	ldr	r2, [pc, #76]	@ (8002458 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800240c:	2100      	movs	r1, #0
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f003 fa47 	bl	80058a2 <HAL_CAN_GetRxMessage>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
	    Error_Handler();
 800241a:	f002 fbe5 	bl	8004be8 <Error_Handler>
	}
	if (RxHeader.StdId == 0x740 && RxData[2] == 0x48)
 800241e:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 8002426:	d110      	bne.n	800244a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8002428:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800242a:	789b      	ldrb	r3, [r3, #2]
 800242c:	2b48      	cmp	r3, #72	@ 0x48
 800242e:	d10c      	bne.n	800244a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	{
		if ((RxData[4] & 0x40) == 0x40)
 8002430:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002432:	791b      	ldrb	r3, [r3, #4]
 8002434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		{
			unlock_fire = true;
 800243c:	4b07      	ldr	r3, [pc, #28]	@ (800245c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
		} else
		{
			unlock_fire = false;
		}
	}
}
 8002442:	e002      	b.n	800244a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
			unlock_fire = false;
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000770 	.word	0x20000770
 8002458:	2000029c 	.word	0x2000029c
 800245c:	20000921 	.word	0x20000921

08002460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b0aa      	sub	sp, #168	@ 0xa8
 8002464:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002466:	f002 fe29 	bl	80050bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800246a:	f001 fb81 	bl	8003b70 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_DBGMCU_FREEZE_IWDG();
 800246e:	4b92      	ldr	r3, [pc, #584]	@ (80026b8 <main+0x258>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a91      	ldr	r2, [pc, #580]	@ (80026b8 <main+0x258>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002478:	6053      	str	r3, [r2, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247a:	f001 fd61 	bl	8003f40 <MX_GPIO_Init>
  MX_DMA_Init();
 800247e:	f001 fd41 	bl	8003f04 <MX_DMA_Init>
  MX_CAN_Init();
 8002482:	f001 fbbd 	bl	8003c00 <MX_CAN_Init>
  MX_SPI1_Init();
 8002486:	f001 fc0b 	bl	8003ca0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800248a:	f001 fc3f 	bl	8003d0c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800248e:	f001 fd0f 	bl	8003eb0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002492:	f001 fcbf 	bl	8003e14 <MX_TIM3_Init>
  MX_IWDG_Init();
 8002496:	f001 fbe9 	bl	8003c6c <MX_IWDG_Init>
  MX_TIM2_Init();
 800249a:	f001 fc6d 	bl	8003d78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800249e:	4887      	ldr	r0, [pc, #540]	@ (80026bc <main+0x25c>)
 80024a0:	f005 ff60 	bl	8008364 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_data, 50);
 80024a4:	2232      	movs	r2, #50	@ 0x32
 80024a6:	4986      	ldr	r1, [pc, #536]	@ (80026c0 <main+0x260>)
 80024a8:	4886      	ldr	r0, [pc, #536]	@ (80026c4 <main+0x264>)
 80024aa:	f006 fbd8 	bl	8008c5e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80024ae:	4b86      	ldr	r3, [pc, #536]	@ (80026c8 <main+0x268>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b84      	ldr	r3, [pc, #528]	@ (80026c8 <main+0x268>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0204 	bic.w	r2, r2, #4
 80024bc:	601a      	str	r2, [r3, #0]
  TxHeader_MC2B.DLC = 8;
 80024be:	4b83      	ldr	r3, [pc, #524]	@ (80026cc <main+0x26c>)
 80024c0:	2208      	movs	r2, #8
 80024c2:	611a      	str	r2, [r3, #16]
  TxHeader_MC2B.ExtId = 0x47FF;
 80024c4:	4b81      	ldr	r3, [pc, #516]	@ (80026cc <main+0x26c>)
 80024c6:	f244 72ff 	movw	r2, #18431	@ 0x47ff
 80024ca:	605a      	str	r2, [r3, #4]
  TxHeader_MC2B.IDE = CAN_ID_EXT;
 80024cc:	4b7f      	ldr	r3, [pc, #508]	@ (80026cc <main+0x26c>)
 80024ce:	2204      	movs	r2, #4
 80024d0:	609a      	str	r2, [r3, #8]
  TxHeader_MC2B.RTR = CAN_RTR_DATA;
 80024d2:	4b7e      	ldr	r3, [pc, #504]	@ (80026cc <main+0x26c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
  TxHeader_MC2B.StdId = 0;
 80024d8:	4b7c      	ldr	r3, [pc, #496]	@ (80026cc <main+0x26c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
  TxHeader_MC2B.TransmitGlobalTime = DISABLE;
 80024de:	4b7b      	ldr	r3, [pc, #492]	@ (80026cc <main+0x26c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	751a      	strb	r2, [r3, #20]

  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80024e4:	4b7a      	ldr	r3, [pc, #488]	@ (80026d0 <main+0x270>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
  EraseInit.Banks = FLASH_BANK_1;
 80024ea:	4b79      	ldr	r3, [pc, #484]	@ (80026d0 <main+0x270>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	605a      	str	r2, [r3, #4]
  EraseInit.PageAddress =  0x0800FC00;
 80024f0:	4b77      	ldr	r3, [pc, #476]	@ (80026d0 <main+0x270>)
 80024f2:	4a78      	ldr	r2, [pc, #480]	@ (80026d4 <main+0x274>)
 80024f4:	609a      	str	r2, [r3, #8]
  EraseInit.NbPages = 1;
 80024f6:	4b76      	ldr	r3, [pc, #472]	@ (80026d0 <main+0x270>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	60da      	str	r2, [r3, #12]
  ip1 = *(uint32_t *)(0x0800FC00);
 80024fc:	4b75      	ldr	r3, [pc, #468]	@ (80026d4 <main+0x274>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b75      	ldr	r3, [pc, #468]	@ (80026d8 <main+0x278>)
 8002504:	701a      	strb	r2, [r3, #0]
  ip2 = *(uint32_t *)(0x0800FC04);
 8002506:	4b75      	ldr	r3, [pc, #468]	@ (80026dc <main+0x27c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b74      	ldr	r3, [pc, #464]	@ (80026e0 <main+0x280>)
 800250e:	701a      	strb	r2, [r3, #0]
  ip3 = *(uint32_t *)(0x0800FC08);
 8002510:	4b74      	ldr	r3, [pc, #464]	@ (80026e4 <main+0x284>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b74      	ldr	r3, [pc, #464]	@ (80026e8 <main+0x288>)
 8002518:	701a      	strb	r2, [r3, #0]
  ip4 = *(uint32_t *)(0x0800FC0C);
 800251a:	4b74      	ldr	r3, [pc, #464]	@ (80026ec <main+0x28c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	4b73      	ldr	r3, [pc, #460]	@ (80026f0 <main+0x290>)
 8002522:	701a      	strb	r2, [r3, #0]
  port_client = *(uint32_t *)(0x0800FC10);
 8002524:	4b73      	ldr	r3, [pc, #460]	@ (80026f4 <main+0x294>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b73      	ldr	r3, [pc, #460]	@ (80026f8 <main+0x298>)
 800252c:	801a      	strh	r2, [r3, #0]
  ip_server1 = *(uint32_t *)(0x0800FC14);
 800252e:	4b73      	ldr	r3, [pc, #460]	@ (80026fc <main+0x29c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b72      	ldr	r3, [pc, #456]	@ (8002700 <main+0x2a0>)
 8002536:	701a      	strb	r2, [r3, #0]
  ip_server2 = *(uint32_t *)(0x0800FC18);
 8002538:	4b72      	ldr	r3, [pc, #456]	@ (8002704 <main+0x2a4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b72      	ldr	r3, [pc, #456]	@ (8002708 <main+0x2a8>)
 8002540:	701a      	strb	r2, [r3, #0]
  ip_server3 = *(uint32_t *)(0x0800FC1C);
 8002542:	4b72      	ldr	r3, [pc, #456]	@ (800270c <main+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b71      	ldr	r3, [pc, #452]	@ (8002710 <main+0x2b0>)
 800254a:	701a      	strb	r2, [r3, #0]
  ip_server4 = *(uint32_t *)(0x0800FC20);
 800254c:	4b71      	ldr	r3, [pc, #452]	@ (8002714 <main+0x2b4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b71      	ldr	r3, [pc, #452]	@ (8002718 <main+0x2b8>)
 8002554:	701a      	strb	r2, [r3, #0]
  port_server = *(uint32_t *)(0x0800FC24);
 8002556:	4b71      	ldr	r3, [pc, #452]	@ (800271c <main+0x2bc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b70      	ldr	r3, [pc, #448]	@ (8002720 <main+0x2c0>)
 800255e:	801a      	strh	r2, [r3, #0]
  time_delay = *(uint32_t *)(0x0800FC28);
 8002560:	4b70      	ldr	r3, [pc, #448]	@ (8002724 <main+0x2c4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b70      	ldr	r3, [pc, #448]	@ (8002728 <main+0x2c8>)
 8002568:	701a      	strb	r2, [r3, #0]
  elevator_mode = *(uint32_t *)(0x0800FC2C);
 800256a:	4b70      	ldr	r3, [pc, #448]	@ (800272c <main+0x2cc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b6f      	ldr	r3, [pc, #444]	@ (8002730 <main+0x2d0>)
 8002572:	701a      	strb	r2, [r3, #0]
  lock_default_1 = *(uint32_t *)(0x0800FC30);
 8002574:	4b6f      	ldr	r3, [pc, #444]	@ (8002734 <main+0x2d4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6f      	ldr	r2, [pc, #444]	@ (8002738 <main+0x2d8>)
 800257a:	6013      	str	r3, [r2, #0]
  lock_default_2 = *(uint32_t *)(0x0800FC34);
 800257c:	4b6f      	ldr	r3, [pc, #444]	@ (800273c <main+0x2dc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a6f      	ldr	r2, [pc, #444]	@ (8002740 <main+0x2e0>)
 8002582:	6013      	str	r3, [r2, #0]
  if (ip1 == 0xFF) ip1 = 192;
 8002584:	4b54      	ldr	r3, [pc, #336]	@ (80026d8 <main+0x278>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2bff      	cmp	r3, #255	@ 0xff
 800258a:	d102      	bne.n	8002592 <main+0x132>
 800258c:	4b52      	ldr	r3, [pc, #328]	@ (80026d8 <main+0x278>)
 800258e:	22c0      	movs	r2, #192	@ 0xc0
 8002590:	701a      	strb	r2, [r3, #0]
  if (ip2 == 0xFF) ip2 = 168;
 8002592:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <main+0x280>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2bff      	cmp	r3, #255	@ 0xff
 8002598:	d102      	bne.n	80025a0 <main+0x140>
 800259a:	4b51      	ldr	r3, [pc, #324]	@ (80026e0 <main+0x280>)
 800259c:	22a8      	movs	r2, #168	@ 0xa8
 800259e:	701a      	strb	r2, [r3, #0]
  if (ip3 == 0xFF) ip3 = 0;
 80025a0:	4b51      	ldr	r3, [pc, #324]	@ (80026e8 <main+0x288>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2bff      	cmp	r3, #255	@ 0xff
 80025a6:	d102      	bne.n	80025ae <main+0x14e>
 80025a8:	4b4f      	ldr	r3, [pc, #316]	@ (80026e8 <main+0x288>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
  if (ip4 == 0xFF) ip4 = 72;
 80025ae:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <main+0x290>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2bff      	cmp	r3, #255	@ 0xff
 80025b4:	d102      	bne.n	80025bc <main+0x15c>
 80025b6:	4b4e      	ldr	r3, [pc, #312]	@ (80026f0 <main+0x290>)
 80025b8:	2248      	movs	r2, #72	@ 0x48
 80025ba:	701a      	strb	r2, [r3, #0]
  if (port_client == 0xFFFF) port_client = 0;
 80025bc:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <main+0x298>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d102      	bne.n	80025ce <main+0x16e>
 80025c8:	4b4b      	ldr	r3, [pc, #300]	@ (80026f8 <main+0x298>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	801a      	strh	r2, [r3, #0]
  if (ip_server1 == 0xFF) ip_server1 = 192;
 80025ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002700 <main+0x2a0>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2bff      	cmp	r3, #255	@ 0xff
 80025d4:	d102      	bne.n	80025dc <main+0x17c>
 80025d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002700 <main+0x2a0>)
 80025d8:	22c0      	movs	r2, #192	@ 0xc0
 80025da:	701a      	strb	r2, [r3, #0]
  if (ip_server2 == 0xFF) ip_server2 = 168;
 80025dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002708 <main+0x2a8>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2bff      	cmp	r3, #255	@ 0xff
 80025e2:	d102      	bne.n	80025ea <main+0x18a>
 80025e4:	4b48      	ldr	r3, [pc, #288]	@ (8002708 <main+0x2a8>)
 80025e6:	22a8      	movs	r2, #168	@ 0xa8
 80025e8:	701a      	strb	r2, [r3, #0]
  if (ip_server3 == 0xFF) ip_server3 = 0;
 80025ea:	4b49      	ldr	r3, [pc, #292]	@ (8002710 <main+0x2b0>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2bff      	cmp	r3, #255	@ 0xff
 80025f0:	d102      	bne.n	80025f8 <main+0x198>
 80025f2:	4b47      	ldr	r3, [pc, #284]	@ (8002710 <main+0x2b0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
  if (ip_server4 == 0xFF) ip_server4 = 2;
 80025f8:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <main+0x2b8>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2bff      	cmp	r3, #255	@ 0xff
 80025fe:	d102      	bne.n	8002606 <main+0x1a6>
 8002600:	4b45      	ldr	r3, [pc, #276]	@ (8002718 <main+0x2b8>)
 8002602:	2202      	movs	r2, #2
 8002604:	701a      	strb	r2, [r3, #0]
  if (port_server == 0xFFFF) port_server = 6000;
 8002606:	4b46      	ldr	r3, [pc, #280]	@ (8002720 <main+0x2c0>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800260e:	4293      	cmp	r3, r2
 8002610:	d103      	bne.n	800261a <main+0x1ba>
 8002612:	4b43      	ldr	r3, [pc, #268]	@ (8002720 <main+0x2c0>)
 8002614:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002618:	801a      	strh	r2, [r3, #0]
  if (time_delay == 0xFF) time_delay = 1;
 800261a:	4b43      	ldr	r3, [pc, #268]	@ (8002728 <main+0x2c8>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2bff      	cmp	r3, #255	@ 0xff
 8002620:	d102      	bne.n	8002628 <main+0x1c8>
 8002622:	4b41      	ldr	r3, [pc, #260]	@ (8002728 <main+0x2c8>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
  if (elevator_mode == 0xFF) elevator_mode = 0;
 8002628:	4b41      	ldr	r3, [pc, #260]	@ (8002730 <main+0x2d0>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2bff      	cmp	r3, #255	@ 0xff
 800262e:	d102      	bne.n	8002636 <main+0x1d6>
 8002630:	4b3f      	ldr	r3, [pc, #252]	@ (8002730 <main+0x2d0>)
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
//  if (lock_default_1 == 0xFFFFFFFF) lock_default_1 = 0;
//  if (lock_default_2 == 0xFFFFFFFF) lock_default_2 = 0;
  lock_default[0] = lock_default_1 & 0xFF;
 8002636:	4b40      	ldr	r3, [pc, #256]	@ (8002738 <main+0x2d8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b41      	ldr	r3, [pc, #260]	@ (8002744 <main+0x2e4>)
 800263e:	701a      	strb	r2, [r3, #0]
  lock_default[1] = (lock_default_1>>8) & 0xFF;
 8002640:	4b3d      	ldr	r3, [pc, #244]	@ (8002738 <main+0x2d8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b3e      	ldr	r3, [pc, #248]	@ (8002744 <main+0x2e4>)
 800264a:	705a      	strb	r2, [r3, #1]
  lock_default[2] = (lock_default_1>>16) & 0xFF;
 800264c:	4b3a      	ldr	r3, [pc, #232]	@ (8002738 <main+0x2d8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4b3b      	ldr	r3, [pc, #236]	@ (8002744 <main+0x2e4>)
 8002656:	709a      	strb	r2, [r3, #2]
  lock_default[3] = (lock_default_1>>24) & 0xFF;
 8002658:	4b37      	ldr	r3, [pc, #220]	@ (8002738 <main+0x2d8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0e1b      	lsrs	r3, r3, #24
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b38      	ldr	r3, [pc, #224]	@ (8002744 <main+0x2e4>)
 8002662:	70da      	strb	r2, [r3, #3]
  lock_default[4] = lock_default_2 & 0xFF;
 8002664:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <main+0x2e0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b36      	ldr	r3, [pc, #216]	@ (8002744 <main+0x2e4>)
 800266c:	711a      	strb	r2, [r3, #4]
  lock_default[5] = (lock_default_2>>8) & 0xFF;
 800266e:	4b34      	ldr	r3, [pc, #208]	@ (8002740 <main+0x2e0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b33      	ldr	r3, [pc, #204]	@ (8002744 <main+0x2e4>)
 8002678:	715a      	strb	r2, [r3, #5]
  lock_default[6] = (lock_default_2>>16) & 0xFF;
 800267a:	4b31      	ldr	r3, [pc, #196]	@ (8002740 <main+0x2e0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	0c1b      	lsrs	r3, r3, #16
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4b30      	ldr	r3, [pc, #192]	@ (8002744 <main+0x2e4>)
 8002684:	719a      	strb	r2, [r3, #6]
  lock_default[7] = (lock_default_2>>24) & 0xFF;
 8002686:	4b2e      	ldr	r3, [pc, #184]	@ (8002740 <main+0x2e0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e1b      	lsrs	r3, r3, #24
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b2d      	ldr	r3, [pc, #180]	@ (8002744 <main+0x2e4>)
 8002690:	71da      	strb	r2, [r3, #7]
  server_ip[0] = ip_server1;
 8002692:	4b1b      	ldr	r3, [pc, #108]	@ (8002700 <main+0x2a0>)
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	4b2c      	ldr	r3, [pc, #176]	@ (8002748 <main+0x2e8>)
 8002698:	701a      	strb	r2, [r3, #0]
  server_ip[1] = ip_server2;
 800269a:	4b1b      	ldr	r3, [pc, #108]	@ (8002708 <main+0x2a8>)
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	4b2a      	ldr	r3, [pc, #168]	@ (8002748 <main+0x2e8>)
 80026a0:	705a      	strb	r2, [r3, #1]
  server_ip[2] = ip_server3;
 80026a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <main+0x2b0>)
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <main+0x2e8>)
 80026a8:	709a      	strb	r2, [r3, #2]
  server_ip[3] = ip_server4;
 80026aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <main+0x2b8>)
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	4b26      	ldr	r3, [pc, #152]	@ (8002748 <main+0x2e8>)
 80026b0:	70da      	strb	r2, [r3, #3]

  W25Q_Reset();
 80026b2:	f7ff fa6f 	bl	8001b94 <W25Q_Reset>
//  W25Q_EraseChip();
  while(user.STT!=0xFFFFFFFF)
 80026b6:	e05f      	b.n	8002778 <main+0x318>
 80026b8:	e0042000 	.word	0xe0042000
 80026bc:	200001c8 	.word	0x200001c8
 80026c0:	200002d0 	.word	0x200002d0
 80026c4:	20000210 	.word	0x20000210
 80026c8:	20000258 	.word	0x20000258
 80026cc:	200002b8 	.word	0x200002b8
 80026d0:	2000008c 	.word	0x2000008c
 80026d4:	0800fc00 	.word	0x0800fc00
 80026d8:	20000714 	.word	0x20000714
 80026dc:	0800fc04 	.word	0x0800fc04
 80026e0:	20000715 	.word	0x20000715
 80026e4:	0800fc08 	.word	0x0800fc08
 80026e8:	20000716 	.word	0x20000716
 80026ec:	0800fc0c 	.word	0x0800fc0c
 80026f0:	20000717 	.word	0x20000717
 80026f4:	0800fc10 	.word	0x0800fc10
 80026f8:	2000077c 	.word	0x2000077c
 80026fc:	0800fc14 	.word	0x0800fc14
 8002700:	20000718 	.word	0x20000718
 8002704:	0800fc18 	.word	0x0800fc18
 8002708:	20000719 	.word	0x20000719
 800270c:	0800fc1c 	.word	0x0800fc1c
 8002710:	2000071a 	.word	0x2000071a
 8002714:	0800fc20 	.word	0x0800fc20
 8002718:	2000071b 	.word	0x2000071b
 800271c:	0800fc24 	.word	0x0800fc24
 8002720:	2000077a 	.word	0x2000077a
 8002724:	0800fc28 	.word	0x0800fc28
 8002728:	20000708 	.word	0x20000708
 800272c:	0800fc2c 	.word	0x0800fc2c
 8002730:	2000073a 	.word	0x2000073a
 8002734:	0800fc30 	.word	0x0800fc30
 8002738:	200008a0 	.word	0x200008a0
 800273c:	0800fc34 	.word	0x0800fc34
 8002740:	200008a4 	.word	0x200008a4
 8002744:	2000070c 	.word	0x2000070c
 8002748:	20000704 	.word	0x20000704
  {
	  W25Q_FastRead_address(number_card*24, sizeof(user_info_t), (uint8_t *)&user);
 800274c:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <main+0x36c>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4a1d      	ldr	r2, [pc, #116]	@ (80027d0 <main+0x370>)
 800275a:	2118      	movs	r1, #24
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fa61 	bl	8001c24 <W25Q_FastRead_address>
	  if (user.STT -1 == number_card)
 8002762:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <main+0x370>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	1e5a      	subs	r2, r3, #1
 8002768:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <main+0x36c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d103      	bne.n	8002778 <main+0x318>
	  {
		  number_card = user.STT;
 8002770:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <main+0x370>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a15      	ldr	r2, [pc, #84]	@ (80027cc <main+0x36c>)
 8002776:	6013      	str	r3, [r2, #0]
  while(user.STT!=0xFFFFFFFF)
 8002778:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <main+0x370>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d1e4      	bne.n	800274c <main+0x2ec>
	  }
  }
  while(user_before.STT!=0xFFFFFFFF)
 8002782:	e015      	b.n	80027b0 <main+0x350>
  {
	  W25Q_FastRead_address(number_card_old*24, sizeof(user_info_t), (uint8_t *)&user_before);
 8002784:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <main+0x374>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4a11      	ldr	r2, [pc, #68]	@ (80027d8 <main+0x378>)
 8002792:	2118      	movs	r1, #24
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fa45 	bl	8001c24 <W25Q_FastRead_address>
	  if (user_before.STT -1 == number_card_old)
 800279a:	4b0f      	ldr	r3, [pc, #60]	@ (80027d8 <main+0x378>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <main+0x374>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d103      	bne.n	80027b0 <main+0x350>
	  {
		  number_card_old = user_before.STT;
 80027a8:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <main+0x378>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a09      	ldr	r2, [pc, #36]	@ (80027d4 <main+0x374>)
 80027ae:	6013      	str	r3, [r2, #0]
  while(user_before.STT!=0xFFFFFFFF)
 80027b0:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <main+0x378>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d1e4      	bne.n	8002784 <main+0x324>
	  }
  }
  if (number_card_old > 0)
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <main+0x374>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d026      	beq.n	8002810 <main+0x3b0>
  {
	  for (uint32_t i=0; i<((number_card_old*24/(16*256))+2); i++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027c8:	e016      	b.n	80027f8 <main+0x398>
 80027ca:	bf00      	nop
 80027cc:	2000088c 	.word	0x2000088c
 80027d0:	20000924 	.word	0x20000924
 80027d4:	2000089c 	.word	0x2000089c
 80027d8:	2000093c 	.word	0x2000093c
	  {
		  W25Q_Erase_Sector(i+16*33);
 80027dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fa6e 	bl	8001cca <W25Q_Erase_Sector>
	  for (uint32_t i=0; i<((number_card_old*24/(16*256))+2); i++)
 80027ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027f2:	3301      	adds	r3, #1
 80027f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027f8:	4bbd      	ldr	r3, [pc, #756]	@ (8002af0 <main+0x690>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	0b1b      	lsrs	r3, r3, #12
 8002806:	3302      	adds	r3, #2
 8002808:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800280c:	429a      	cmp	r2, r3
 800280e:	d3e5      	bcc.n	80027dc <main+0x37c>
	  }
  }
  wiz_NetInfo gWIZNETINFO = {
 8002810:	2300      	movs	r3, #0
 8002812:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8002816:	231c      	movs	r3, #28
 8002818:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800281c:	2316      	movs	r3, #22
 800281e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8002822:	4bb4      	ldr	r3, [pc, #720]	@ (8002af4 <main+0x694>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  		  .mac = {0x00, 0x1c, 0x16, ip4, 0xFF-ip4, ip4*ip4},
 800282a:	4bb2      	ldr	r3, [pc, #712]	@ (8002af4 <main+0x694>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	43db      	mvns	r3, r3
 8002830:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 8002832:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  		  .mac = {0x00, 0x1c, 0x16, ip4, 0xFF-ip4, ip4*ip4},
 8002836:	4baf      	ldr	r3, [pc, #700]	@ (8002af4 <main+0x694>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	4aae      	ldr	r2, [pc, #696]	@ (8002af4 <main+0x694>)
 800283c:	7812      	ldrb	r2, [r2, #0]
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	b2db      	uxtb	r3, r3
  wiz_NetInfo gWIZNETINFO = {
 8002844:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002848:	4bab      	ldr	r3, [pc, #684]	@ (8002af8 <main+0x698>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002850:	4baa      	ldr	r3, [pc, #680]	@ (8002afc <main+0x69c>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002858:	4ba9      	ldr	r3, [pc, #676]	@ (8002b00 <main+0x6a0>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8002860:	4ba4      	ldr	r3, [pc, #656]	@ (8002af4 <main+0x694>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8002868:	4aa6      	ldr	r2, [pc, #664]	@ (8002b04 <main+0x6a4>)
 800286a:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 800286e:	6810      	ldr	r0, [r2, #0]
 8002870:	6018      	str	r0, [r3, #0]
 8002872:	4aa5      	ldr	r2, [pc, #660]	@ (8002b08 <main+0x6a8>)
 8002874:	f107 0356 	add.w	r3, r7, #86	@ 0x56
 8002878:	6810      	ldr	r0, [r2, #0]
 800287a:	6018      	str	r0, [r3, #0]
 800287c:	4aa3      	ldr	r2, [pc, #652]	@ (8002b0c <main+0x6ac>)
 800287e:	f107 035a 	add.w	r3, r7, #90	@ 0x5a
 8002882:	6810      	ldr	r0, [r2, #0]
 8002884:	6018      	str	r0, [r3, #0]
 8002886:	2301      	movs	r3, #1
 8002888:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  		  .ip = {ip1,ip2,ip3,ip4},
  		  .sn = {255, 255, 255, 0},
  		  .gw = {192, 168, 0, 1},
  		  .dns = {168, 126, 63, 1},
  		  .dhcp = NETINFO_STATIC};
  server_ip[0] = ip_server1;
 800288c:	4ba0      	ldr	r3, [pc, #640]	@ (8002b10 <main+0x6b0>)
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	4ba0      	ldr	r3, [pc, #640]	@ (8002b14 <main+0x6b4>)
 8002892:	701a      	strb	r2, [r3, #0]
  server_ip[1] = ip_server2;
 8002894:	4ba0      	ldr	r3, [pc, #640]	@ (8002b18 <main+0x6b8>)
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	4b9e      	ldr	r3, [pc, #632]	@ (8002b14 <main+0x6b4>)
 800289a:	705a      	strb	r2, [r3, #1]
  server_ip[2] = ip_server3;
 800289c:	4b9f      	ldr	r3, [pc, #636]	@ (8002b1c <main+0x6bc>)
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	4b9c      	ldr	r3, [pc, #624]	@ (8002b14 <main+0x6b4>)
 80028a2:	709a      	strb	r2, [r3, #2]
  server_ip[3] = ip_server4;
 80028a4:	4b9e      	ldr	r3, [pc, #632]	@ (8002b20 <main+0x6c0>)
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	4b9a      	ldr	r3, [pc, #616]	@ (8002b14 <main+0x6b4>)
 80028aa:	70da      	strb	r2, [r3, #3]
  gWIZNETINFO.mac[3] = ((HAL_GetUIDw0()>>24)&0xFF) + ((HAL_GetUIDw2()>>16)&0xFF) + ((HAL_GetUIDw1()>>8)&0xFF) + (HAL_GetUIDw0()&0xFF);
 80028ac:	f002 fc8c 	bl	80051c8 <HAL_GetUIDw0>
 80028b0:	4603      	mov	r3, r0
 80028b2:	0e1b      	lsrs	r3, r3, #24
 80028b4:	b2dc      	uxtb	r4, r3
 80028b6:	f002 fc9b 	bl	80051f0 <HAL_GetUIDw2>
 80028ba:	4603      	mov	r3, r0
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4423      	add	r3, r4
 80028c2:	b2dc      	uxtb	r4, r3
 80028c4:	f002 fc8a 	bl	80051dc <HAL_GetUIDw1>
 80028c8:	4603      	mov	r3, r0
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4423      	add	r3, r4
 80028d0:	b2dc      	uxtb	r4, r3
 80028d2:	f002 fc79 	bl	80051c8 <HAL_GetUIDw0>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4423      	add	r3, r4
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  gWIZNETINFO.mac[4] = ((HAL_GetUIDw1()>>24)&0xFF) + ((HAL_GetUIDw0()>>16)&0xFF) + ((HAL_GetUIDw2()>>8)&0xFF) + (HAL_GetUIDw2()&0xFF);
 80028e2:	f002 fc7b 	bl	80051dc <HAL_GetUIDw1>
 80028e6:	4603      	mov	r3, r0
 80028e8:	0e1b      	lsrs	r3, r3, #24
 80028ea:	b2dc      	uxtb	r4, r3
 80028ec:	f002 fc6c 	bl	80051c8 <HAL_GetUIDw0>
 80028f0:	4603      	mov	r3, r0
 80028f2:	0c1b      	lsrs	r3, r3, #16
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4423      	add	r3, r4
 80028f8:	b2dc      	uxtb	r4, r3
 80028fa:	f002 fc79 	bl	80051f0 <HAL_GetUIDw2>
 80028fe:	4603      	mov	r3, r0
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4423      	add	r3, r4
 8002906:	b2dc      	uxtb	r4, r3
 8002908:	f002 fc72 	bl	80051f0 <HAL_GetUIDw2>
 800290c:	4603      	mov	r3, r0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	4423      	add	r3, r4
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  gWIZNETINFO.mac[5] = ((HAL_GetUIDw2()>>24)&0xFF) + ((HAL_GetUIDw1()>>16)&0xFF) + ((HAL_GetUIDw0()>>8)&0xFF) + (HAL_GetUIDw1()&0xFF);
 8002918:	f002 fc6a 	bl	80051f0 <HAL_GetUIDw2>
 800291c:	4603      	mov	r3, r0
 800291e:	0e1b      	lsrs	r3, r3, #24
 8002920:	b2dc      	uxtb	r4, r3
 8002922:	f002 fc5b 	bl	80051dc <HAL_GetUIDw1>
 8002926:	4603      	mov	r3, r0
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4423      	add	r3, r4
 800292e:	b2dc      	uxtb	r4, r3
 8002930:	f002 fc4a 	bl	80051c8 <HAL_GetUIDw0>
 8002934:	4603      	mov	r3, r0
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	b2db      	uxtb	r3, r3
 800293a:	4423      	add	r3, r4
 800293c:	b2dc      	uxtb	r4, r3
 800293e:	f002 fc4d 	bl	80051dc <HAL_GetUIDw1>
 8002942:	4603      	mov	r3, r0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	4423      	add	r3, r4
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
  W5500Init();
 800294e:	f7fd ff09 	bl	8000764 <W5500Init>
  HAL_Delay(2000);
 8002952:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002956:	f002 fc13 	bl	8005180 <HAL_Delay>
  wizchip_setnetinfo(&gWIZNETINFO);
 800295a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f864 	bl	8001a2c <wizchip_setnetinfo>
  socket(SOCK_NUM, Sn_MR_TCP, port_client, SF_TCP_NODELAY);
 8002964:	4b6f      	ldr	r3, [pc, #444]	@ (8002b24 <main+0x6c4>)
 8002966:	881a      	ldrh	r2, [r3, #0]
 8002968:	2320      	movs	r3, #32
 800296a:	2101      	movs	r1, #1
 800296c:	2000      	movs	r0, #0
 800296e:	f7fd ff45 	bl	80007fc <socket>
  connect(SOCK_NUM, server_ip, port_server);
 8002972:	4b6d      	ldr	r3, [pc, #436]	@ (8002b28 <main+0x6c8>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	4966      	ldr	r1, [pc, #408]	@ (8002b14 <main+0x6b4>)
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe f8cc 	bl	8000b18 <connect>
  if (getSn_SR(SOCK_NUM) == SOCK_ESTABLISHED)
 8002980:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8002984:	f7fd fbea 	bl	800015c <WIZCHIP_READ>
 8002988:	4603      	mov	r3, r0
 800298a:	2b17      	cmp	r3, #23
 800298c:	d10f      	bne.n	80029ae <main+0x54e>
  {
	  time_check = HAL_GetTick();
 800298e:	f002 fbed 	bl	800516c <HAL_GetTick>
 8002992:	4603      	mov	r3, r0
 8002994:	4a65      	ldr	r2, [pc, #404]	@ (8002b2c <main+0x6cc>)
 8002996:	6013      	str	r3, [r2, #0]
	  time_auto_reconnect = HAL_GetTick();
 8002998:	f002 fbe8 	bl	800516c <HAL_GetTick>
 800299c:	4603      	mov	r3, r0
 800299e:	4a64      	ldr	r2, [pc, #400]	@ (8002b30 <main+0x6d0>)
 80029a0:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_SET);
 80029a2:	2201      	movs	r2, #1
 80029a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029a8:	4862      	ldr	r0, [pc, #392]	@ (8002b34 <main+0x6d4>)
 80029aa:	f004 fa48 	bl	8006e3e <HAL_GPIO_WritePin>
  }
  Set_speed_can(elevator_mode);
 80029ae:	4b62      	ldr	r3, [pc, #392]	@ (8002b38 <main+0x6d8>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 f80a 	bl	80049cc <Set_speed_can>
  HAL_TIM_Base_Start_IT(&htim2);
 80029b8:	4860      	ldr	r0, [pc, #384]	@ (8002b3c <main+0x6dc>)
 80029ba:	f005 fcd3 	bl	8008364 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lenData = getSn_RX_RSR(SOCK_NUM);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fd fd6f 	bl	80004a2 <getSn_RX_RSR>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002b40 <main+0x6e0>)
 80029ca:	601a      	str	r2, [r3, #0]
	  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fd fd68 	bl	80004a2 <getSn_RX_RSR>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b40 <main+0x6e0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	f041 80ab 	bne.w	8003b36 <main+0x16d6>
	  {
		  if (lenData > 1024)
 80029e0:	4b57      	ldr	r3, [pc, #348]	@ (8002b40 <main+0x6e0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e8:	d901      	bls.n	80029ee <main+0x58e>
		  {
			  HAL_NVIC_SystemReset();
 80029ea:	f003 fbda 	bl	80061a2 <HAL_NVIC_SystemReset>
		  }
		  if (lenData > 0)
 80029ee:	4b54      	ldr	r3, [pc, #336]	@ (8002b40 <main+0x6e0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8100 	beq.w	8002bf8 <main+0x798>
		  {
			  recv(SOCK_NUM, buf, lenData);
 80029f8:	4b51      	ldr	r3, [pc, #324]	@ (8002b40 <main+0x6e0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	4950      	ldr	r1, [pc, #320]	@ (8002b44 <main+0x6e4>)
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe faec 	bl	8000fe0 <recv>
			  switch (buf[0])
 8002a08:	4b4e      	ldr	r3, [pc, #312]	@ (8002b44 <main+0x6e4>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	3b44      	subs	r3, #68	@ 0x44
 8002a0e:	2b13      	cmp	r3, #19
 8002a10:	f200 80f2 	bhi.w	8002bf8 <main+0x798>
 8002a14:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <main+0x5bc>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002aad 	.word	0x08002aad
 8002a20:	08002bf9 	.word	0x08002bf9
 8002a24:	08002bf9 	.word	0x08002bf9
 8002a28:	08002bf9 	.word	0x08002bf9
 8002a2c:	08002a6d 	.word	0x08002a6d
 8002a30:	08002bf9 	.word	0x08002bf9
 8002a34:	08002bf9 	.word	0x08002bf9
 8002a38:	08002bf9 	.word	0x08002bf9
 8002a3c:	08002bf9 	.word	0x08002bf9
 8002a40:	08002bf9 	.word	0x08002bf9
 8002a44:	08002bf9 	.word	0x08002bf9
 8002a48:	08002bf9 	.word	0x08002bf9
 8002a4c:	08002bf9 	.word	0x08002bf9
 8002a50:	08002bf9 	.word	0x08002bf9
 8002a54:	08002b83 	.word	0x08002b83
 8002a58:	08002ae1 	.word	0x08002ae1
 8002a5c:	08002bf9 	.word	0x08002bf9
 8002a60:	08002bf9 	.word	0x08002bf9
 8002a64:	08002bf9 	.word	0x08002bf9
 8002a68:	08002bc7 	.word	0x08002bc7
			  {
			  case 0x48:
				  connected = HAL_GetTick();
 8002a6c:	f002 fb7e 	bl	800516c <HAL_GetTick>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a35      	ldr	r2, [pc, #212]	@ (8002b48 <main+0x6e8>)
 8002a74:	6013      	str	r3, [r2, #0]
				  time_now = mktime((buf[3]<<8) & buf[4], buf[2], buf[1], buf[5], buf[6]);
 8002a76:	4b33      	ldr	r3, [pc, #204]	@ (8002b44 <main+0x6e4>)
 8002a78:	78db      	ldrb	r3, [r3, #3]
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	b21a      	sxth	r2, r3
 8002a80:	4b30      	ldr	r3, [pc, #192]	@ (8002b44 <main+0x6e4>)
 8002a82:	791b      	ldrb	r3, [r3, #4]
 8002a84:	b21b      	sxth	r3, r3
 8002a86:	4013      	ands	r3, r2
 8002a88:	b21b      	sxth	r3, r3
 8002a8a:	b298      	uxth	r0, r3
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b44 <main+0x6e4>)
 8002a8e:	7899      	ldrb	r1, [r3, #2]
 8002a90:	4b2c      	ldr	r3, [pc, #176]	@ (8002b44 <main+0x6e4>)
 8002a92:	785a      	ldrb	r2, [r3, #1]
 8002a94:	4b2b      	ldr	r3, [pc, #172]	@ (8002b44 <main+0x6e4>)
 8002a96:	795c      	ldrb	r4, [r3, #5]
 8002a98:	4b2a      	ldr	r3, [pc, #168]	@ (8002b44 <main+0x6e4>)
 8002a9a:	799b      	ldrb	r3, [r3, #6]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f002 f82c 	bl	8004afc <mktime>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4a29      	ldr	r2, [pc, #164]	@ (8002b4c <main+0x6ec>)
 8002aa8:	6013      	str	r3, [r2, #0]
				  break;
 8002aaa:	e0a5      	b.n	8002bf8 <main+0x798>
			  case 0x44://data: D
				  Ethernet_received = true;
 8002aac:	4b28      	ldr	r3, [pc, #160]	@ (8002b50 <main+0x6f0>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
				  for (uint8_t i =0; i<9; i++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8002ab8:	e00d      	b.n	8002ad6 <main+0x676>
				  {
					  Ethernet_received_data[i] = buf[i+1];
 8002aba:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002ac4:	491f      	ldr	r1, [pc, #124]	@ (8002b44 <main+0x6e4>)
 8002ac6:	5c89      	ldrb	r1, [r1, r2]
 8002ac8:	4a22      	ldr	r2, [pc, #136]	@ (8002b54 <main+0x6f4>)
 8002aca:	54d1      	strb	r1, [r2, r3]
				  for (uint8_t i =0; i<9; i++)
 8002acc:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8002ad6:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d9ed      	bls.n	8002aba <main+0x65a>
				  }
				  break;
 8002ade:	e08b      	b.n	8002bf8 <main+0x798>
			  case 0x53://setting: S
				  Ethernet_setting = true;
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <main+0x6f8>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
				  for (uint8_t i =0; i<23; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 8002aec:	e044      	b.n	8002b78 <main+0x718>
 8002aee:	bf00      	nop
 8002af0:	2000089c 	.word	0x2000089c
 8002af4:	20000717 	.word	0x20000717
 8002af8:	20000714 	.word	0x20000714
 8002afc:	20000715 	.word	0x20000715
 8002b00:	20000716 	.word	0x20000716
 8002b04:	08009c00 	.word	0x08009c00
 8002b08:	08009c04 	.word	0x08009c04
 8002b0c:	08009c08 	.word	0x08009c08
 8002b10:	20000718 	.word	0x20000718
 8002b14:	20000704 	.word	0x20000704
 8002b18:	20000719 	.word	0x20000719
 8002b1c:	2000071a 	.word	0x2000071a
 8002b20:	2000071b 	.word	0x2000071b
 8002b24:	2000077c 	.word	0x2000077c
 8002b28:	2000077a 	.word	0x2000077a
 8002b2c:	200008a8 	.word	0x200008a8
 8002b30:	200008ac 	.word	0x200008ac
 8002b34:	40011000 	.word	0x40011000
 8002b38:	2000073a 	.word	0x2000073a
 8002b3c:	20000180 	.word	0x20000180
 8002b40:	20000898 	.word	0x20000898
 8002b44:	20000304 	.word	0x20000304
 8002b48:	20000890 	.word	0x20000890
 8002b4c:	200008cc 	.word	0x200008cc
 8002b50:	2000091c 	.word	0x2000091c
 8002b54:	20000748 	.word	0x20000748
 8002b58:	2000091d 	.word	0x2000091d
				  {
					  Ethernet_setting_data[i] = buf[i+1];
 8002b5c:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8002b66:	4985      	ldr	r1, [pc, #532]	@ (8002d7c <main+0x91c>)
 8002b68:	5c89      	ldrb	r1, [r1, r2]
 8002b6a:	4a85      	ldr	r2, [pc, #532]	@ (8002d80 <main+0x920>)
 8002b6c:	54d1      	strb	r1, [r2, r3]
				  for (uint8_t i =0; i<23; i++)
 8002b6e:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8002b72:	3301      	adds	r3, #1
 8002b74:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 8002b78:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8002b7c:	2b16      	cmp	r3, #22
 8002b7e:	d9ed      	bls.n	8002b5c <main+0x6fc>
				  }
				  break;
 8002b80:	e03a      	b.n	8002bf8 <main+0x798>
			  case 0x52:// reset board R: 0; read data: 1
				  if (buf[1] == 2)
 8002b82:	4b7e      	ldr	r3, [pc, #504]	@ (8002d7c <main+0x91c>)
 8002b84:	785b      	ldrb	r3, [r3, #1]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d108      	bne.n	8002b9c <main+0x73c>
				  {
					  send_card_to_pc = true;
 8002b8a:	4b7e      	ldr	r3, [pc, #504]	@ (8002d84 <main+0x924>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002b90:	f002 faec 	bl	800516c <HAL_GetTick>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4a7c      	ldr	r2, [pc, #496]	@ (8002d88 <main+0x928>)
 8002b98:	6013      	str	r3, [r2, #0]
				  } else
				  {
					  Ethernet_read_and_reset = true;
					  Ethernet_read_and_reset_data = buf[1];
				  }
				  break;
 8002b9a:	e02d      	b.n	8002bf8 <main+0x798>
				  } else if (buf[1] == 3)
 8002b9c:	4b77      	ldr	r3, [pc, #476]	@ (8002d7c <main+0x91c>)
 8002b9e:	785b      	ldrb	r3, [r3, #1]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d108      	bne.n	8002bb6 <main+0x756>
					  send_card_done = true;
 8002ba4:	4b79      	ldr	r3, [pc, #484]	@ (8002d8c <main+0x92c>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002baa:	f002 fadf 	bl	800516c <HAL_GetTick>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a75      	ldr	r2, [pc, #468]	@ (8002d88 <main+0x928>)
 8002bb2:	6013      	str	r3, [r2, #0]
				  break;
 8002bb4:	e020      	b.n	8002bf8 <main+0x798>
					  Ethernet_read_and_reset = true;
 8002bb6:	4b76      	ldr	r3, [pc, #472]	@ (8002d90 <main+0x930>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
					  Ethernet_read_and_reset_data = buf[1];
 8002bbc:	4b6f      	ldr	r3, [pc, #444]	@ (8002d7c <main+0x91c>)
 8002bbe:	785a      	ldrb	r2, [r3, #1]
 8002bc0:	4b74      	ldr	r3, [pc, #464]	@ (8002d94 <main+0x934>)
 8002bc2:	701a      	strb	r2, [r3, #0]
				  break;
 8002bc4:	e018      	b.n	8002bf8 <main+0x798>
			  case 0x57: // W
				  switch (buf[1])
 8002bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d7c <main+0x91c>)
 8002bc8:	785b      	ldrb	r3, [r3, #1]
 8002bca:	2b41      	cmp	r3, #65	@ 0x41
 8002bcc:	d00a      	beq.n	8002be4 <main+0x784>
 8002bce:	2b45      	cmp	r3, #69	@ 0x45
 8002bd0:	d111      	bne.n	8002bf6 <main+0x796>
				  {
				  case 0x45:// E: errase
					  write_mode = true;
 8002bd2:	4b71      	ldr	r3, [pc, #452]	@ (8002d98 <main+0x938>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002bd8:	f002 fac8 	bl	800516c <HAL_GetTick>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4a6a      	ldr	r2, [pc, #424]	@ (8002d88 <main+0x928>)
 8002be0:	6013      	str	r3, [r2, #0]
					  break;
 8002be2:	e008      	b.n	8002bf6 <main+0x796>
				  case 0x41:// A: add card
					  write_mode_somecard = true;
 8002be4:	4b6d      	ldr	r3, [pc, #436]	@ (8002d9c <main+0x93c>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
					  time_break = HAL_GetTick();
 8002bea:	f002 fabf 	bl	800516c <HAL_GetTick>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4a65      	ldr	r2, [pc, #404]	@ (8002d88 <main+0x928>)
 8002bf2:	6013      	str	r3, [r2, #0]
					  break;
 8002bf4:	bf00      	nop
				  }
				  break;
 8002bf6:	bf00      	nop
	  } else
	  {
		  continue;
	  }

	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8002bf8:	4869      	ldr	r0, [pc, #420]	@ (8002da0 <main+0x940>)
 8002bfa:	f002 fe1e 	bl	800583a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <main+0x7ba>
	  {
		  if (HAL_CAN_AbortTxRequest(&hcan, TxMailbox) != HAL_OK)
 8002c04:	4b67      	ldr	r3, [pc, #412]	@ (8002da4 <main+0x944>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4865      	ldr	r0, [pc, #404]	@ (8002da0 <main+0x940>)
 8002c0c:	f002 fdd1 	bl	80057b2 <HAL_CAN_AbortTxRequest>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <main+0x7ba>
		  {
			HAL_NVIC_SystemReset();
 8002c16:	f003 fac4 	bl	80061a2 <HAL_NVIC_SystemReset>
		  }
	  }

	  // check connection Ethernet
	  if (keepalive == SOCK_ESTABLISHED && (abs(HAL_GetTick() - connected) < Timeout_heartbit))
 8002c1a:	4b63      	ldr	r3, [pc, #396]	@ (8002da8 <main+0x948>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b17      	cmp	r3, #23
 8002c20:	d110      	bne.n	8002c44 <main+0x7e4>
 8002c22:	f002 faa3 	bl	800516c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b60      	ldr	r3, [pc, #384]	@ (8002dac <main+0x94c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bfb8      	it	lt
 8002c32:	425b      	neglt	r3, r3
 8002c34:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	dc03      	bgt.n	8002c44 <main+0x7e4>
	  {
		  Ethernet_connected = true;
 8002c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8002db0 <main+0x950>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e002      	b.n	8002c4a <main+0x7ea>
	  } else
	  {
		  Ethernet_connected = false;// false
 8002c44:	4b5a      	ldr	r3, [pc, #360]	@ (8002db0 <main+0x950>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
	  }
	  // check connection REB
	  if (abs(HAL_GetTick() - heardbit_REB) > Timeout_heartbit)
 8002c4a:	f002 fa8f 	bl	800516c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4b58      	ldr	r3, [pc, #352]	@ (8002db4 <main+0x954>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bfb8      	it	lt
 8002c5a:	425b      	neglt	r3, r3
 8002c5c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002c60:	4293      	cmp	r3, r2
 8002c62:	dd03      	ble.n	8002c6c <main+0x80c>
	  {
		  REB_connected = false;// false
 8002c64:	4b54      	ldr	r3, [pc, #336]	@ (8002db8 <main+0x958>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e002      	b.n	8002c72 <main+0x812>
	  } else
	  {
		  REB_connected = true;
 8002c6c:	4b52      	ldr	r3, [pc, #328]	@ (8002db8 <main+0x958>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
	  }
	  //// received data from Ethernet
	  if (Ethernet_received)// 0x44
 8002c72:	4b52      	ldr	r3, [pc, #328]	@ (8002dbc <main+0x95c>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d022      	beq.n	8002cc0 <main+0x860>
	  {
		  Ethernet_received = false;
 8002c7a:	4b50      	ldr	r3, [pc, #320]	@ (8002dbc <main+0x95c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_received_data[0])
 8002c80:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc0 <main+0x960>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <main+0x82e>
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d00a      	beq.n	8002ca2 <main+0x842>
 8002c8c:	e018      	b.n	8002cc0 <main+0x860>
		  {
		  case 0:
			  send_uart = 0;
 8002c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc4 <main+0x964>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 8002c94:	4b4c      	ldr	r3, [pc, #304]	@ (8002dc8 <main+0x968>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
			  isSendDataEth = false;
 8002c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002dcc <main+0x96c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
			  break;
 8002ca0:	e00e      	b.n	8002cc0 <main+0x860>
		  case 1: // data ok
			  new_card_update(&Ethernet_received_data[1], x, x_timer);
 8002ca2:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd0 <main+0x970>)
 8002ca4:	494b      	ldr	r1, [pc, #300]	@ (8002dd4 <main+0x974>)
 8002ca6:	484c      	ldr	r0, [pc, #304]	@ (8002dd8 <main+0x978>)
 8002ca8:	f001 fcd2 	bl	8004650 <new_card_update>
			  send_uart = 1;
 8002cac:	4b45      	ldr	r3, [pc, #276]	@ (8002dc4 <main+0x964>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 8002cb2:	4b45      	ldr	r3, [pc, #276]	@ (8002dc8 <main+0x968>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
			  isSendDataEth = false;
 8002cb8:	4b44      	ldr	r3, [pc, #272]	@ (8002dcc <main+0x96c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
			  break;
 8002cbe:	bf00      	nop
		  }
	  }

	  // Nếu không nhận được Data từ server sau khi gửi mã thẻ, thì xử lý offline

	  if (((isSendDataEth == true) && !Ethernet_connected) || ((isSendDataEth == true) && ((HAL_GetTick() - timeSendDataEth) > 500)))
 8002cc0:	4b42      	ldr	r3, [pc, #264]	@ (8002dcc <main+0x96c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <main+0x876>
 8002cc8:	4b39      	ldr	r3, [pc, #228]	@ (8002db0 <main+0x950>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	f083 0301 	eor.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10c      	bne.n	8002cf0 <main+0x890>
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dcc <main+0x96c>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d03e      	beq.n	8002d5c <main+0x8fc>
 8002cde:	f002 fa45 	bl	800516c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8002ddc <main+0x97c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002cee:	d935      	bls.n	8002d5c <main+0x8fc>
	  {
		  isSendDataEth = false;
 8002cf0:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <main+0x96c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
		  compare_user = binary_search(number_card, wcode);
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8002de0 <main+0x980>)
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8002de4 <main+0x984>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4c3a      	ldr	r4, [pc, #232]	@ (8002de8 <main+0x988>)
 8002d00:	463b      	mov	r3, r7
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 fc4c 	bl	80045a0 <binary_search>
 8002d08:	4625      	mov	r5, r4
 8002d0a:	463c      	mov	r4, r7
 8002d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d14:	e885 0003 	stmia.w	r5, {r0, r1}
		  if (compare_user.STT)
 8002d18:	4b33      	ldr	r3, [pc, #204]	@ (8002de8 <main+0x988>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d017      	beq.n	8002d50 <main+0x8f0>
		  {
			  if ((compare_user.time_up < time_now) && (compare_user.time_dow > time_now))
 8002d20:	4b31      	ldr	r3, [pc, #196]	@ (8002de8 <main+0x988>)
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <main+0x98c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d217      	bcs.n	8002d5c <main+0x8fc>
 8002d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002de8 <main+0x988>)
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	4b2e      	ldr	r3, [pc, #184]	@ (8002dec <main+0x98c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d911      	bls.n	8002d5c <main+0x8fc>
			  {
				  new_card_update(compare_user.permis, x, x_timer);
 8002d38:	4a25      	ldr	r2, [pc, #148]	@ (8002dd0 <main+0x970>)
 8002d3a:	4926      	ldr	r1, [pc, #152]	@ (8002dd4 <main+0x974>)
 8002d3c:	482c      	ldr	r0, [pc, #176]	@ (8002df0 <main+0x990>)
 8002d3e:	f001 fc87 	bl	8004650 <new_card_update>
				  send_uart = 1;
 8002d42:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <main+0x964>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
				  send_uart_to_REB = true;
 8002d48:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <main+0x968>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e005      	b.n	8002d5c <main+0x8fc>
			  }
		  } else
		  {
			  send_uart = 0;
 8002d50:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc4 <main+0x964>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
			  send_uart_to_REB = true;
 8002d56:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <main+0x968>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  //// setting from PC Ethernet
	  if (Ethernet_setting) // 0x53
 8002d5c:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <main+0x994>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80ca 	beq.w	8002efa <main+0xa9a>
	  {
		  Ethernet_setting = false;
 8002d66:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <main+0x994>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_setting_data[0])
 8002d6c:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <main+0x920>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d041      	beq.n	8002df8 <main+0x998>
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	f000 80b6 	beq.w	8002ee6 <main+0xa86>
 8002d7a:	e0be      	b.n	8002efa <main+0xa9a>
 8002d7c:	20000304 	.word	0x20000304
 8002d80:	20000754 	.word	0x20000754
 8002d84:	2000091a 	.word	0x2000091a
 8002d88:	20000894 	.word	0x20000894
 8002d8c:	2000091b 	.word	0x2000091b
 8002d90:	2000091f 	.word	0x2000091f
 8002d94:	2000076d 	.word	0x2000076d
 8002d98:	20000917 	.word	0x20000917
 8002d9c:	20000916 	.word	0x20000916
 8002da0:	2000009c 	.word	0x2000009c
 8002da4:	20000788 	.word	0x20000788
 8002da8:	20000744 	.word	0x20000744
 8002dac:	20000890 	.word	0x20000890
 8002db0:	20000914 	.word	0x20000914
 8002db4:	200008b0 	.word	0x200008b0
 8002db8:	20000036 	.word	0x20000036
 8002dbc:	2000091c 	.word	0x2000091c
 8002dc0:	20000748 	.word	0x20000748
 8002dc4:	20000778 	.word	0x20000778
 8002dc8:	20000922 	.word	0x20000922
 8002dcc:	20000915 	.word	0x20000915
 8002dd0:	2000078c 	.word	0x2000078c
 8002dd4:	200008d4 	.word	0x200008d4
 8002dd8:	20000749 	.word	0x20000749
 8002ddc:	200008b4 	.word	0x200008b4
 8002de0:	2000088c 	.word	0x2000088c
 8002de4:	20000784 	.word	0x20000784
 8002de8:	20000954 	.word	0x20000954
 8002dec:	200008cc 	.word	0x200008cc
 8002df0:	2000095c 	.word	0x2000095c
 8002df4:	2000091d 	.word	0x2000091d
		  {
		  case 0:// setting board
			  ip1 = Ethernet_setting_data[1];
 8002df8:	4b8a      	ldr	r3, [pc, #552]	@ (8003024 <main+0xbc4>)
 8002dfa:	785a      	ldrb	r2, [r3, #1]
 8002dfc:	4b8a      	ldr	r3, [pc, #552]	@ (8003028 <main+0xbc8>)
 8002dfe:	701a      	strb	r2, [r3, #0]
			  ip2 = Ethernet_setting_data[2];
 8002e00:	4b88      	ldr	r3, [pc, #544]	@ (8003024 <main+0xbc4>)
 8002e02:	789a      	ldrb	r2, [r3, #2]
 8002e04:	4b89      	ldr	r3, [pc, #548]	@ (800302c <main+0xbcc>)
 8002e06:	701a      	strb	r2, [r3, #0]
			  ip3 = Ethernet_setting_data[3];
 8002e08:	4b86      	ldr	r3, [pc, #536]	@ (8003024 <main+0xbc4>)
 8002e0a:	78da      	ldrb	r2, [r3, #3]
 8002e0c:	4b88      	ldr	r3, [pc, #544]	@ (8003030 <main+0xbd0>)
 8002e0e:	701a      	strb	r2, [r3, #0]
			  ip4 = Ethernet_setting_data[4];
 8002e10:	4b84      	ldr	r3, [pc, #528]	@ (8003024 <main+0xbc4>)
 8002e12:	791a      	ldrb	r2, [r3, #4]
 8002e14:	4b87      	ldr	r3, [pc, #540]	@ (8003034 <main+0xbd4>)
 8002e16:	701a      	strb	r2, [r3, #0]
			  port_client = Ethernet_setting_data[5]<<8|Ethernet_setting_data[6];
 8002e18:	4b82      	ldr	r3, [pc, #520]	@ (8003024 <main+0xbc4>)
 8002e1a:	795b      	ldrb	r3, [r3, #5]
 8002e1c:	b21b      	sxth	r3, r3
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	b21a      	sxth	r2, r3
 8002e22:	4b80      	ldr	r3, [pc, #512]	@ (8003024 <main+0xbc4>)
 8002e24:	799b      	ldrb	r3, [r3, #6]
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	b21b      	sxth	r3, r3
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b82      	ldr	r3, [pc, #520]	@ (8003038 <main+0xbd8>)
 8002e30:	801a      	strh	r2, [r3, #0]
			  ip_server1 = Ethernet_setting_data[7];
 8002e32:	4b7c      	ldr	r3, [pc, #496]	@ (8003024 <main+0xbc4>)
 8002e34:	79da      	ldrb	r2, [r3, #7]
 8002e36:	4b81      	ldr	r3, [pc, #516]	@ (800303c <main+0xbdc>)
 8002e38:	701a      	strb	r2, [r3, #0]
			  ip_server2 = Ethernet_setting_data[8];
 8002e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003024 <main+0xbc4>)
 8002e3c:	7a1a      	ldrb	r2, [r3, #8]
 8002e3e:	4b80      	ldr	r3, [pc, #512]	@ (8003040 <main+0xbe0>)
 8002e40:	701a      	strb	r2, [r3, #0]
			  ip_server3 = Ethernet_setting_data[9];
 8002e42:	4b78      	ldr	r3, [pc, #480]	@ (8003024 <main+0xbc4>)
 8002e44:	7a5a      	ldrb	r2, [r3, #9]
 8002e46:	4b7f      	ldr	r3, [pc, #508]	@ (8003044 <main+0xbe4>)
 8002e48:	701a      	strb	r2, [r3, #0]
			  ip_server4 = Ethernet_setting_data[10];
 8002e4a:	4b76      	ldr	r3, [pc, #472]	@ (8003024 <main+0xbc4>)
 8002e4c:	7a9a      	ldrb	r2, [r3, #10]
 8002e4e:	4b7e      	ldr	r3, [pc, #504]	@ (8003048 <main+0xbe8>)
 8002e50:	701a      	strb	r2, [r3, #0]
			  port_server = Ethernet_setting_data[11]<<8|Ethernet_setting_data[12];
 8002e52:	4b74      	ldr	r3, [pc, #464]	@ (8003024 <main+0xbc4>)
 8002e54:	7adb      	ldrb	r3, [r3, #11]
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	b21a      	sxth	r2, r3
 8002e5c:	4b71      	ldr	r3, [pc, #452]	@ (8003024 <main+0xbc4>)
 8002e5e:	7b1b      	ldrb	r3, [r3, #12]
 8002e60:	b21b      	sxth	r3, r3
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b21b      	sxth	r3, r3
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	4b78      	ldr	r3, [pc, #480]	@ (800304c <main+0xbec>)
 8002e6a:	801a      	strh	r2, [r3, #0]
			  time_delay = Ethernet_setting_data[13];
 8002e6c:	4b6d      	ldr	r3, [pc, #436]	@ (8003024 <main+0xbc4>)
 8002e6e:	7b5a      	ldrb	r2, [r3, #13]
 8002e70:	4b77      	ldr	r3, [pc, #476]	@ (8003050 <main+0xbf0>)
 8002e72:	701a      	strb	r2, [r3, #0]
			  elevator_mode = Ethernet_setting_data[14];
 8002e74:	4b6b      	ldr	r3, [pc, #428]	@ (8003024 <main+0xbc4>)
 8002e76:	7b9a      	ldrb	r2, [r3, #14]
 8002e78:	4b76      	ldr	r3, [pc, #472]	@ (8003054 <main+0xbf4>)
 8002e7a:	701a      	strb	r2, [r3, #0]
			  lock_default_1 = Ethernet_setting_data[15]|(Ethernet_setting_data[16]<<8)|(Ethernet_setting_data[17]<<16)|(Ethernet_setting_data[18]<<24);
 8002e7c:	4b69      	ldr	r3, [pc, #420]	@ (8003024 <main+0xbc4>)
 8002e7e:	7bdb      	ldrb	r3, [r3, #15]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b68      	ldr	r3, [pc, #416]	@ (8003024 <main+0xbc4>)
 8002e84:	7c1b      	ldrb	r3, [r3, #16]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	4b66      	ldr	r3, [pc, #408]	@ (8003024 <main+0xbc4>)
 8002e8c:	7c5b      	ldrb	r3, [r3, #17]
 8002e8e:	041b      	lsls	r3, r3, #16
 8002e90:	431a      	orrs	r2, r3
 8002e92:	4b64      	ldr	r3, [pc, #400]	@ (8003024 <main+0xbc4>)
 8002e94:	7c9b      	ldrb	r3, [r3, #18]
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4b6e      	ldr	r3, [pc, #440]	@ (8003058 <main+0xbf8>)
 8002e9e:	601a      	str	r2, [r3, #0]
			  lock_default_2 = Ethernet_setting_data[19]|(Ethernet_setting_data[20]<<8)|(Ethernet_setting_data[21]<<16)|(Ethernet_setting_data[22]<<24);
 8002ea0:	4b60      	ldr	r3, [pc, #384]	@ (8003024 <main+0xbc4>)
 8002ea2:	7cdb      	ldrb	r3, [r3, #19]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8003024 <main+0xbc4>)
 8002ea8:	7d1b      	ldrb	r3, [r3, #20]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	431a      	orrs	r2, r3
 8002eae:	4b5d      	ldr	r3, [pc, #372]	@ (8003024 <main+0xbc4>)
 8002eb0:	7d5b      	ldrb	r3, [r3, #21]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003024 <main+0xbc4>)
 8002eb8:	7d9b      	ldrb	r3, [r3, #22]
 8002eba:	061b      	lsls	r3, r3, #24
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b66      	ldr	r3, [pc, #408]	@ (800305c <main+0xbfc>)
 8002ec2:	601a      	str	r2, [r3, #0]
			  save_data();
 8002ec4:	f001 fa78 	bl	80043b8 <save_data>
			  if (send_uart_to_PC)
 8002ec8:	4b65      	ldr	r3, [pc, #404]	@ (8003060 <main+0xc00>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <main+0xa78>
			  {
				  sendString_uart("SOK");
 8002ed0:	4864      	ldr	r0, [pc, #400]	@ (8003064 <main+0xc04>)
 8002ed2:	f001 fa09 	bl	80042e8 <sendString_uart>
 8002ed6:	e003      	b.n	8002ee0 <main+0xa80>
			  } else
			  {
				  sendString("S", "OK");
 8002ed8:	4963      	ldr	r1, [pc, #396]	@ (8003068 <main+0xc08>)
 8002eda:	4864      	ldr	r0, [pc, #400]	@ (800306c <main+0xc0c>)
 8002edc:	f001 f94a 	bl	8004174 <sendString>
			  }
			  HAL_NVIC_SystemReset();
 8002ee0:	f003 f95f 	bl	80061a2 <HAL_NVIC_SystemReset>
			  break;
 8002ee4:	e009      	b.n	8002efa <main+0xa9a>
		  case 1:// bypass mode
			  bypass_from_Eth = Ethernet_setting_data[1];
 8002ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8003024 <main+0xbc4>)
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf14      	ite	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	2300      	moveq	r3, #0
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8003070 <main+0xc10>)
 8002ef6:	701a      	strb	r2, [r3, #0]
			  break;
 8002ef8:	bf00      	nop
		  }
	  }
	  /// reset or conmand read data from PC
	  if (Ethernet_read_and_reset)// 0x52
 8002efa:	4b5e      	ldr	r3, [pc, #376]	@ (8003074 <main+0xc14>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80c7 	beq.w	8003092 <main+0xc32>
	  {
		  Ethernet_read_and_reset = false;
 8002f04:	4b5b      	ldr	r3, [pc, #364]	@ (8003074 <main+0xc14>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
		  switch (Ethernet_read_and_reset_data)
 8002f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003078 <main+0xc18>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <main+0xab8>
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d003      	beq.n	8002f1e <main+0xabe>
 8002f16:	e0bc      	b.n	8003092 <main+0xc32>
		  {
		  case 0:
			  HAL_NVIC_SystemReset();
 8002f18:	f003 f943 	bl	80061a2 <HAL_NVIC_SystemReset>
			  break;
 8002f1c:	e0b9      	b.n	8003092 <main+0xc32>
		  case 1:
			  data_info[0] = ip1;
 8002f1e:	4b42      	ldr	r3, [pc, #264]	@ (8003028 <main+0xbc8>)
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	4b56      	ldr	r3, [pc, #344]	@ (800307c <main+0xc1c>)
 8002f24:	701a      	strb	r2, [r3, #0]
			  data_info[1] = ip2;
 8002f26:	4b41      	ldr	r3, [pc, #260]	@ (800302c <main+0xbcc>)
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	4b54      	ldr	r3, [pc, #336]	@ (800307c <main+0xc1c>)
 8002f2c:	705a      	strb	r2, [r3, #1]
			  data_info[2] = ip3;
 8002f2e:	4b40      	ldr	r3, [pc, #256]	@ (8003030 <main+0xbd0>)
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	4b52      	ldr	r3, [pc, #328]	@ (800307c <main+0xc1c>)
 8002f34:	709a      	strb	r2, [r3, #2]
			  data_info[3] = ip4;
 8002f36:	4b3f      	ldr	r3, [pc, #252]	@ (8003034 <main+0xbd4>)
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	4b50      	ldr	r3, [pc, #320]	@ (800307c <main+0xc1c>)
 8002f3c:	70da      	strb	r2, [r3, #3]
			  data_info[4] = port_client>>8;
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003038 <main+0xbd8>)
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	4b4c      	ldr	r3, [pc, #304]	@ (800307c <main+0xc1c>)
 8002f4a:	711a      	strb	r2, [r3, #4]
			  data_info[5] = port_client & 0xFF;
 8002f4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003038 <main+0xbd8>)
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4b4a      	ldr	r3, [pc, #296]	@ (800307c <main+0xc1c>)
 8002f54:	715a      	strb	r2, [r3, #5]
			  data_info[6] = ip_server1;
 8002f56:	4b39      	ldr	r3, [pc, #228]	@ (800303c <main+0xbdc>)
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	4b48      	ldr	r3, [pc, #288]	@ (800307c <main+0xc1c>)
 8002f5c:	719a      	strb	r2, [r3, #6]
			  data_info[7] = ip_server2;
 8002f5e:	4b38      	ldr	r3, [pc, #224]	@ (8003040 <main+0xbe0>)
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	4b46      	ldr	r3, [pc, #280]	@ (800307c <main+0xc1c>)
 8002f64:	71da      	strb	r2, [r3, #7]
			  data_info[8] = ip_server3;
 8002f66:	4b37      	ldr	r3, [pc, #220]	@ (8003044 <main+0xbe4>)
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	4b44      	ldr	r3, [pc, #272]	@ (800307c <main+0xc1c>)
 8002f6c:	721a      	strb	r2, [r3, #8]
			  data_info[9] = ip_server4;
 8002f6e:	4b36      	ldr	r3, [pc, #216]	@ (8003048 <main+0xbe8>)
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	4b42      	ldr	r3, [pc, #264]	@ (800307c <main+0xc1c>)
 8002f74:	725a      	strb	r2, [r3, #9]
			  data_info[10] = port_server>>8;
 8002f76:	4b35      	ldr	r3, [pc, #212]	@ (800304c <main+0xbec>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	4b3e      	ldr	r3, [pc, #248]	@ (800307c <main+0xc1c>)
 8002f82:	729a      	strb	r2, [r3, #10]
			  data_info[11] = port_server & 0xFF;
 8002f84:	4b31      	ldr	r3, [pc, #196]	@ (800304c <main+0xbec>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800307c <main+0xc1c>)
 8002f8c:	72da      	strb	r2, [r3, #11]
			  data_info[12] = time_delay;
 8002f8e:	4b30      	ldr	r3, [pc, #192]	@ (8003050 <main+0xbf0>)
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	4b3a      	ldr	r3, [pc, #232]	@ (800307c <main+0xc1c>)
 8002f94:	731a      	strb	r2, [r3, #12]
			  data_info[13] = elevator_mode;
 8002f96:	4b2f      	ldr	r3, [pc, #188]	@ (8003054 <main+0xbf4>)
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	4b38      	ldr	r3, [pc, #224]	@ (800307c <main+0xc1c>)
 8002f9c:	735a      	strb	r2, [r3, #13]
			  data_info[14] = number_card>>24&0xFF;
 8002f9e:	4b38      	ldr	r3, [pc, #224]	@ (8003080 <main+0xc20>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e1b      	lsrs	r3, r3, #24
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4b35      	ldr	r3, [pc, #212]	@ (800307c <main+0xc1c>)
 8002fa8:	739a      	strb	r2, [r3, #14]
			  data_info[15] = number_card>>16&0xFF;
 8002faa:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <main+0xc20>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	0c1b      	lsrs	r3, r3, #16
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b32      	ldr	r3, [pc, #200]	@ (800307c <main+0xc1c>)
 8002fb4:	73da      	strb	r2, [r3, #15]
			  data_info[16] = number_card>>8&0xFF;
 8002fb6:	4b32      	ldr	r3, [pc, #200]	@ (8003080 <main+0xc20>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800307c <main+0xc1c>)
 8002fc0:	741a      	strb	r2, [r3, #16]
			  data_info[17] = number_card&0xFF;
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003080 <main+0xc20>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800307c <main+0xc1c>)
 8002fca:	745a      	strb	r2, [r3, #17]
			  data_info[18] = lock_default[0];
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003084 <main+0xc24>)
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800307c <main+0xc1c>)
 8002fd2:	749a      	strb	r2, [r3, #18]
			  data_info[19] = lock_default[1];
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003084 <main+0xc24>)
 8002fd6:	785a      	ldrb	r2, [r3, #1]
 8002fd8:	4b28      	ldr	r3, [pc, #160]	@ (800307c <main+0xc1c>)
 8002fda:	74da      	strb	r2, [r3, #19]
			  data_info[20] = lock_default[2];
 8002fdc:	4b29      	ldr	r3, [pc, #164]	@ (8003084 <main+0xc24>)
 8002fde:	789a      	ldrb	r2, [r3, #2]
 8002fe0:	4b26      	ldr	r3, [pc, #152]	@ (800307c <main+0xc1c>)
 8002fe2:	751a      	strb	r2, [r3, #20]
			  data_info[21] = lock_default[3];
 8002fe4:	4b27      	ldr	r3, [pc, #156]	@ (8003084 <main+0xc24>)
 8002fe6:	78da      	ldrb	r2, [r3, #3]
 8002fe8:	4b24      	ldr	r3, [pc, #144]	@ (800307c <main+0xc1c>)
 8002fea:	755a      	strb	r2, [r3, #21]
			  data_info[22] = lock_default[4];
 8002fec:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <main+0xc24>)
 8002fee:	791a      	ldrb	r2, [r3, #4]
 8002ff0:	4b22      	ldr	r3, [pc, #136]	@ (800307c <main+0xc1c>)
 8002ff2:	759a      	strb	r2, [r3, #22]
			  data_info[23] = lock_default[5];
 8002ff4:	4b23      	ldr	r3, [pc, #140]	@ (8003084 <main+0xc24>)
 8002ff6:	795a      	ldrb	r2, [r3, #5]
 8002ff8:	4b20      	ldr	r3, [pc, #128]	@ (800307c <main+0xc1c>)
 8002ffa:	75da      	strb	r2, [r3, #23]
			  data_info[24] = lock_default[6];
 8002ffc:	4b21      	ldr	r3, [pc, #132]	@ (8003084 <main+0xc24>)
 8002ffe:	799a      	ldrb	r2, [r3, #6]
 8003000:	4b1e      	ldr	r3, [pc, #120]	@ (800307c <main+0xc1c>)
 8003002:	761a      	strb	r2, [r3, #24]
			  data_info[25] = lock_default[7];
 8003004:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <main+0xc24>)
 8003006:	79da      	ldrb	r2, [r3, #7]
 8003008:	4b1c      	ldr	r3, [pc, #112]	@ (800307c <main+0xc1c>)
 800300a:	765a      	strb	r2, [r3, #25]
			  if (send_uart_to_PC)
 800300c:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <main+0xc00>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d039      	beq.n	8003088 <main+0xc28>
			  {
				  sendString_info_uart(data_info);
 8003014:	4819      	ldr	r0, [pc, #100]	@ (800307c <main+0xc1c>)
 8003016:	f001 f993 	bl	8004340 <sendString_info_uart>
				  send_uart_to_PC = false;
 800301a:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <main+0xc00>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
			  } else
			  {
				  sendData_eth_info("R", data_info);
			  }
			  break;
 8003020:	e036      	b.n	8003090 <main+0xc30>
 8003022:	bf00      	nop
 8003024:	20000754 	.word	0x20000754
 8003028:	20000714 	.word	0x20000714
 800302c:	20000715 	.word	0x20000715
 8003030:	20000716 	.word	0x20000716
 8003034:	20000717 	.word	0x20000717
 8003038:	2000077c 	.word	0x2000077c
 800303c:	20000718 	.word	0x20000718
 8003040:	20000719 	.word	0x20000719
 8003044:	2000071a 	.word	0x2000071a
 8003048:	2000071b 	.word	0x2000071b
 800304c:	2000077a 	.word	0x2000077a
 8003050:	20000708 	.word	0x20000708
 8003054:	2000073a 	.word	0x2000073a
 8003058:	200008a0 	.word	0x200008a0
 800305c:	200008a4 	.word	0x200008a4
 8003060:	20000923 	.word	0x20000923
 8003064:	08009bb8 	.word	0x08009bb8
 8003068:	08009bbc 	.word	0x08009bbc
 800306c:	08009bc0 	.word	0x08009bc0
 8003070:	200008d1 	.word	0x200008d1
 8003074:	2000091f 	.word	0x2000091f
 8003078:	2000076d 	.word	0x2000076d
 800307c:	2000071c 	.word	0x2000071c
 8003080:	2000088c 	.word	0x2000088c
 8003084:	2000070c 	.word	0x2000070c
				  sendData_eth_info("R", data_info);
 8003088:	495d      	ldr	r1, [pc, #372]	@ (8003200 <main+0xda0>)
 800308a:	485e      	ldr	r0, [pc, #376]	@ (8003204 <main+0xda4>)
 800308c:	f001 f894 	bl	80041b8 <sendData_eth_info>
			  break;
 8003090:	bf00      	nop
		  }
	  }
	  //// send data to PC, to keep alive connection
	  if (!add_card_uart && (abs(HAL_GetTick() - time_check) > 5000))
 8003092:	4b5d      	ldr	r3, [pc, #372]	@ (8003208 <main+0xda8>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	f083 0301 	eor.w	r3, r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 809b 	beq.w	80031d8 <main+0xd78>
 80030a2:	f002 f863 	bl	800516c <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b58      	ldr	r3, [pc, #352]	@ (800320c <main+0xdac>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bfb8      	it	lt
 80030b2:	425b      	neglt	r3, r3
 80030b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f340 808d 	ble.w	80031d8 <main+0xd78>
	  {
		  time_check = HAL_GetTick();
 80030be:	f002 f855 	bl	800516c <HAL_GetTick>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4a51      	ldr	r2, [pc, #324]	@ (800320c <main+0xdac>)
 80030c6:	6013      	str	r3, [r2, #0]
		  keepalive = reconect_eth(SOCK_NUM);
 80030c8:	2000      	movs	r0, #0
 80030ca:	f001 fc0d 	bl	80048e8 <reconect_eth>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003210 <main+0xdb0>)
 80030d4:	701a      	strb	r2, [r3, #0]
		  if (keepalive == SOCK_ESTABLISHED)
 80030d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003210 <main+0xdb0>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b17      	cmp	r3, #23
 80030dc:	d17c      	bne.n	80031d8 <main+0xd78>
		  {
			  if (unlock_fire)
 80030de:	4b4d      	ldr	r3, [pc, #308]	@ (8003214 <main+0xdb4>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <main+0xc8e>
			  {
				  c[1] = 0x46;//F
 80030e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003218 <main+0xdb8>)
 80030e8:	2246      	movs	r2, #70	@ 0x46
 80030ea:	705a      	strb	r2, [r3, #1]
 80030ec:	e033      	b.n	8003156 <main+0xcf6>
			  } else if (bypass_from_Eth)
 80030ee:	4b4b      	ldr	r3, [pc, #300]	@ (800321c <main+0xdbc>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <main+0xc9e>
			  {
				  c[1] = 0x50;//P
 80030f6:	4b48      	ldr	r3, [pc, #288]	@ (8003218 <main+0xdb8>)
 80030f8:	2250      	movs	r2, #80	@ 0x50
 80030fa:	705a      	strb	r2, [r3, #1]
 80030fc:	e02b      	b.n	8003156 <main+0xcf6>
			  } else if (bypass_from_REB)
 80030fe:	4b48      	ldr	r3, [pc, #288]	@ (8003220 <main+0xdc0>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <main+0xcae>
			  {
				  c[1] = 0x45;//E
 8003106:	4b44      	ldr	r3, [pc, #272]	@ (8003218 <main+0xdb8>)
 8003108:	2245      	movs	r2, #69	@ 0x45
 800310a:	705a      	strb	r2, [r3, #1]
 800310c:	e023      	b.n	8003156 <main+0xcf6>
			  } else if (!REB_connected)
 800310e:	4b45      	ldr	r3, [pc, #276]	@ (8003224 <main+0xdc4>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	f083 0301 	eor.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <main+0xcc4>
			  {
				  c[1] = 0x44;//D
 800311c:	4b3e      	ldr	r3, [pc, #248]	@ (8003218 <main+0xdb8>)
 800311e:	2244      	movs	r2, #68	@ 0x44
 8003120:	705a      	strb	r2, [r3, #1]
 8003122:	e018      	b.n	8003156 <main+0xcf6>
			  } else if (!HAL_GPIO_ReadPin(BYPASS_GPIO_Port, BYPASS_Pin))
 8003124:	2104      	movs	r1, #4
 8003126:	4840      	ldr	r0, [pc, #256]	@ (8003228 <main+0xdc8>)
 8003128:	f003 fe72 	bl	8006e10 <HAL_GPIO_ReadPin>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <main+0xcda>
			  {
				  c[1] = 0x43;//C
 8003132:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <main+0xdb8>)
 8003134:	2243      	movs	r2, #67	@ 0x43
 8003136:	705a      	strb	r2, [r3, #1]
 8003138:	e00d      	b.n	8003156 <main+0xcf6>
			  } else if (!Ethernet_connected)
 800313a:	4b3c      	ldr	r3, [pc, #240]	@ (800322c <main+0xdcc>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	f083 0301 	eor.w	r3, r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <main+0xcf0>
			  {
				  c[1] = 0x4F;//o
 8003148:	4b33      	ldr	r3, [pc, #204]	@ (8003218 <main+0xdb8>)
 800314a:	224f      	movs	r2, #79	@ 0x4f
 800314c:	705a      	strb	r2, [r3, #1]
 800314e:	e002      	b.n	8003156 <main+0xcf6>
			  } else
			  {
				  c[1] = 0x52;//r
 8003150:	4b31      	ldr	r3, [pc, #196]	@ (8003218 <main+0xdb8>)
 8003152:	2252      	movs	r2, #82	@ 0x52
 8003154:	705a      	strb	r2, [r3, #1]
			  }
			  send(SOCK_NUM, c, 2);
 8003156:	2202      	movs	r2, #2
 8003158:	492f      	ldr	r1, [pc, #188]	@ (8003218 <main+0xdb8>)
 800315a:	2000      	movs	r0, #0
 800315c:	f7fd fe48 	bl	8000df0 <send>
		  }
	  }

	  while (send_card_to_pc)
 8003160:	e03a      	b.n	80031d8 <main+0xd78>
	  {
		  if (number_card == 0)
 8003162:	4b33      	ldr	r3, [pc, #204]	@ (8003230 <main+0xdd0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d107      	bne.n	800317a <main+0xd1a>
		  {
//			  sendString("R", "EMPTY");
			  send_u8_eth("X", 0);
 800316a:	2100      	movs	r1, #0
 800316c:	4831      	ldr	r0, [pc, #196]	@ (8003234 <main+0xdd4>)
 800316e:	f000 ffeb 	bl	8004148 <send_u8_eth>
			  send_card_to_pc = false;
 8003172:	4b31      	ldr	r3, [pc, #196]	@ (8003238 <main+0xdd8>)
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	e02e      	b.n	80031d8 <main+0xd78>
		  } else
		  {
			  for (uint32_t i=0; i< number_card; i++)
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003180:	e01d      	b.n	80031be <main+0xd5e>
			  {
				  W25Q_FastRead_address(i*24, sizeof(user_info_t), (uint8_t *)&send_user);
 8003182:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4a2b      	ldr	r2, [pc, #172]	@ (800323c <main+0xddc>)
 8003190:	2118      	movs	r1, #24
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fd46 	bl	8001c24 <W25Q_FastRead_address>
				  sendData_eth_CardID ("X", send_user);
 8003198:	4b28      	ldr	r3, [pc, #160]	@ (800323c <main+0xddc>)
 800319a:	466c      	mov	r4, sp
 800319c:	f103 020c 	add.w	r2, r3, #12
 80031a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80031a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a8:	4822      	ldr	r0, [pc, #136]	@ (8003234 <main+0xdd4>)
 80031aa:	f001 f831 	bl	8004210 <sendData_eth_CardID>
				  HAL_Delay(100);
 80031ae:	2064      	movs	r0, #100	@ 0x64
 80031b0:	f001 ffe6 	bl	8005180 <HAL_Delay>
			  for (uint32_t i=0; i< number_card; i++)
 80031b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031b8:	3301      	adds	r3, #1
 80031ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031be:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <main+0xdd0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3db      	bcc.n	8003182 <main+0xd22>
			  }
//					  sendString("R", "CMPLT");
			  send_u8_eth("X", 1);
 80031ca:	2101      	movs	r1, #1
 80031cc:	4819      	ldr	r0, [pc, #100]	@ (8003234 <main+0xdd4>)
 80031ce:	f000 ffbb 	bl	8004148 <send_u8_eth>
			  send_card_to_pc = false;
 80031d2:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <main+0xdd8>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
	  while (send_card_to_pc)
 80031d8:	4b17      	ldr	r3, [pc, #92]	@ (8003238 <main+0xdd8>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1c0      	bne.n	8003162 <main+0xd02>
		  }
	  }
	  while (write_mode)
 80031e0:	e1cc      	b.n	800357c <main+0x111c>
	  {
		  uint32_t totalCard = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		  if (send_uart_to_PC)
 80031e8:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <main+0xde0>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d02b      	beq.n	8003248 <main+0xde8>
		  {
			  send_uart_to_PC = false;
 80031f0:	4b13      	ldr	r3, [pc, #76]	@ (8003240 <main+0xde0>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
			  sendString_uart("WEOK");
 80031f6:	4813      	ldr	r0, [pc, #76]	@ (8003244 <main+0xde4>)
 80031f8:	f001 f876 	bl	80042e8 <sendString_uart>
 80031fc:	e028      	b.n	8003250 <main+0xdf0>
 80031fe:	bf00      	nop
 8003200:	2000071c 	.word	0x2000071c
 8003204:	08009bc4 	.word	0x08009bc4
 8003208:	2000091e 	.word	0x2000091e
 800320c:	200008a8 	.word	0x200008a8
 8003210:	20000744 	.word	0x20000744
 8003214:	20000921 	.word	0x20000921
 8003218:	20000034 	.word	0x20000034
 800321c:	200008d1 	.word	0x200008d1
 8003220:	200008d0 	.word	0x200008d0
 8003224:	20000036 	.word	0x20000036
 8003228:	40010800 	.word	0x40010800
 800322c:	20000914 	.word	0x20000914
 8003230:	2000088c 	.word	0x2000088c
 8003234:	08009bc8 	.word	0x08009bc8
 8003238:	2000091a 	.word	0x2000091a
 800323c:	20000984 	.word	0x20000984
 8003240:	20000923 	.word	0x20000923
 8003244:	08009bcc 	.word	0x08009bcc
		  } else
		  {
			  sendString("W", "EOK");
 8003248:	49ac      	ldr	r1, [pc, #688]	@ (80034fc <main+0x109c>)
 800324a:	48ad      	ldr	r0, [pc, #692]	@ (8003500 <main+0x10a0>)
 800324c:	f000 ff92 	bl	8004174 <sendString>
		  }
		  time_break = HAL_GetTick();
 8003250:	f001 ff8c 	bl	800516c <HAL_GetTick>
 8003254:	4603      	mov	r3, r0
 8003256:	4aab      	ldr	r2, [pc, #684]	@ (8003504 <main+0x10a4>)
 8003258:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 800325a:	4bab      	ldr	r3, [pc, #684]	@ (8003508 <main+0x10a8>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003260:	2000      	movs	r0, #0
 8003262:	f7fd f91e 	bl	80004a2 <getSn_RX_RSR>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	4ba8      	ldr	r3, [pc, #672]	@ (800350c <main+0x10ac>)
 800326c:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 800326e:	2000      	movs	r0, #0
 8003270:	f7fd f917 	bl	80004a2 <getSn_RX_RSR>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	4ba4      	ldr	r3, [pc, #656]	@ (800350c <main+0x10ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	f040 817b 	bne.w	8003578 <main+0x1118>
			  {
				  if (lenData > 1024)
 8003282:	4ba2      	ldr	r3, [pc, #648]	@ (800350c <main+0x10ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d901      	bls.n	8003290 <main+0xe30>
				  {
					  HAL_NVIC_SystemReset();
 800328c:	f002 ff89 	bl	80061a2 <HAL_NVIC_SystemReset>
				  }
				  if (!add_card_uart && (lenData > 0))
 8003290:	4b9f      	ldr	r3, [pc, #636]	@ (8003510 <main+0x10b0>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80a4 	beq.w	80033e8 <main+0xf88>
 80032a0:	4b9a      	ldr	r3, [pc, #616]	@ (800350c <main+0x10ac>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 809f 	beq.w	80033e8 <main+0xf88>
				  {
					  recv(SOCK_NUM, buf, lenData);
 80032aa:	4b98      	ldr	r3, [pc, #608]	@ (800350c <main+0x10ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	4998      	ldr	r1, [pc, #608]	@ (8003514 <main+0x10b4>)
 80032b4:	2000      	movs	r0, #0
 80032b6:	f7fd fe93 	bl	8000fe0 <recv>
					  if (buf[0] == 0x57)
 80032ba:	4b96      	ldr	r3, [pc, #600]	@ (8003514 <main+0x10b4>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b57      	cmp	r3, #87	@ 0x57
 80032c0:	f040 8092 	bne.w	80033e8 <main+0xf88>
					  {
						  if (buf[1] == 0x44)
 80032c4:	4b93      	ldr	r3, [pc, #588]	@ (8003514 <main+0x10b4>)
 80032c6:	785b      	ldrb	r3, [r3, #1]
 80032c8:	2b44      	cmp	r3, #68	@ 0x44
 80032ca:	f040 8086 	bne.w	80033da <main+0xf7a>
						  {
							  totalCard++;
 80032ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032d2:	3301      	adds	r3, #1
 80032d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
							  write_user.STT = totalCard;
 80032d8:	4a8f      	ldr	r2, [pc, #572]	@ (8003518 <main+0x10b8>)
 80032da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032de:	6013      	str	r3, [r2, #0]
							  write_user.cardID =  buf[2]<<24|buf[3]<<16|buf[4]<<8|buf[5];
 80032e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003514 <main+0x10b4>)
 80032e2:	789b      	ldrb	r3, [r3, #2]
 80032e4:	061a      	lsls	r2, r3, #24
 80032e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003514 <main+0x10b4>)
 80032e8:	78db      	ldrb	r3, [r3, #3]
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	4b89      	ldr	r3, [pc, #548]	@ (8003514 <main+0x10b4>)
 80032f0:	791b      	ldrb	r3, [r3, #4]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	4313      	orrs	r3, r2
 80032f6:	4a87      	ldr	r2, [pc, #540]	@ (8003514 <main+0x10b4>)
 80032f8:	7952      	ldrb	r2, [r2, #5]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b86      	ldr	r3, [pc, #536]	@ (8003518 <main+0x10b8>)
 8003300:	605a      	str	r2, [r3, #4]
							  write_user.permis[0] = buf[6];
 8003302:	4b84      	ldr	r3, [pc, #528]	@ (8003514 <main+0x10b4>)
 8003304:	799a      	ldrb	r2, [r3, #6]
 8003306:	4b84      	ldr	r3, [pc, #528]	@ (8003518 <main+0x10b8>)
 8003308:	721a      	strb	r2, [r3, #8]
							  write_user.permis[1] = buf[7];
 800330a:	4b82      	ldr	r3, [pc, #520]	@ (8003514 <main+0x10b4>)
 800330c:	79da      	ldrb	r2, [r3, #7]
 800330e:	4b82      	ldr	r3, [pc, #520]	@ (8003518 <main+0x10b8>)
 8003310:	725a      	strb	r2, [r3, #9]
							  write_user.permis[2] = buf[8];
 8003312:	4b80      	ldr	r3, [pc, #512]	@ (8003514 <main+0x10b4>)
 8003314:	7a1a      	ldrb	r2, [r3, #8]
 8003316:	4b80      	ldr	r3, [pc, #512]	@ (8003518 <main+0x10b8>)
 8003318:	729a      	strb	r2, [r3, #10]
							  write_user.permis[3] = buf[9];
 800331a:	4b7e      	ldr	r3, [pc, #504]	@ (8003514 <main+0x10b4>)
 800331c:	7a5a      	ldrb	r2, [r3, #9]
 800331e:	4b7e      	ldr	r3, [pc, #504]	@ (8003518 <main+0x10b8>)
 8003320:	72da      	strb	r2, [r3, #11]
							  write_user.permis[4] = buf[10];
 8003322:	4b7c      	ldr	r3, [pc, #496]	@ (8003514 <main+0x10b4>)
 8003324:	7a9a      	ldrb	r2, [r3, #10]
 8003326:	4b7c      	ldr	r3, [pc, #496]	@ (8003518 <main+0x10b8>)
 8003328:	731a      	strb	r2, [r3, #12]
							  write_user.permis[5] = buf[11];
 800332a:	4b7a      	ldr	r3, [pc, #488]	@ (8003514 <main+0x10b4>)
 800332c:	7ada      	ldrb	r2, [r3, #11]
 800332e:	4b7a      	ldr	r3, [pc, #488]	@ (8003518 <main+0x10b8>)
 8003330:	735a      	strb	r2, [r3, #13]
							  write_user.permis[6] = buf[12];
 8003332:	4b78      	ldr	r3, [pc, #480]	@ (8003514 <main+0x10b4>)
 8003334:	7b1a      	ldrb	r2, [r3, #12]
 8003336:	4b78      	ldr	r3, [pc, #480]	@ (8003518 <main+0x10b8>)
 8003338:	739a      	strb	r2, [r3, #14]
							  write_user.permis[7] = buf[13];
 800333a:	4b76      	ldr	r3, [pc, #472]	@ (8003514 <main+0x10b4>)
 800333c:	7b5a      	ldrb	r2, [r3, #13]
 800333e:	4b76      	ldr	r3, [pc, #472]	@ (8003518 <main+0x10b8>)
 8003340:	73da      	strb	r2, [r3, #15]
							  write_user.time_up = mktime((buf[16]<<8) | buf[17], buf[15], buf[14], buf[18], buf[19]);
 8003342:	4b74      	ldr	r3, [pc, #464]	@ (8003514 <main+0x10b4>)
 8003344:	7c1b      	ldrb	r3, [r3, #16]
 8003346:	b21b      	sxth	r3, r3
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	b21a      	sxth	r2, r3
 800334c:	4b71      	ldr	r3, [pc, #452]	@ (8003514 <main+0x10b4>)
 800334e:	7c5b      	ldrb	r3, [r3, #17]
 8003350:	b21b      	sxth	r3, r3
 8003352:	4313      	orrs	r3, r2
 8003354:	b21b      	sxth	r3, r3
 8003356:	b298      	uxth	r0, r3
 8003358:	4b6e      	ldr	r3, [pc, #440]	@ (8003514 <main+0x10b4>)
 800335a:	7bd9      	ldrb	r1, [r3, #15]
 800335c:	4b6d      	ldr	r3, [pc, #436]	@ (8003514 <main+0x10b4>)
 800335e:	7b9a      	ldrb	r2, [r3, #14]
 8003360:	4b6c      	ldr	r3, [pc, #432]	@ (8003514 <main+0x10b4>)
 8003362:	7c9c      	ldrb	r4, [r3, #18]
 8003364:	4b6b      	ldr	r3, [pc, #428]	@ (8003514 <main+0x10b4>)
 8003366:	7cdb      	ldrb	r3, [r3, #19]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	4623      	mov	r3, r4
 800336c:	f001 fbc6 	bl	8004afc <mktime>
 8003370:	4603      	mov	r3, r0
 8003372:	4a69      	ldr	r2, [pc, #420]	@ (8003518 <main+0x10b8>)
 8003374:	6113      	str	r3, [r2, #16]
							  write_user.time_dow = mktime((buf[22]<<8) | buf[23], buf[21], buf[20], buf[24], buf[25]);
 8003376:	4b67      	ldr	r3, [pc, #412]	@ (8003514 <main+0x10b4>)
 8003378:	7d9b      	ldrb	r3, [r3, #22]
 800337a:	b21b      	sxth	r3, r3
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	b21a      	sxth	r2, r3
 8003380:	4b64      	ldr	r3, [pc, #400]	@ (8003514 <main+0x10b4>)
 8003382:	7ddb      	ldrb	r3, [r3, #23]
 8003384:	b21b      	sxth	r3, r3
 8003386:	4313      	orrs	r3, r2
 8003388:	b21b      	sxth	r3, r3
 800338a:	b298      	uxth	r0, r3
 800338c:	4b61      	ldr	r3, [pc, #388]	@ (8003514 <main+0x10b4>)
 800338e:	7d59      	ldrb	r1, [r3, #21]
 8003390:	4b60      	ldr	r3, [pc, #384]	@ (8003514 <main+0x10b4>)
 8003392:	7d1a      	ldrb	r2, [r3, #20]
 8003394:	4b5f      	ldr	r3, [pc, #380]	@ (8003514 <main+0x10b4>)
 8003396:	7e1c      	ldrb	r4, [r3, #24]
 8003398:	4b5e      	ldr	r3, [pc, #376]	@ (8003514 <main+0x10b4>)
 800339a:	7e5b      	ldrb	r3, [r3, #25]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	4623      	mov	r3, r4
 80033a0:	f001 fbac 	bl	8004afc <mktime>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003518 <main+0x10b8>)
 80033a8:	6153      	str	r3, [r2, #20]

							  W25Q_Write_Nbytes((totalCard-1)*24 + 0x210000, (uint8_t *)&write_user, sizeof(user_info_t));
 80033aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b58      	ldr	r3, [pc, #352]	@ (800351c <main+0x10bc>)
 80033ba:	4413      	add	r3, r2
 80033bc:	2218      	movs	r2, #24
 80033be:	4956      	ldr	r1, [pc, #344]	@ (8003518 <main+0x10b8>)
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fcd3 	bl	8001d6c <W25Q_Write_Nbytes>
							  sendString("W", "DOK");
 80033c6:	4956      	ldr	r1, [pc, #344]	@ (8003520 <main+0x10c0>)
 80033c8:	484d      	ldr	r0, [pc, #308]	@ (8003500 <main+0x10a0>)
 80033ca:	f000 fed3 	bl	8004174 <sendString>
							  time_break = HAL_GetTick();
 80033ce:	f001 fecd 	bl	800516c <HAL_GetTick>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003504 <main+0x10a4>)
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	e006      	b.n	80033e8 <main+0xf88>
						  } else if (buf[1] == 0x43)
 80033da:	4b4e      	ldr	r3, [pc, #312]	@ (8003514 <main+0x10b4>)
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	2b43      	cmp	r3, #67	@ 0x43
 80033e0:	d102      	bne.n	80033e8 <main+0xf88>
						  {
							  write_done = true;
 80033e2:	4b50      	ldr	r3, [pc, #320]	@ (8003524 <main+0x10c4>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	701a      	strb	r2, [r3, #0]
				  }
			  } else
			  {
				  continue;
			  }
			  if (new_card)
 80033e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003528 <main+0x10c8>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80ad 	beq.w	800354c <main+0x10ec>
			  {
				  totalCard++;
 80033f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033f6:	3301      	adds	r3, #1
 80033f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				  W25Q_Write_Nbytes((totalCard-1)*24 + 0x210000, (uint8_t *)&write_user, sizeof(user_info_t));
 80033fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	461a      	mov	r2, r3
 800340a:	4b44      	ldr	r3, [pc, #272]	@ (800351c <main+0x10bc>)
 800340c:	4413      	add	r3, r2
 800340e:	2218      	movs	r2, #24
 8003410:	4941      	ldr	r1, [pc, #260]	@ (8003518 <main+0x10b8>)
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fcaa 	bl	8001d6c <W25Q_Write_Nbytes>
				  new_card = false;
 8003418:	4b43      	ldr	r3, [pc, #268]	@ (8003528 <main+0x10c8>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
				  sendString_uart("WDOK");
 800341e:	4843      	ldr	r0, [pc, #268]	@ (800352c <main+0x10cc>)
 8003420:	f000 ff62 	bl	80042e8 <sendString_uart>
				  time_break = HAL_GetTick();
 8003424:	f001 fea2 	bl	800516c <HAL_GetTick>
 8003428:	4603      	mov	r3, r0
 800342a:	4a36      	ldr	r2, [pc, #216]	@ (8003504 <main+0x10a4>)
 800342c:	6013      	str	r3, [r2, #0]
			  }
			  while (write_done)
 800342e:	e08d      	b.n	800354c <main+0x10ec>
			  {
				  for (uint8_t i=0; i<(number_card)*24/(16*256)+1; i++)
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003436:	e00a      	b.n	800344e <main+0xfee>
				  {
					  W25Q_Erase_Sector(i);
 8003438:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800343c:	b29b      	uxth	r3, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fc43 	bl	8001cca <W25Q_Erase_Sector>
				  for (uint8_t i=0; i<(number_card)*24/(16*256)+1; i++)
 8003444:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003448:	3301      	adds	r3, #1
 800344a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800344e:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8003452:	4b37      	ldr	r3, [pc, #220]	@ (8003530 <main+0x10d0>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	0b1b      	lsrs	r3, r3, #12
 8003460:	3301      	adds	r3, #1
 8003462:	4299      	cmp	r1, r3
 8003464:	d3e8      	bcc.n	8003438 <main+0xfd8>
				  }
				  for (uint32_t i = 0; i<totalCard; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800346c:	e01c      	b.n	80034a8 <main+0x1048>
				  {
					  W25Q_FastRead_address(i*24+ 0x210000, sizeof(user_info_t), (uint8_t *)&send_user);
 800346e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800347e:	4a2d      	ldr	r2, [pc, #180]	@ (8003534 <main+0x10d4>)
 8003480:	2118      	movs	r1, #24
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fbce 	bl	8001c24 <W25Q_FastRead_address>
					  W25Q_Write_Nbytes(i*24, (uint8_t *)&send_user, sizeof(user_info_t));
 8003488:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	2218      	movs	r2, #24
 8003496:	4927      	ldr	r1, [pc, #156]	@ (8003534 <main+0x10d4>)
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe fc67 	bl	8001d6c <W25Q_Write_Nbytes>
				  for (uint32_t i = 0; i<totalCard; i++)
 800349e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034a2:	3301      	adds	r3, #1
 80034a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d3dc      	bcc.n	800346e <main+0x100e>
				  }
				  for (uint32_t i=0; i<((totalCard*24/(16*256))+2); i++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034b8:	e00a      	b.n	80034d0 <main+0x1070>
				  {
					  W25Q_Erase_Sector(i+16*33);
 80034ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fc00 	bl	8001cca <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((totalCard*24/(16*256))+2); i++)
 80034ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034cc:	3301      	adds	r3, #1
 80034ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	0b1b      	lsrs	r3, r3, #12
 80034de:	3302      	adds	r3, #2
 80034e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d3e9      	bcc.n	80034ba <main+0x105a>
				  }
				  if (send_uart_to_PC)
 80034e6:	4b14      	ldr	r3, [pc, #80]	@ (8003538 <main+0x10d8>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d028      	beq.n	8003540 <main+0x10e0>
				  {
					  send_uart_to_PC = false;
 80034ee:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <main+0x10d8>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
					  sendString_uart("WCOK");
 80034f4:	4811      	ldr	r0, [pc, #68]	@ (800353c <main+0x10dc>)
 80034f6:	f000 fef7 	bl	80042e8 <sendString_uart>
 80034fa:	e025      	b.n	8003548 <main+0x10e8>
 80034fc:	08009bd4 	.word	0x08009bd4
 8003500:	08009bd8 	.word	0x08009bd8
 8003504:	20000894 	.word	0x20000894
 8003508:	200008d1 	.word	0x200008d1
 800350c:	20000898 	.word	0x20000898
 8003510:	2000091e 	.word	0x2000091e
 8003514:	20000304 	.word	0x20000304
 8003518:	2000096c 	.word	0x2000096c
 800351c:	0020ffe8 	.word	0x0020ffe8
 8003520:	08009bdc 	.word	0x08009bdc
 8003524:	20000918 	.word	0x20000918
 8003528:	20000919 	.word	0x20000919
 800352c:	08009be0 	.word	0x08009be0
 8003530:	2000088c 	.word	0x2000088c
 8003534:	20000984 	.word	0x20000984
 8003538:	20000923 	.word	0x20000923
 800353c:	08009be8 	.word	0x08009be8
				  } else
				  {
					  sendString("W", "COK");
 8003540:	4998      	ldr	r1, [pc, #608]	@ (80037a4 <main+0x1344>)
 8003542:	4899      	ldr	r0, [pc, #612]	@ (80037a8 <main+0x1348>)
 8003544:	f000 fe16 	bl	8004174 <sendString>
				  }
				  HAL_NVIC_SystemReset();
 8003548:	f002 fe2b 	bl	80061a2 <HAL_NVIC_SystemReset>
			  while (write_done)
 800354c:	4b97      	ldr	r3, [pc, #604]	@ (80037ac <main+0x134c>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f af6d 	bne.w	8003430 <main+0xfd0>
			  }

			  if ((abs(HAL_GetTick() - time_break) > Timeout_online))
 8003556:	f001 fe09 	bl	800516c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	4b94      	ldr	r3, [pc, #592]	@ (80037b0 <main+0x1350>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	bfb8      	it	lt
 8003566:	425b      	neglt	r3, r3
 8003568:	f242 7210 	movw	r2, #10000	@ 0x2710
 800356c:	4293      	cmp	r3, r2
 800356e:	f77f ae77 	ble.w	8003260 <main+0xe00>
			  {
				  HAL_NVIC_SystemReset();
 8003572:	f002 fe16 	bl	80061a2 <HAL_NVIC_SystemReset>
 8003576:	e673      	b.n	8003260 <main+0xe00>
				  continue;
 8003578:	bf00      	nop
			  lenData = getSn_RX_RSR(SOCK_NUM);
 800357a:	e671      	b.n	8003260 <main+0xe00>
	  while (write_mode)
 800357c:	4b8d      	ldr	r3, [pc, #564]	@ (80037b4 <main+0x1354>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f47f ae2e 	bne.w	80031e2 <main+0xd82>
			  }
		  }
	  }
	  while (write_mode_somecard)
 8003586:	e29b      	b.n	8003ac0 <main+0x1660>
	  {
		  uint32_t add_card = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	67bb      	str	r3, [r7, #120]	@ 0x78
		  if (send_uart_to_PC)
 800358c:	4b8a      	ldr	r3, [pc, #552]	@ (80037b8 <main+0x1358>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d006      	beq.n	80035a2 <main+0x1142>
		  {
			  send_uart_to_PC = false;
 8003594:	4b88      	ldr	r3, [pc, #544]	@ (80037b8 <main+0x1358>)
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
			  sendString_uart("WAOK");
 800359a:	4888      	ldr	r0, [pc, #544]	@ (80037bc <main+0x135c>)
 800359c:	f000 fea4 	bl	80042e8 <sendString_uart>
 80035a0:	e011      	b.n	80035c6 <main+0x1166>
		  } else
		  {
			  sendString("W", "AOK");
 80035a2:	4987      	ldr	r1, [pc, #540]	@ (80037c0 <main+0x1360>)
 80035a4:	4880      	ldr	r0, [pc, #512]	@ (80037a8 <main+0x1348>)
 80035a6:	f000 fde5 	bl	8004174 <sendString>
			  HAL_Delay(50);
 80035aa:	2032      	movs	r0, #50	@ 0x32
 80035ac:	f001 fde8 	bl	8005180 <HAL_Delay>
			  sendString("W", "AOK");
 80035b0:	4983      	ldr	r1, [pc, #524]	@ (80037c0 <main+0x1360>)
 80035b2:	487d      	ldr	r0, [pc, #500]	@ (80037a8 <main+0x1348>)
 80035b4:	f000 fdde 	bl	8004174 <sendString>
			  HAL_Delay(50);
 80035b8:	2032      	movs	r0, #50	@ 0x32
 80035ba:	f001 fde1 	bl	8005180 <HAL_Delay>
			  sendString("W", "AOK");
 80035be:	4980      	ldr	r1, [pc, #512]	@ (80037c0 <main+0x1360>)
 80035c0:	4879      	ldr	r0, [pc, #484]	@ (80037a8 <main+0x1348>)
 80035c2:	f000 fdd7 	bl	8004174 <sendString>
		  }
		  time_break = HAL_GetTick();
 80035c6:	f001 fdd1 	bl	800516c <HAL_GetTick>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4a78      	ldr	r2, [pc, #480]	@ (80037b0 <main+0x1350>)
 80035ce:	6013      	str	r3, [r2, #0]
		  bypass_from_Eth = true;
 80035d0:	4b7c      	ldr	r3, [pc, #496]	@ (80037c4 <main+0x1364>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
		  while (1)
		  {
			  lenData = getSn_RX_RSR(SOCK_NUM);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fc ff63 	bl	80004a2 <getSn_RX_RSR>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	4b79      	ldr	r3, [pc, #484]	@ (80037c8 <main+0x1368>)
 80035e2:	601a      	str	r2, [r3, #0]
			  if (getSn_RX_RSR(SOCK_NUM) == lenData)
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7fc ff5c 	bl	80004a2 <getSn_RX_RSR>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b76      	ldr	r3, [pc, #472]	@ (80037c8 <main+0x1368>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	f040 8251 	bne.w	8003a9a <main+0x163a>
			  {
				  if (lenData > 1024)
 80035f8:	4b73      	ldr	r3, [pc, #460]	@ (80037c8 <main+0x1368>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003600:	d901      	bls.n	8003606 <main+0x11a6>
				  {
					  HAL_NVIC_SystemReset();
 8003602:	f002 fdce 	bl	80061a2 <HAL_NVIC_SystemReset>
				  }
				  if (!add_card_uart && (lenData > 0))
 8003606:	4b71      	ldr	r3, [pc, #452]	@ (80037cc <main+0x136c>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	f083 0301 	eor.w	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80a2 	beq.w	800375a <main+0x12fa>
 8003616:	4b6c      	ldr	r3, [pc, #432]	@ (80037c8 <main+0x1368>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 809d 	beq.w	800375a <main+0x12fa>
				  {
					  recv(SOCK_NUM, buf, lenData);
 8003620:	4b69      	ldr	r3, [pc, #420]	@ (80037c8 <main+0x1368>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	4969      	ldr	r1, [pc, #420]	@ (80037d0 <main+0x1370>)
 800362a:	2000      	movs	r0, #0
 800362c:	f7fd fcd8 	bl	8000fe0 <recv>
					  if (buf[0] == 0x57)
 8003630:	4b67      	ldr	r3, [pc, #412]	@ (80037d0 <main+0x1370>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b57      	cmp	r3, #87	@ 0x57
 8003636:	f040 8090 	bne.w	800375a <main+0x12fa>
					  {
						  if (buf[1] == 0x44)
 800363a:	4b65      	ldr	r3, [pc, #404]	@ (80037d0 <main+0x1370>)
 800363c:	785b      	ldrb	r3, [r3, #1]
 800363e:	2b44      	cmp	r3, #68	@ 0x44
 8003640:	f040 8084 	bne.w	800374c <main+0x12ec>
						  {
							  add_card++;
 8003644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003646:	3301      	adds	r3, #1
 8003648:	67bb      	str	r3, [r7, #120]	@ 0x78
							  write_user.STT++;
 800364a:	4b62      	ldr	r3, [pc, #392]	@ (80037d4 <main+0x1374>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	4a60      	ldr	r2, [pc, #384]	@ (80037d4 <main+0x1374>)
 8003652:	6013      	str	r3, [r2, #0]
							  write_user.cardID =  buf[2]<<24|buf[3]<<16|buf[4]<<8|buf[5];
 8003654:	4b5e      	ldr	r3, [pc, #376]	@ (80037d0 <main+0x1370>)
 8003656:	789b      	ldrb	r3, [r3, #2]
 8003658:	061a      	lsls	r2, r3, #24
 800365a:	4b5d      	ldr	r3, [pc, #372]	@ (80037d0 <main+0x1370>)
 800365c:	78db      	ldrb	r3, [r3, #3]
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	431a      	orrs	r2, r3
 8003662:	4b5b      	ldr	r3, [pc, #364]	@ (80037d0 <main+0x1370>)
 8003664:	791b      	ldrb	r3, [r3, #4]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	4313      	orrs	r3, r2
 800366a:	4a59      	ldr	r2, [pc, #356]	@ (80037d0 <main+0x1370>)
 800366c:	7952      	ldrb	r2, [r2, #5]
 800366e:	4313      	orrs	r3, r2
 8003670:	461a      	mov	r2, r3
 8003672:	4b58      	ldr	r3, [pc, #352]	@ (80037d4 <main+0x1374>)
 8003674:	605a      	str	r2, [r3, #4]
							  write_user.permis[0] = buf[6];
 8003676:	4b56      	ldr	r3, [pc, #344]	@ (80037d0 <main+0x1370>)
 8003678:	799a      	ldrb	r2, [r3, #6]
 800367a:	4b56      	ldr	r3, [pc, #344]	@ (80037d4 <main+0x1374>)
 800367c:	721a      	strb	r2, [r3, #8]
							  write_user.permis[1] = buf[7];
 800367e:	4b54      	ldr	r3, [pc, #336]	@ (80037d0 <main+0x1370>)
 8003680:	79da      	ldrb	r2, [r3, #7]
 8003682:	4b54      	ldr	r3, [pc, #336]	@ (80037d4 <main+0x1374>)
 8003684:	725a      	strb	r2, [r3, #9]
							  write_user.permis[2] = buf[8];
 8003686:	4b52      	ldr	r3, [pc, #328]	@ (80037d0 <main+0x1370>)
 8003688:	7a1a      	ldrb	r2, [r3, #8]
 800368a:	4b52      	ldr	r3, [pc, #328]	@ (80037d4 <main+0x1374>)
 800368c:	729a      	strb	r2, [r3, #10]
							  write_user.permis[3] = buf[9];
 800368e:	4b50      	ldr	r3, [pc, #320]	@ (80037d0 <main+0x1370>)
 8003690:	7a5a      	ldrb	r2, [r3, #9]
 8003692:	4b50      	ldr	r3, [pc, #320]	@ (80037d4 <main+0x1374>)
 8003694:	72da      	strb	r2, [r3, #11]
							  write_user.permis[4] = buf[10];
 8003696:	4b4e      	ldr	r3, [pc, #312]	@ (80037d0 <main+0x1370>)
 8003698:	7a9a      	ldrb	r2, [r3, #10]
 800369a:	4b4e      	ldr	r3, [pc, #312]	@ (80037d4 <main+0x1374>)
 800369c:	731a      	strb	r2, [r3, #12]
							  write_user.permis[5] = buf[11];
 800369e:	4b4c      	ldr	r3, [pc, #304]	@ (80037d0 <main+0x1370>)
 80036a0:	7ada      	ldrb	r2, [r3, #11]
 80036a2:	4b4c      	ldr	r3, [pc, #304]	@ (80037d4 <main+0x1374>)
 80036a4:	735a      	strb	r2, [r3, #13]
							  write_user.permis[6] = buf[12];
 80036a6:	4b4a      	ldr	r3, [pc, #296]	@ (80037d0 <main+0x1370>)
 80036a8:	7b1a      	ldrb	r2, [r3, #12]
 80036aa:	4b4a      	ldr	r3, [pc, #296]	@ (80037d4 <main+0x1374>)
 80036ac:	739a      	strb	r2, [r3, #14]
							  write_user.permis[7] = buf[13];
 80036ae:	4b48      	ldr	r3, [pc, #288]	@ (80037d0 <main+0x1370>)
 80036b0:	7b5a      	ldrb	r2, [r3, #13]
 80036b2:	4b48      	ldr	r3, [pc, #288]	@ (80037d4 <main+0x1374>)
 80036b4:	73da      	strb	r2, [r3, #15]
							  write_user.time_up = mktime((buf[16]<<8) | buf[17], buf[15], buf[14], buf[18], buf[19]);
 80036b6:	4b46      	ldr	r3, [pc, #280]	@ (80037d0 <main+0x1370>)
 80036b8:	7c1b      	ldrb	r3, [r3, #16]
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	b21a      	sxth	r2, r3
 80036c0:	4b43      	ldr	r3, [pc, #268]	@ (80037d0 <main+0x1370>)
 80036c2:	7c5b      	ldrb	r3, [r3, #17]
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	4313      	orrs	r3, r2
 80036c8:	b21b      	sxth	r3, r3
 80036ca:	b298      	uxth	r0, r3
 80036cc:	4b40      	ldr	r3, [pc, #256]	@ (80037d0 <main+0x1370>)
 80036ce:	7bd9      	ldrb	r1, [r3, #15]
 80036d0:	4b3f      	ldr	r3, [pc, #252]	@ (80037d0 <main+0x1370>)
 80036d2:	7b9a      	ldrb	r2, [r3, #14]
 80036d4:	4b3e      	ldr	r3, [pc, #248]	@ (80037d0 <main+0x1370>)
 80036d6:	7c9c      	ldrb	r4, [r3, #18]
 80036d8:	4b3d      	ldr	r3, [pc, #244]	@ (80037d0 <main+0x1370>)
 80036da:	7cdb      	ldrb	r3, [r3, #19]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	4623      	mov	r3, r4
 80036e0:	f001 fa0c 	bl	8004afc <mktime>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4a3b      	ldr	r2, [pc, #236]	@ (80037d4 <main+0x1374>)
 80036e8:	6113      	str	r3, [r2, #16]
							  write_user.time_dow = mktime((buf[22]<<8) | buf[23], buf[21], buf[20], buf[24], buf[25]);
 80036ea:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <main+0x1370>)
 80036ec:	7d9b      	ldrb	r3, [r3, #22]
 80036ee:	b21b      	sxth	r3, r3
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	b21a      	sxth	r2, r3
 80036f4:	4b36      	ldr	r3, [pc, #216]	@ (80037d0 <main+0x1370>)
 80036f6:	7ddb      	ldrb	r3, [r3, #23]
 80036f8:	b21b      	sxth	r3, r3
 80036fa:	4313      	orrs	r3, r2
 80036fc:	b21b      	sxth	r3, r3
 80036fe:	b298      	uxth	r0, r3
 8003700:	4b33      	ldr	r3, [pc, #204]	@ (80037d0 <main+0x1370>)
 8003702:	7d59      	ldrb	r1, [r3, #21]
 8003704:	4b32      	ldr	r3, [pc, #200]	@ (80037d0 <main+0x1370>)
 8003706:	7d1a      	ldrb	r2, [r3, #20]
 8003708:	4b31      	ldr	r3, [pc, #196]	@ (80037d0 <main+0x1370>)
 800370a:	7e1c      	ldrb	r4, [r3, #24]
 800370c:	4b30      	ldr	r3, [pc, #192]	@ (80037d0 <main+0x1370>)
 800370e:	7e5b      	ldrb	r3, [r3, #25]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	4623      	mov	r3, r4
 8003714:	f001 f9f2 	bl	8004afc <mktime>
 8003718:	4603      	mov	r3, r0
 800371a:	4a2e      	ldr	r2, [pc, #184]	@ (80037d4 <main+0x1374>)
 800371c:	6153      	str	r3, [r2, #20]

							  W25Q_Write_Nbytes((add_card-1)*24 + 0x210000, (uint8_t *)&write_user, sizeof(user_info_t));
 800371e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	461a      	mov	r2, r3
 800372a:	4b2b      	ldr	r3, [pc, #172]	@ (80037d8 <main+0x1378>)
 800372c:	4413      	add	r3, r2
 800372e:	2218      	movs	r2, #24
 8003730:	4928      	ldr	r1, [pc, #160]	@ (80037d4 <main+0x1374>)
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe fb1a 	bl	8001d6c <W25Q_Write_Nbytes>
							  sendString("W", "DOK");
 8003738:	4928      	ldr	r1, [pc, #160]	@ (80037dc <main+0x137c>)
 800373a:	481b      	ldr	r0, [pc, #108]	@ (80037a8 <main+0x1348>)
 800373c:	f000 fd1a 	bl	8004174 <sendString>
							  time_break = HAL_GetTick();
 8003740:	f001 fd14 	bl	800516c <HAL_GetTick>
 8003744:	4603      	mov	r3, r0
 8003746:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <main+0x1350>)
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e006      	b.n	800375a <main+0x12fa>
						  } else if (buf[1] == 0x43)
 800374c:	4b20      	ldr	r3, [pc, #128]	@ (80037d0 <main+0x1370>)
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	2b43      	cmp	r3, #67	@ 0x43
 8003752:	d102      	bne.n	800375a <main+0x12fa>
						  {
							  write_done = true;
 8003754:	4b15      	ldr	r3, [pc, #84]	@ (80037ac <main+0x134c>)
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
				  }
			  } else
			  {
				  continue;
			  }
			  if (new_card)
 800375a:	4b21      	ldr	r3, [pc, #132]	@ (80037e0 <main+0x1380>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8185 	beq.w	8003a6e <main+0x160e>
			  {
				  add_card++;
 8003764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003766:	3301      	adds	r3, #1
 8003768:	67bb      	str	r3, [r7, #120]	@ 0x78
				  W25Q_Write_Nbytes((add_card-1)*24 + 0x210000, (uint8_t *)&write_user, sizeof(user_info_t));
 800376a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	461a      	mov	r2, r3
 8003776:	4b18      	ldr	r3, [pc, #96]	@ (80037d8 <main+0x1378>)
 8003778:	4413      	add	r3, r2
 800377a:	2218      	movs	r2, #24
 800377c:	4915      	ldr	r1, [pc, #84]	@ (80037d4 <main+0x1374>)
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe faf4 	bl	8001d6c <W25Q_Write_Nbytes>
				  new_card = false;
 8003784:	4b16      	ldr	r3, [pc, #88]	@ (80037e0 <main+0x1380>)
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
				  sendString_uart("WDOK");
 800378a:	4816      	ldr	r0, [pc, #88]	@ (80037e4 <main+0x1384>)
 800378c:	f000 fdac 	bl	80042e8 <sendString_uart>
				  time_break = HAL_GetTick();
 8003790:	f001 fcec 	bl	800516c <HAL_GetTick>
 8003794:	4603      	mov	r3, r0
 8003796:	4a06      	ldr	r2, [pc, #24]	@ (80037b0 <main+0x1350>)
 8003798:	6013      	str	r3, [r2, #0]
			  }
			  while (write_done)
 800379a:	e168      	b.n	8003a6e <main+0x160e>
			  {
				  // ghi các thẻ hiện tại vào bộ nhớ đệm từ Block 33
				  for (uint32_t i = 0; i<number_card; i++)
 800379c:	2300      	movs	r3, #0
 800379e:	677b      	str	r3, [r7, #116]	@ 0x74
 80037a0:	e045      	b.n	800382e <main+0x13ce>
 80037a2:	bf00      	nop
 80037a4:	08009bf0 	.word	0x08009bf0
 80037a8:	08009bd8 	.word	0x08009bd8
 80037ac:	20000918 	.word	0x20000918
 80037b0:	20000894 	.word	0x20000894
 80037b4:	20000917 	.word	0x20000917
 80037b8:	20000923 	.word	0x20000923
 80037bc:	08009bf4 	.word	0x08009bf4
 80037c0:	08009bfc 	.word	0x08009bfc
 80037c4:	200008d1 	.word	0x200008d1
 80037c8:	20000898 	.word	0x20000898
 80037cc:	2000091e 	.word	0x2000091e
 80037d0:	20000304 	.word	0x20000304
 80037d4:	2000096c 	.word	0x2000096c
 80037d8:	0020ffe8 	.word	0x0020ffe8
 80037dc:	08009bdc 	.word	0x08009bdc
 80037e0:	20000919 	.word	0x20000919
 80037e4:	08009be0 	.word	0x08009be0
				  {
					  W25Q_FastRead_address(i*24, sizeof(user_info_t), (uint8_t *)&send_user);
 80037e8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037ea:	4613      	mov	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4aab      	ldr	r2, [pc, #684]	@ (8003aa0 <main+0x1640>)
 80037f4:	2118      	movs	r1, #24
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fa14 	bl	8001c24 <W25Q_FastRead_address>
					  W25Q_Write_Nbytes(i*24 + 0x210000 + ((add_card*24/(16*256))+1)*0x1000, (uint8_t *)&send_user, sizeof(user_info_t));
 80037fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037fe:	4613      	mov	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4619      	mov	r1, r3
 8003808:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	0b1b      	lsrs	r3, r3, #12
 8003814:	3301      	adds	r3, #1
 8003816:	031b      	lsls	r3, r3, #12
 8003818:	440b      	add	r3, r1
 800381a:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800381e:	2218      	movs	r2, #24
 8003820:	499f      	ldr	r1, [pc, #636]	@ (8003aa0 <main+0x1640>)
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe faa2 	bl	8001d6c <W25Q_Write_Nbytes>
				  for (uint32_t i = 0; i<number_card; i++)
 8003828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800382a:	3301      	adds	r3, #1
 800382c:	677b      	str	r3, [r7, #116]	@ 0x74
 800382e:	4b9d      	ldr	r3, [pc, #628]	@ (8003aa4 <main+0x1644>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003834:	429a      	cmp	r2, r3
 8003836:	d3d7      	bcc.n	80037e8 <main+0x1388>
				  }
				  // xóa bộ nhớ ban đầu
				  for (uint8_t i=0; i<(number_card)*24/(16*256)+1; i++)
 8003838:	2300      	movs	r3, #0
 800383a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800383e:	e00a      	b.n	8003856 <main+0x13f6>
				  {
					  W25Q_Erase_Sector(i);
 8003840:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003844:	b29b      	uxth	r3, r3
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fa3f 	bl	8001cca <W25Q_Erase_Sector>
				  for (uint8_t i=0; i<(number_card)*24/(16*256)+1; i++)
 800384c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003850:	3301      	adds	r3, #1
 8003852:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8003856:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 800385a:	4b92      	ldr	r3, [pc, #584]	@ (8003aa4 <main+0x1644>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	0b1b      	lsrs	r3, r3, #12
 8003868:	3301      	adds	r3, #1
 800386a:	4299      	cmp	r1, r3
 800386c:	d3e8      	bcc.n	8003840 <main+0x13e0>
				  }
				  uint32_t i = 0, j = 0, k = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003872:	2300      	movs	r3, #0
 8003874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003876:	2300      	movs	r3, #0
 8003878:	667b      	str	r3, [r7, #100]	@ 0x64
				  user_info_t old_user, new_user;

				  while (i < number_card && j < add_card)
 800387a:	e06d      	b.n	8003958 <main+0x14f8>
				  {
					  W25Q_FastRead_address(i*24 + 0x210000 + ((add_card*24/(16*256))+1)*0x1000 , sizeof(user_info_t), (uint8_t *)&old_user);
 800387c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800387e:	4613      	mov	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4619      	mov	r1, r3
 8003888:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	0b1b      	lsrs	r3, r3, #12
 8003894:	3301      	adds	r3, #1
 8003896:	031b      	lsls	r3, r3, #12
 8003898:	440b      	add	r3, r1
 800389a:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800389e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80038a2:	2118      	movs	r1, #24
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe f9bd 	bl	8001c24 <W25Q_FastRead_address>
					  W25Q_FastRead_address(j*24 + 0x210000, sizeof(user_info_t), (uint8_t *)&new_user);
 80038aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 80038b8:	f107 0218 	add.w	r2, r7, #24
 80038bc:	2118      	movs	r1, #24
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe f9b0 	bl	8001c24 <W25Q_FastRead_address>
					  if (old_user.cardID < new_user.cardID)
 80038c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d212      	bcs.n	80038f2 <main+0x1492>
					  {
						  old_user.STT = k + 1;
 80038cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038ce:	3301      	adds	r3, #1
 80038d0:	633b      	str	r3, [r7, #48]	@ 0x30
						  W25Q_Write_Nbytes(k*24, (uint8_t *)&old_user, sizeof(user_info_t));
 80038d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4618      	mov	r0, r3
 80038de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038e2:	2218      	movs	r2, #24
 80038e4:	4619      	mov	r1, r3
 80038e6:	f7fe fa41 	bl	8001d6c <W25Q_Write_Nbytes>
						  i++; // Dịch chỉ số của mảng đã lấy
 80038ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ec:	3301      	adds	r3, #1
 80038ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038f0:	e02f      	b.n	8003952 <main+0x14f2>
					  } else if (old_user.cardID > new_user.cardID)
 80038f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d912      	bls.n	8003920 <main+0x14c0>
					  {
						  new_user.STT = k + 1;
 80038fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038fc:	3301      	adds	r3, #1
 80038fe:	61bb      	str	r3, [r7, #24]
						  W25Q_Write_Nbytes(k*24, (uint8_t *)&new_user, sizeof(user_info_t));
 8003900:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003902:	4613      	mov	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4413      	add	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4618      	mov	r0, r3
 800390c:	f107 0318 	add.w	r3, r7, #24
 8003910:	2218      	movs	r2, #24
 8003912:	4619      	mov	r1, r3
 8003914:	f7fe fa2a 	bl	8001d6c <W25Q_Write_Nbytes>
						  j++; // Dịch chỉ số của mảng đã lấy
 8003918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800391a:	3301      	adds	r3, #1
 800391c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800391e:	e018      	b.n	8003952 <main+0x14f2>
					  } else if (old_user.cardID == new_user.cardID)
 8003920:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	429a      	cmp	r2, r3
 8003926:	d114      	bne.n	8003952 <main+0x14f2>
					  {
						  new_user.STT = k + 1;
 8003928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800392a:	3301      	adds	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
						  W25Q_Write_Nbytes(k*24, (uint8_t *)&new_user, sizeof(user_info_t));
 800392e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4618      	mov	r0, r3
 800393a:	f107 0318 	add.w	r3, r7, #24
 800393e:	2218      	movs	r2, #24
 8003940:	4619      	mov	r1, r3
 8003942:	f7fe fa13 	bl	8001d6c <W25Q_Write_Nbytes>
						  j++; // Dịch chỉ số của mảng đã lấy
 8003946:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003948:	3301      	adds	r3, #1
 800394a:	66bb      	str	r3, [r7, #104]	@ 0x68
						  i++;
 800394c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800394e:	3301      	adds	r3, #1
 8003950:	66fb      	str	r3, [r7, #108]	@ 0x6c
					  }
					  k++;
 8003952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003954:	3301      	adds	r3, #1
 8003956:	667b      	str	r3, [r7, #100]	@ 0x64
				  while (i < number_card && j < add_card)
 8003958:	4b52      	ldr	r3, [pc, #328]	@ (8003aa4 <main+0x1644>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800395e:	429a      	cmp	r2, r3
 8003960:	d230      	bcs.n	80039c4 <main+0x1564>
 8003962:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003964:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003966:	429a      	cmp	r2, r3
 8003968:	d388      	bcc.n	800387c <main+0x141c>
				  }
				  while (i < number_card)
 800396a:	e02b      	b.n	80039c4 <main+0x1564>
				  {
					  W25Q_FastRead_address(i*24 + 0x210000 + ((add_card*24/(16*256))+1)*0x1000 , sizeof(user_info_t), (uint8_t *)&old_user);
 800396c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800396e:	4613      	mov	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4619      	mov	r1, r3
 8003978:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	0b1b      	lsrs	r3, r3, #12
 8003984:	3301      	adds	r3, #1
 8003986:	031b      	lsls	r3, r3, #12
 8003988:	440b      	add	r3, r1
 800398a:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800398e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003992:	2118      	movs	r1, #24
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe f945 	bl	8001c24 <W25Q_FastRead_address>
					  old_user.STT = k + 1;
 800399a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800399c:	3301      	adds	r3, #1
 800399e:	633b      	str	r3, [r7, #48]	@ 0x30
					  W25Q_Write_Nbytes(k*24, (uint8_t *)&old_user, sizeof(user_info_t));
 80039a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039a2:	4613      	mov	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4618      	mov	r0, r3
 80039ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80039b0:	2218      	movs	r2, #24
 80039b2:	4619      	mov	r1, r3
 80039b4:	f7fe f9da 	bl	8001d6c <W25Q_Write_Nbytes>
					  i++;
 80039b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ba:	3301      	adds	r3, #1
 80039bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
					  k++;
 80039be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039c0:	3301      	adds	r3, #1
 80039c2:	667b      	str	r3, [r7, #100]	@ 0x64
				  while (i < number_card)
 80039c4:	4b37      	ldr	r3, [pc, #220]	@ (8003aa4 <main+0x1644>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d3ce      	bcc.n	800396c <main+0x150c>
				  }
				  while (j < add_card)
 80039ce:	e021      	b.n	8003a14 <main+0x15b4>
				  {
					  W25Q_FastRead_address(j*24 + 0x210000, sizeof(user_info_t), (uint8_t *)&new_user);
 80039d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 80039de:	f107 0218 	add.w	r2, r7, #24
 80039e2:	2118      	movs	r1, #24
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe f91d 	bl	8001c24 <W25Q_FastRead_address>
					  new_user.STT = k + 1;
 80039ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ec:	3301      	adds	r3, #1
 80039ee:	61bb      	str	r3, [r7, #24]
					  W25Q_Write_Nbytes(k*24, (uint8_t *)&new_user, sizeof(user_info_t));
 80039f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4618      	mov	r0, r3
 80039fc:	f107 0318 	add.w	r3, r7, #24
 8003a00:	2218      	movs	r2, #24
 8003a02:	4619      	mov	r1, r3
 8003a04:	f7fe f9b2 	bl	8001d6c <W25Q_Write_Nbytes>
					  j++;
 8003a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
					  k++;
 8003a0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a10:	3301      	adds	r3, #1
 8003a12:	667b      	str	r3, [r7, #100]	@ 0x64
				  while (j < add_card)
 8003a14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003a16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3d9      	bcc.n	80039d0 <main+0x1570>
				  }
				  for (uint32_t i=0; i<((k*24/(16*256))+3); i++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a20:	e00a      	b.n	8003a38 <main+0x15d8>
				  {
					  W25Q_Erase_Sector(i+16*33);
 8003a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe f94c 	bl	8001cca <W25Q_Erase_Sector>
				  for (uint32_t i=0; i<((k*24/(16*256))+3); i++)
 8003a32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a34:	3301      	adds	r3, #1
 8003a36:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	0b1b      	lsrs	r3, r3, #12
 8003a44:	3303      	adds	r3, #3
 8003a46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d3ea      	bcc.n	8003a22 <main+0x15c2>
				  }
				  if (send_uart_to_PC)
 8003a4c:	4b16      	ldr	r3, [pc, #88]	@ (8003aa8 <main+0x1648>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d006      	beq.n	8003a62 <main+0x1602>
				  {
					  send_uart_to_PC = false;
 8003a54:	4b14      	ldr	r3, [pc, #80]	@ (8003aa8 <main+0x1648>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
					  sendString_uart("WCOK");
 8003a5a:	4814      	ldr	r0, [pc, #80]	@ (8003aac <main+0x164c>)
 8003a5c:	f000 fc44 	bl	80042e8 <sendString_uart>
 8003a60:	e003      	b.n	8003a6a <main+0x160a>
				  } else
				  {
					  sendString("W", "COK");
 8003a62:	4913      	ldr	r1, [pc, #76]	@ (8003ab0 <main+0x1650>)
 8003a64:	4813      	ldr	r0, [pc, #76]	@ (8003ab4 <main+0x1654>)
 8003a66:	f000 fb85 	bl	8004174 <sendString>
				  }
				  HAL_NVIC_SystemReset();
 8003a6a:	f002 fb9a 	bl	80061a2 <HAL_NVIC_SystemReset>
			  while (write_done)
 8003a6e:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <main+0x1658>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f47f ae92 	bne.w	800379c <main+0x133c>
			  }

			  if ((abs(HAL_GetTick() - time_break) > Timeout_online))
 8003a78:	f001 fb78 	bl	800516c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <main+0x165c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bfb8      	it	lt
 8003a88:	425b      	neglt	r3, r3
 8003a8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f77f ada1 	ble.w	80035d6 <main+0x1176>
			  {
				  HAL_NVIC_SystemReset();
 8003a94:	f002 fb85 	bl	80061a2 <HAL_NVIC_SystemReset>
 8003a98:	e59d      	b.n	80035d6 <main+0x1176>
				  continue;
 8003a9a:	bf00      	nop
			  lenData = getSn_RX_RSR(SOCK_NUM);
 8003a9c:	e59b      	b.n	80035d6 <main+0x1176>
 8003a9e:	bf00      	nop
 8003aa0:	20000984 	.word	0x20000984
 8003aa4:	2000088c 	.word	0x2000088c
 8003aa8:	20000923 	.word	0x20000923
 8003aac:	08009be8 	.word	0x08009be8
 8003ab0:	08009bf0 	.word	0x08009bf0
 8003ab4:	08009bd8 	.word	0x08009bd8
 8003ab8:	20000918 	.word	0x20000918
 8003abc:	20000894 	.word	0x20000894
	  while (write_mode_somecard)
 8003ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b3c <main+0x16dc>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f47f ad5f 	bne.w	8003588 <main+0x1128>
			  }
		  }
	  }
	  if (RST_set)
 8003aca:	4b1d      	ldr	r3, [pc, #116]	@ (8003b40 <main+0x16e0>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d025      	beq.n	8003b1e <main+0x16be>
	  {
		  if (RST_timer_last > 10000)
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b44 <main+0x16e4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d91d      	bls.n	8003b1a <main+0x16ba>
		  {
			  ip1 = 192;
 8003ade:	4b1a      	ldr	r3, [pc, #104]	@ (8003b48 <main+0x16e8>)
 8003ae0:	22c0      	movs	r2, #192	@ 0xc0
 8003ae2:	701a      	strb	r2, [r3, #0]
			  ip2 = 168;
 8003ae4:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <main+0x16ec>)
 8003ae6:	22a8      	movs	r2, #168	@ 0xa8
 8003ae8:	701a      	strb	r2, [r3, #0]
			  ip3 = 0;
 8003aea:	4b19      	ldr	r3, [pc, #100]	@ (8003b50 <main+0x16f0>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
			  ip4 = 72;
 8003af0:	4b18      	ldr	r3, [pc, #96]	@ (8003b54 <main+0x16f4>)
 8003af2:	2248      	movs	r2, #72	@ 0x48
 8003af4:	701a      	strb	r2, [r3, #0]
			  ip_server1 = 192;
 8003af6:	4b18      	ldr	r3, [pc, #96]	@ (8003b58 <main+0x16f8>)
 8003af8:	22c0      	movs	r2, #192	@ 0xc0
 8003afa:	701a      	strb	r2, [r3, #0]
			  ip_server2 = 168;
 8003afc:	4b17      	ldr	r3, [pc, #92]	@ (8003b5c <main+0x16fc>)
 8003afe:	22a8      	movs	r2, #168	@ 0xa8
 8003b00:	701a      	strb	r2, [r3, #0]
			  ip_server3 = 0;
 8003b02:	4b17      	ldr	r3, [pc, #92]	@ (8003b60 <main+0x1700>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
			  ip_server4 = 2;
 8003b08:	4b16      	ldr	r3, [pc, #88]	@ (8003b64 <main+0x1704>)
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	701a      	strb	r2, [r3, #0]
			  port_server = 6000;
 8003b0e:	4b16      	ldr	r3, [pc, #88]	@ (8003b68 <main+0x1708>)
 8003b10:	f241 7270 	movw	r2, #6000	@ 0x1770
 8003b14:	801a      	strh	r2, [r3, #0]
			  save_data();
 8003b16:	f000 fc4f 	bl	80043b8 <save_data>
		  }
		  HAL_NVIC_SystemReset();
 8003b1a:	f002 fb42 	bl	80061a2 <HAL_NVIC_SystemReset>
	  }
	  if (counter_reset == 720)
 8003b1e:	4b13      	ldr	r3, [pc, #76]	@ (8003b6c <main+0x170c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f5b3 7f34 	cmp.w	r3, #720	@ 0x2d0
 8003b26:	d101      	bne.n	8003b2c <main+0x16cc>
	  {
		  HAL_NVIC_SystemReset();
 8003b28:	f002 fb3b 	bl	80061a2 <HAL_NVIC_SystemReset>
	  }
	  HAL_Delay(10);
 8003b2c:	200a      	movs	r0, #10
 8003b2e:	f001 fb27 	bl	8005180 <HAL_Delay>
 8003b32:	f7fe bf44 	b.w	80029be <main+0x55e>
		  continue;
 8003b36:	bf00      	nop
	  lenData = getSn_RX_RSR(SOCK_NUM);
 8003b38:	f7fe bf41 	b.w	80029be <main+0x55e>
 8003b3c:	20000916 	.word	0x20000916
 8003b40:	20000920 	.word	0x20000920
 8003b44:	200008c0 	.word	0x200008c0
 8003b48:	20000714 	.word	0x20000714
 8003b4c:	20000715 	.word	0x20000715
 8003b50:	20000716 	.word	0x20000716
 8003b54:	20000717 	.word	0x20000717
 8003b58:	20000718 	.word	0x20000718
 8003b5c:	20000719 	.word	0x20000719
 8003b60:	2000071a 	.word	0x2000071a
 8003b64:	2000071b 	.word	0x2000071b
 8003b68:	2000077a 	.word	0x2000077a
 8003b6c:	200008c8 	.word	0x200008c8

08003b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b090      	sub	sp, #64	@ 0x40
 8003b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b76:	f107 0318 	add.w	r3, r7, #24
 8003b7a:	2228      	movs	r2, #40	@ 0x28
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f005 ffbe 	bl	8009b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003b92:	2309      	movs	r3, #9
 8003b94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ba0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003baa:	2302      	movs	r3, #2
 8003bac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003bb4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bba:	f107 0318 	add.w	r3, r7, #24
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f003 f9da 	bl	8006f78 <HAL_RCC_OscConfig>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003bca:	f001 f80d 	bl	8004be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bce:	230f      	movs	r3, #15
 8003bd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	2102      	movs	r1, #2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 fc47 	bl	800747c <HAL_RCC_ClockConfig>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003bf4:	f000 fff8 	bl	8004be8 <Error_Handler>
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3740      	adds	r7, #64	@ 0x40
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003c04:	4b17      	ldr	r3, [pc, #92]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c06:	4a18      	ldr	r2, [pc, #96]	@ (8003c68 <MX_CAN_Init+0x68>)
 8003c08:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 60;
 8003c0a:	4b16      	ldr	r3, [pc, #88]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c0c:	223c      	movs	r2, #60	@ 0x3c
 8003c0e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003c10:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003c16:	4b13      	ldr	r3, [pc, #76]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c1e:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8003c22:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8003c24:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c26:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8003c2a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8003c32:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003c38:	4b0a      	ldr	r3, [pc, #40]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003c3e:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003c44:	4b07      	ldr	r3, [pc, #28]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003c50:	4804      	ldr	r0, [pc, #16]	@ (8003c64 <MX_CAN_Init+0x64>)
 8003c52:	f001 fad7 	bl	8005204 <HAL_CAN_Init>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003c5c:	f000 ffc4 	bl	8004be8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003c60:	bf00      	nop
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	2000009c 	.word	0x2000009c
 8003c68:	40006400 	.word	0x40006400

08003c6c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003c70:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <MX_IWDG_Init+0x2c>)
 8003c72:	4a0a      	ldr	r2, [pc, #40]	@ (8003c9c <MX_IWDG_Init+0x30>)
 8003c74:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003c76:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <MX_IWDG_Init+0x2c>)
 8003c78:	2204      	movs	r2, #4
 8003c7a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1874;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <MX_IWDG_Init+0x2c>)
 8003c7e:	f240 7252 	movw	r2, #1874	@ 0x752
 8003c82:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003c84:	4804      	ldr	r0, [pc, #16]	@ (8003c98 <MX_IWDG_Init+0x2c>)
 8003c86:	f003 f923 	bl	8006ed0 <HAL_IWDG_Init>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003c90:	f000 ffaa 	bl	8004be8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003c94:	bf00      	nop
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	200000c4 	.word	0x200000c4
 8003c9c:	40003000 	.word	0x40003000

08003ca0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ca4:	4b17      	ldr	r3, [pc, #92]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003ca6:	4a18      	ldr	r2, [pc, #96]	@ (8003d08 <MX_SPI1_Init+0x68>)
 8003ca8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003caa:	4b16      	ldr	r3, [pc, #88]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003cac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003cb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cb2:	4b14      	ldr	r3, [pc, #80]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cb8:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cbe:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cca:	4b0e      	ldr	r3, [pc, #56]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cde:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce4:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003cec:	220a      	movs	r2, #10
 8003cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cf0:	4804      	ldr	r0, [pc, #16]	@ (8003d04 <MX_SPI1_Init+0x64>)
 8003cf2:	f003 fd53 	bl	800779c <HAL_SPI_Init>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003cfc:	f000 ff74 	bl	8004be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200000d0 	.word	0x200000d0
 8003d08:	40013000 	.word	0x40013000

08003d0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d10:	4b17      	ldr	r3, [pc, #92]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d12:	4a18      	ldr	r2, [pc, #96]	@ (8003d74 <MX_SPI2_Init+0x68>)
 8003d14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d16:	4b16      	ldr	r3, [pc, #88]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d1e:	4b14      	ldr	r3, [pc, #80]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d24:	4b12      	ldr	r3, [pc, #72]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d2a:	4b11      	ldr	r3, [pc, #68]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d30:	4b0f      	ldr	r3, [pc, #60]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d36:	4b0e      	ldr	r3, [pc, #56]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d44:	4b0a      	ldr	r3, [pc, #40]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d4a:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d50:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d58:	220a      	movs	r2, #10
 8003d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d5c:	4804      	ldr	r0, [pc, #16]	@ (8003d70 <MX_SPI2_Init+0x64>)
 8003d5e:	f003 fd1d 	bl	800779c <HAL_SPI_Init>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d68:	f000 ff3e 	bl	8004be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000128 	.word	0x20000128
 8003d74:	40003800 	.word	0x40003800

08003d78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d7e:	f107 0308 	add.w	r3, r7, #8
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d94:	4b1e      	ldr	r3, [pc, #120]	@ (8003e10 <MX_TIM2_Init+0x98>)
 8003d96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e10 <MX_TIM2_Init+0x98>)
 8003d9e:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003da2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003da4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <MX_TIM2_Init+0x98>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003daa:	4b19      	ldr	r3, [pc, #100]	@ (8003e10 <MX_TIM2_Init+0x98>)
 8003dac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003db0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003db2:	4b17      	ldr	r3, [pc, #92]	@ (8003e10 <MX_TIM2_Init+0x98>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db8:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <MX_TIM2_Init+0x98>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003dbe:	4814      	ldr	r0, [pc, #80]	@ (8003e10 <MX_TIM2_Init+0x98>)
 8003dc0:	f004 fa81 	bl	80082c6 <HAL_TIM_Base_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003dca:	f000 ff0d 	bl	8004be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003dd4:	f107 0308 	add.w	r3, r7, #8
 8003dd8:	4619      	mov	r1, r3
 8003dda:	480d      	ldr	r0, [pc, #52]	@ (8003e10 <MX_TIM2_Init+0x98>)
 8003ddc:	f004 fc04 	bl	80085e8 <HAL_TIM_ConfigClockSource>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003de6:	f000 feff 	bl	8004be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dea:	2300      	movs	r3, #0
 8003dec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003df2:	463b      	mov	r3, r7
 8003df4:	4619      	mov	r1, r3
 8003df6:	4806      	ldr	r0, [pc, #24]	@ (8003e10 <MX_TIM2_Init+0x98>)
 8003df8:	f004 fde6 	bl	80089c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003e02:	f000 fef1 	bl	8004be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e06:	bf00      	nop
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000180 	.word	0x20000180

08003e14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e1a:	f107 0308 	add.w	r3, r7, #8
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e28:	463b      	mov	r3, r7
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <MX_TIM3_Init+0x94>)
 8003e32:	4a1e      	ldr	r2, [pc, #120]	@ (8003eac <MX_TIM3_Init+0x98>)
 8003e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000;
 8003e36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea8 <MX_TIM3_Init+0x94>)
 8003e38:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003e3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <MX_TIM3_Init+0x94>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003e44:	4b18      	ldr	r3, [pc, #96]	@ (8003ea8 <MX_TIM3_Init+0x94>)
 8003e46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e4c:	4b16      	ldr	r3, [pc, #88]	@ (8003ea8 <MX_TIM3_Init+0x94>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e52:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <MX_TIM3_Init+0x94>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e58:	4813      	ldr	r0, [pc, #76]	@ (8003ea8 <MX_TIM3_Init+0x94>)
 8003e5a:	f004 fa34 	bl	80082c6 <HAL_TIM_Base_Init>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003e64:	f000 fec0 	bl	8004be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e6e:	f107 0308 	add.w	r3, r7, #8
 8003e72:	4619      	mov	r1, r3
 8003e74:	480c      	ldr	r0, [pc, #48]	@ (8003ea8 <MX_TIM3_Init+0x94>)
 8003e76:	f004 fbb7 	bl	80085e8 <HAL_TIM_ConfigClockSource>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003e80:	f000 feb2 	bl	8004be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e84:	2300      	movs	r3, #0
 8003e86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e8c:	463b      	mov	r3, r7
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4805      	ldr	r0, [pc, #20]	@ (8003ea8 <MX_TIM3_Init+0x94>)
 8003e92:	f004 fd99 	bl	80089c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003e9c:	f000 fea4 	bl	8004be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ea0:	bf00      	nop
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	200001c8 	.word	0x200001c8
 8003eac:	40000400 	.word	0x40000400

08003eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003eb4:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <MX_USART1_UART_Init+0x4c>)
 8003eb6:	4a12      	ldr	r2, [pc, #72]	@ (8003f00 <MX_USART1_UART_Init+0x50>)
 8003eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003eba:	4b10      	ldr	r3, [pc, #64]	@ (8003efc <MX_USART1_UART_Init+0x4c>)
 8003ebc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8003efc <MX_USART1_UART_Init+0x4c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <MX_USART1_UART_Init+0x4c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ece:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <MX_USART1_UART_Init+0x4c>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ed4:	4b09      	ldr	r3, [pc, #36]	@ (8003efc <MX_USART1_UART_Init+0x4c>)
 8003ed6:	220c      	movs	r2, #12
 8003ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eda:	4b08      	ldr	r3, [pc, #32]	@ (8003efc <MX_USART1_UART_Init+0x4c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ee0:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <MX_USART1_UART_Init+0x4c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ee6:	4805      	ldr	r0, [pc, #20]	@ (8003efc <MX_USART1_UART_Init+0x4c>)
 8003ee8:	f004 fdde 	bl	8008aa8 <HAL_UART_Init>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ef2:	f000 fe79 	bl	8004be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000210 	.word	0x20000210
 8003f00:	40013800 	.word	0x40013800

08003f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <MX_DMA_Init+0x38>)
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8003f3c <MX_DMA_Init+0x38>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	6153      	str	r3, [r2, #20]
 8003f16:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <MX_DMA_Init+0x38>)
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	607b      	str	r3, [r7, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003f22:	2200      	movs	r2, #0
 8003f24:	2100      	movs	r1, #0
 8003f26:	200f      	movs	r0, #15
 8003f28:	f002 f911 	bl	800614e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003f2c:	200f      	movs	r0, #15
 8003f2e:	f002 f92a 	bl	8006186 <HAL_NVIC_EnableIRQ>

}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000

08003f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f54:	4b66      	ldr	r3, [pc, #408]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4a65      	ldr	r2, [pc, #404]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003f5a:	f043 0310 	orr.w	r3, r3, #16
 8003f5e:	6193      	str	r3, [r2, #24]
 8003f60:	4b63      	ldr	r3, [pc, #396]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f6c:	4b60      	ldr	r3, [pc, #384]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	4a5f      	ldr	r2, [pc, #380]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003f72:	f043 0320 	orr.w	r3, r3, #32
 8003f76:	6193      	str	r3, [r2, #24]
 8003f78:	4b5d      	ldr	r3, [pc, #372]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f84:	4b5a      	ldr	r3, [pc, #360]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	4a59      	ldr	r2, [pc, #356]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003f8a:	f043 0304 	orr.w	r3, r3, #4
 8003f8e:	6193      	str	r3, [r2, #24]
 8003f90:	4b57      	ldr	r3, [pc, #348]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9c:	4b54      	ldr	r3, [pc, #336]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	4a53      	ldr	r2, [pc, #332]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003fa2:	f043 0308 	orr.w	r3, r3, #8
 8003fa6:	6193      	str	r3, [r2, #24]
 8003fa8:	4b51      	ldr	r3, [pc, #324]	@ (80040f0 <MX_GPIO_Init+0x1b0>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_STT_Pin|LED_STT_ETH_Pin|LED_BP_Pin, GPIO_PIN_RESET);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8003fba:	484e      	ldr	r0, [pc, #312]	@ (80040f4 <MX_GPIO_Init+0x1b4>)
 8003fbc:	f002 ff3f 	bl	8006e3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	2110      	movs	r1, #16
 8003fc4:	484c      	ldr	r0, [pc, #304]	@ (80040f8 <MX_GPIO_Init+0x1b8>)
 8003fc6:	f002 ff3a 	bl	8006e3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|S_OUT2_Pin|S_OUT1_Pin, GPIO_PIN_RESET);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2132      	movs	r1, #50	@ 0x32
 8003fce:	484b      	ldr	r0, [pc, #300]	@ (80040fc <MX_GPIO_Init+0x1bc>)
 8003fd0:	f002 ff35 	bl	8006e3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_W25_GPIO_Port, CS_W25_Pin, GPIO_PIN_SET);
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fda:	4848      	ldr	r0, [pc, #288]	@ (80040fc <MX_GPIO_Init+0x1bc>)
 8003fdc:	f002 ff2f 	bl	8006e3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003fe6:	4844      	ldr	r0, [pc, #272]	@ (80040f8 <MX_GPIO_Init+0x1b8>)
 8003fe8:	f002 ff29 	bl	8006e3e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_STT_Pin LED_STT_ETH_Pin LED_BP_Pin */
  GPIO_InitStruct.Pin = LED_STT_Pin|LED_STT_ETH_Pin|LED_BP_Pin;
 8003fec:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ffe:	f107 0310 	add.w	r3, r7, #16
 8004002:	4619      	mov	r1, r3
 8004004:	483b      	ldr	r0, [pc, #236]	@ (80040f4 <MX_GPIO_Init+0x1b4>)
 8004006:	f002 fd7f 	bl	8006b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BYPASS_Pin */
  GPIO_InitStruct.Pin = BYPASS_Pin;
 800400a:	2304      	movs	r3, #4
 800400c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004012:	2301      	movs	r3, #1
 8004014:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BYPASS_GPIO_Port, &GPIO_InitStruct);
 8004016:	f107 0310 	add.w	r3, r7, #16
 800401a:	4619      	mov	r1, r3
 800401c:	4836      	ldr	r0, [pc, #216]	@ (80040f8 <MX_GPIO_Init+0x1b8>)
 800401e:	f002 fd73 	bl	8006b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8004022:	2310      	movs	r3, #16
 8004024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004026:	2301      	movs	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800402e:	2303      	movs	r3, #3
 8004030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8004032:	f107 0310 	add.w	r3, r7, #16
 8004036:	4619      	mov	r1, r3
 8004038:	482f      	ldr	r0, [pc, #188]	@ (80040f8 <MX_GPIO_Init+0x1b8>)
 800403a:	f002 fd65 	bl	8006b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800403e:	2301      	movs	r3, #1
 8004040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004042:	4b2f      	ldr	r3, [pc, #188]	@ (8004100 <MX_GPIO_Init+0x1c0>)
 8004044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404a:	f107 0310 	add.w	r3, r7, #16
 800404e:	4619      	mov	r1, r3
 8004050:	482a      	ldr	r0, [pc, #168]	@ (80040fc <MX_GPIO_Init+0x1bc>)
 8004052:	f002 fd59 	bl	8006b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 S_OUT2_Pin S_OUT1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|S_OUT2_Pin|S_OUT1_Pin;
 8004056:	2332      	movs	r3, #50	@ 0x32
 8004058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800405a:	2301      	movs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004062:	2302      	movs	r3, #2
 8004064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004066:	f107 0310 	add.w	r3, r7, #16
 800406a:	4619      	mov	r1, r3
 800406c:	4823      	ldr	r0, [pc, #140]	@ (80040fc <MX_GPIO_Init+0x1bc>)
 800406e:	f002 fd4b 	bl	8006b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_W25_Pin */
  GPIO_InitStruct.Pin = CS_W25_Pin;
 8004072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004078:	2301      	movs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407c:	2300      	movs	r3, #0
 800407e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004080:	2303      	movs	r3, #3
 8004082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_W25_GPIO_Port, &GPIO_InitStruct);
 8004084:	f107 0310 	add.w	r3, r7, #16
 8004088:	4619      	mov	r1, r3
 800408a:	481c      	ldr	r0, [pc, #112]	@ (80040fc <MX_GPIO_Init+0x1bc>)
 800408c:	f002 fd3c 	bl	8006b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DE_Pin */
  GPIO_InitStruct.Pin = DE_Pin;
 8004090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004096:	2301      	movs	r3, #1
 8004098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409e:	2302      	movs	r3, #2
 80040a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 80040a2:	f107 0310 	add.w	r3, r7, #16
 80040a6:	4619      	mov	r1, r3
 80040a8:	4813      	ldr	r0, [pc, #76]	@ (80040f8 <MX_GPIO_Init+0x1b8>)
 80040aa:	f002 fd2d 	bl	8006b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80040ae:	2340      	movs	r3, #64	@ 0x40
 80040b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040b2:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <MX_GPIO_Init+0x1c0>)
 80040b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80040ba:	f107 0310 	add.w	r3, r7, #16
 80040be:	4619      	mov	r1, r3
 80040c0:	480e      	ldr	r0, [pc, #56]	@ (80040fc <MX_GPIO_Init+0x1bc>)
 80040c2:	f002 fd21 	bl	8006b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80040c6:	2200      	movs	r2, #0
 80040c8:	2101      	movs	r1, #1
 80040ca:	2006      	movs	r0, #6
 80040cc:	f002 f83f 	bl	800614e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80040d0:	2006      	movs	r0, #6
 80040d2:	f002 f858 	bl	8006186 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 80040d6:	2200      	movs	r2, #0
 80040d8:	2107      	movs	r1, #7
 80040da:	2017      	movs	r0, #23
 80040dc:	f002 f837 	bl	800614e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80040e0:	2017      	movs	r0, #23
 80040e2:	f002 f850 	bl	8006186 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80040e6:	bf00      	nop
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000
 80040f4:	40011000 	.word	0x40011000
 80040f8:	40010800 	.word	0x40010800
 80040fc:	40010c00 	.word	0x40010c00
 8004100:	10210000 	.word	0x10210000

08004104 <sendData_eth>:

/* USER CODE BEGIN 4 */
void sendData_eth (char *CMD, uint32_t data)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
	uint8_t cmd[6];
	cmd[0] = CMD[0];
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	723b      	strb	r3, [r7, #8]
	cmd[1] = data>>24&0xFF;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	0e1b      	lsrs	r3, r3, #24
 8004118:	b2db      	uxtb	r3, r3
 800411a:	727b      	strb	r3, [r7, #9]
	cmd[2] = data>>16&0xFF;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	0c1b      	lsrs	r3, r3, #16
 8004120:	b2db      	uxtb	r3, r3
 8004122:	72bb      	strb	r3, [r7, #10]
	cmd[3] = data>>8&0xFF;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	b2db      	uxtb	r3, r3
 800412a:	72fb      	strb	r3, [r7, #11]
	cmd[4] = data&0xFF;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	733b      	strb	r3, [r7, #12]
	send(SOCK_NUM,(uint8_t *) cmd, 5);
 8004132:	f107 0308 	add.w	r3, r7, #8
 8004136:	2205      	movs	r2, #5
 8004138:	4619      	mov	r1, r3
 800413a:	2000      	movs	r0, #0
 800413c:	f7fc fe58 	bl	8000df0 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <send_u8_eth>:
void send_u8_eth (char *CMD, uint8_t data)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
//	char buf[10] = {0};
	uint8_t cmd[2];
	cmd[0] = CMD[0];
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	733b      	strb	r3, [r7, #12]
	cmd[1] = data;
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	737b      	strb	r3, [r7, #13]
	send(SOCK_NUM,(uint8_t *) cmd, 2);
 800415e:	f107 030c 	add.w	r3, r7, #12
 8004162:	2202      	movs	r2, #2
 8004164:	4619      	mov	r1, r3
 8004166:	2000      	movs	r0, #0
 8004168:	f7fc fe42 	bl	8000df0 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <sendString>:
void sendString (char *CMD, char *data)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
//	char buf[10] = {0};
	char cmd[5];
	strcpy(cmd,CMD);
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	f005 fcf7 	bl	8009b78 <strcpy>
	strcat(cmd, data);
 800418a:	f107 0308 	add.w	r3, r7, #8
 800418e:	6839      	ldr	r1, [r7, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f005 fcbd 	bl	8009b10 <strcat>
//	cmd[1] = (data&0xFF000000)>>24;
//	cmd[2] = (data&0x00FF0000)>>16;
//	cmd[3] = (data&0x0000FF00)>>8;
//	cmd[4] = (data&0x000000FF)>>0;
	send(SOCK_NUM,(uint8_t *) cmd, strlen(cmd));
 8004196:	f107 0308 	add.w	r3, r7, #8
 800419a:	4618      	mov	r0, r3
 800419c:	f7fb ffd6 	bl	800014c <strlen>
 80041a0:	4603      	mov	r3, r0
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	f107 0308 	add.w	r3, r7, #8
 80041a8:	4619      	mov	r1, r3
 80041aa:	2000      	movs	r0, #0
 80041ac:	f7fc fe20 	bl	8000df0 <send>
//	sendto(0, cmd, 5, server_ip,port_server);// send UDP
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <sendData_eth_info>:
void sendData_eth_info (char *CMD, uint8_t *data)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	@ 0x28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	char cx[27];
//	strcpy(cx,CMD);
//	strcat(cx, data);
	cx[0] = CMD[0];
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	733b      	strb	r3, [r7, #12]
	for (uint8_t i=0; i<26; i++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80041ce:	e010      	b.n	80041f2 <sendData_eth_info+0x3a>
	{
		cx[i+1] = data[i];
 80041d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	441a      	add	r2, r3
 80041d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041dc:	3301      	adds	r3, #1
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	3328      	adds	r3, #40	@ 0x28
 80041e2:	443b      	add	r3, r7
 80041e4:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i=0; i<26; i++)
 80041e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041ec:	3301      	adds	r3, #1
 80041ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80041f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041f6:	2b19      	cmp	r3, #25
 80041f8:	d9ea      	bls.n	80041d0 <sendData_eth_info+0x18>
	}
	send(SOCK_NUM,(uint8_t *) cx, 27);
 80041fa:	f107 030c 	add.w	r3, r7, #12
 80041fe:	221b      	movs	r2, #27
 8004200:	4619      	mov	r1, r3
 8004202:	2000      	movs	r0, #0
 8004204:	f7fc fdf4 	bl	8000df0 <send>
}
 8004208:	bf00      	nop
 800420a:	3728      	adds	r7, #40	@ 0x28
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <sendData_eth_CardID>:
void sendData_eth_CardID (char *CMD, user_info_t user)
{
 8004210:	b084      	sub	sp, #16
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800421e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t cx[14];
//	strcpy(cx,CMD);
//	strcat(cx, data);
	cx[0] = CMD[0];
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	723b      	strb	r3, [r7, #8]
//	cx[1] = user.STT>>24|0xFF;
//	cx[2] = user.STT>>16|0xFF;
//	cx[3] = user.STT>>8|0xFF;
//	cx[4] = user.STT>>0|0xFF;
	cx[1] = 2;
 8004228:	2302      	movs	r3, #2
 800422a:	727b      	strb	r3, [r7, #9]
	cx[2] = user.cardID>>24&0xFF;
 800422c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422e:	0e1b      	lsrs	r3, r3, #24
 8004230:	b2db      	uxtb	r3, r3
 8004232:	72bb      	strb	r3, [r7, #10]
	cx[3] = user.cardID>>16&0xFF;
 8004234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	b2db      	uxtb	r3, r3
 800423a:	72fb      	strb	r3, [r7, #11]
	cx[4] = user.cardID>>8&0xFF;
 800423c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	b2db      	uxtb	r3, r3
 8004242:	733b      	strb	r3, [r7, #12]
	cx[5] = user.cardID>>0&0xFF;
 8004244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004246:	b2db      	uxtb	r3, r3
 8004248:	737b      	strb	r3, [r7, #13]
	cx[6] = user.permis[0];
 800424a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800424e:	73bb      	strb	r3, [r7, #14]
	cx[7] = user.permis[1];
 8004250:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004254:	73fb      	strb	r3, [r7, #15]
	cx[8] = user.permis[2];
 8004256:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800425a:	743b      	strb	r3, [r7, #16]
	cx[9] = user.permis[3];
 800425c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004260:	747b      	strb	r3, [r7, #17]
	cx[10] = user.permis[4];
 8004262:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004266:	74bb      	strb	r3, [r7, #18]
	cx[11] = user.permis[5];
 8004268:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800426c:	74fb      	strb	r3, [r7, #19]
	cx[12] = user.permis[6];
 800426e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004272:	753b      	strb	r3, [r7, #20]
	cx[13] = user.permis[7];
 8004274:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004278:	757b      	strb	r3, [r7, #21]
	send(SOCK_NUM,(uint8_t *) cx, 14);
 800427a:	f107 0308 	add.w	r3, r7, #8
 800427e:	220e      	movs	r2, #14
 8004280:	4619      	mov	r1, r3
 8004282:	2000      	movs	r0, #0
 8004284:	f7fc fdb4 	bl	8000df0 <send>
}
 8004288:	bf00      	nop
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004292:	b004      	add	sp, #16
 8004294:	4770      	bx	lr
	...

08004298 <sendData_uart>:
void sendData_uart (char *CMD, uint8_t data)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	70fb      	strb	r3, [r7, #3]
	char cmd[2];
	cmd[0] = CMD[0];
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	733b      	strb	r3, [r7, #12]
	cmd[1] = data;
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	737b      	strb	r3, [r7, #13]
//	strcpy(cmd,CMD);
//	strcat(cmd,data);
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 80042ae:	2201      	movs	r2, #1
 80042b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042b4:	480a      	ldr	r0, [pc, #40]	@ (80042e0 <sendData_uart+0x48>)
 80042b6:	f002 fdc2 	bl	8006e3e <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,(uint8_t *) cmd, 2, 500);
 80042ba:	f107 010c 	add.w	r1, r7, #12
 80042be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80042c2:	2202      	movs	r2, #2
 80042c4:	4807      	ldr	r0, [pc, #28]	@ (80042e4 <sendData_uart+0x4c>)
 80042c6:	f004 fc3f 	bl	8008b48 <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 80042ca:	2200      	movs	r2, #0
 80042cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042d0:	4803      	ldr	r0, [pc, #12]	@ (80042e0 <sendData_uart+0x48>)
 80042d2:	f002 fdb4 	bl	8006e3e <HAL_GPIO_WritePin>
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40010800 	.word	0x40010800
 80042e4:	20000210 	.word	0x20000210

080042e8 <sendString_uart>:
void sendString_uart (char *CMD)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	char cmd[2];
	cmd[0] = CMD[0];
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	733b      	strb	r3, [r7, #12]
	cmd[1] =  CMD[1];
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	737b      	strb	r3, [r7, #13]
	cmd[2] =  CMD[2];
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	789b      	ldrb	r3, [r3, #2]
 8004300:	73bb      	strb	r3, [r7, #14]
	cmd[3] =  CMD[3];
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	78db      	ldrb	r3, [r3, #3]
 8004306:	73fb      	strb	r3, [r7, #15]
//	strcpy(cmd,CMD);
//	strcat(cmd,data);
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 8004308:	2201      	movs	r2, #1
 800430a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800430e:	480a      	ldr	r0, [pc, #40]	@ (8004338 <sendString_uart+0x50>)
 8004310:	f002 fd95 	bl	8006e3e <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1,(uint8_t *) cmd, 4, 500);
 8004314:	f107 010c 	add.w	r1, r7, #12
 8004318:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800431c:	2204      	movs	r2, #4
 800431e:	4807      	ldr	r0, [pc, #28]	@ (800433c <sendString_uart+0x54>)
 8004320:	f004 fc12 	bl	8008b48 <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 8004324:	2200      	movs	r2, #0
 8004326:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800432a:	4803      	ldr	r0, [pc, #12]	@ (8004338 <sendString_uart+0x50>)
 800432c:	f002 fd87 	bl	8006e3e <HAL_GPIO_WritePin>
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40010800 	.word	0x40010800
 800433c:	20000210 	.word	0x20000210

08004340 <sendString_info_uart>:
void sendString_info_uart (uint8_t *CMD)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	@ 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	uint8_t cmd[27];
	cmd[0] = 0x52;
 8004348:	2352      	movs	r3, #82	@ 0x52
 800434a:	733b      	strb	r3, [r7, #12]
	for (uint8_t i=0; i<26; i++)
 800434c:	2300      	movs	r3, #0
 800434e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004352:	e010      	b.n	8004376 <sendString_info_uart+0x36>
	{
		cmd[i+1] =  CMD[i];
 8004354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	441a      	add	r2, r3
 800435c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004360:	3301      	adds	r3, #1
 8004362:	7812      	ldrb	r2, [r2, #0]
 8004364:	3328      	adds	r3, #40	@ 0x28
 8004366:	443b      	add	r3, r7
 8004368:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i=0; i<26; i++)
 800436c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004370:	3301      	adds	r3, #1
 8004372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800437a:	2b19      	cmp	r3, #25
 800437c:	d9ea      	bls.n	8004354 <sendString_info_uart+0x14>
	}
//	strcpy(cmd,CMD);
//	strcat(cmd,data);
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 800437e:	2201      	movs	r2, #1
 8004380:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004384:	480a      	ldr	r0, [pc, #40]	@ (80043b0 <sendString_info_uart+0x70>)
 8004386:	f002 fd5a 	bl	8006e3e <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, cmd, 27, 1000);
 800438a:	f107 010c 	add.w	r1, r7, #12
 800438e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004392:	221b      	movs	r2, #27
 8004394:	4807      	ldr	r0, [pc, #28]	@ (80043b4 <sendString_info_uart+0x74>)
 8004396:	f004 fbd7 	bl	8008b48 <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_RESET);
 800439a:	2200      	movs	r2, #0
 800439c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80043a0:	4803      	ldr	r0, [pc, #12]	@ (80043b0 <sendString_info_uart+0x70>)
 80043a2:	f002 fd4c 	bl	8006e3e <HAL_GPIO_WritePin>
}
 80043a6:	bf00      	nop
 80043a8:	3728      	adds	r7, #40	@ 0x28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40010800 	.word	0x40010800
 80043b4:	20000210 	.word	0x20000210

080043b8 <save_data>:
void save_data()
{
 80043b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043bc:	b096      	sub	sp, #88	@ 0x58
 80043be:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80043c0:	f002 fa12 	bl	80067e8 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 80043c4:	4958      	ldr	r1, [pc, #352]	@ (8004528 <save_data+0x170>)
 80043c6:	4859      	ldr	r0, [pc, #356]	@ (800452c <save_data+0x174>)
 80043c8:	f002 faf6 	bl	80069b8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC00, ip1);
 80043cc:	4b58      	ldr	r3, [pc, #352]	@ (8004530 <save_data+0x178>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2200      	movs	r2, #0
 80043d4:	461c      	mov	r4, r3
 80043d6:	4615      	mov	r5, r2
 80043d8:	4622      	mov	r2, r4
 80043da:	462b      	mov	r3, r5
 80043dc:	4955      	ldr	r1, [pc, #340]	@ (8004534 <save_data+0x17c>)
 80043de:	2002      	movs	r0, #2
 80043e0:	f002 f992 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC04, ip2);
 80043e4:	4b54      	ldr	r3, [pc, #336]	@ (8004538 <save_data+0x180>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2200      	movs	r2, #0
 80043ec:	4698      	mov	r8, r3
 80043ee:	4691      	mov	r9, r2
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	4951      	ldr	r1, [pc, #324]	@ (800453c <save_data+0x184>)
 80043f6:	2002      	movs	r0, #2
 80043f8:	f002 f986 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC08, ip3);
 80043fc:	4b50      	ldr	r3, [pc, #320]	@ (8004540 <save_data+0x188>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2200      	movs	r2, #0
 8004404:	469a      	mov	sl, r3
 8004406:	4693      	mov	fp, r2
 8004408:	4652      	mov	r2, sl
 800440a:	465b      	mov	r3, fp
 800440c:	494d      	ldr	r1, [pc, #308]	@ (8004544 <save_data+0x18c>)
 800440e:	2002      	movs	r0, #2
 8004410:	f002 f97a 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC0C, ip4);
 8004414:	4b4c      	ldr	r3, [pc, #304]	@ (8004548 <save_data+0x190>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2200      	movs	r2, #0
 800441c:	653b      	str	r3, [r7, #80]	@ 0x50
 800441e:	657a      	str	r2, [r7, #84]	@ 0x54
 8004420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004424:	4949      	ldr	r1, [pc, #292]	@ (800454c <save_data+0x194>)
 8004426:	2002      	movs	r0, #2
 8004428:	f002 f96e 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC10, port_client);
 800442c:	4b48      	ldr	r3, [pc, #288]	@ (8004550 <save_data+0x198>)
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	2200      	movs	r2, #0
 8004434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004436:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800443c:	4945      	ldr	r1, [pc, #276]	@ (8004554 <save_data+0x19c>)
 800443e:	2002      	movs	r0, #2
 8004440:	f002 f962 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC14, ip_server1);
 8004444:	4b44      	ldr	r3, [pc, #272]	@ (8004558 <save_data+0x1a0>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2200      	movs	r2, #0
 800444c:	643b      	str	r3, [r7, #64]	@ 0x40
 800444e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004450:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004454:	4941      	ldr	r1, [pc, #260]	@ (800455c <save_data+0x1a4>)
 8004456:	2002      	movs	r0, #2
 8004458:	f002 f956 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC18, ip_server2);
 800445c:	4b40      	ldr	r3, [pc, #256]	@ (8004560 <save_data+0x1a8>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2200      	movs	r2, #0
 8004464:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004466:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800446c:	493d      	ldr	r1, [pc, #244]	@ (8004564 <save_data+0x1ac>)
 800446e:	2002      	movs	r0, #2
 8004470:	f002 f94a 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC1C, ip_server3);
 8004474:	4b3c      	ldr	r3, [pc, #240]	@ (8004568 <save_data+0x1b0>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2200      	movs	r2, #0
 800447c:	633b      	str	r3, [r7, #48]	@ 0x30
 800447e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004480:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004484:	4939      	ldr	r1, [pc, #228]	@ (800456c <save_data+0x1b4>)
 8004486:	2002      	movs	r0, #2
 8004488:	f002 f93e 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC20, ip_server4);
 800448c:	4b38      	ldr	r3, [pc, #224]	@ (8004570 <save_data+0x1b8>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2200      	movs	r2, #0
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004496:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004498:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800449c:	4935      	ldr	r1, [pc, #212]	@ (8004574 <save_data+0x1bc>)
 800449e:	2002      	movs	r0, #2
 80044a0:	f002 f932 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC24, port_server);
 80044a4:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <save_data+0x1c0>)
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2200      	movs	r2, #0
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80044b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044b4:	4931      	ldr	r1, [pc, #196]	@ (800457c <save_data+0x1c4>)
 80044b6:	2002      	movs	r0, #2
 80044b8:	f002 f926 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC28, time_delay);
 80044bc:	4b30      	ldr	r3, [pc, #192]	@ (8004580 <save_data+0x1c8>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2200      	movs	r2, #0
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	61fa      	str	r2, [r7, #28]
 80044c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044cc:	492d      	ldr	r1, [pc, #180]	@ (8004584 <save_data+0x1cc>)
 80044ce:	2002      	movs	r0, #2
 80044d0:	f002 f91a 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC2C, elevator_mode);
 80044d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004588 <save_data+0x1d0>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2200      	movs	r2, #0
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	617a      	str	r2, [r7, #20]
 80044e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044e4:	4929      	ldr	r1, [pc, #164]	@ (800458c <save_data+0x1d4>)
 80044e6:	2002      	movs	r0, #2
 80044e8:	f002 f90e 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC30, lock_default_1);
 80044ec:	4b28      	ldr	r3, [pc, #160]	@ (8004590 <save_data+0x1d8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2200      	movs	r2, #0
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	60fa      	str	r2, [r7, #12]
 80044f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044fa:	4926      	ldr	r1, [pc, #152]	@ (8004594 <save_data+0x1dc>)
 80044fc:	2002      	movs	r0, #2
 80044fe:	f002 f903 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800FC34, lock_default_2);
 8004502:	4b25      	ldr	r3, [pc, #148]	@ (8004598 <save_data+0x1e0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004510:	4922      	ldr	r1, [pc, #136]	@ (800459c <save_data+0x1e4>)
 8004512:	2002      	movs	r0, #2
 8004514:	f002 f8f8 	bl	8006708 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8004518:	f002 f98c 	bl	8006834 <HAL_FLASH_Lock>
}
 800451c:	bf00      	nop
 800451e:	3758      	adds	r7, #88	@ 0x58
 8004520:	46bd      	mov	sp, r7
 8004522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004526:	bf00      	nop
 8004528:	20000780 	.word	0x20000780
 800452c:	2000008c 	.word	0x2000008c
 8004530:	20000714 	.word	0x20000714
 8004534:	0800fc00 	.word	0x0800fc00
 8004538:	20000715 	.word	0x20000715
 800453c:	0800fc04 	.word	0x0800fc04
 8004540:	20000716 	.word	0x20000716
 8004544:	0800fc08 	.word	0x0800fc08
 8004548:	20000717 	.word	0x20000717
 800454c:	0800fc0c 	.word	0x0800fc0c
 8004550:	2000077c 	.word	0x2000077c
 8004554:	0800fc10 	.word	0x0800fc10
 8004558:	20000718 	.word	0x20000718
 800455c:	0800fc14 	.word	0x0800fc14
 8004560:	20000719 	.word	0x20000719
 8004564:	0800fc18 	.word	0x0800fc18
 8004568:	2000071a 	.word	0x2000071a
 800456c:	0800fc1c 	.word	0x0800fc1c
 8004570:	2000071b 	.word	0x2000071b
 8004574:	0800fc20 	.word	0x0800fc20
 8004578:	2000077a 	.word	0x2000077a
 800457c:	0800fc24 	.word	0x0800fc24
 8004580:	20000708 	.word	0x20000708
 8004584:	0800fc28 	.word	0x0800fc28
 8004588:	2000073a 	.word	0x2000073a
 800458c:	0800fc2c 	.word	0x0800fc2c
 8004590:	200008a0 	.word	0x200008a0
 8004594:	0800fc30 	.word	0x0800fc30
 8004598:	200008a4 	.word	0x200008a4
 800459c:	0800fc34 	.word	0x0800fc34

080045a0 <binary_search>:

user_info_t binary_search(uint32_t Number_card, uint32_t code)
{
 80045a0:	b5b0      	push	{r4, r5, r7, lr}
 80045a2:	b094      	sub	sp, #80	@ 0x50
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
	uint32_t low = 1, high = Number_card;
 80045ac:	2301      	movs	r3, #1
 80045ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	user_info_t user_0={0}, user_compare;
 80045b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	611a      	str	r2, [r3, #16]
 80045c4:	615a      	str	r2, [r3, #20]

    while (low <= high) {
 80045c6:	e031      	b.n	800462c <binary_search+0x8c>
    	uint32_t mid = (low + high) / 2;
 80045c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045cc:	4413      	add	r3, r2
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	647b      	str	r3, [r7, #68]	@ 0x44
		W25Q_FastRead((mid-1)/16, ((mid-1)%16)*sizeof(user_info_t), sizeof(user_info_t), (uint8_t *)&user_compare);
 80045d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d4:	3b01      	subs	r3, #1
 80045d6:	0918      	lsrs	r0, r3, #4
 80045d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045da:	3b01      	subs	r3, #1
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	0052      	lsls	r2, r2, #1
 80045e8:	4413      	add	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	b2d9      	uxtb	r1, r3
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	2218      	movs	r2, #24
 80045f4:	f7fd fae6 	bl	8001bc4 <W25Q_FastRead>
        if (user_compare.cardID == code) {
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d10a      	bne.n	8004616 <binary_search+0x76>
            return user_compare;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	461d      	mov	r5, r3
 8004604:	f107 0414 	add.w	r4, r7, #20
 8004608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800460a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800460c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004610:	e885 0003 	stmia.w	r5, {r0, r1}
 8004614:	e018      	b.n	8004648 <binary_search+0xa8>
        } else if (user_compare.cardID < code) {
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d903      	bls.n	8004626 <binary_search+0x86>
            low = mid + 1;
 800461e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004620:	3301      	adds	r3, #1
 8004622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004624:	e002      	b.n	800462c <binary_search+0x8c>
        } else {
            high = mid - 1;
 8004626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004628:	3b01      	subs	r3, #1
 800462a:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (low <= high) {
 800462c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800462e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004630:	429a      	cmp	r2, r3
 8004632:	d9c9      	bls.n	80045c8 <binary_search+0x28>
        }
    }
    return user_0;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	461d      	mov	r5, r3
 8004638:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800463c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800463e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004640:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004644:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	3750      	adds	r7, #80	@ 0x50
 800464c:	46bd      	mov	sp, r7
 800464e:	bdb0      	pop	{r4, r5, r7, pc}

08004650 <new_card_update>:
void new_card_update(uint8_t *data, bool *input, uint32_t *input_timer)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
	for (uint8_t i=0; i<8; i++)
 800465c:	2300      	movs	r3, #0
 800465e:	75fb      	strb	r3, [r7, #23]
 8004660:	e02b      	b.n	80046ba <new_card_update+0x6a>
	{
		for (uint8_t j=0; j<8; j++)
 8004662:	2300      	movs	r3, #0
 8004664:	75bb      	strb	r3, [r7, #22]
 8004666:	e022      	b.n	80046ae <new_card_update+0x5e>
		{
			if((data[i]>>j)&0x01)//2 + i
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	7dbb      	ldrb	r3, [r7, #22]
 8004674:	fa42 f303 	asr.w	r3, r2, r3
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d013      	beq.n	80046a8 <new_card_update+0x58>
			{
				input[i*8+j] = true;
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	00da      	lsls	r2, r3, #3
 8004684:	7dbb      	ldrb	r3, [r7, #22]
 8004686:	4413      	add	r3, r2
 8004688:	461a      	mov	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4413      	add	r3, r2
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
				input_timer[i*8+j] = HAL_GetTick();
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	00da      	lsls	r2, r3, #3
 8004696:	7dbb      	ldrb	r3, [r7, #22]
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	18d4      	adds	r4, r2, r3
 80046a0:	f000 fd64 	bl	800516c <HAL_GetTick>
 80046a4:	4603      	mov	r3, r0
 80046a6:	6023      	str	r3, [r4, #0]
		for (uint8_t j=0; j<8; j++)
 80046a8:	7dbb      	ldrb	r3, [r7, #22]
 80046aa:	3301      	adds	r3, #1
 80046ac:	75bb      	strb	r3, [r7, #22]
 80046ae:	7dbb      	ldrb	r3, [r7, #22]
 80046b0:	2b07      	cmp	r3, #7
 80046b2:	d9d9      	bls.n	8004668 <new_card_update+0x18>
	for (uint8_t i=0; i<8; i++)
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	3301      	adds	r3, #1
 80046b8:	75fb      	strb	r3, [r7, #23]
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	2b07      	cmp	r3, #7
 80046be:	d9d0      	bls.n	8004662 <new_card_update+0x12>
			}
		}
	}
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd90      	pop	{r4, r7, pc}

080046ca <shift_left_1bit>:
void shift_left_1bit( uint8_t input[8], uint8_t output[8])
{
 80046ca:	b480      	push	{r7}
 80046cc:	b087      	sub	sp, #28
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
    uint8_t carry = 0;  // Khởi tạo carry ban đầu
 80046d4:	2300      	movs	r3, #0
 80046d6:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 8; i++)
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	e01a      	b.n	8004714 <shift_left_1bit+0x4a>
    {
        // Lấy bit MSB của byte hiện tại trước khi dịch
        uint8_t new_carry = (input[i] >> 7) & 0x01;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	4413      	add	r3, r2
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	09db      	lsrs	r3, r3, #7
 80046e8:	73fb      	strb	r3, [r7, #15]
        // Dịch trái 1 bit và kết hợp với carry từ byte trước
        output[i] = (input[i] << 1) | carry;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	4413      	add	r3, r2
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	b25b      	sxtb	r3, r3
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	b25a      	sxtb	r2, r3
 80046f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	b259      	sxtb	r1, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	4413      	add	r3, r2
 8004706:	b2ca      	uxtb	r2, r1
 8004708:	701a      	strb	r2, [r3, #0]
        // Cập nhật carry cho byte tiếp theo
        carry = new_carry;
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 8; i++)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	3301      	adds	r3, #1
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2b07      	cmp	r3, #7
 8004718:	dde1      	ble.n	80046de <shift_left_1bit+0x14>
    }
}
 800471a:	bf00      	nop
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <calculate_data_can>:
void calculate_data_can(bool *input, uint32_t *input_timer, uint8_t *data_can, uint8_t *lock_df, uint8_t delay_time, uint8_t *counter_start)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b088      	sub	sp, #32
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	603b      	str	r3, [r7, #0]
	uint8_t data[8] = {0};
 8004734:	f107 0310 	add.w	r3, r7, #16
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	605a      	str	r2, [r3, #4]
	if (*counter_start < delay_time)
 800473e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004746:	429a      	cmp	r2, r3
 8004748:	d948      	bls.n	80047dc <calculate_data_can+0xb6>
	{
		for (uint8_t i=0; i<8; i++)
 800474a:	2300      	movs	r3, #0
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e040      	b.n	80047d2 <calculate_data_can+0xac>
		{
			for (uint8_t j=0; j<8; j++)
 8004750:	2300      	movs	r3, #0
 8004752:	77bb      	strb	r3, [r7, #30]
 8004754:	e031      	b.n	80047ba <calculate_data_can+0x94>
			{
				if (input_timer[i*8+j] == 0)
 8004756:	7ffb      	ldrb	r3, [r7, #31]
 8004758:	00da      	lsls	r2, r3, #3
 800475a:	7fbb      	ldrb	r3, [r7, #30]
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	4413      	add	r3, r2
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11f      	bne.n	80047aa <calculate_data_can+0x84>
				{
					if ((lock_df[i]>>j)&0x01)
 800476a:	7ffb      	ldrb	r3, [r7, #31]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	4413      	add	r3, r2
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	7fbb      	ldrb	r3, [r7, #30]
 8004776:	fa42 f303 	asr.w	r3, r2, r3
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <calculate_data_can+0x70>
					{
						input[i*8+j] = true;
 8004782:	7ffb      	ldrb	r3, [r7, #31]
 8004784:	00da      	lsls	r2, r3, #3
 8004786:	7fbb      	ldrb	r3, [r7, #30]
 8004788:	4413      	add	r3, r2
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	2201      	movs	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e00e      	b.n	80047b4 <calculate_data_can+0x8e>
					} else
					{
						input[i*8+j] = false;
 8004796:	7ffb      	ldrb	r3, [r7, #31]
 8004798:	00da      	lsls	r2, r3, #3
 800479a:	7fbb      	ldrb	r3, [r7, #30]
 800479c:	4413      	add	r3, r2
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e004      	b.n	80047b4 <calculate_data_can+0x8e>
					}
				} else
				{
					*counter_start = delay_time;
 80047aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80047b0:	701a      	strb	r2, [r3, #0]
					break;
 80047b2:	e005      	b.n	80047c0 <calculate_data_can+0x9a>
			for (uint8_t j=0; j<8; j++)
 80047b4:	7fbb      	ldrb	r3, [r7, #30]
 80047b6:	3301      	adds	r3, #1
 80047b8:	77bb      	strb	r3, [r7, #30]
 80047ba:	7fbb      	ldrb	r3, [r7, #30]
 80047bc:	2b07      	cmp	r3, #7
 80047be:	d9ca      	bls.n	8004756 <calculate_data_can+0x30>
				}
			}
			if (*counter_start == delay_time) break;
 80047c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d006      	beq.n	80047da <calculate_data_can+0xb4>
		for (uint8_t i=0; i<8; i++)
 80047cc:	7ffb      	ldrb	r3, [r7, #31]
 80047ce:	3301      	adds	r3, #1
 80047d0:	77fb      	strb	r3, [r7, #31]
 80047d2:	7ffb      	ldrb	r3, [r7, #31]
 80047d4:	2b07      	cmp	r3, #7
 80047d6:	d9bb      	bls.n	8004750 <calculate_data_can+0x2a>
 80047d8:	e000      	b.n	80047dc <calculate_data_can+0xb6>
			if (*counter_start == delay_time) break;
 80047da:	bf00      	nop
		}
	}
	if (*counter_start >= delay_time)
 80047dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d848      	bhi.n	800487a <calculate_data_can+0x154>
	{
		for (uint8_t i=0; i<8; i++)
 80047e8:	2300      	movs	r3, #0
 80047ea:	777b      	strb	r3, [r7, #29]
 80047ec:	e042      	b.n	8004874 <calculate_data_can+0x14e>
		{
			for (uint8_t j=0; j<8; j++)
 80047ee:	2300      	movs	r3, #0
 80047f0:	773b      	strb	r3, [r7, #28]
 80047f2:	e039      	b.n	8004868 <calculate_data_can+0x142>
			{
				if (((lock_df[i]>>j)&0x01) && (abs(HAL_GetTick() - input_timer[i*8+j]) > delay_time*1000))
 80047f4:	7f7b      	ldrb	r3, [r7, #29]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4413      	add	r3, r2
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	7f3b      	ldrb	r3, [r7, #28]
 8004800:	fa42 f303 	asr.w	r3, r2, r3
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d021      	beq.n	8004850 <calculate_data_can+0x12a>
 800480c:	f000 fcae 	bl	800516c <HAL_GetTick>
 8004810:	4601      	mov	r1, r0
 8004812:	7f7b      	ldrb	r3, [r7, #29]
 8004814:	00da      	lsls	r2, r3, #3
 8004816:	7f3b      	ldrb	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	4413      	add	r3, r2
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1acb      	subs	r3, r1, r3
 8004824:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004828:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800482c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004830:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	429a      	cmp	r2, r3
 800483a:	dd09      	ble.n	8004850 <calculate_data_can+0x12a>
				{
					input[i*8+j] = true;
 800483c:	7f7b      	ldrb	r3, [r7, #29]
 800483e:	00da      	lsls	r2, r3, #3
 8004840:	7f3b      	ldrb	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	461a      	mov	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e008      	b.n	8004862 <calculate_data_can+0x13c>
				} else
				{
					input[i*8+j] = false;
 8004850:	7f7b      	ldrb	r3, [r7, #29]
 8004852:	00da      	lsls	r2, r3, #3
 8004854:	7f3b      	ldrb	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	461a      	mov	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
			for (uint8_t j=0; j<8; j++)
 8004862:	7f3b      	ldrb	r3, [r7, #28]
 8004864:	3301      	adds	r3, #1
 8004866:	773b      	strb	r3, [r7, #28]
 8004868:	7f3b      	ldrb	r3, [r7, #28]
 800486a:	2b07      	cmp	r3, #7
 800486c:	d9c2      	bls.n	80047f4 <calculate_data_can+0xce>
		for (uint8_t i=0; i<8; i++)
 800486e:	7f7b      	ldrb	r3, [r7, #29]
 8004870:	3301      	adds	r3, #1
 8004872:	777b      	strb	r3, [r7, #29]
 8004874:	7f7b      	ldrb	r3, [r7, #29]
 8004876:	2b07      	cmp	r3, #7
 8004878:	d9b9      	bls.n	80047ee <calculate_data_can+0xc8>
				}
			}
		}
	}
	for (uint8_t i=0; i<8; i++)
 800487a:	2300      	movs	r3, #0
 800487c:	76fb      	strb	r3, [r7, #27]
 800487e:	e026      	b.n	80048ce <calculate_data_can+0x1a8>
	{
		for (uint8_t j=0; j<8; j++)
 8004880:	2300      	movs	r3, #0
 8004882:	76bb      	strb	r3, [r7, #26]
 8004884:	e01d      	b.n	80048c2 <calculate_data_can+0x19c>
		{
			data[i] |= input[i*8+j]<<j;
 8004886:	7efb      	ldrb	r3, [r7, #27]
 8004888:	3320      	adds	r3, #32
 800488a:	443b      	add	r3, r7
 800488c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004890:	b25a      	sxtb	r2, r3
 8004892:	7efb      	ldrb	r3, [r7, #27]
 8004894:	00d9      	lsls	r1, r3, #3
 8004896:	7ebb      	ldrb	r3, [r7, #26]
 8004898:	440b      	add	r3, r1
 800489a:	4619      	mov	r1, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	440b      	add	r3, r1
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	7ebb      	ldrb	r3, [r7, #26]
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	b25b      	sxtb	r3, r3
 80048ac:	4313      	orrs	r3, r2
 80048ae:	b25a      	sxtb	r2, r3
 80048b0:	7efb      	ldrb	r3, [r7, #27]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	3320      	adds	r3, #32
 80048b6:	443b      	add	r3, r7
 80048b8:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t j=0; j<8; j++)
 80048bc:	7ebb      	ldrb	r3, [r7, #26]
 80048be:	3301      	adds	r3, #1
 80048c0:	76bb      	strb	r3, [r7, #26]
 80048c2:	7ebb      	ldrb	r3, [r7, #26]
 80048c4:	2b07      	cmp	r3, #7
 80048c6:	d9de      	bls.n	8004886 <calculate_data_can+0x160>
	for (uint8_t i=0; i<8; i++)
 80048c8:	7efb      	ldrb	r3, [r7, #27]
 80048ca:	3301      	adds	r3, #1
 80048cc:	76fb      	strb	r3, [r7, #27]
 80048ce:	7efb      	ldrb	r3, [r7, #27]
 80048d0:	2b07      	cmp	r3, #7
 80048d2:	d9d5      	bls.n	8004880 <calculate_data_can+0x15a>
		}
	}
	shift_left_1bit(data, data_can);
 80048d4:	f107 0310 	add.w	r3, r7, #16
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fef5 	bl	80046ca <shift_left_1bit>
}
 80048e0:	bf00      	nop
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <reconect_eth>:
uint8_t reconect_eth(uint8_t sn)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	71fb      	strb	r3, [r7, #7]
//	bool linkport = false;
	uint8_t Status_SN;
	Status_SN = getSn_SR(sn);
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	3301      	adds	r3, #1
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fb fc2c 	bl	800015c <WIZCHIP_READ>
 8004904:	4603      	mov	r3, r0
 8004906:	73fb      	strb	r3, [r7, #15]
	if ((Status_SN == SOCK_CLOSE_WAIT) || (wizphy_getphylink() == PHY_LINK_OFF))
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b1c      	cmp	r3, #28
 800490c:	d004      	beq.n	8004918 <reconect_eth+0x30>
 800490e:	f7fc ff40 	bl	8001792 <wizphy_getphylink>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d114      	bne.n	8004942 <reconect_eth+0x5a>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_RESET);
 8004918:	2200      	movs	r2, #0
 800491a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800491e:	4826      	ldr	r0, [pc, #152]	@ (80049b8 <reconect_eth+0xd0>)
 8004920:	f002 fa8d 	bl	8006e3e <HAL_GPIO_WritePin>
		disconnect(sn);
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fc f9de 	bl	8000ce8 <disconnect>
		Status_SN = getSn_SR(sn);
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	3301      	adds	r3, #1
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004938:	4618      	mov	r0, r3
 800493a:	f7fb fc0f 	bl	800015c <WIZCHIP_READ>
 800493e:	4603      	mov	r3, r0
 8004940:	73fb      	strb	r3, [r7, #15]
	}
	if (wizphy_getphylink() == PHY_LINK_ON && Status_SN == SOCK_CLOSED)
 8004942:	f7fc ff26 	bl	8001792 <wizphy_getphylink>
 8004946:	4603      	mov	r3, r0
 8004948:	2b01      	cmp	r3, #1
 800494a:	d126      	bne.n	800499a <reconect_eth+0xb2>
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d123      	bne.n	800499a <reconect_eth+0xb2>
	{

		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_RESET);
 8004952:	2200      	movs	r2, #0
 8004954:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004958:	4817      	ldr	r0, [pc, #92]	@ (80049b8 <reconect_eth+0xd0>)
 800495a:	f002 fa70 	bl	8006e3e <HAL_GPIO_WritePin>
		socket(sn, Sn_MR_TCP, port_client, SF_TCP_NODELAY);
 800495e:	4b17      	ldr	r3, [pc, #92]	@ (80049bc <reconect_eth+0xd4>)
 8004960:	881a      	ldrh	r2, [r3, #0]
 8004962:	79f8      	ldrb	r0, [r7, #7]
 8004964:	2320      	movs	r3, #32
 8004966:	2101      	movs	r1, #1
 8004968:	f7fb ff48 	bl	80007fc <socket>
		connect(sn, server_ip, port_server);
 800496c:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <reconect_eth+0xd8>)
 800496e:	881a      	ldrh	r2, [r3, #0]
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	4914      	ldr	r1, [pc, #80]	@ (80049c4 <reconect_eth+0xdc>)
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc f8cf 	bl	8000b18 <connect>
		Status_SN = getSn_SR(sn);
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	3301      	adds	r3, #1
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004986:	4618      	mov	r0, r3
 8004988:	f7fb fbe8 	bl	800015c <WIZCHIP_READ>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]
		counter_reset++;
 8004990:	4b0d      	ldr	r3, [pc, #52]	@ (80049c8 <reconect_eth+0xe0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3301      	adds	r3, #1
 8004996:	4a0c      	ldr	r2, [pc, #48]	@ (80049c8 <reconect_eth+0xe0>)
 8004998:	6013      	str	r3, [r2, #0]
	}
	if (Status_SN == SOCK_ESTABLISHED)
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b17      	cmp	r3, #23
 800499e:	d105      	bne.n	80049ac <reconect_eth+0xc4>
	{
		HAL_GPIO_WritePin(LED_STT_ETH_GPIO_Port, LED_STT_ETH_Pin, GPIO_PIN_SET);
 80049a0:	2201      	movs	r2, #1
 80049a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049a6:	4804      	ldr	r0, [pc, #16]	@ (80049b8 <reconect_eth+0xd0>)
 80049a8:	f002 fa49 	bl	8006e3e <HAL_GPIO_WritePin>
	}
	return Status_SN;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40011000 	.word	0x40011000
 80049bc:	2000077c 	.word	0x2000077c
 80049c0:	2000077a 	.word	0x2000077a
 80049c4:	20000704 	.word	0x20000704
 80049c8:	200008c8 	.word	0x200008c8

080049cc <Set_speed_can>:

void Set_speed_can(uint8_t speed)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08c      	sub	sp, #48	@ 0x30
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
	if (speed == 0)// 100kps
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <Set_speed_can+0x28>
	{
		hcan.Init.Prescaler = 30;
 80049dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004a90 <Set_speed_can+0xc4>)
 80049de:	221e      	movs	r2, #30
 80049e0:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80049e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004a90 <Set_speed_can+0xc4>)
 80049e4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80049e8:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80049ea:	4b29      	ldr	r3, [pc, #164]	@ (8004a90 <Set_speed_can+0xc4>)
 80049ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80049f0:	615a      	str	r2, [r3, #20]
 80049f2:	e01c      	b.n	8004a2e <Set_speed_can+0x62>
	} else if (speed == 1)// 50kps
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d10b      	bne.n	8004a12 <Set_speed_can+0x46>
	{
		hcan.Init.Prescaler = 40;
 80049fa:	4b25      	ldr	r3, [pc, #148]	@ (8004a90 <Set_speed_can+0xc4>)
 80049fc:	2228      	movs	r2, #40	@ 0x28
 80049fe:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8004a00:	4b23      	ldr	r3, [pc, #140]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a02:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8004a06:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8004a08:	4b21      	ldr	r3, [pc, #132]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a0a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004a0e:	615a      	str	r2, [r3, #20]
 8004a10:	e00d      	b.n	8004a2e <Set_speed_can+0x62>
	} else if (speed == 2)// 25kps
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d10a      	bne.n	8004a2e <Set_speed_can+0x62>
	{
		hcan.Init.Prescaler = 60;
 8004a18:	4b1d      	ldr	r3, [pc, #116]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a1a:	223c      	movs	r2, #60	@ 0x3c
 8004a1c:	605a      	str	r2, [r3, #4]
		hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8004a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a20:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8004a24:	611a      	str	r2, [r3, #16]
		hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8004a26:	4b1a      	ldr	r3, [pc, #104]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a28:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8004a2c:	615a      	str	r2, [r3, #20]
	}
	hcan.Init.AutoRetransmission = ENABLE;
 8004a2e:	4b18      	ldr	r3, [pc, #96]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	76da      	strb	r2, [r3, #27]
	hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8004a34:	4b16      	ldr	r3, [pc, #88]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a3a:	60da      	str	r2, [r3, #12]
	HAL_CAN_Init(&hcan);
 8004a3c:	4814      	ldr	r0, [pc, #80]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a3e:	f000 fbe1 	bl	8005204 <HAL_CAN_Init>

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8004a42:	2301      	movs	r3, #1
 8004a44:	62bb      	str	r3, [r7, #40]	@ 0x28
	canfilterconfig.FilterBank = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterIdHigh = 0x740<<5;
 8004a4e:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 8004a52:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterIdLow = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8004a58:	4b0e      	ldr	r3, [pc, #56]	@ (8004a94 <Set_speed_can+0xc8>)
 8004a5a:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdLow = 6;
 8004a5c:	2306      	movs	r3, #6
 8004a5e:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004a64:	2301      	movs	r3, #1
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
	canfilterconfig.SlaveStartFilterBank = 13;
 8004a68:	230d      	movs	r3, #13
 8004a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8004a6c:	f107 0308 	add.w	r3, r7, #8
 8004a70:	4619      	mov	r1, r3
 8004a72:	4807      	ldr	r0, [pc, #28]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a74:	f000 fcc1 	bl	80053fa <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 8004a78:	4805      	ldr	r0, [pc, #20]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a7a:	f000 fd87 	bl	800558c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004a7e:	2102      	movs	r1, #2
 8004a80:	4803      	ldr	r0, [pc, #12]	@ (8004a90 <Set_speed_can+0xc4>)
 8004a82:	f001 f82f 	bl	8005ae4 <HAL_CAN_ActivateNotification>
}
 8004a86:	bf00      	nop
 8004a88:	3730      	adds	r7, #48	@ 0x30
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	2000009c 	.word	0x2000009c
 8004a94:	0001ffe0 	.word	0x0001ffe0

08004a98 <is_leap_year>:


// Hàm kiểm tra năm nhuận
static uint8_t is_leap_year(uint16_t year)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	80fb      	strh	r3, [r7, #6]
    if (year % 400 == 0) {
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	4a14      	ldr	r2, [pc, #80]	@ (8004af8 <is_leap_year+0x60>)
 8004aa6:	fba2 1203 	umull	r1, r2, r2, r3
 8004aaa:	09d2      	lsrs	r2, r2, #7
 8004aac:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004ab0:	fb01 f202 	mul.w	r2, r1, r2
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <is_leap_year+0x28>
        return 1;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e016      	b.n	8004aee <is_leap_year+0x56>
    }
    if (year % 100 == 0) {
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8004af8 <is_leap_year+0x60>)
 8004ac4:	fba2 1203 	umull	r1, r2, r2, r3
 8004ac8:	0952      	lsrs	r2, r2, #5
 8004aca:	2164      	movs	r1, #100	@ 0x64
 8004acc:	fb01 f202 	mul.w	r2, r1, r2
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <is_leap_year+0x44>
        return 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e008      	b.n	8004aee <is_leap_year+0x56>
    }
    if (year % 4 == 0) {
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <is_leap_year+0x54>
        return 1;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <is_leap_year+0x56>
    }
    return 0;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	51eb851f 	.word	0x51eb851f

08004afc <mktime>:

// Hàm tùy chỉnh tương tự mktime
uint32_t mktime(uint16_t year, uint8_t month, uint8_t date, uint8_t hour, uint8_t minute)
{
 8004afc:	b590      	push	{r4, r7, lr}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4604      	mov	r4, r0
 8004b04:	4608      	mov	r0, r1
 8004b06:	4611      	mov	r1, r2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4623      	mov	r3, r4
 8004b0c:	80fb      	strh	r3, [r7, #6]
 8004b0e:	4603      	mov	r3, r0
 8004b10:	717b      	strb	r3, [r7, #5]
 8004b12:	460b      	mov	r3, r1
 8004b14:	713b      	strb	r3, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	70fb      	strb	r3, [r7, #3]
	uint32_t time = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
	uint32_t i = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60bb      	str	r3, [r7, #8]

    // 1. Cộng dồn số giây từ các năm đã qua
    // Giả sử epoch là 1/1/2000
    for (i = EPOCH_YEAR; i < (year - EPOCH_YEAR); i++) {
 8004b22:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	e012      	b.n	8004b50 <mktime+0x54>
        time += (365 + is_leap_year(i)) * 24 * 60;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ffb2 	bl	8004a98 <is_leap_year>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 8004b3a:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
    for (i = EPOCH_YEAR; i < (year - EPOCH_YEAR); i++) {
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	f2a3 73e9 	subw	r3, r3, #2025	@ 0x7e9
 8004b56:	461a      	mov	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d3e5      	bcc.n	8004b2a <mktime+0x2e>
    }

    // 2. Cộng dồn số giây từ các tháng đã qua trong năm hiện tại
    for (i = 0; i < month; i++) {
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	e01e      	b.n	8004ba2 <mktime+0xa6>
        time += days_in_month[i] * 24 * 60;
 8004b64:	4a1f      	ldr	r2, [pc, #124]	@ (8004be4 <mktime+0xe8>)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6c:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8004b70:	fb02 f303 	mul.w	r3, r2, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
        // Cộng thêm một ngày nếu là tháng 2 của năm nhuận
        if (i == 1 && is_leap_year(year)) {
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10c      	bne.n	8004b9c <mktime+0xa0>
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff ff87 	bl	8004a98 <is_leap_year>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <mktime+0xa0>
        	time += 24 * 3600;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004b96:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004b9a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < month; i++) {
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	797b      	ldrb	r3, [r7, #5]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3dc      	bcc.n	8004b64 <mktime+0x68>
        }
    }

    // 3. Cộng dồn số giây từ các ngày, giờ, phút và giây
    time += (uint32_t)(date - 1) * 24 * 60;
 8004baa:	793b      	ldrb	r3, [r7, #4]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
    time += (uint32_t)hour * 60;
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
    time += (uint32_t)minute;
 8004bd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

    return time;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd90      	pop	{r4, r7, pc}
 8004be4:	08009c0c 	.word	0x08009c0c

08004be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bec:	b672      	cpsid	i
}
 8004bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bf0:	bf00      	nop
 8004bf2:	e7fd      	b.n	8004bf0 <Error_Handler+0x8>

08004bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004bfa:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <HAL_MspInit+0x5c>)
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	4a14      	ldr	r2, [pc, #80]	@ (8004c50 <HAL_MspInit+0x5c>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6193      	str	r3, [r2, #24]
 8004c06:	4b12      	ldr	r3, [pc, #72]	@ (8004c50 <HAL_MspInit+0x5c>)
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c12:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <HAL_MspInit+0x5c>)
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	4a0e      	ldr	r2, [pc, #56]	@ (8004c50 <HAL_MspInit+0x5c>)
 8004c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c1c:	61d3      	str	r3, [r2, #28]
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <HAL_MspInit+0x5c>)
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c54 <HAL_MspInit+0x60>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	4a04      	ldr	r2, [pc, #16]	@ (8004c54 <HAL_MspInit+0x60>)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40010000 	.word	0x40010000

08004c58 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c60:	f107 0310 	add.w	r3, r7, #16
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a20      	ldr	r2, [pc, #128]	@ (8004cf4 <HAL_CAN_MspInit+0x9c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d139      	bne.n	8004cec <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004c78:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf8 <HAL_CAN_MspInit+0xa0>)
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf8 <HAL_CAN_MspInit+0xa0>)
 8004c7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c82:	61d3      	str	r3, [r2, #28]
 8004c84:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf8 <HAL_CAN_MspInit+0xa0>)
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c90:	4b19      	ldr	r3, [pc, #100]	@ (8004cf8 <HAL_CAN_MspInit+0xa0>)
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	4a18      	ldr	r2, [pc, #96]	@ (8004cf8 <HAL_CAN_MspInit+0xa0>)
 8004c96:	f043 0304 	orr.w	r3, r3, #4
 8004c9a:	6193      	str	r3, [r2, #24]
 8004c9c:	4b16      	ldr	r3, [pc, #88]	@ (8004cf8 <HAL_CAN_MspInit+0xa0>)
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004ca8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb6:	f107 0310 	add.w	r3, r7, #16
 8004cba:	4619      	mov	r1, r3
 8004cbc:	480f      	ldr	r0, [pc, #60]	@ (8004cfc <HAL_CAN_MspInit+0xa4>)
 8004cbe:	f001 ff23 	bl	8006b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd0:	f107 0310 	add.w	r3, r7, #16
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4809      	ldr	r0, [pc, #36]	@ (8004cfc <HAL_CAN_MspInit+0xa4>)
 8004cd8:	f001 ff16 	bl	8006b08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2103      	movs	r1, #3
 8004ce0:	2014      	movs	r0, #20
 8004ce2:	f001 fa34 	bl	800614e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004ce6:	2014      	movs	r0, #20
 8004ce8:	f001 fa4d 	bl	8006186 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8004cec:	bf00      	nop
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40006400 	.word	0x40006400
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40010800 	.word	0x40010800

08004d00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	@ 0x28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d08:	f107 0318 	add.w	r3, r7, #24
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a37      	ldr	r2, [pc, #220]	@ (8004df8 <HAL_SPI_MspInit+0xf8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d130      	bne.n	8004d82 <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d20:	4b36      	ldr	r3, [pc, #216]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	4a35      	ldr	r2, [pc, #212]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004d26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d2a:	6193      	str	r3, [r2, #24]
 8004d2c:	4b33      	ldr	r3, [pc, #204]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d38:	4b30      	ldr	r3, [pc, #192]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	6193      	str	r3, [r2, #24]
 8004d44:	4b2d      	ldr	r3, [pc, #180]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004d50:	23a0      	movs	r3, #160	@ 0xa0
 8004d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d54:	2302      	movs	r3, #2
 8004d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d5c:	f107 0318 	add.w	r3, r7, #24
 8004d60:	4619      	mov	r1, r3
 8004d62:	4827      	ldr	r0, [pc, #156]	@ (8004e00 <HAL_SPI_MspInit+0x100>)
 8004d64:	f001 fed0 	bl	8006b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004d68:	2340      	movs	r3, #64	@ 0x40
 8004d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d74:	f107 0318 	add.w	r3, r7, #24
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4821      	ldr	r0, [pc, #132]	@ (8004e00 <HAL_SPI_MspInit+0x100>)
 8004d7c:	f001 fec4 	bl	8006b08 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004d80:	e036      	b.n	8004df0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1f      	ldr	r2, [pc, #124]	@ (8004e04 <HAL_SPI_MspInit+0x104>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d131      	bne.n	8004df0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	4a1a      	ldr	r2, [pc, #104]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d96:	61d3      	str	r3, [r2, #28]
 8004d98:	4b18      	ldr	r3, [pc, #96]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004da4:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	4a14      	ldr	r2, [pc, #80]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004daa:	f043 0308 	orr.w	r3, r3, #8
 8004dae:	6193      	str	r3, [r2, #24]
 8004db0:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <HAL_SPI_MspInit+0xfc>)
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004dbc:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8004dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dca:	f107 0318 	add.w	r3, r7, #24
 8004dce:	4619      	mov	r1, r3
 8004dd0:	480d      	ldr	r0, [pc, #52]	@ (8004e08 <HAL_SPI_MspInit+0x108>)
 8004dd2:	f001 fe99 	bl	8006b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004dd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de4:	f107 0318 	add.w	r3, r7, #24
 8004de8:	4619      	mov	r1, r3
 8004dea:	4807      	ldr	r0, [pc, #28]	@ (8004e08 <HAL_SPI_MspInit+0x108>)
 8004dec:	f001 fe8c 	bl	8006b08 <HAL_GPIO_Init>
}
 8004df0:	bf00      	nop
 8004df2:	3728      	adds	r7, #40	@ 0x28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40013000 	.word	0x40013000
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	40010800 	.word	0x40010800
 8004e04:	40003800 	.word	0x40003800
 8004e08:	40010c00 	.word	0x40010c00

08004e0c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1c:	d114      	bne.n	8004e48 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e1e:	4b19      	ldr	r3, [pc, #100]	@ (8004e84 <HAL_TIM_Base_MspInit+0x78>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	4a18      	ldr	r2, [pc, #96]	@ (8004e84 <HAL_TIM_Base_MspInit+0x78>)
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	61d3      	str	r3, [r2, #28]
 8004e2a:	4b16      	ldr	r3, [pc, #88]	@ (8004e84 <HAL_TIM_Base_MspInit+0x78>)
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8004e36:	2200      	movs	r2, #0
 8004e38:	2104      	movs	r1, #4
 8004e3a:	201c      	movs	r0, #28
 8004e3c:	f001 f987 	bl	800614e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e40:	201c      	movs	r0, #28
 8004e42:	f001 f9a0 	bl	8006186 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e46:	e018      	b.n	8004e7a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004e88 <HAL_TIM_Base_MspInit+0x7c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d113      	bne.n	8004e7a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e52:	4b0c      	ldr	r3, [pc, #48]	@ (8004e84 <HAL_TIM_Base_MspInit+0x78>)
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	4a0b      	ldr	r2, [pc, #44]	@ (8004e84 <HAL_TIM_Base_MspInit+0x78>)
 8004e58:	f043 0302 	orr.w	r3, r3, #2
 8004e5c:	61d3      	str	r3, [r2, #28]
 8004e5e:	4b09      	ldr	r3, [pc, #36]	@ (8004e84 <HAL_TIM_Base_MspInit+0x78>)
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	60bb      	str	r3, [r7, #8]
 8004e68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2105      	movs	r1, #5
 8004e6e:	201d      	movs	r0, #29
 8004e70:	f001 f96d 	bl	800614e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e74:	201d      	movs	r0, #29
 8004e76:	f001 f986 	bl	8006186 <HAL_NVIC_EnableIRQ>
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40000400 	.word	0x40000400

08004e8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e94:	f107 0310 	add.w	r3, r7, #16
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a33      	ldr	r2, [pc, #204]	@ (8004f74 <HAL_UART_MspInit+0xe8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d15f      	bne.n	8004f6c <HAL_UART_MspInit+0xe0>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004eac:	4b32      	ldr	r3, [pc, #200]	@ (8004f78 <HAL_UART_MspInit+0xec>)
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	4a31      	ldr	r2, [pc, #196]	@ (8004f78 <HAL_UART_MspInit+0xec>)
 8004eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eb6:	6193      	str	r3, [r2, #24]
 8004eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004f78 <HAL_UART_MspInit+0xec>)
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8004f78 <HAL_UART_MspInit+0xec>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f78 <HAL_UART_MspInit+0xec>)
 8004eca:	f043 0304 	orr.w	r3, r3, #4
 8004ece:	6193      	str	r3, [r2, #24]
 8004ed0:	4b29      	ldr	r3, [pc, #164]	@ (8004f78 <HAL_UART_MspInit+0xec>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ee0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eea:	f107 0310 	add.w	r3, r7, #16
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4822      	ldr	r0, [pc, #136]	@ (8004f7c <HAL_UART_MspInit+0xf0>)
 8004ef2:	f001 fe09 	bl	8006b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f04:	f107 0310 	add.w	r3, r7, #16
 8004f08:	4619      	mov	r1, r3
 8004f0a:	481c      	ldr	r0, [pc, #112]	@ (8004f7c <HAL_UART_MspInit+0xf0>)
 8004f0c:	f001 fdfc 	bl	8006b08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004f10:	4b1b      	ldr	r3, [pc, #108]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f12:	4a1c      	ldr	r2, [pc, #112]	@ (8004f84 <HAL_UART_MspInit+0xf8>)
 8004f14:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f16:	4b1a      	ldr	r3, [pc, #104]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f1c:	4b18      	ldr	r3, [pc, #96]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f22:	4b17      	ldr	r3, [pc, #92]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f24:	2280      	movs	r2, #128	@ 0x80
 8004f26:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f28:	4b15      	ldr	r3, [pc, #84]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f2e:	4b14      	ldr	r3, [pc, #80]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004f34:	4b12      	ldr	r3, [pc, #72]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f3a:	4b11      	ldr	r3, [pc, #68]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004f40:	480f      	ldr	r0, [pc, #60]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f42:	f001 f93f 	bl	80061c4 <HAL_DMA_Init>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8004f4c:	f7ff fe4c 	bl	8004be8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a0b      	ldr	r2, [pc, #44]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f54:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f56:	4a0a      	ldr	r2, [pc, #40]	@ (8004f80 <HAL_UART_MspInit+0xf4>)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2102      	movs	r1, #2
 8004f60:	2025      	movs	r0, #37	@ 0x25
 8004f62:	f001 f8f4 	bl	800614e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f66:	2025      	movs	r0, #37	@ 0x25
 8004f68:	f001 f90d 	bl	8006186 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004f6c:	bf00      	nop
 8004f6e:	3720      	adds	r7, #32
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40013800 	.word	0x40013800
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40010800 	.word	0x40010800
 8004f80:	20000258 	.word	0x20000258
 8004f84:	40020058 	.word	0x40020058

08004f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f8c:	bf00      	nop
 8004f8e:	e7fd      	b.n	8004f8c <NMI_Handler+0x4>

08004f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <HardFault_Handler+0x4>

08004f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f9c:	bf00      	nop
 8004f9e:	e7fd      	b.n	8004f9c <MemManage_Handler+0x4>

08004fa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <BusFault_Handler+0x4>

08004fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fac:	bf00      	nop
 8004fae:	e7fd      	b.n	8004fac <UsageFault_Handler+0x4>

08004fb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr

08004fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fc0:	bf00      	nop
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr

08004fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fd8:	f000 f8b6 	bl	8005148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fdc:	bf00      	nop
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	f001 ff5b 	bl	8006ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004ff4:	4802      	ldr	r0, [pc, #8]	@ (8005000 <DMA1_Channel5_IRQHandler+0x10>)
 8004ff6:	f001 fa53 	bl	80064a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000258 	.word	0x20000258

08005004 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8005008:	4802      	ldr	r0, [pc, #8]	@ (8005014 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800500a:	f000 fd90 	bl	8005b2e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800500e:	bf00      	nop
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	2000009c 	.word	0x2000009c

08005018 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RST_Pin);
 800501c:	2040      	movs	r0, #64	@ 0x40
 800501e:	f001 ff3f 	bl	8006ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800502c:	4802      	ldr	r0, [pc, #8]	@ (8005038 <TIM2_IRQHandler+0x10>)
 800502e:	f003 f9eb 	bl	8008408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000180 	.word	0x20000180

0800503c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005040:	4802      	ldr	r0, [pc, #8]	@ (800504c <TIM3_IRQHandler+0x10>)
 8005042:	f003 f9e1 	bl	8008408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	200001c8 	.word	0x200001c8

08005050 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005054:	4802      	ldr	r0, [pc, #8]	@ (8005060 <USART1_IRQHandler+0x10>)
 8005056:	f003 fe5b 	bl	8008d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000210 	.word	0x20000210

08005064 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005070:	f7ff fff8 	bl	8005064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005074:	480b      	ldr	r0, [pc, #44]	@ (80050a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005076:	490c      	ldr	r1, [pc, #48]	@ (80050a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005078:	4a0c      	ldr	r2, [pc, #48]	@ (80050ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800507a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800507c:	e002      	b.n	8005084 <LoopCopyDataInit>

0800507e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800507e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005082:	3304      	adds	r3, #4

08005084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005088:	d3f9      	bcc.n	800507e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800508a:	4a09      	ldr	r2, [pc, #36]	@ (80050b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800508c:	4c09      	ldr	r4, [pc, #36]	@ (80050b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800508e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005090:	e001      	b.n	8005096 <LoopFillZerobss>

08005092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005094:	3204      	adds	r2, #4

08005096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005098:	d3fb      	bcc.n	8005092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800509a:	f004 fd49 	bl	8009b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800509e:	f7fd f9df 	bl	8002460 <main>
  bx lr
 80050a2:	4770      	bx	lr
  ldr r0, =_sdata
 80050a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050a8:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80050ac:	08009c78 	.word	0x08009c78
  ldr r2, =_sbss
 80050b0:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80050b4:	200009c0 	.word	0x200009c0

080050b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050b8:	e7fe      	b.n	80050b8 <ADC1_2_IRQHandler>
	...

080050bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050c0:	4b08      	ldr	r3, [pc, #32]	@ (80050e4 <HAL_Init+0x28>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a07      	ldr	r2, [pc, #28]	@ (80050e4 <HAL_Init+0x28>)
 80050c6:	f043 0310 	orr.w	r3, r3, #16
 80050ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050cc:	2003      	movs	r0, #3
 80050ce:	f001 f833 	bl	8006138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050d2:	2006      	movs	r0, #6
 80050d4:	f000 f808 	bl	80050e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050d8:	f7ff fd8c 	bl	8004bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40022000 	.word	0x40022000

080050e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050f0:	4b12      	ldr	r3, [pc, #72]	@ (800513c <HAL_InitTick+0x54>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b12      	ldr	r3, [pc, #72]	@ (8005140 <HAL_InitTick+0x58>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	4619      	mov	r1, r3
 80050fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	4618      	mov	r0, r3
 8005108:	f001 f84f 	bl	80061aa <HAL_SYSTICK_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e00e      	b.n	8005134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b0f      	cmp	r3, #15
 800511a:	d80a      	bhi.n	8005132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800511c:	2200      	movs	r2, #0
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	f001 f813 	bl	800614e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005128:	4a06      	ldr	r2, [pc, #24]	@ (8005144 <HAL_InitTick+0x5c>)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000038 	.word	0x20000038
 8005140:	20000040 	.word	0x20000040
 8005144:	2000003c 	.word	0x2000003c

08005148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800514c:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <HAL_IncTick+0x1c>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <HAL_IncTick+0x20>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4413      	add	r3, r2
 8005158:	4a03      	ldr	r2, [pc, #12]	@ (8005168 <HAL_IncTick+0x20>)
 800515a:	6013      	str	r3, [r2, #0]
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr
 8005164:	20000040 	.word	0x20000040
 8005168:	2000099c 	.word	0x2000099c

0800516c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return uwTick;
 8005170:	4b02      	ldr	r3, [pc, #8]	@ (800517c <HAL_GetTick+0x10>)
 8005172:	681b      	ldr	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	2000099c 	.word	0x2000099c

08005180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7ff fff0 	bl	800516c <HAL_GetTick>
 800518c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d005      	beq.n	80051a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800519a:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <HAL_Delay+0x44>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051a6:	bf00      	nop
 80051a8:	f7ff ffe0 	bl	800516c <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d8f7      	bhi.n	80051a8 <HAL_Delay+0x28>
  {
  }
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000040 	.word	0x20000040

080051c8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 80051cc:	4b02      	ldr	r3, [pc, #8]	@ (80051d8 <HAL_GetUIDw0+0x10>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	1ffff7e8 	.word	0x1ffff7e8

080051dc <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80051e0:	4b02      	ldr	r3, [pc, #8]	@ (80051ec <HAL_GetUIDw1+0x10>)
 80051e2:	681b      	ldr	r3, [r3, #0]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	1ffff7ec 	.word	0x1ffff7ec

080051f0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80051f4:	4b02      	ldr	r3, [pc, #8]	@ (8005200 <HAL_GetUIDw2+0x10>)
 80051f6:	681b      	ldr	r3, [r3, #0]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr
 8005200:	1ffff7f0 	.word	0x1ffff7f0

08005204 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0ed      	b.n	80053f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fd18 	bl	8004c58 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005238:	f7ff ff98 	bl	800516c <HAL_GetTick>
 800523c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800523e:	e012      	b.n	8005266 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005240:	f7ff ff94 	bl	800516c <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b0a      	cmp	r3, #10
 800524c:	d90b      	bls.n	8005266 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2205      	movs	r2, #5
 800525e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0c5      	b.n	80053f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0e5      	beq.n	8005240 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0202 	bic.w	r2, r2, #2
 8005282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005284:	f7ff ff72 	bl	800516c <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800528a:	e012      	b.n	80052b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800528c:	f7ff ff6e 	bl	800516c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b0a      	cmp	r3, #10
 8005298:	d90b      	bls.n	80052b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2205      	movs	r2, #5
 80052aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e09f      	b.n	80053f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	7e1b      	ldrb	r3, [r3, #24]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d108      	bne.n	80052da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e007      	b.n	80052ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	7e5b      	ldrb	r3, [r3, #25]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d108      	bne.n	8005304 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e007      	b.n	8005314 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005312:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	7e9b      	ldrb	r3, [r3, #26]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d108      	bne.n	800532e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0220 	orr.w	r2, r2, #32
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e007      	b.n	800533e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0220 	bic.w	r2, r2, #32
 800533c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	7edb      	ldrb	r3, [r3, #27]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d108      	bne.n	8005358 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0210 	bic.w	r2, r2, #16
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e007      	b.n	8005368 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0210 	orr.w	r2, r2, #16
 8005366:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	7f1b      	ldrb	r3, [r3, #28]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d108      	bne.n	8005382 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0208 	orr.w	r2, r2, #8
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e007      	b.n	8005392 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0208 	bic.w	r2, r2, #8
 8005390:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7f5b      	ldrb	r3, [r3, #29]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d108      	bne.n	80053ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0204 	orr.w	r2, r2, #4
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e007      	b.n	80053bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0204 	bic.w	r2, r2, #4
 80053ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	ea42 0103 	orr.w	r1, r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	1e5a      	subs	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b087      	sub	sp, #28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005410:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005412:	7cfb      	ldrb	r3, [r7, #19]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d003      	beq.n	8005420 <HAL_CAN_ConfigFilter+0x26>
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	2b02      	cmp	r3, #2
 800541c:	f040 80aa 	bne.w	8005574 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005426:	f043 0201 	orr.w	r2, r3, #1
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	2201      	movs	r2, #1
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	43db      	mvns	r3, r3
 800544a:	401a      	ands	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d123      	bne.n	80054a2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	43db      	mvns	r3, r3
 8005464:	401a      	ands	r2, r3
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800547c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	3248      	adds	r2, #72	@ 0x48
 8005482:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005496:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005498:	6979      	ldr	r1, [r7, #20]
 800549a:	3348      	adds	r3, #72	@ 0x48
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	440b      	add	r3, r1
 80054a0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d122      	bne.n	80054f0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80054ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	3248      	adds	r2, #72	@ 0x48
 80054d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054e6:	6979      	ldr	r1, [r7, #20]
 80054e8:	3348      	adds	r3, #72	@ 0x48
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	440b      	add	r3, r1
 80054ee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800550a:	e007      	b.n	800551c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	431a      	orrs	r2, r3
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	43db      	mvns	r3, r3
 800552e:	401a      	ands	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005536:	e007      	b.n	8005548 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	431a      	orrs	r2, r3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d107      	bne.n	8005560 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	431a      	orrs	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005566:	f023 0201 	bic.w	r2, r3, #1
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	e006      	b.n	8005582 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005578:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d12e      	bne.n	80055fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0201 	bic.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055b8:	f7ff fdd8 	bl	800516c <HAL_GetTick>
 80055bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80055be:	e012      	b.n	80055e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80055c0:	f7ff fdd4 	bl	800516c <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b0a      	cmp	r3, #10
 80055cc:	d90b      	bls.n	80055e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2205      	movs	r2, #5
 80055de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e012      	b.n	800560c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e5      	bne.n	80055c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e006      	b.n	800560c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
  }
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	@ 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005628:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005632:	7ffb      	ldrb	r3, [r7, #31]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d003      	beq.n	8005640 <HAL_CAN_AddTxMessage+0x2c>
 8005638:	7ffb      	ldrb	r3, [r7, #31]
 800563a:	2b02      	cmp	r3, #2
 800563c:	f040 80ad 	bne.w	800579a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10a      	bne.n	8005660 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005650:	2b00      	cmp	r3, #0
 8005652:	d105      	bne.n	8005660 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8095 	beq.w	800578a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	0e1b      	lsrs	r3, r3, #24
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800566a:	2201      	movs	r2, #1
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	409a      	lsls	r2, r3
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10d      	bne.n	8005698 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005686:	68f9      	ldr	r1, [r7, #12]
 8005688:	6809      	ldr	r1, [r1, #0]
 800568a:	431a      	orrs	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	3318      	adds	r3, #24
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	440b      	add	r3, r1
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	e00f      	b.n	80056b8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80056a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80056ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	3318      	adds	r3, #24
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	440b      	add	r3, r1
 80056b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6819      	ldr	r1, [r3, #0]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	3318      	adds	r3, #24
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	440b      	add	r3, r1
 80056c8:	3304      	adds	r3, #4
 80056ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	7d1b      	ldrb	r3, [r3, #20]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d111      	bne.n	80056f8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	3318      	adds	r3, #24
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	4413      	add	r3, r2
 80056e0:	3304      	adds	r3, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	6811      	ldr	r1, [r2, #0]
 80056e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	3318      	adds	r3, #24
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	440b      	add	r3, r1
 80056f4:	3304      	adds	r3, #4
 80056f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3307      	adds	r3, #7
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	061a      	lsls	r2, r3, #24
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3306      	adds	r3, #6
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3305      	adds	r3, #5
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	4313      	orrs	r3, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	3204      	adds	r2, #4
 8005718:	7812      	ldrb	r2, [r2, #0]
 800571a:	4610      	mov	r0, r2
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	6811      	ldr	r1, [r2, #0]
 8005720:	ea43 0200 	orr.w	r2, r3, r0
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	440b      	add	r3, r1
 800572a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800572e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3303      	adds	r3, #3
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	061a      	lsls	r2, r3, #24
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3302      	adds	r3, #2
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3301      	adds	r3, #1
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	4313      	orrs	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	4610      	mov	r0, r2
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	6811      	ldr	r1, [r2, #0]
 8005756:	ea43 0200 	orr.w	r2, r3, r0
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	440b      	add	r3, r1
 8005760:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005764:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	3318      	adds	r3, #24
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	4413      	add	r3, r2
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	6811      	ldr	r1, [r2, #0]
 8005778:	f043 0201 	orr.w	r2, r3, #1
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	3318      	adds	r3, #24
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	440b      	add	r3, r1
 8005784:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	e00e      	b.n	80057a8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e006      	b.n	80057a8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
  }
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3724      	adds	r7, #36	@ 0x24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057c2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d002      	beq.n	80057d0 <HAL_CAN_AbortTxRequest+0x1e>
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d128      	bne.n	8005822 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057e8:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005802:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800581c:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	e006      	b.n	8005830 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
  }
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800584c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800584e:	7afb      	ldrb	r3, [r7, #11]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d002      	beq.n	800585a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005854:	7afb      	ldrb	r3, [r7, #11]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d11d      	bne.n	8005896 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80058a2:	b480      	push	{r7}
 80058a4:	b087      	sub	sp, #28
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d003      	beq.n	80058c6 <HAL_CAN_GetRxMessage+0x24>
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	f040 8103 	bne.w	8005acc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10e      	bne.n	80058ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d116      	bne.n	8005908 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e0f7      	b.n	8005ada <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d107      	bne.n	8005908 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0e8      	b.n	8005ada <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	331b      	adds	r3, #27
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	4413      	add	r3, r2
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0204 	and.w	r2, r3, #4
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10c      	bne.n	8005940 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	331b      	adds	r3, #27
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	4413      	add	r3, r2
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	0d5b      	lsrs	r3, r3, #21
 8005936:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e00b      	b.n	8005958 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	331b      	adds	r3, #27
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	4413      	add	r3, r2
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	08db      	lsrs	r3, r3, #3
 8005950:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	331b      	adds	r3, #27
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	4413      	add	r3, r2
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0202 	and.w	r2, r3, #2
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	331b      	adds	r3, #27
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	4413      	add	r3, r2
 800597a:	3304      	adds	r3, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2208      	movs	r2, #8
 800598a:	611a      	str	r2, [r3, #16]
 800598c:	e00b      	b.n	80059a6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	331b      	adds	r3, #27
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	4413      	add	r3, r2
 800599a:	3304      	adds	r3, #4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 020f 	and.w	r2, r3, #15
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	331b      	adds	r3, #27
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	4413      	add	r3, r2
 80059b2:	3304      	adds	r3, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	331b      	adds	r3, #27
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	4413      	add	r3, r2
 80059ca:	3304      	adds	r3, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	0c1b      	lsrs	r3, r3, #16
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	4413      	add	r3, r2
 80059e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	0a1a      	lsrs	r2, r3, #8
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	0c1a      	lsrs	r2, r3, #16
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	0e1a      	lsrs	r2, r3, #24
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	3303      	adds	r3, #3
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	0a1a      	lsrs	r2, r3, #8
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	3305      	adds	r3, #5
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	0c1a      	lsrs	r2, r3, #16
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	3306      	adds	r3, #6
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	0e1a      	lsrs	r2, r3, #24
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	3307      	adds	r3, #7
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0220 	orr.w	r2, r2, #32
 8005ab4:	60da      	str	r2, [r3, #12]
 8005ab6:	e007      	b.n	8005ac8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0220 	orr.w	r2, r2, #32
 8005ac6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e006      	b.n	8005ada <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
  }
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005af4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d002      	beq.n	8005b02 <HAL_CAN_ActivateNotification+0x1e>
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d109      	bne.n	8005b16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6959      	ldr	r1, [r3, #20]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e006      	b.n	8005b24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
  }
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr

08005b2e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b08a      	sub	sp, #40	@ 0x28
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d07c      	beq.n	8005c6e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d023      	beq.n	8005bc6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2201      	movs	r2, #1
 8005b84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f983 	bl	8005e9c <HAL_CAN_TxMailbox0CompleteCallback>
 8005b96:	e016      	b.n	8005bc6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d004      	beq.n	8005bac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005baa:	e00c      	b.n	8005bc6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bbe:	e002      	b.n	8005bc6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f986 	bl	8005ed2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d024      	beq.n	8005c1a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f962 	bl	8005eae <HAL_CAN_TxMailbox1CompleteCallback>
 8005bea:	e016      	b.n	8005c1a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bfe:	e00c      	b.n	8005c1a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c12:	e002      	b.n	8005c1a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f965 	bl	8005ee4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d024      	beq.n	8005c6e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005c2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f941 	bl	8005ec0 <HAL_CAN_TxMailbox2CompleteCallback>
 8005c3e:	e016      	b.n	8005c6e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d004      	beq.n	8005c54 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c52:	e00c      	b.n	8005c6e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c66:	e002      	b.n	8005c6e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f944 	bl	8005ef6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00c      	beq.n	8005c92 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2210      	movs	r2, #16
 8005c90:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00b      	beq.n	8005cb4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d006      	beq.n	8005cb4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2208      	movs	r2, #8
 8005cac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f92a 	bl	8005f08 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d009      	beq.n	8005cd2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fc fb97 	bl	8002400 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00c      	beq.n	8005cf6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2210      	movs	r2, #16
 8005cf4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d006      	beq.n	8005d18 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2208      	movs	r2, #8
 8005d10:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f90a 	bl	8005f2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f8f2 	bl	8005f1a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d006      	beq.n	8005d58 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2210      	movs	r2, #16
 8005d50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f8f3 	bl	8005f3e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d006      	beq.n	8005d7a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2208      	movs	r2, #8
 8005d72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f8eb 	bl	8005f50 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d07b      	beq.n	8005e7c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d072      	beq.n	8005e74 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	f043 0304 	orr.w	r3, r3, #4
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d043      	beq.n	8005e74 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d03e      	beq.n	8005e74 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dfc:	2b60      	cmp	r3, #96	@ 0x60
 8005dfe:	d02b      	beq.n	8005e58 <HAL_CAN_IRQHandler+0x32a>
 8005e00:	2b60      	cmp	r3, #96	@ 0x60
 8005e02:	d82e      	bhi.n	8005e62 <HAL_CAN_IRQHandler+0x334>
 8005e04:	2b50      	cmp	r3, #80	@ 0x50
 8005e06:	d022      	beq.n	8005e4e <HAL_CAN_IRQHandler+0x320>
 8005e08:	2b50      	cmp	r3, #80	@ 0x50
 8005e0a:	d82a      	bhi.n	8005e62 <HAL_CAN_IRQHandler+0x334>
 8005e0c:	2b40      	cmp	r3, #64	@ 0x40
 8005e0e:	d019      	beq.n	8005e44 <HAL_CAN_IRQHandler+0x316>
 8005e10:	2b40      	cmp	r3, #64	@ 0x40
 8005e12:	d826      	bhi.n	8005e62 <HAL_CAN_IRQHandler+0x334>
 8005e14:	2b30      	cmp	r3, #48	@ 0x30
 8005e16:	d010      	beq.n	8005e3a <HAL_CAN_IRQHandler+0x30c>
 8005e18:	2b30      	cmp	r3, #48	@ 0x30
 8005e1a:	d822      	bhi.n	8005e62 <HAL_CAN_IRQHandler+0x334>
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d002      	beq.n	8005e26 <HAL_CAN_IRQHandler+0x2f8>
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d005      	beq.n	8005e30 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005e24:	e01d      	b.n	8005e62 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	f043 0308 	orr.w	r3, r3, #8
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005e2e:	e019      	b.n	8005e64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	f043 0310 	orr.w	r3, r3, #16
 8005e36:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005e38:	e014      	b.n	8005e64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3c:	f043 0320 	orr.w	r3, r3, #32
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005e42:	e00f      	b.n	8005e64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005e4c:	e00a      	b.n	8005e64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005e56:	e005      	b.n	8005e64 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005e60:	e000      	b.n	8005e64 <HAL_CAN_IRQHandler+0x336>
            break;
 8005e62:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005e72:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2204      	movs	r2, #4
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f867 	bl	8005f62 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005e94:	bf00      	nop
 8005e96:	3728      	adds	r7, #40	@ 0x28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr

08005f1a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr

08005f2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr

08005f3e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr

08005f62 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr

08005f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f84:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f90:	4013      	ands	r3, r2
 8005f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fa6:	4a04      	ldr	r2, [pc, #16]	@ (8005fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	60d3      	str	r3, [r2, #12]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	e000ed00 	.word	0xe000ed00

08005fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fc0:	4b04      	ldr	r3, [pc, #16]	@ (8005fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	0a1b      	lsrs	r3, r3, #8
 8005fc6:	f003 0307 	and.w	r3, r3, #7
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	e000ed00 	.word	0xe000ed00

08005fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	db0b      	blt.n	8006002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	f003 021f 	and.w	r2, r3, #31
 8005ff0:	4906      	ldr	r1, [pc, #24]	@ (800600c <__NVIC_EnableIRQ+0x34>)
 8005ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8005ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr
 800600c:	e000e100 	.word	0xe000e100

08006010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	6039      	str	r1, [r7, #0]
 800601a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800601c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006020:	2b00      	cmp	r3, #0
 8006022:	db0a      	blt.n	800603a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	490c      	ldr	r1, [pc, #48]	@ (800605c <__NVIC_SetPriority+0x4c>)
 800602a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602e:	0112      	lsls	r2, r2, #4
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	440b      	add	r3, r1
 8006034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006038:	e00a      	b.n	8006050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	4908      	ldr	r1, [pc, #32]	@ (8006060 <__NVIC_SetPriority+0x50>)
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	3b04      	subs	r3, #4
 8006048:	0112      	lsls	r2, r2, #4
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	440b      	add	r3, r1
 800604e:	761a      	strb	r2, [r3, #24]
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	e000e100 	.word	0xe000e100
 8006060:	e000ed00 	.word	0xe000ed00

08006064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006064:	b480      	push	{r7}
 8006066:	b089      	sub	sp, #36	@ 0x24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f1c3 0307 	rsb	r3, r3, #7
 800607e:	2b04      	cmp	r3, #4
 8006080:	bf28      	it	cs
 8006082:	2304      	movcs	r3, #4
 8006084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3304      	adds	r3, #4
 800608a:	2b06      	cmp	r3, #6
 800608c:	d902      	bls.n	8006094 <NVIC_EncodePriority+0x30>
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	3b03      	subs	r3, #3
 8006092:	e000      	b.n	8006096 <NVIC_EncodePriority+0x32>
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006098:	f04f 32ff 	mov.w	r2, #4294967295
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	43da      	mvns	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	401a      	ands	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060ac:	f04f 31ff 	mov.w	r1, #4294967295
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	fa01 f303 	lsl.w	r3, r1, r3
 80060b6:	43d9      	mvns	r1, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060bc:	4313      	orrs	r3, r2
         );
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3724      	adds	r7, #36	@ 0x24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr

080060c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80060cc:	f3bf 8f4f 	dsb	sy
}
 80060d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80060d2:	4b06      	ldr	r3, [pc, #24]	@ (80060ec <__NVIC_SystemReset+0x24>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80060da:	4904      	ldr	r1, [pc, #16]	@ (80060ec <__NVIC_SystemReset+0x24>)
 80060dc:	4b04      	ldr	r3, [pc, #16]	@ (80060f0 <__NVIC_SystemReset+0x28>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80060e2:	f3bf 8f4f 	dsb	sy
}
 80060e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <__NVIC_SystemReset+0x20>
 80060ec:	e000ed00 	.word	0xe000ed00
 80060f0:	05fa0004 	.word	0x05fa0004

080060f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3b01      	subs	r3, #1
 8006100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006104:	d301      	bcc.n	800610a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006106:	2301      	movs	r3, #1
 8006108:	e00f      	b.n	800612a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800610a:	4a0a      	ldr	r2, [pc, #40]	@ (8006134 <SysTick_Config+0x40>)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3b01      	subs	r3, #1
 8006110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006112:	210f      	movs	r1, #15
 8006114:	f04f 30ff 	mov.w	r0, #4294967295
 8006118:	f7ff ff7a 	bl	8006010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800611c:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <SysTick_Config+0x40>)
 800611e:	2200      	movs	r2, #0
 8006120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006122:	4b04      	ldr	r3, [pc, #16]	@ (8006134 <SysTick_Config+0x40>)
 8006124:	2207      	movs	r2, #7
 8006126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	e000e010 	.word	0xe000e010

08006138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff ff17 	bl	8005f74 <__NVIC_SetPriorityGrouping>
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800614e:	b580      	push	{r7, lr}
 8006150:	b086      	sub	sp, #24
 8006152:	af00      	add	r7, sp, #0
 8006154:	4603      	mov	r3, r0
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	607a      	str	r2, [r7, #4]
 800615a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006160:	f7ff ff2c 	bl	8005fbc <__NVIC_GetPriorityGrouping>
 8006164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	6978      	ldr	r0, [r7, #20]
 800616c:	f7ff ff7a 	bl	8006064 <NVIC_EncodePriority>
 8006170:	4602      	mov	r2, r0
 8006172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006176:	4611      	mov	r1, r2
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff ff49 	bl	8006010 <__NVIC_SetPriority>
}
 800617e:	bf00      	nop
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	4603      	mov	r3, r0
 800618e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff ff1f 	bl	8005fd8 <__NVIC_EnableIRQ>
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80061a6:	f7ff ff8f 	bl	80060c8 <__NVIC_SystemReset>

080061aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff ff9e 	bl	80060f4 <SysTick_Config>
 80061b8:	4603      	mov	r3, r0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e043      	b.n	8006262 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	4b22      	ldr	r3, [pc, #136]	@ (800626c <HAL_DMA_Init+0xa8>)
 80061e2:	4413      	add	r3, r2
 80061e4:	4a22      	ldr	r2, [pc, #136]	@ (8006270 <HAL_DMA_Init+0xac>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	009a      	lsls	r2, r3, #2
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006274 <HAL_DMA_Init+0xb0>)
 80061f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800620e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006212:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800621c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr
 800626c:	bffdfff8 	.word	0xbffdfff8
 8006270:	cccccccd 	.word	0xcccccccd
 8006274:	40020000 	.word	0x40020000

08006278 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_DMA_Start_IT+0x20>
 8006294:	2302      	movs	r3, #2
 8006296:	e04b      	b.n	8006330 <HAL_DMA_Start_IT+0xb8>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d13a      	bne.n	8006322 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0201 	bic.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 f9eb 	bl	80066ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 020e 	orr.w	r2, r2, #14
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	e00f      	b.n	8006310 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0204 	bic.w	r2, r2, #4
 80062fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 020a 	orr.w	r2, r2, #10
 800630e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e005      	b.n	800632e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800632a:	2302      	movs	r3, #2
 800632c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d008      	beq.n	8006362 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2204      	movs	r2, #4
 8006354:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e020      	b.n	80063a4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 020e 	bic.w	r2, r2, #14
 8006370:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638a:	2101      	movs	r1, #1
 800638c:	fa01 f202 	lsl.w	r2, r1, r2
 8006390:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr
	...

080063b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d005      	beq.n	80063d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2204      	movs	r2, #4
 80063cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
 80063d2:	e051      	b.n	8006478 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 020e 	bic.w	r2, r2, #14
 80063e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0201 	bic.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a22      	ldr	r2, [pc, #136]	@ (8006484 <HAL_DMA_Abort_IT+0xd4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d029      	beq.n	8006452 <HAL_DMA_Abort_IT+0xa2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a21      	ldr	r2, [pc, #132]	@ (8006488 <HAL_DMA_Abort_IT+0xd8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d022      	beq.n	800644e <HAL_DMA_Abort_IT+0x9e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1f      	ldr	r2, [pc, #124]	@ (800648c <HAL_DMA_Abort_IT+0xdc>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d01a      	beq.n	8006448 <HAL_DMA_Abort_IT+0x98>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1e      	ldr	r2, [pc, #120]	@ (8006490 <HAL_DMA_Abort_IT+0xe0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d012      	beq.n	8006442 <HAL_DMA_Abort_IT+0x92>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1c      	ldr	r2, [pc, #112]	@ (8006494 <HAL_DMA_Abort_IT+0xe4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00a      	beq.n	800643c <HAL_DMA_Abort_IT+0x8c>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a1b      	ldr	r2, [pc, #108]	@ (8006498 <HAL_DMA_Abort_IT+0xe8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d102      	bne.n	8006436 <HAL_DMA_Abort_IT+0x86>
 8006430:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006434:	e00e      	b.n	8006454 <HAL_DMA_Abort_IT+0xa4>
 8006436:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800643a:	e00b      	b.n	8006454 <HAL_DMA_Abort_IT+0xa4>
 800643c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006440:	e008      	b.n	8006454 <HAL_DMA_Abort_IT+0xa4>
 8006442:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006446:	e005      	b.n	8006454 <HAL_DMA_Abort_IT+0xa4>
 8006448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800644c:	e002      	b.n	8006454 <HAL_DMA_Abort_IT+0xa4>
 800644e:	2310      	movs	r3, #16
 8006450:	e000      	b.n	8006454 <HAL_DMA_Abort_IT+0xa4>
 8006452:	2301      	movs	r3, #1
 8006454:	4a11      	ldr	r2, [pc, #68]	@ (800649c <HAL_DMA_Abort_IT+0xec>)
 8006456:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4798      	blx	r3
    } 
  }
  return status;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40020008 	.word	0x40020008
 8006488:	4002001c 	.word	0x4002001c
 800648c:	40020030 	.word	0x40020030
 8006490:	40020044 	.word	0x40020044
 8006494:	40020058 	.word	0x40020058
 8006498:	4002006c 	.word	0x4002006c
 800649c:	40020000 	.word	0x40020000

080064a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064bc:	2204      	movs	r2, #4
 80064be:	409a      	lsls	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d04f      	beq.n	8006568 <HAL_DMA_IRQHandler+0xc8>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d04a      	beq.n	8006568 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d107      	bne.n	80064f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0204 	bic.w	r2, r2, #4
 80064ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a66      	ldr	r2, [pc, #408]	@ (8006690 <HAL_DMA_IRQHandler+0x1f0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d029      	beq.n	800654e <HAL_DMA_IRQHandler+0xae>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a65      	ldr	r2, [pc, #404]	@ (8006694 <HAL_DMA_IRQHandler+0x1f4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d022      	beq.n	800654a <HAL_DMA_IRQHandler+0xaa>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a63      	ldr	r2, [pc, #396]	@ (8006698 <HAL_DMA_IRQHandler+0x1f8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01a      	beq.n	8006544 <HAL_DMA_IRQHandler+0xa4>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a62      	ldr	r2, [pc, #392]	@ (800669c <HAL_DMA_IRQHandler+0x1fc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d012      	beq.n	800653e <HAL_DMA_IRQHandler+0x9e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a60      	ldr	r2, [pc, #384]	@ (80066a0 <HAL_DMA_IRQHandler+0x200>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00a      	beq.n	8006538 <HAL_DMA_IRQHandler+0x98>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a5f      	ldr	r2, [pc, #380]	@ (80066a4 <HAL_DMA_IRQHandler+0x204>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d102      	bne.n	8006532 <HAL_DMA_IRQHandler+0x92>
 800652c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006530:	e00e      	b.n	8006550 <HAL_DMA_IRQHandler+0xb0>
 8006532:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006536:	e00b      	b.n	8006550 <HAL_DMA_IRQHandler+0xb0>
 8006538:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800653c:	e008      	b.n	8006550 <HAL_DMA_IRQHandler+0xb0>
 800653e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006542:	e005      	b.n	8006550 <HAL_DMA_IRQHandler+0xb0>
 8006544:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006548:	e002      	b.n	8006550 <HAL_DMA_IRQHandler+0xb0>
 800654a:	2340      	movs	r3, #64	@ 0x40
 800654c:	e000      	b.n	8006550 <HAL_DMA_IRQHandler+0xb0>
 800654e:	2304      	movs	r3, #4
 8006550:	4a55      	ldr	r2, [pc, #340]	@ (80066a8 <HAL_DMA_IRQHandler+0x208>)
 8006552:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 8094 	beq.w	8006686 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006566:	e08e      	b.n	8006686 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656c:	2202      	movs	r2, #2
 800656e:	409a      	lsls	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4013      	ands	r3, r2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d056      	beq.n	8006626 <HAL_DMA_IRQHandler+0x186>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d051      	beq.n	8006626 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 020a 	bic.w	r2, r2, #10
 800659e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a38      	ldr	r2, [pc, #224]	@ (8006690 <HAL_DMA_IRQHandler+0x1f0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d029      	beq.n	8006606 <HAL_DMA_IRQHandler+0x166>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a37      	ldr	r2, [pc, #220]	@ (8006694 <HAL_DMA_IRQHandler+0x1f4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d022      	beq.n	8006602 <HAL_DMA_IRQHandler+0x162>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a35      	ldr	r2, [pc, #212]	@ (8006698 <HAL_DMA_IRQHandler+0x1f8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01a      	beq.n	80065fc <HAL_DMA_IRQHandler+0x15c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a34      	ldr	r2, [pc, #208]	@ (800669c <HAL_DMA_IRQHandler+0x1fc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d012      	beq.n	80065f6 <HAL_DMA_IRQHandler+0x156>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a32      	ldr	r2, [pc, #200]	@ (80066a0 <HAL_DMA_IRQHandler+0x200>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00a      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x150>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a31      	ldr	r2, [pc, #196]	@ (80066a4 <HAL_DMA_IRQHandler+0x204>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d102      	bne.n	80065ea <HAL_DMA_IRQHandler+0x14a>
 80065e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80065e8:	e00e      	b.n	8006608 <HAL_DMA_IRQHandler+0x168>
 80065ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065ee:	e00b      	b.n	8006608 <HAL_DMA_IRQHandler+0x168>
 80065f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80065f4:	e008      	b.n	8006608 <HAL_DMA_IRQHandler+0x168>
 80065f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80065fa:	e005      	b.n	8006608 <HAL_DMA_IRQHandler+0x168>
 80065fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006600:	e002      	b.n	8006608 <HAL_DMA_IRQHandler+0x168>
 8006602:	2320      	movs	r3, #32
 8006604:	e000      	b.n	8006608 <HAL_DMA_IRQHandler+0x168>
 8006606:	2302      	movs	r3, #2
 8006608:	4a27      	ldr	r2, [pc, #156]	@ (80066a8 <HAL_DMA_IRQHandler+0x208>)
 800660a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	2b00      	cmp	r3, #0
 800661a:	d034      	beq.n	8006686 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006624:	e02f      	b.n	8006686 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662a:	2208      	movs	r2, #8
 800662c:	409a      	lsls	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d028      	beq.n	8006688 <HAL_DMA_IRQHandler+0x1e8>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d023      	beq.n	8006688 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 020e 	bic.w	r2, r2, #14
 800664e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006658:	2101      	movs	r1, #1
 800665a:	fa01 f202 	lsl.w	r2, r1, r2
 800665e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
    }
  }
  return;
 8006686:	bf00      	nop
 8006688:	bf00      	nop
}
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40020008 	.word	0x40020008
 8006694:	4002001c 	.word	0x4002001c
 8006698:	40020030 	.word	0x40020030
 800669c:	40020044 	.word	0x40020044
 80066a0:	40020058 	.word	0x40020058
 80066a4:	4002006c 	.word	0x4002006c
 80066a8:	40020000 	.word	0x40020000

080066ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c2:	2101      	movs	r1, #1
 80066c4:	fa01 f202 	lsl.w	r2, r1, r2
 80066c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b10      	cmp	r3, #16
 80066d8:	d108      	bne.n	80066ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80066ea:	e007      	b.n	80066fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	60da      	str	r2, [r3, #12]
}
 80066fc:	bf00      	nop
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr
	...

08006708 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006722:	4b2f      	ldr	r3, [pc, #188]	@ (80067e0 <HAL_FLASH_Program+0xd8>)
 8006724:	7e1b      	ldrb	r3, [r3, #24]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_FLASH_Program+0x26>
 800672a:	2302      	movs	r3, #2
 800672c:	e054      	b.n	80067d8 <HAL_FLASH_Program+0xd0>
 800672e:	4b2c      	ldr	r3, [pc, #176]	@ (80067e0 <HAL_FLASH_Program+0xd8>)
 8006730:	2201      	movs	r2, #1
 8006732:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006734:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006738:	f000 f8a8 	bl	800688c <FLASH_WaitForLastOperation>
 800673c:	4603      	mov	r3, r0
 800673e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d144      	bne.n	80067d0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d102      	bne.n	8006752 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800674c:	2301      	movs	r3, #1
 800674e:	757b      	strb	r3, [r7, #21]
 8006750:	e007      	b.n	8006762 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d102      	bne.n	800675e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006758:	2302      	movs	r3, #2
 800675a:	757b      	strb	r3, [r7, #21]
 800675c:	e001      	b.n	8006762 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800675e:	2304      	movs	r3, #4
 8006760:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8006762:	2300      	movs	r3, #0
 8006764:	75bb      	strb	r3, [r7, #22]
 8006766:	e02d      	b.n	80067c4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006768:	7dbb      	ldrb	r3, [r7, #22]
 800676a:	005a      	lsls	r2, r3, #1
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	eb02 0c03 	add.w	ip, r2, r3
 8006772:	7dbb      	ldrb	r3, [r7, #22]
 8006774:	0119      	lsls	r1, r3, #4
 8006776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800677a:	f1c1 0620 	rsb	r6, r1, #32
 800677e:	f1a1 0020 	sub.w	r0, r1, #32
 8006782:	fa22 f401 	lsr.w	r4, r2, r1
 8006786:	fa03 f606 	lsl.w	r6, r3, r6
 800678a:	4334      	orrs	r4, r6
 800678c:	fa23 f000 	lsr.w	r0, r3, r0
 8006790:	4304      	orrs	r4, r0
 8006792:	fa23 f501 	lsr.w	r5, r3, r1
 8006796:	b2a3      	uxth	r3, r4
 8006798:	4619      	mov	r1, r3
 800679a:	4660      	mov	r0, ip
 800679c:	f000 f85a 	bl	8006854 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80067a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80067a4:	f000 f872 	bl	800688c <FLASH_WaitForLastOperation>
 80067a8:	4603      	mov	r3, r0
 80067aa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80067ac:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <HAL_FLASH_Program+0xdc>)
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	4a0c      	ldr	r2, [pc, #48]	@ (80067e4 <HAL_FLASH_Program+0xdc>)
 80067b2:	f023 0301 	bic.w	r3, r3, #1
 80067b6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d107      	bne.n	80067ce <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80067be:	7dbb      	ldrb	r3, [r7, #22]
 80067c0:	3301      	adds	r3, #1
 80067c2:	75bb      	strb	r3, [r7, #22]
 80067c4:	7dba      	ldrb	r2, [r7, #22]
 80067c6:	7d7b      	ldrb	r3, [r7, #21]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d3cd      	bcc.n	8006768 <HAL_FLASH_Program+0x60>
 80067cc:	e000      	b.n	80067d0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80067ce:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80067d0:	4b03      	ldr	r3, [pc, #12]	@ (80067e0 <HAL_FLASH_Program+0xd8>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	761a      	strb	r2, [r3, #24]

  return status;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e0:	200009a0 	.word	0x200009a0
 80067e4:	40022000 	.word	0x40022000

080067e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80067f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006828 <HAL_FLASH_Unlock+0x40>)
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00d      	beq.n	800681a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80067fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006828 <HAL_FLASH_Unlock+0x40>)
 8006800:	4a0a      	ldr	r2, [pc, #40]	@ (800682c <HAL_FLASH_Unlock+0x44>)
 8006802:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006804:	4b08      	ldr	r3, [pc, #32]	@ (8006828 <HAL_FLASH_Unlock+0x40>)
 8006806:	4a0a      	ldr	r2, [pc, #40]	@ (8006830 <HAL_FLASH_Unlock+0x48>)
 8006808:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800680a:	4b07      	ldr	r3, [pc, #28]	@ (8006828 <HAL_FLASH_Unlock+0x40>)
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800681a:	79fb      	ldrb	r3, [r7, #7]
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40022000 	.word	0x40022000
 800682c:	45670123 	.word	0x45670123
 8006830:	cdef89ab 	.word	0xcdef89ab

08006834 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006838:	4b05      	ldr	r3, [pc, #20]	@ (8006850 <HAL_FLASH_Lock+0x1c>)
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	4a04      	ldr	r2, [pc, #16]	@ (8006850 <HAL_FLASH_Lock+0x1c>)
 800683e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006842:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40022000 	.word	0x40022000

08006854 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006860:	4b08      	ldr	r3, [pc, #32]	@ (8006884 <FLASH_Program_HalfWord+0x30>)
 8006862:	2200      	movs	r2, #0
 8006864:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006866:	4b08      	ldr	r3, [pc, #32]	@ (8006888 <FLASH_Program_HalfWord+0x34>)
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	4a07      	ldr	r2, [pc, #28]	@ (8006888 <FLASH_Program_HalfWord+0x34>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	887a      	ldrh	r2, [r7, #2]
 8006876:	801a      	strh	r2, [r3, #0]
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	200009a0 	.word	0x200009a0
 8006888:	40022000 	.word	0x40022000

0800688c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006894:	f7fe fc6a 	bl	800516c <HAL_GetTick>
 8006898:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800689a:	e010      	b.n	80068be <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a2:	d00c      	beq.n	80068be <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <FLASH_WaitForLastOperation+0x2e>
 80068aa:	f7fe fc5f 	bl	800516c <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d201      	bcs.n	80068be <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e025      	b.n	800690a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80068be:	4b15      	ldr	r3, [pc, #84]	@ (8006914 <FLASH_WaitForLastOperation+0x88>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e8      	bne.n	800689c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80068ca:	4b12      	ldr	r3, [pc, #72]	@ (8006914 <FLASH_WaitForLastOperation+0x88>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80068d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006914 <FLASH_WaitForLastOperation+0x88>)
 80068d8:	2220      	movs	r2, #32
 80068da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80068dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006914 <FLASH_WaitForLastOperation+0x88>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10b      	bne.n	8006900 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80068e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006914 <FLASH_WaitForLastOperation+0x88>)
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d105      	bne.n	8006900 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80068f4:	4b07      	ldr	r3, [pc, #28]	@ (8006914 <FLASH_WaitForLastOperation+0x88>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006900:	f000 f80a 	bl	8006918 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40022000 	.word	0x40022000

08006918 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006922:	4b23      	ldr	r3, [pc, #140]	@ (80069b0 <FLASH_SetErrorCode+0x98>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800692e:	4b21      	ldr	r3, [pc, #132]	@ (80069b4 <FLASH_SetErrorCode+0x9c>)
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f043 0302 	orr.w	r3, r3, #2
 8006936:	4a1f      	ldr	r2, [pc, #124]	@ (80069b4 <FLASH_SetErrorCode+0x9c>)
 8006938:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f043 0310 	orr.w	r3, r3, #16
 8006940:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006942:	4b1b      	ldr	r3, [pc, #108]	@ (80069b0 <FLASH_SetErrorCode+0x98>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800694e:	4b19      	ldr	r3, [pc, #100]	@ (80069b4 <FLASH_SetErrorCode+0x9c>)
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	4a17      	ldr	r2, [pc, #92]	@ (80069b4 <FLASH_SetErrorCode+0x9c>)
 8006958:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f043 0304 	orr.w	r3, r3, #4
 8006960:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8006962:	4b13      	ldr	r3, [pc, #76]	@ (80069b0 <FLASH_SetErrorCode+0x98>)
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800696e:	4b11      	ldr	r3, [pc, #68]	@ (80069b4 <FLASH_SetErrorCode+0x9c>)
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	f043 0304 	orr.w	r3, r3, #4
 8006976:	4a0f      	ldr	r2, [pc, #60]	@ (80069b4 <FLASH_SetErrorCode+0x9c>)
 8006978:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800697a:	4b0d      	ldr	r3, [pc, #52]	@ (80069b0 <FLASH_SetErrorCode+0x98>)
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	4a0c      	ldr	r2, [pc, #48]	@ (80069b0 <FLASH_SetErrorCode+0x98>)
 8006980:	f023 0301 	bic.w	r3, r3, #1
 8006984:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f240 1201 	movw	r2, #257	@ 0x101
 800698c:	4293      	cmp	r3, r2
 800698e:	d106      	bne.n	800699e <FLASH_SetErrorCode+0x86>
 8006990:	4b07      	ldr	r3, [pc, #28]	@ (80069b0 <FLASH_SetErrorCode+0x98>)
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	4a06      	ldr	r2, [pc, #24]	@ (80069b0 <FLASH_SetErrorCode+0x98>)
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	61d3      	str	r3, [r2, #28]
}  
 800699c:	e002      	b.n	80069a4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800699e:	4a04      	ldr	r2, [pc, #16]	@ (80069b0 <FLASH_SetErrorCode+0x98>)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60d3      	str	r3, [r2, #12]
}  
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40022000 	.word	0x40022000
 80069b4:	200009a0 	.word	0x200009a0

080069b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80069ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006a88 <HAL_FLASHEx_Erase+0xd0>)
 80069cc:	7e1b      	ldrb	r3, [r3, #24]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_FLASHEx_Erase+0x1e>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e053      	b.n	8006a7e <HAL_FLASHEx_Erase+0xc6>
 80069d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006a88 <HAL_FLASHEx_Erase+0xd0>)
 80069d8:	2201      	movs	r2, #1
 80069da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d116      	bne.n	8006a12 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80069e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80069e8:	f7ff ff50 	bl	800688c <FLASH_WaitForLastOperation>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d141      	bne.n	8006a76 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80069f2:	2001      	movs	r0, #1
 80069f4:	f000 f84c 	bl	8006a90 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80069f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80069fc:	f7ff ff46 	bl	800688c <FLASH_WaitForLastOperation>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006a04:	4b21      	ldr	r3, [pc, #132]	@ (8006a8c <HAL_FLASHEx_Erase+0xd4>)
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	4a20      	ldr	r2, [pc, #128]	@ (8006a8c <HAL_FLASHEx_Erase+0xd4>)
 8006a0a:	f023 0304 	bic.w	r3, r3, #4
 8006a0e:	6113      	str	r3, [r2, #16]
 8006a10:	e031      	b.n	8006a76 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006a12:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006a16:	f7ff ff39 	bl	800688c <FLASH_WaitForLastOperation>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d12a      	bne.n	8006a76 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	f04f 32ff 	mov.w	r2, #4294967295
 8006a26:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	60bb      	str	r3, [r7, #8]
 8006a2e:	e019      	b.n	8006a64 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8006a30:	68b8      	ldr	r0, [r7, #8]
 8006a32:	f000 f849 	bl	8006ac8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a36:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006a3a:	f7ff ff27 	bl	800688c <FLASH_WaitForLastOperation>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006a42:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <HAL_FLASHEx_Erase+0xd4>)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	4a11      	ldr	r2, [pc, #68]	@ (8006a8c <HAL_FLASHEx_Erase+0xd4>)
 8006a48:	f023 0302 	bic.w	r3, r3, #2
 8006a4c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	601a      	str	r2, [r3, #0]
            break;
 8006a5a:	e00c      	b.n	8006a76 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a62:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	029a      	lsls	r2, r3, #10
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	4413      	add	r3, r2
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d3dc      	bcc.n	8006a30 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006a76:	4b04      	ldr	r3, [pc, #16]	@ (8006a88 <HAL_FLASHEx_Erase+0xd0>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	761a      	strb	r2, [r3, #24]

  return status;
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	200009a0 	.word	0x200009a0
 8006a8c:	40022000 	.word	0x40022000

08006a90 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a98:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <FLASH_MassErase+0x30>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006a9e:	4b09      	ldr	r3, [pc, #36]	@ (8006ac4 <FLASH_MassErase+0x34>)
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	4a08      	ldr	r2, [pc, #32]	@ (8006ac4 <FLASH_MassErase+0x34>)
 8006aa4:	f043 0304 	orr.w	r3, r3, #4
 8006aa8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006aaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <FLASH_MassErase+0x34>)
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	4a05      	ldr	r2, [pc, #20]	@ (8006ac4 <FLASH_MassErase+0x34>)
 8006ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ab4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr
 8006ac0:	200009a0 	.word	0x200009a0
 8006ac4:	40022000 	.word	0x40022000

08006ac8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b00 <FLASH_PageErase+0x38>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b04 <FLASH_PageErase+0x3c>)
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	4a0a      	ldr	r2, [pc, #40]	@ (8006b04 <FLASH_PageErase+0x3c>)
 8006adc:	f043 0302 	orr.w	r3, r3, #2
 8006ae0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006ae2:	4a08      	ldr	r2, [pc, #32]	@ (8006b04 <FLASH_PageErase+0x3c>)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006ae8:	4b06      	ldr	r3, [pc, #24]	@ (8006b04 <FLASH_PageErase+0x3c>)
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	4a05      	ldr	r2, [pc, #20]	@ (8006b04 <FLASH_PageErase+0x3c>)
 8006aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006af2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	200009a0 	.word	0x200009a0
 8006b04:	40022000 	.word	0x40022000

08006b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b08b      	sub	sp, #44	@ 0x2c
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b12:	2300      	movs	r3, #0
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006b16:	2300      	movs	r3, #0
 8006b18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b1a:	e169      	b.n	8006df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	f040 8158 	bne.w	8006dea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4a9a      	ldr	r2, [pc, #616]	@ (8006da8 <HAL_GPIO_Init+0x2a0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d05e      	beq.n	8006c02 <HAL_GPIO_Init+0xfa>
 8006b44:	4a98      	ldr	r2, [pc, #608]	@ (8006da8 <HAL_GPIO_Init+0x2a0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d875      	bhi.n	8006c36 <HAL_GPIO_Init+0x12e>
 8006b4a:	4a98      	ldr	r2, [pc, #608]	@ (8006dac <HAL_GPIO_Init+0x2a4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d058      	beq.n	8006c02 <HAL_GPIO_Init+0xfa>
 8006b50:	4a96      	ldr	r2, [pc, #600]	@ (8006dac <HAL_GPIO_Init+0x2a4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d86f      	bhi.n	8006c36 <HAL_GPIO_Init+0x12e>
 8006b56:	4a96      	ldr	r2, [pc, #600]	@ (8006db0 <HAL_GPIO_Init+0x2a8>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d052      	beq.n	8006c02 <HAL_GPIO_Init+0xfa>
 8006b5c:	4a94      	ldr	r2, [pc, #592]	@ (8006db0 <HAL_GPIO_Init+0x2a8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d869      	bhi.n	8006c36 <HAL_GPIO_Init+0x12e>
 8006b62:	4a94      	ldr	r2, [pc, #592]	@ (8006db4 <HAL_GPIO_Init+0x2ac>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d04c      	beq.n	8006c02 <HAL_GPIO_Init+0xfa>
 8006b68:	4a92      	ldr	r2, [pc, #584]	@ (8006db4 <HAL_GPIO_Init+0x2ac>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d863      	bhi.n	8006c36 <HAL_GPIO_Init+0x12e>
 8006b6e:	4a92      	ldr	r2, [pc, #584]	@ (8006db8 <HAL_GPIO_Init+0x2b0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d046      	beq.n	8006c02 <HAL_GPIO_Init+0xfa>
 8006b74:	4a90      	ldr	r2, [pc, #576]	@ (8006db8 <HAL_GPIO_Init+0x2b0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d85d      	bhi.n	8006c36 <HAL_GPIO_Init+0x12e>
 8006b7a:	2b12      	cmp	r3, #18
 8006b7c:	d82a      	bhi.n	8006bd4 <HAL_GPIO_Init+0xcc>
 8006b7e:	2b12      	cmp	r3, #18
 8006b80:	d859      	bhi.n	8006c36 <HAL_GPIO_Init+0x12e>
 8006b82:	a201      	add	r2, pc, #4	@ (adr r2, 8006b88 <HAL_GPIO_Init+0x80>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006c03 	.word	0x08006c03
 8006b8c:	08006bdd 	.word	0x08006bdd
 8006b90:	08006bef 	.word	0x08006bef
 8006b94:	08006c31 	.word	0x08006c31
 8006b98:	08006c37 	.word	0x08006c37
 8006b9c:	08006c37 	.word	0x08006c37
 8006ba0:	08006c37 	.word	0x08006c37
 8006ba4:	08006c37 	.word	0x08006c37
 8006ba8:	08006c37 	.word	0x08006c37
 8006bac:	08006c37 	.word	0x08006c37
 8006bb0:	08006c37 	.word	0x08006c37
 8006bb4:	08006c37 	.word	0x08006c37
 8006bb8:	08006c37 	.word	0x08006c37
 8006bbc:	08006c37 	.word	0x08006c37
 8006bc0:	08006c37 	.word	0x08006c37
 8006bc4:	08006c37 	.word	0x08006c37
 8006bc8:	08006c37 	.word	0x08006c37
 8006bcc:	08006be5 	.word	0x08006be5
 8006bd0:	08006bf9 	.word	0x08006bf9
 8006bd4:	4a79      	ldr	r2, [pc, #484]	@ (8006dbc <HAL_GPIO_Init+0x2b4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006bda:	e02c      	b.n	8006c36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	623b      	str	r3, [r7, #32]
          break;
 8006be2:	e029      	b.n	8006c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	3304      	adds	r3, #4
 8006bea:	623b      	str	r3, [r7, #32]
          break;
 8006bec:	e024      	b.n	8006c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	623b      	str	r3, [r7, #32]
          break;
 8006bf6:	e01f      	b.n	8006c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	623b      	str	r3, [r7, #32]
          break;
 8006c00:	e01a      	b.n	8006c38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006c0a:	2304      	movs	r3, #4
 8006c0c:	623b      	str	r3, [r7, #32]
          break;
 8006c0e:	e013      	b.n	8006c38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d105      	bne.n	8006c24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c18:	2308      	movs	r3, #8
 8006c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	611a      	str	r2, [r3, #16]
          break;
 8006c22:	e009      	b.n	8006c38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c24:	2308      	movs	r3, #8
 8006c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	615a      	str	r2, [r3, #20]
          break;
 8006c2e:	e003      	b.n	8006c38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006c30:	2300      	movs	r3, #0
 8006c32:	623b      	str	r3, [r7, #32]
          break;
 8006c34:	e000      	b.n	8006c38 <HAL_GPIO_Init+0x130>
          break;
 8006c36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	2bff      	cmp	r3, #255	@ 0xff
 8006c3c:	d801      	bhi.n	8006c42 <HAL_GPIO_Init+0x13a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	e001      	b.n	8006c46 <HAL_GPIO_Init+0x13e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3304      	adds	r3, #4
 8006c46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2bff      	cmp	r3, #255	@ 0xff
 8006c4c:	d802      	bhi.n	8006c54 <HAL_GPIO_Init+0x14c>
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	e002      	b.n	8006c5a <HAL_GPIO_Init+0x152>
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	3b08      	subs	r3, #8
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	210f      	movs	r1, #15
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	fa01 f303 	lsl.w	r3, r1, r3
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	401a      	ands	r2, r3
 8006c6c:	6a39      	ldr	r1, [r7, #32]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	fa01 f303 	lsl.w	r3, r1, r3
 8006c74:	431a      	orrs	r2, r3
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80b1 	beq.w	8006dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006c88:	4b4d      	ldr	r3, [pc, #308]	@ (8006dc0 <HAL_GPIO_Init+0x2b8>)
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8006dc0 <HAL_GPIO_Init+0x2b8>)
 8006c8e:	f043 0301 	orr.w	r3, r3, #1
 8006c92:	6193      	str	r3, [r2, #24]
 8006c94:	4b4a      	ldr	r3, [pc, #296]	@ (8006dc0 <HAL_GPIO_Init+0x2b8>)
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	60bb      	str	r3, [r7, #8]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006ca0:	4a48      	ldr	r2, [pc, #288]	@ (8006dc4 <HAL_GPIO_Init+0x2bc>)
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	089b      	lsrs	r3, r3, #2
 8006ca6:	3302      	adds	r3, #2
 8006ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	f003 0303 	and.w	r3, r3, #3
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	220f      	movs	r2, #15
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	43db      	mvns	r3, r3
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a40      	ldr	r2, [pc, #256]	@ (8006dc8 <HAL_GPIO_Init+0x2c0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d013      	beq.n	8006cf4 <HAL_GPIO_Init+0x1ec>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a3f      	ldr	r2, [pc, #252]	@ (8006dcc <HAL_GPIO_Init+0x2c4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00d      	beq.n	8006cf0 <HAL_GPIO_Init+0x1e8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a3e      	ldr	r2, [pc, #248]	@ (8006dd0 <HAL_GPIO_Init+0x2c8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d007      	beq.n	8006cec <HAL_GPIO_Init+0x1e4>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a3d      	ldr	r2, [pc, #244]	@ (8006dd4 <HAL_GPIO_Init+0x2cc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d101      	bne.n	8006ce8 <HAL_GPIO_Init+0x1e0>
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e006      	b.n	8006cf6 <HAL_GPIO_Init+0x1ee>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	e004      	b.n	8006cf6 <HAL_GPIO_Init+0x1ee>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e002      	b.n	8006cf6 <HAL_GPIO_Init+0x1ee>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <HAL_GPIO_Init+0x1ee>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf8:	f002 0203 	and.w	r2, r2, #3
 8006cfc:	0092      	lsls	r2, r2, #2
 8006cfe:	4093      	lsls	r3, r2
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006d06:	492f      	ldr	r1, [pc, #188]	@ (8006dc4 <HAL_GPIO_Init+0x2bc>)
 8006d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d006      	beq.n	8006d2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d20:	4b2d      	ldr	r3, [pc, #180]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	492c      	ldr	r1, [pc, #176]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	608b      	str	r3, [r1, #8]
 8006d2c:	e006      	b.n	8006d3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	43db      	mvns	r3, r3
 8006d36:	4928      	ldr	r1, [pc, #160]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d006      	beq.n	8006d56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006d48:	4b23      	ldr	r3, [pc, #140]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	4922      	ldr	r1, [pc, #136]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60cb      	str	r3, [r1, #12]
 8006d54:	e006      	b.n	8006d64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006d56:	4b20      	ldr	r3, [pc, #128]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	491e      	ldr	r1, [pc, #120]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d006      	beq.n	8006d7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006d70:	4b19      	ldr	r3, [pc, #100]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	4918      	ldr	r1, [pc, #96]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	604b      	str	r3, [r1, #4]
 8006d7c:	e006      	b.n	8006d8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006d7e:	4b16      	ldr	r3, [pc, #88]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	43db      	mvns	r3, r3
 8006d86:	4914      	ldr	r1, [pc, #80]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d021      	beq.n	8006ddc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006d98:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	490e      	ldr	r1, [pc, #56]	@ (8006dd8 <HAL_GPIO_Init+0x2d0>)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	600b      	str	r3, [r1, #0]
 8006da4:	e021      	b.n	8006dea <HAL_GPIO_Init+0x2e2>
 8006da6:	bf00      	nop
 8006da8:	10320000 	.word	0x10320000
 8006dac:	10310000 	.word	0x10310000
 8006db0:	10220000 	.word	0x10220000
 8006db4:	10210000 	.word	0x10210000
 8006db8:	10120000 	.word	0x10120000
 8006dbc:	10110000 	.word	0x10110000
 8006dc0:	40021000 	.word	0x40021000
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40010800 	.word	0x40010800
 8006dcc:	40010c00 	.word	0x40010c00
 8006dd0:	40011000 	.word	0x40011000
 8006dd4:	40011400 	.word	0x40011400
 8006dd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <HAL_GPIO_Init+0x304>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	43db      	mvns	r3, r3
 8006de4:	4909      	ldr	r1, [pc, #36]	@ (8006e0c <HAL_GPIO_Init+0x304>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	3301      	adds	r3, #1
 8006dee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f47f ae8e 	bne.w	8006b1c <HAL_GPIO_Init+0x14>
  }
}
 8006e00:	bf00      	nop
 8006e02:	bf00      	nop
 8006e04:	372c      	adds	r7, #44	@ 0x2c
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr
 8006e0c:	40010400 	.word	0x40010400

08006e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	887b      	ldrh	r3, [r7, #2]
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	73fb      	strb	r3, [r7, #15]
 8006e2c:	e001      	b.n	8006e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr

08006e3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	460b      	mov	r3, r1
 8006e48:	807b      	strh	r3, [r7, #2]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e4e:	787b      	ldrb	r3, [r7, #1]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e54:	887a      	ldrh	r2, [r7, #2]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006e5a:	e003      	b.n	8006e64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006e5c:	887b      	ldrh	r3, [r7, #2]
 8006e5e:	041a      	lsls	r2, r3, #16
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	611a      	str	r2, [r3, #16]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr

08006e6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e80:	887a      	ldrh	r2, [r7, #2]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4013      	ands	r3, r2
 8006e86:	041a      	lsls	r2, r3, #16
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	43d9      	mvns	r1, r3
 8006e8c:	887b      	ldrh	r3, [r7, #2]
 8006e8e:	400b      	ands	r3, r1
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	611a      	str	r2, [r3, #16]
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006eaa:	4b08      	ldr	r3, [pc, #32]	@ (8006ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d006      	beq.n	8006ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006eb6:	4a05      	ldr	r2, [pc, #20]	@ (8006ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fb f984 	bl	80021cc <HAL_GPIO_EXTI_Callback>
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	40010400 	.word	0x40010400

08006ed0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e036      	b.n	8006f50 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006eea:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006ef4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6852      	ldr	r2, [r2, #4]
 8006efe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6892      	ldr	r2, [r2, #8]
 8006f08:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006f0a:	f7fe f92f 	bl	800516c <HAL_GetTick>
 8006f0e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f10:	e011      	b.n	8006f36 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006f12:	f7fe f92b 	bl	800516c <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	f241 323c 	movw	r2, #4924	@ 0x133c
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d908      	bls.n	8006f36 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e00c      	b.n	8006f50 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e6      	bne.n	8006f12 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006f4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006f68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr
	...

08006f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e272      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8087 	beq.w	80070a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f98:	4b92      	ldr	r3, [pc, #584]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f003 030c 	and.w	r3, r3, #12
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d00c      	beq.n	8006fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f003 030c 	and.w	r3, r3, #12
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d112      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x5e>
 8006fb0:	4b8c      	ldr	r3, [pc, #560]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fbc:	d10b      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fbe:	4b89      	ldr	r3, [pc, #548]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d06c      	beq.n	80070a4 <HAL_RCC_OscConfig+0x12c>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d168      	bne.n	80070a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e24c      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fde:	d106      	bne.n	8006fee <HAL_RCC_OscConfig+0x76>
 8006fe0:	4b80      	ldr	r3, [pc, #512]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a7f      	ldr	r2, [pc, #508]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	e02e      	b.n	800704c <HAL_RCC_OscConfig+0xd4>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10c      	bne.n	8007010 <HAL_RCC_OscConfig+0x98>
 8006ff6:	4b7b      	ldr	r3, [pc, #492]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a7a      	ldr	r2, [pc, #488]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006ffc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4b78      	ldr	r3, [pc, #480]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a77      	ldr	r2, [pc, #476]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007008:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e01d      	b.n	800704c <HAL_RCC_OscConfig+0xd4>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007018:	d10c      	bne.n	8007034 <HAL_RCC_OscConfig+0xbc>
 800701a:	4b72      	ldr	r3, [pc, #456]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a71      	ldr	r2, [pc, #452]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	4b6f      	ldr	r3, [pc, #444]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a6e      	ldr	r2, [pc, #440]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 800702c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	e00b      	b.n	800704c <HAL_RCC_OscConfig+0xd4>
 8007034:	4b6b      	ldr	r3, [pc, #428]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a6a      	ldr	r2, [pc, #424]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 800703a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	4b68      	ldr	r3, [pc, #416]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a67      	ldr	r2, [pc, #412]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800704a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d013      	beq.n	800707c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007054:	f7fe f88a 	bl	800516c <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800705c:	f7fe f886 	bl	800516c <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b64      	cmp	r3, #100	@ 0x64
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e200      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800706e:	4b5d      	ldr	r3, [pc, #372]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCC_OscConfig+0xe4>
 800707a:	e014      	b.n	80070a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800707c:	f7fe f876 	bl	800516c <HAL_GetTick>
 8007080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007084:	f7fe f872 	bl	800516c <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b64      	cmp	r3, #100	@ 0x64
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e1ec      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007096:	4b53      	ldr	r3, [pc, #332]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f0      	bne.n	8007084 <HAL_RCC_OscConfig+0x10c>
 80070a2:	e000      	b.n	80070a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d063      	beq.n	800717a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070b2:	4b4c      	ldr	r3, [pc, #304]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f003 030c 	and.w	r3, r3, #12
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80070be:	4b49      	ldr	r3, [pc, #292]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f003 030c 	and.w	r3, r3, #12
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d11c      	bne.n	8007104 <HAL_RCC_OscConfig+0x18c>
 80070ca:	4b46      	ldr	r3, [pc, #280]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d116      	bne.n	8007104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070d6:	4b43      	ldr	r3, [pc, #268]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_RCC_OscConfig+0x176>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d001      	beq.n	80070ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e1c0      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ee:	4b3d      	ldr	r3, [pc, #244]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	4939      	ldr	r1, [pc, #228]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007102:	e03a      	b.n	800717a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d020      	beq.n	800714e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800710c:	4b36      	ldr	r3, [pc, #216]	@ (80071e8 <HAL_RCC_OscConfig+0x270>)
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007112:	f7fe f82b 	bl	800516c <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800711a:	f7fe f827 	bl	800516c <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e1a1      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712c:	4b2d      	ldr	r3, [pc, #180]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f0      	beq.n	800711a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007138:	4b2a      	ldr	r3, [pc, #168]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	4927      	ldr	r1, [pc, #156]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007148:	4313      	orrs	r3, r2
 800714a:	600b      	str	r3, [r1, #0]
 800714c:	e015      	b.n	800717a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800714e:	4b26      	ldr	r3, [pc, #152]	@ (80071e8 <HAL_RCC_OscConfig+0x270>)
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007154:	f7fe f80a 	bl	800516c <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800715c:	f7fe f806 	bl	800516c <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e180      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800716e:	4b1d      	ldr	r3, [pc, #116]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d03a      	beq.n	80071fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d019      	beq.n	80071c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800718e:	4b17      	ldr	r3, [pc, #92]	@ (80071ec <HAL_RCC_OscConfig+0x274>)
 8007190:	2201      	movs	r2, #1
 8007192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007194:	f7fd ffea 	bl	800516c <HAL_GetTick>
 8007198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800719a:	e008      	b.n	80071ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800719c:	f7fd ffe6 	bl	800516c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e160      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ae:	4b0d      	ldr	r3, [pc, #52]	@ (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80071b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0f0      	beq.n	800719c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80071ba:	2001      	movs	r0, #1
 80071bc:	f000 fad0 	bl	8007760 <RCC_Delay>
 80071c0:	e01c      	b.n	80071fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071c2:	4b0a      	ldr	r3, [pc, #40]	@ (80071ec <HAL_RCC_OscConfig+0x274>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071c8:	f7fd ffd0 	bl	800516c <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071ce:	e00f      	b.n	80071f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d0:	f7fd ffcc 	bl	800516c <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d908      	bls.n	80071f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e146      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
 80071e2:	bf00      	nop
 80071e4:	40021000 	.word	0x40021000
 80071e8:	42420000 	.word	0x42420000
 80071ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071f0:	4b92      	ldr	r3, [pc, #584]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e9      	bne.n	80071d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80a6 	beq.w	8007356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800720a:	2300      	movs	r3, #0
 800720c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800720e:	4b8b      	ldr	r3, [pc, #556]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10d      	bne.n	8007236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800721a:	4b88      	ldr	r3, [pc, #544]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	4a87      	ldr	r2, [pc, #540]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 8007220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007224:	61d3      	str	r3, [r2, #28]
 8007226:	4b85      	ldr	r3, [pc, #532]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800722e:	60bb      	str	r3, [r7, #8]
 8007230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007232:	2301      	movs	r3, #1
 8007234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007236:	4b82      	ldr	r3, [pc, #520]	@ (8007440 <HAL_RCC_OscConfig+0x4c8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800723e:	2b00      	cmp	r3, #0
 8007240:	d118      	bne.n	8007274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007242:	4b7f      	ldr	r3, [pc, #508]	@ (8007440 <HAL_RCC_OscConfig+0x4c8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a7e      	ldr	r2, [pc, #504]	@ (8007440 <HAL_RCC_OscConfig+0x4c8>)
 8007248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800724c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800724e:	f7fd ff8d 	bl	800516c <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007256:	f7fd ff89 	bl	800516c <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b64      	cmp	r3, #100	@ 0x64
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e103      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007268:	4b75      	ldr	r3, [pc, #468]	@ (8007440 <HAL_RCC_OscConfig+0x4c8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0f0      	beq.n	8007256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d106      	bne.n	800728a <HAL_RCC_OscConfig+0x312>
 800727c:	4b6f      	ldr	r3, [pc, #444]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	4a6e      	ldr	r2, [pc, #440]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 8007282:	f043 0301 	orr.w	r3, r3, #1
 8007286:	6213      	str	r3, [r2, #32]
 8007288:	e02d      	b.n	80072e6 <HAL_RCC_OscConfig+0x36e>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <HAL_RCC_OscConfig+0x334>
 8007292:	4b6a      	ldr	r3, [pc, #424]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	4a69      	ldr	r2, [pc, #420]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	6213      	str	r3, [r2, #32]
 800729e:	4b67      	ldr	r3, [pc, #412]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	4a66      	ldr	r2, [pc, #408]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80072a4:	f023 0304 	bic.w	r3, r3, #4
 80072a8:	6213      	str	r3, [r2, #32]
 80072aa:	e01c      	b.n	80072e6 <HAL_RCC_OscConfig+0x36e>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b05      	cmp	r3, #5
 80072b2:	d10c      	bne.n	80072ce <HAL_RCC_OscConfig+0x356>
 80072b4:	4b61      	ldr	r3, [pc, #388]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	4a60      	ldr	r2, [pc, #384]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80072ba:	f043 0304 	orr.w	r3, r3, #4
 80072be:	6213      	str	r3, [r2, #32]
 80072c0:	4b5e      	ldr	r3, [pc, #376]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	4a5d      	ldr	r2, [pc, #372]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80072c6:	f043 0301 	orr.w	r3, r3, #1
 80072ca:	6213      	str	r3, [r2, #32]
 80072cc:	e00b      	b.n	80072e6 <HAL_RCC_OscConfig+0x36e>
 80072ce:	4b5b      	ldr	r3, [pc, #364]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	4a5a      	ldr	r2, [pc, #360]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	6213      	str	r3, [r2, #32]
 80072da:	4b58      	ldr	r3, [pc, #352]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	4a57      	ldr	r2, [pc, #348]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80072e0:	f023 0304 	bic.w	r3, r3, #4
 80072e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d015      	beq.n	800731a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ee:	f7fd ff3d 	bl	800516c <HAL_GetTick>
 80072f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f4:	e00a      	b.n	800730c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f6:	f7fd ff39 	bl	800516c <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007304:	4293      	cmp	r3, r2
 8007306:	d901      	bls.n	800730c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e0b1      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800730c:	4b4b      	ldr	r3, [pc, #300]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0ee      	beq.n	80072f6 <HAL_RCC_OscConfig+0x37e>
 8007318:	e014      	b.n	8007344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800731a:	f7fd ff27 	bl	800516c <HAL_GetTick>
 800731e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007320:	e00a      	b.n	8007338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007322:	f7fd ff23 	bl	800516c <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007330:	4293      	cmp	r3, r2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e09b      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007338:	4b40      	ldr	r3, [pc, #256]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1ee      	bne.n	8007322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d105      	bne.n	8007356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800734a:	4b3c      	ldr	r3, [pc, #240]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	4a3b      	ldr	r2, [pc, #236]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 8007350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8087 	beq.w	800746e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007360:	4b36      	ldr	r3, [pc, #216]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 030c 	and.w	r3, r3, #12
 8007368:	2b08      	cmp	r3, #8
 800736a:	d061      	beq.n	8007430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d146      	bne.n	8007402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007374:	4b33      	ldr	r3, [pc, #204]	@ (8007444 <HAL_RCC_OscConfig+0x4cc>)
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800737a:	f7fd fef7 	bl	800516c <HAL_GetTick>
 800737e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007382:	f7fd fef3 	bl	800516c <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e06d      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007394:	4b29      	ldr	r3, [pc, #164]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f0      	bne.n	8007382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a8:	d108      	bne.n	80073bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80073aa:	4b24      	ldr	r3, [pc, #144]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	4921      	ldr	r1, [pc, #132]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073bc:	4b1f      	ldr	r3, [pc, #124]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a19      	ldr	r1, [r3, #32]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073cc:	430b      	orrs	r3, r1
 80073ce:	491b      	ldr	r1, [pc, #108]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007444 <HAL_RCC_OscConfig+0x4cc>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073da:	f7fd fec7 	bl	800516c <HAL_GetTick>
 80073de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e2:	f7fd fec3 	bl	800516c <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e03d      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073f4:	4b11      	ldr	r3, [pc, #68]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0f0      	beq.n	80073e2 <HAL_RCC_OscConfig+0x46a>
 8007400:	e035      	b.n	800746e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007402:	4b10      	ldr	r3, [pc, #64]	@ (8007444 <HAL_RCC_OscConfig+0x4cc>)
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007408:	f7fd feb0 	bl	800516c <HAL_GetTick>
 800740c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800740e:	e008      	b.n	8007422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007410:	f7fd feac 	bl	800516c <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e026      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007422:	4b06      	ldr	r3, [pc, #24]	@ (800743c <HAL_RCC_OscConfig+0x4c4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1f0      	bne.n	8007410 <HAL_RCC_OscConfig+0x498>
 800742e:	e01e      	b.n	800746e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d107      	bne.n	8007448 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e019      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
 800743c:	40021000 	.word	0x40021000
 8007440:	40007000 	.word	0x40007000
 8007444:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007448:	4b0b      	ldr	r3, [pc, #44]	@ (8007478 <HAL_RCC_OscConfig+0x500>)
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	429a      	cmp	r2, r3
 800745a:	d106      	bne.n	800746a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007466:	429a      	cmp	r2, r3
 8007468:	d001      	beq.n	800746e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	40021000 	.word	0x40021000

0800747c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e0d0      	b.n	8007632 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007490:	4b6a      	ldr	r3, [pc, #424]	@ (800763c <HAL_RCC_ClockConfig+0x1c0>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d910      	bls.n	80074c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800749e:	4b67      	ldr	r3, [pc, #412]	@ (800763c <HAL_RCC_ClockConfig+0x1c0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f023 0207 	bic.w	r2, r3, #7
 80074a6:	4965      	ldr	r1, [pc, #404]	@ (800763c <HAL_RCC_ClockConfig+0x1c0>)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ae:	4b63      	ldr	r3, [pc, #396]	@ (800763c <HAL_RCC_ClockConfig+0x1c0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d001      	beq.n	80074c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e0b8      	b.n	8007632 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d020      	beq.n	800750e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074d8:	4b59      	ldr	r3, [pc, #356]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	4a58      	ldr	r2, [pc, #352]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80074de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80074e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074f0:	4b53      	ldr	r3, [pc, #332]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4a52      	ldr	r2, [pc, #328]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80074f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80074fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074fc:	4b50      	ldr	r3, [pc, #320]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	494d      	ldr	r1, [pc, #308]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 800750a:	4313      	orrs	r3, r2
 800750c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d040      	beq.n	800759c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d107      	bne.n	8007532 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007522:	4b47      	ldr	r3, [pc, #284]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d115      	bne.n	800755a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e07f      	b.n	8007632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d107      	bne.n	800754a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800753a:	4b41      	ldr	r3, [pc, #260]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d109      	bne.n	800755a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e073      	b.n	8007632 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800754a:	4b3d      	ldr	r3, [pc, #244]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e06b      	b.n	8007632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800755a:	4b39      	ldr	r3, [pc, #228]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f023 0203 	bic.w	r2, r3, #3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	4936      	ldr	r1, [pc, #216]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 8007568:	4313      	orrs	r3, r2
 800756a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800756c:	f7fd fdfe 	bl	800516c <HAL_GetTick>
 8007570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007572:	e00a      	b.n	800758a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007574:	f7fd fdfa 	bl	800516c <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007582:	4293      	cmp	r3, r2
 8007584:	d901      	bls.n	800758a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e053      	b.n	8007632 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800758a:	4b2d      	ldr	r3, [pc, #180]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f003 020c 	and.w	r2, r3, #12
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	429a      	cmp	r2, r3
 800759a:	d1eb      	bne.n	8007574 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800759c:	4b27      	ldr	r3, [pc, #156]	@ (800763c <HAL_RCC_ClockConfig+0x1c0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d210      	bcs.n	80075cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075aa:	4b24      	ldr	r3, [pc, #144]	@ (800763c <HAL_RCC_ClockConfig+0x1c0>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f023 0207 	bic.w	r2, r3, #7
 80075b2:	4922      	ldr	r1, [pc, #136]	@ (800763c <HAL_RCC_ClockConfig+0x1c0>)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ba:	4b20      	ldr	r3, [pc, #128]	@ (800763c <HAL_RCC_ClockConfig+0x1c0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d001      	beq.n	80075cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e032      	b.n	8007632 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075d8:	4b19      	ldr	r3, [pc, #100]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	4916      	ldr	r1, [pc, #88]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d009      	beq.n	800760a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075f6:	4b12      	ldr	r3, [pc, #72]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	490e      	ldr	r1, [pc, #56]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 8007606:	4313      	orrs	r3, r2
 8007608:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800760a:	f000 f821 	bl	8007650 <HAL_RCC_GetSysClockFreq>
 800760e:	4602      	mov	r2, r0
 8007610:	4b0b      	ldr	r3, [pc, #44]	@ (8007640 <HAL_RCC_ClockConfig+0x1c4>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	091b      	lsrs	r3, r3, #4
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	490a      	ldr	r1, [pc, #40]	@ (8007644 <HAL_RCC_ClockConfig+0x1c8>)
 800761c:	5ccb      	ldrb	r3, [r1, r3]
 800761e:	fa22 f303 	lsr.w	r3, r2, r3
 8007622:	4a09      	ldr	r2, [pc, #36]	@ (8007648 <HAL_RCC_ClockConfig+0x1cc>)
 8007624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007626:	4b09      	ldr	r3, [pc, #36]	@ (800764c <HAL_RCC_ClockConfig+0x1d0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f7fd fd5c 	bl	80050e8 <HAL_InitTick>

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	40022000 	.word	0x40022000
 8007640:	40021000 	.word	0x40021000
 8007644:	08009c3c 	.word	0x08009c3c
 8007648:	20000038 	.word	0x20000038
 800764c:	2000003c 	.word	0x2000003c

08007650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	2300      	movs	r3, #0
 800765c:	60bb      	str	r3, [r7, #8]
 800765e:	2300      	movs	r3, #0
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	2300      	movs	r3, #0
 8007664:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800766a:	4b1e      	ldr	r3, [pc, #120]	@ (80076e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f003 030c 	and.w	r3, r3, #12
 8007676:	2b04      	cmp	r3, #4
 8007678:	d002      	beq.n	8007680 <HAL_RCC_GetSysClockFreq+0x30>
 800767a:	2b08      	cmp	r3, #8
 800767c:	d003      	beq.n	8007686 <HAL_RCC_GetSysClockFreq+0x36>
 800767e:	e027      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007680:	4b19      	ldr	r3, [pc, #100]	@ (80076e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007682:	613b      	str	r3, [r7, #16]
      break;
 8007684:	e027      	b.n	80076d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	0c9b      	lsrs	r3, r3, #18
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	4a17      	ldr	r2, [pc, #92]	@ (80076ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8007690:	5cd3      	ldrb	r3, [r2, r3]
 8007692:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d010      	beq.n	80076c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800769e:	4b11      	ldr	r3, [pc, #68]	@ (80076e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	0c5b      	lsrs	r3, r3, #17
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	4a11      	ldr	r2, [pc, #68]	@ (80076f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80076aa:	5cd3      	ldrb	r3, [r2, r3]
 80076ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a0d      	ldr	r2, [pc, #52]	@ (80076e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80076b2:	fb03 f202 	mul.w	r2, r3, r2
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	e004      	b.n	80076ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a0c      	ldr	r2, [pc, #48]	@ (80076f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80076c4:	fb02 f303 	mul.w	r3, r2, r3
 80076c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	613b      	str	r3, [r7, #16]
      break;
 80076ce:	e002      	b.n	80076d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80076d0:	4b09      	ldr	r3, [pc, #36]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80076d2:	613b      	str	r3, [r7, #16]
      break;
 80076d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076d6:	693b      	ldr	r3, [r7, #16]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40021000 	.word	0x40021000
 80076e8:	00f42400 	.word	0x00f42400
 80076ec:	08009c54 	.word	0x08009c54
 80076f0:	08009c64 	.word	0x08009c64
 80076f4:	003d0900 	.word	0x003d0900
 80076f8:	007a1200 	.word	0x007a1200

080076fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007700:	4b02      	ldr	r3, [pc, #8]	@ (800770c <HAL_RCC_GetHCLKFreq+0x10>)
 8007702:	681b      	ldr	r3, [r3, #0]
}
 8007704:	4618      	mov	r0, r3
 8007706:	46bd      	mov	sp, r7
 8007708:	bc80      	pop	{r7}
 800770a:	4770      	bx	lr
 800770c:	20000038 	.word	0x20000038

08007710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007714:	f7ff fff2 	bl	80076fc <HAL_RCC_GetHCLKFreq>
 8007718:	4602      	mov	r2, r0
 800771a:	4b05      	ldr	r3, [pc, #20]	@ (8007730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	4903      	ldr	r1, [pc, #12]	@ (8007734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007726:	5ccb      	ldrb	r3, [r1, r3]
 8007728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800772c:	4618      	mov	r0, r3
 800772e:	bd80      	pop	{r7, pc}
 8007730:	40021000 	.word	0x40021000
 8007734:	08009c4c 	.word	0x08009c4c

08007738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800773c:	f7ff ffde 	bl	80076fc <HAL_RCC_GetHCLKFreq>
 8007740:	4602      	mov	r2, r0
 8007742:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	0adb      	lsrs	r3, r3, #11
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	4903      	ldr	r1, [pc, #12]	@ (800775c <HAL_RCC_GetPCLK2Freq+0x24>)
 800774e:	5ccb      	ldrb	r3, [r1, r3]
 8007750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007754:	4618      	mov	r0, r3
 8007756:	bd80      	pop	{r7, pc}
 8007758:	40021000 	.word	0x40021000
 800775c:	08009c4c 	.word	0x08009c4c

08007760 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007768:	4b0a      	ldr	r3, [pc, #40]	@ (8007794 <RCC_Delay+0x34>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a0a      	ldr	r2, [pc, #40]	@ (8007798 <RCC_Delay+0x38>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	0a5b      	lsrs	r3, r3, #9
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	fb02 f303 	mul.w	r3, r2, r3
 800777a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800777c:	bf00      	nop
  }
  while (Delay --);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	1e5a      	subs	r2, r3, #1
 8007782:	60fa      	str	r2, [r7, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1f9      	bne.n	800777c <RCC_Delay+0x1c>
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr
 8007794:	20000038 	.word	0x20000038
 8007798:	10624dd3 	.word	0x10624dd3

0800779c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e076      	b.n	800789c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d108      	bne.n	80077c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077be:	d009      	beq.n	80077d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	61da      	str	r2, [r3, #28]
 80077c6:	e005      	b.n	80077d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fd fa86 	bl	8004d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800780a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007858:	ea42 0103 	orr.w	r1, r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007860:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	0c1a      	lsrs	r2, r3, #16
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f002 0204 	and.w	r2, r2, #4
 800787a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69da      	ldr	r2, [r3, #28]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800788a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	4613      	mov	r3, r2
 80078b2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078b4:	f7fd fc5a 	bl	800516c <HAL_GetTick>
 80078b8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d001      	beq.n	80078ce <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80078ca:	2302      	movs	r3, #2
 80078cc:	e12a      	b.n	8007b24 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <HAL_SPI_Transmit+0x36>
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e122      	b.n	8007b24 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_SPI_Transmit+0x48>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e11b      	b.n	8007b24 <HAL_SPI_Transmit+0x280>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2203      	movs	r2, #3
 80078f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	88fa      	ldrh	r2, [r7, #6]
 800790c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	88fa      	ldrh	r2, [r7, #6]
 8007912:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800793a:	d10f      	bne.n	800795c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800794a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800795a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007966:	2b40      	cmp	r3, #64	@ 0x40
 8007968:	d007      	beq.n	800797a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007978:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007982:	d152      	bne.n	8007a2a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_SPI_Transmit+0xee>
 800798c:	8b7b      	ldrh	r3, [r7, #26]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d145      	bne.n	8007a1e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007996:	881a      	ldrh	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a2:	1c9a      	adds	r2, r3, #2
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079b6:	e032      	b.n	8007a1e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d112      	bne.n	80079ec <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ca:	881a      	ldrh	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d6:	1c9a      	adds	r2, r3, #2
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80079ea:	e018      	b.n	8007a1e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079ec:	f7fd fbbe 	bl	800516c <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d803      	bhi.n	8007a04 <HAL_SPI_Transmit+0x160>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a02:	d102      	bne.n	8007a0a <HAL_SPI_Transmit+0x166>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d109      	bne.n	8007a1e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e082      	b.n	8007b24 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1c7      	bne.n	80079b8 <HAL_SPI_Transmit+0x114>
 8007a28:	e053      	b.n	8007ad2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_SPI_Transmit+0x194>
 8007a32:	8b7b      	ldrh	r3, [r7, #26]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d147      	bne.n	8007ac8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	330c      	adds	r3, #12
 8007a42:	7812      	ldrb	r2, [r2, #0]
 8007a44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a5e:	e033      	b.n	8007ac8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d113      	bne.n	8007a96 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	330c      	adds	r3, #12
 8007a78:	7812      	ldrb	r2, [r2, #0]
 8007a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a94:	e018      	b.n	8007ac8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a96:	f7fd fb69 	bl	800516c <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d803      	bhi.n	8007aae <HAL_SPI_Transmit+0x20a>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d102      	bne.n	8007ab4 <HAL_SPI_Transmit+0x210>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d109      	bne.n	8007ac8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e02d      	b.n	8007b24 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1c6      	bne.n	8007a60 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fbc4 	bl	8008264 <SPI_EndRxTxTransaction>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e000      	b.n	8007b24 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007b22:	2300      	movs	r3, #0
  }
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3720      	adds	r7, #32
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d001      	beq.n	8007b4c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e104      	b.n	8007d56 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b54:	d112      	bne.n	8007b7c <HAL_SPI_Receive+0x50>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10e      	bne.n	8007b7c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2204      	movs	r2, #4
 8007b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b66:	88fa      	ldrh	r2, [r7, #6]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f8f3 	bl	8007d5e <HAL_SPI_TransmitReceive>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	e0ec      	b.n	8007d56 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b7c:	f7fd faf6 	bl	800516c <HAL_GetTick>
 8007b80:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_SPI_Receive+0x62>
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e0e1      	b.n	8007d56 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_SPI_Receive+0x74>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e0da      	b.n	8007d56 <HAL_SPI_Receive+0x22a>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2204      	movs	r2, #4
 8007bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	88fa      	ldrh	r2, [r7, #6]
 8007bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bee:	d10f      	bne.n	8007c10 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1a:	2b40      	cmp	r3, #64	@ 0x40
 8007c1c:	d007      	beq.n	8007c2e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d170      	bne.n	8007d18 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c36:	e035      	b.n	8007ca4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d115      	bne.n	8007c72 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f103 020c 	add.w	r2, r3, #12
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c52:	7812      	ldrb	r2, [r2, #0]
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c70:	e018      	b.n	8007ca4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c72:	f7fd fa7b 	bl	800516c <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d803      	bhi.n	8007c8a <HAL_SPI_Receive+0x15e>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c88:	d102      	bne.n	8007c90 <HAL_SPI_Receive+0x164>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d109      	bne.n	8007ca4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e058      	b.n	8007d56 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1c4      	bne.n	8007c38 <HAL_SPI_Receive+0x10c>
 8007cae:	e038      	b.n	8007d22 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d113      	bne.n	8007ce6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68da      	ldr	r2, [r3, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc8:	b292      	uxth	r2, r2
 8007cca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd0:	1c9a      	adds	r2, r3, #2
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ce4:	e018      	b.n	8007d18 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ce6:	f7fd fa41 	bl	800516c <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d803      	bhi.n	8007cfe <HAL_SPI_Receive+0x1d2>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d102      	bne.n	8007d04 <HAL_SPI_Receive+0x1d8>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d109      	bne.n	8007d18 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e01e      	b.n	8007d56 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1c6      	bne.n	8007cb0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fa4a 	bl	80081c0 <SPI_EndRxTransaction>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2220      	movs	r2, #32
 8007d36:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007d54:	2300      	movs	r3, #0
  }
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b08a      	sub	sp, #40	@ 0x28
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	607a      	str	r2, [r7, #4]
 8007d6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d70:	f7fd f9fc 	bl	800516c <HAL_GetTick>
 8007d74:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d7c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007d84:	887b      	ldrh	r3, [r7, #2]
 8007d86:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d88:	7ffb      	ldrb	r3, [r7, #31]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d00c      	beq.n	8007da8 <HAL_SPI_TransmitReceive+0x4a>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d94:	d106      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d102      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x46>
 8007d9e:	7ffb      	ldrb	r3, [r7, #31]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d001      	beq.n	8007da8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007da4:	2302      	movs	r3, #2
 8007da6:	e17f      	b.n	80080a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <HAL_SPI_TransmitReceive+0x5c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <HAL_SPI_TransmitReceive+0x5c>
 8007db4:	887b      	ldrh	r3, [r7, #2]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e174      	b.n	80080a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d101      	bne.n	8007dcc <HAL_SPI_TransmitReceive+0x6e>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e16d      	b.n	80080a8 <HAL_SPI_TransmitReceive+0x34a>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d003      	beq.n	8007de8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2205      	movs	r2, #5
 8007de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	887a      	ldrh	r2, [r7, #2]
 8007df8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	887a      	ldrh	r2, [r7, #2]
 8007dfe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	887a      	ldrh	r2, [r7, #2]
 8007e0a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	887a      	ldrh	r2, [r7, #2]
 8007e10:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e28:	2b40      	cmp	r3, #64	@ 0x40
 8007e2a:	d007      	beq.n	8007e3c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e44:	d17e      	bne.n	8007f44 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <HAL_SPI_TransmitReceive+0xf6>
 8007e4e:	8afb      	ldrh	r3, [r7, #22]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d16c      	bne.n	8007f2e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e58:	881a      	ldrh	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e64:	1c9a      	adds	r2, r3, #2
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e78:	e059      	b.n	8007f2e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d11b      	bne.n	8007ec0 <HAL_SPI_TransmitReceive+0x162>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d016      	beq.n	8007ec0 <HAL_SPI_TransmitReceive+0x162>
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d113      	bne.n	8007ec0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e9c:	881a      	ldrh	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea8:	1c9a      	adds	r2, r3, #2
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d119      	bne.n	8007f02 <HAL_SPI_TransmitReceive+0x1a4>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d014      	beq.n	8007f02 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee2:	b292      	uxth	r2, r2
 8007ee4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eea:	1c9a      	adds	r2, r3, #2
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007efe:	2301      	movs	r3, #1
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f02:	f7fd f933 	bl	800516c <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d80d      	bhi.n	8007f2e <HAL_SPI_TransmitReceive+0x1d0>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f18:	d009      	beq.n	8007f2e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e0bc      	b.n	80080a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1a0      	bne.n	8007e7a <HAL_SPI_TransmitReceive+0x11c>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d19b      	bne.n	8007e7a <HAL_SPI_TransmitReceive+0x11c>
 8007f42:	e082      	b.n	800804a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <HAL_SPI_TransmitReceive+0x1f4>
 8007f4c:	8afb      	ldrh	r3, [r7, #22]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d171      	bne.n	8008036 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	7812      	ldrb	r2, [r2, #0]
 8007f5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	3b01      	subs	r3, #1
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f78:	e05d      	b.n	8008036 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d11c      	bne.n	8007fc2 <HAL_SPI_TransmitReceive+0x264>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d017      	beq.n	8007fc2 <HAL_SPI_TransmitReceive+0x264>
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d114      	bne.n	8007fc2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	7812      	ldrb	r2, [r2, #0]
 8007fa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d119      	bne.n	8008004 <HAL_SPI_TransmitReceive+0x2a6>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d014      	beq.n	8008004 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008000:	2301      	movs	r3, #1
 8008002:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008004:	f7fd f8b2 	bl	800516c <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008010:	429a      	cmp	r2, r3
 8008012:	d803      	bhi.n	800801c <HAL_SPI_TransmitReceive+0x2be>
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801a:	d102      	bne.n	8008022 <HAL_SPI_TransmitReceive+0x2c4>
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	2b00      	cmp	r3, #0
 8008020:	d109      	bne.n	8008036 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e038      	b.n	80080a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800803a:	b29b      	uxth	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d19c      	bne.n	8007f7a <HAL_SPI_TransmitReceive+0x21c>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008044:	b29b      	uxth	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d197      	bne.n	8007f7a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800804a:	6a3a      	ldr	r2, [r7, #32]
 800804c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 f908 	bl	8008264 <SPI_EndRxTxTransaction>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d008      	beq.n	800806c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e01d      	b.n	80080a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008074:	2300      	movs	r3, #0
 8008076:	613b      	str	r3, [r7, #16]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	613b      	str	r3, [r7, #16]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80080a6:	2300      	movs	r3, #0
  }
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3728      	adds	r7, #40	@ 0x28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	4613      	mov	r3, r2
 80080be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080c0:	f7fd f854 	bl	800516c <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	4413      	add	r3, r2
 80080ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080d0:	f7fd f84c 	bl	800516c <HAL_GetTick>
 80080d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080d6:	4b39      	ldr	r3, [pc, #228]	@ (80081bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	015b      	lsls	r3, r3, #5
 80080dc:	0d1b      	lsrs	r3, r3, #20
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	fb02 f303 	mul.w	r3, r2, r3
 80080e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080e6:	e054      	b.n	8008192 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ee:	d050      	beq.n	8008192 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080f0:	f7fd f83c 	bl	800516c <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d902      	bls.n	8008106 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d13d      	bne.n	8008182 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800811e:	d111      	bne.n	8008144 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008128:	d004      	beq.n	8008134 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008132:	d107      	bne.n	8008144 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800814c:	d10f      	bne.n	800816e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800816c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e017      	b.n	80081b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	3b01      	subs	r3, #1
 8008190:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4013      	ands	r3, r2
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	429a      	cmp	r2, r3
 80081a0:	bf0c      	ite	eq
 80081a2:	2301      	moveq	r3, #1
 80081a4:	2300      	movne	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d19b      	bne.n	80080e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000038 	.word	0x20000038

080081c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081d4:	d111      	bne.n	80081fa <SPI_EndRxTransaction+0x3a>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081de:	d004      	beq.n	80081ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081e8:	d107      	bne.n	80081fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081f8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008202:	d117      	bne.n	8008234 <SPI_EndRxTransaction+0x74>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800820c:	d112      	bne.n	8008234 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2200      	movs	r2, #0
 8008216:	2101      	movs	r1, #1
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7ff ff49 	bl	80080b0 <SPI_WaitFlagStateUntilTimeout>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01a      	beq.n	800825a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008228:	f043 0220 	orr.w	r2, r3, #32
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e013      	b.n	800825c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2200      	movs	r2, #0
 800823c:	2180      	movs	r1, #128	@ 0x80
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff ff36 	bl	80080b0 <SPI_WaitFlagStateUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800824e:	f043 0220 	orr.w	r2, r3, #32
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e000      	b.n	800825c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af02      	add	r7, sp, #8
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2201      	movs	r2, #1
 8008278:	2102      	movs	r1, #2
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff ff18 	bl	80080b0 <SPI_WaitFlagStateUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828a:	f043 0220 	orr.w	r2, r3, #32
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e013      	b.n	80082be <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2200      	movs	r2, #0
 800829e:	2180      	movs	r1, #128	@ 0x80
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7ff ff05 	bl	80080b0 <SPI_WaitFlagStateUntilTimeout>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082b0:	f043 0220 	orr.w	r2, r3, #32
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e000      	b.n	80082be <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e041      	b.n	800835c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7fc fd8d 	bl	8004e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2202      	movs	r2, #2
 80082f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3304      	adds	r3, #4
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f000 fa5b 	bl	80087c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	d001      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e03a      	b.n	80083f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0201 	orr.w	r2, r2, #1
 8008392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a18      	ldr	r2, [pc, #96]	@ (80083fc <HAL_TIM_Base_Start_IT+0x98>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00e      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0x58>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a6:	d009      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0x58>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a14      	ldr	r2, [pc, #80]	@ (8008400 <HAL_TIM_Base_Start_IT+0x9c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d004      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0x58>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a13      	ldr	r2, [pc, #76]	@ (8008404 <HAL_TIM_Base_Start_IT+0xa0>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d111      	bne.n	80083e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b06      	cmp	r3, #6
 80083cc:	d010      	beq.n	80083f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0201 	orr.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083de:	e007      	b.n	80083f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr
 80083fc:	40012c00 	.word	0x40012c00
 8008400:	40000400 	.word	0x40000400
 8008404:	40000800 	.word	0x40000800

08008408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f003 0302 	and.w	r3, r3, #2
 8008426:	2b00      	cmp	r3, #0
 8008428:	d020      	beq.n	800846c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01b      	beq.n	800846c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f06f 0202 	mvn.w	r2, #2
 800843c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	f003 0303 	and.w	r3, r3, #3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f998 	bl	8008788 <HAL_TIM_IC_CaptureCallback>
 8008458:	e005      	b.n	8008466 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f98b 	bl	8008776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f99a 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b00      	cmp	r3, #0
 8008474:	d020      	beq.n	80084b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01b      	beq.n	80084b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0204 	mvn.w	r2, #4
 8008488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2202      	movs	r2, #2
 800848e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f972 	bl	8008788 <HAL_TIM_IC_CaptureCallback>
 80084a4:	e005      	b.n	80084b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f965 	bl	8008776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f974 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f003 0308 	and.w	r3, r3, #8
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d020      	beq.n	8008504 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01b      	beq.n	8008504 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0208 	mvn.w	r2, #8
 80084d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2204      	movs	r2, #4
 80084da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f94c 	bl	8008788 <HAL_TIM_IC_CaptureCallback>
 80084f0:	e005      	b.n	80084fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f93f 	bl	8008776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f94e 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	d020      	beq.n	8008550 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f003 0310 	and.w	r3, r3, #16
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01b      	beq.n	8008550 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0210 	mvn.w	r2, #16
 8008520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2208      	movs	r2, #8
 8008526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f926 	bl	8008788 <HAL_TIM_IC_CaptureCallback>
 800853c:	e005      	b.n	800854a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f919 	bl	8008776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f928 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00c      	beq.n	8008574 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	d007      	beq.n	8008574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f06f 0201 	mvn.w	r2, #1
 800856c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7f9 fe8c 	bl	800228c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00c      	beq.n	8008598 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fa7f 	bl	8008a96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d007      	beq.n	80085bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8f8 	bl	80087ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f003 0320 	and.w	r3, r3, #32
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00c      	beq.n	80085e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f06f 0220 	mvn.w	r2, #32
 80085d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fa52 	bl	8008a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085e0:	bf00      	nop
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_TIM_ConfigClockSource+0x1c>
 8008600:	2302      	movs	r3, #2
 8008602:	e0b4      	b.n	800876e <HAL_TIM_ConfigClockSource+0x186>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800862a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800863c:	d03e      	beq.n	80086bc <HAL_TIM_ConfigClockSource+0xd4>
 800863e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008642:	f200 8087 	bhi.w	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 8008646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864a:	f000 8086 	beq.w	800875a <HAL_TIM_ConfigClockSource+0x172>
 800864e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008652:	d87f      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 8008654:	2b70      	cmp	r3, #112	@ 0x70
 8008656:	d01a      	beq.n	800868e <HAL_TIM_ConfigClockSource+0xa6>
 8008658:	2b70      	cmp	r3, #112	@ 0x70
 800865a:	d87b      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 800865c:	2b60      	cmp	r3, #96	@ 0x60
 800865e:	d050      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x11a>
 8008660:	2b60      	cmp	r3, #96	@ 0x60
 8008662:	d877      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 8008664:	2b50      	cmp	r3, #80	@ 0x50
 8008666:	d03c      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0xfa>
 8008668:	2b50      	cmp	r3, #80	@ 0x50
 800866a:	d873      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 800866c:	2b40      	cmp	r3, #64	@ 0x40
 800866e:	d058      	beq.n	8008722 <HAL_TIM_ConfigClockSource+0x13a>
 8008670:	2b40      	cmp	r3, #64	@ 0x40
 8008672:	d86f      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 8008674:	2b30      	cmp	r3, #48	@ 0x30
 8008676:	d064      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x15a>
 8008678:	2b30      	cmp	r3, #48	@ 0x30
 800867a:	d86b      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 800867c:	2b20      	cmp	r3, #32
 800867e:	d060      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x15a>
 8008680:	2b20      	cmp	r3, #32
 8008682:	d867      	bhi.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d05c      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x15a>
 8008688:	2b10      	cmp	r3, #16
 800868a:	d05a      	beq.n	8008742 <HAL_TIM_ConfigClockSource+0x15a>
 800868c:	e062      	b.n	8008754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800869e:	f000 f974 	bl	800898a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	609a      	str	r2, [r3, #8]
      break;
 80086ba:	e04f      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086cc:	f000 f95d 	bl	800898a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689a      	ldr	r2, [r3, #8]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086de:	609a      	str	r2, [r3, #8]
      break;
 80086e0:	e03c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ee:	461a      	mov	r2, r3
 80086f0:	f000 f8d4 	bl	800889c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2150      	movs	r1, #80	@ 0x50
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f92b 	bl	8008956 <TIM_ITRx_SetConfig>
      break;
 8008700:	e02c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800870e:	461a      	mov	r2, r3
 8008710:	f000 f8f2 	bl	80088f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2160      	movs	r1, #96	@ 0x60
 800871a:	4618      	mov	r0, r3
 800871c:	f000 f91b 	bl	8008956 <TIM_ITRx_SetConfig>
      break;
 8008720:	e01c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800872e:	461a      	mov	r2, r3
 8008730:	f000 f8b4 	bl	800889c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2140      	movs	r1, #64	@ 0x40
 800873a:	4618      	mov	r0, r3
 800873c:	f000 f90b 	bl	8008956 <TIM_ITRx_SetConfig>
      break;
 8008740:	e00c      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4619      	mov	r1, r3
 800874c:	4610      	mov	r0, r2
 800874e:	f000 f902 	bl	8008956 <TIM_ITRx_SetConfig>
      break;
 8008752:	e003      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
      break;
 8008758:	e000      	b.n	800875c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800875a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr

08008788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr

0800879a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr
	...

080087c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a2f      	ldr	r2, [pc, #188]	@ (8008890 <TIM_Base_SetConfig+0xd0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00b      	beq.n	80087f0 <TIM_Base_SetConfig+0x30>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087de:	d007      	beq.n	80087f0 <TIM_Base_SetConfig+0x30>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a2c      	ldr	r2, [pc, #176]	@ (8008894 <TIM_Base_SetConfig+0xd4>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d003      	beq.n	80087f0 <TIM_Base_SetConfig+0x30>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a2b      	ldr	r2, [pc, #172]	@ (8008898 <TIM_Base_SetConfig+0xd8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d108      	bne.n	8008802 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a22      	ldr	r2, [pc, #136]	@ (8008890 <TIM_Base_SetConfig+0xd0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00b      	beq.n	8008822 <TIM_Base_SetConfig+0x62>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008810:	d007      	beq.n	8008822 <TIM_Base_SetConfig+0x62>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a1f      	ldr	r2, [pc, #124]	@ (8008894 <TIM_Base_SetConfig+0xd4>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_Base_SetConfig+0x62>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1e      	ldr	r2, [pc, #120]	@ (8008898 <TIM_Base_SetConfig+0xd8>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d108      	bne.n	8008834 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a0d      	ldr	r2, [pc, #52]	@ (8008890 <TIM_Base_SetConfig+0xd0>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d103      	bne.n	8008868 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f023 0201 	bic.w	r2, r3, #1
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	611a      	str	r2, [r3, #16]
  }
}
 8008886:	bf00      	nop
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	bc80      	pop	{r7}
 800888e:	4770      	bx	lr
 8008890:	40012c00 	.word	0x40012c00
 8008894:	40000400 	.word	0x40000400
 8008898:	40000800 	.word	0x40000800

0800889c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	f023 0201 	bic.w	r2, r3, #1
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	011b      	lsls	r3, r3, #4
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f023 030a 	bic.w	r3, r3, #10
 80088d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	621a      	str	r2, [r3, #32]
}
 80088ee:	bf00      	nop
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr

080088f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	f023 0210 	bic.w	r2, r3, #16
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	031b      	lsls	r3, r3, #12
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	4313      	orrs	r3, r2
 800892c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008934:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	011b      	lsls	r3, r3, #4
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	4313      	orrs	r3, r2
 800893e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	621a      	str	r2, [r3, #32]
}
 800894c:	bf00      	nop
 800894e:	371c      	adds	r7, #28
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr

08008956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008956:	b480      	push	{r7}
 8008958:	b085      	sub	sp, #20
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800896c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4313      	orrs	r3, r2
 8008974:	f043 0307 	orr.w	r3, r3, #7
 8008978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	609a      	str	r2, [r3, #8]
}
 8008980:	bf00      	nop
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	bc80      	pop	{r7}
 8008988:	4770      	bx	lr

0800898a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800898a:	b480      	push	{r7}
 800898c:	b087      	sub	sp, #28
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
 8008996:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	021a      	lsls	r2, r3, #8
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	431a      	orrs	r2, r3
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	609a      	str	r2, [r3, #8]
}
 80089be:	bf00      	nop
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d101      	bne.n	80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089dc:	2302      	movs	r3, #2
 80089de:	e046      	b.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a16      	ldr	r2, [pc, #88]	@ (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00e      	beq.n	8008a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a2c:	d009      	beq.n	8008a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a12      	ldr	r2, [pc, #72]	@ (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d004      	beq.n	8008a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a10      	ldr	r2, [pc, #64]	@ (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d10c      	bne.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	40000400 	.word	0x40000400
 8008a80:	40000800 	.word	0x40000800

08008a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bc80      	pop	{r7}
 8008a94:	4770      	bx	lr

08008a96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a9e:	bf00      	nop
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e042      	b.n	8008b40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d106      	bne.n	8008ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7fc f9dc 	bl	8004e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2224      	movs	r2, #36	@ 0x24
 8008ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 ff79 	bl	80099e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	691a      	ldr	r2, [r3, #16]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	695a      	ldr	r2, [r3, #20]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08a      	sub	sp, #40	@ 0x28
 8008b4c:	af02      	add	r7, sp, #8
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	4613      	mov	r3, r2
 8008b56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	d175      	bne.n	8008c54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <HAL_UART_Transmit+0x2c>
 8008b6e:	88fb      	ldrh	r3, [r7, #6]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e06e      	b.n	8008c56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2221      	movs	r2, #33	@ 0x21
 8008b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b86:	f7fc faf1 	bl	800516c <HAL_GetTick>
 8008b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	88fa      	ldrh	r2, [r7, #6]
 8008b96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ba0:	d108      	bne.n	8008bb4 <HAL_UART_Transmit+0x6c>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	e003      	b.n	8008bbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bbc:	e02e      	b.n	8008c1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2180      	movs	r1, #128	@ 0x80
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 fc55 	bl	8009478 <UART_WaitOnFlagUntilTimeout>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e03a      	b.n	8008c56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10b      	bne.n	8008bfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	3302      	adds	r3, #2
 8008bfa:	61bb      	str	r3, [r7, #24]
 8008bfc:	e007      	b.n	8008c0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1cb      	bne.n	8008bbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2140      	movs	r1, #64	@ 0x40
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 fc21 	bl	8009478 <UART_WaitOnFlagUntilTimeout>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e006      	b.n	8008c56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	e000      	b.n	8008c56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008c54:	2302      	movs	r3, #2
  }
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3720      	adds	r7, #32
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b08c      	sub	sp, #48	@ 0x30
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	d146      	bne.n	8008d06 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008c7e:	88fb      	ldrh	r3, [r7, #6]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e03f      	b.n	8008d08 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008c94:	88fb      	ldrh	r3, [r7, #6]
 8008c96:	461a      	mov	r2, r3
 8008c98:	68b9      	ldr	r1, [r7, #8]
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fc46 	bl	800952c <UART_Start_Receive_DMA>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d125      	bne.n	8008cfa <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	330c      	adds	r3, #12
 8008cca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	e853 3f00 	ldrex	r3, [r3]
 8008cd2:	617b      	str	r3, [r7, #20]
   return(result);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f043 0310 	orr.w	r3, r3, #16
 8008cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ce4:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ce6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	6a39      	ldr	r1, [r7, #32]
 8008cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cec:	e841 2300 	strex	r3, r2, [r1]
 8008cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e5      	bne.n	8008cc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8008cf8:	e002      	b.n	8008d00 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8008d00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d04:	e000      	b.n	8008d08 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8008d06:	2302      	movs	r3, #2
  }
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3730      	adds	r7, #48	@ 0x30
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b0ba      	sub	sp, #232	@ 0xe8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10f      	bne.n	8008d76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d009      	beq.n	8008d76 <HAL_UART_IRQHandler+0x66>
 8008d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d66:	f003 0320 	and.w	r3, r3, #32
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fd7a 	bl	8009868 <UART_Receive_IT>
      return;
 8008d74:	e25b      	b.n	800922e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 80de 	beq.w	8008f3c <HAL_UART_IRQHandler+0x22c>
 8008d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d84:	f003 0301 	and.w	r3, r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 80d1 	beq.w	8008f3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00b      	beq.n	8008dbe <HAL_UART_IRQHandler+0xae>
 8008da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008db6:	f043 0201 	orr.w	r2, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dc2:	f003 0304 	and.w	r3, r3, #4
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00b      	beq.n	8008de2 <HAL_UART_IRQHandler+0xd2>
 8008dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d005      	beq.n	8008de2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dda:	f043 0202 	orr.w	r2, r3, #2
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00b      	beq.n	8008e06 <HAL_UART_IRQHandler+0xf6>
 8008dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d005      	beq.n	8008e06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dfe:	f043 0204 	orr.w	r2, r3, #4
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e0a:	f003 0308 	and.w	r3, r3, #8
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d011      	beq.n	8008e36 <HAL_UART_IRQHandler+0x126>
 8008e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d105      	bne.n	8008e2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d005      	beq.n	8008e36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e2e:	f043 0208 	orr.w	r2, r3, #8
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f000 81f2 	beq.w	8009224 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e44:	f003 0320 	and.w	r3, r3, #32
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d008      	beq.n	8008e5e <HAL_UART_IRQHandler+0x14e>
 8008e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e50:	f003 0320 	and.w	r3, r3, #32
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fd05 	bl	8009868 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	bf14      	ite	ne
 8008e6c:	2301      	movne	r3, #1
 8008e6e:	2300      	moveq	r3, #0
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7a:	f003 0308 	and.w	r3, r3, #8
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d103      	bne.n	8008e8a <HAL_UART_IRQHandler+0x17a>
 8008e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d04f      	beq.n	8008f2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fc0f 	bl	80096ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d041      	beq.n	8008f22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3314      	adds	r3, #20
 8008ea4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008eca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ece:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1d9      	bne.n	8008e9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d013      	beq.n	8008f1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80090f0 <HAL_UART_IRQHandler+0x3e0>)
 8008ef8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fd fa56 	bl	80063b0 <HAL_DMA_Abort_IT>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d016      	beq.n	8008f38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008f14:	4610      	mov	r0, r2
 8008f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f18:	e00e      	b.n	8008f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f9a5 	bl	800926a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f20:	e00a      	b.n	8008f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f9a1 	bl	800926a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f28:	e006      	b.n	8008f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f99d 	bl	800926a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008f36:	e175      	b.n	8009224 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f38:	bf00      	nop
    return;
 8008f3a:	e173      	b.n	8009224 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	f040 814f 	bne.w	80091e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4a:	f003 0310 	and.w	r3, r3, #16
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 8148 	beq.w	80091e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f58:	f003 0310 	and.w	r3, r3, #16
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 8141 	beq.w	80091e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f62:	2300      	movs	r3, #0
 8008f64:	60bb      	str	r3, [r7, #8]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	60bb      	str	r3, [r7, #8]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	60bb      	str	r3, [r7, #8]
 8008f76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80b6 	beq.w	80090f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 8145 	beq.w	8009228 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	f080 813e 	bcs.w	8009228 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	f000 8088 	beq.w	80090d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	330c      	adds	r3, #12
 8008fc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008fda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	330c      	adds	r3, #12
 8008fe8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008fec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ff0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ff8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1d9      	bne.n	8008fc0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3314      	adds	r3, #20
 8009012:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800901c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800901e:	f023 0301 	bic.w	r3, r3, #1
 8009022:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3314      	adds	r3, #20
 800902c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009030:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009034:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009036:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009038:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009042:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e1      	bne.n	800900c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3314      	adds	r3, #20
 800904e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800905a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800905e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3314      	adds	r3, #20
 8009068:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800906c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800906e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009072:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800907a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e3      	bne.n	8009048 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2220      	movs	r2, #32
 8009084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	330c      	adds	r3, #12
 8009094:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009098:	e853 3f00 	ldrex	r3, [r3]
 800909c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800909e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090a0:	f023 0310 	bic.w	r3, r3, #16
 80090a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	330c      	adds	r3, #12
 80090ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80090b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80090b4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e3      	bne.n	800908e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fd f934 	bl	8006338 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090de:	b29b      	uxth	r3, r3
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7f8 feec 	bl	8001ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090ec:	e09c      	b.n	8009228 <HAL_UART_IRQHandler+0x518>
 80090ee:	bf00      	nop
 80090f0:	08009773 	.word	0x08009773
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 808e 	beq.w	800922c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 8089 	beq.w	800922c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	330c      	adds	r3, #12
 8009120:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800912a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800912c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800913e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009140:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800914c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e3      	bne.n	800911a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3314      	adds	r3, #20
 8009158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	623b      	str	r3, [r7, #32]
   return(result);
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	f023 0301 	bic.w	r3, r3, #1
 8009168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3314      	adds	r3, #20
 8009172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009176:	633a      	str	r2, [r7, #48]	@ 0x30
 8009178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800917c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e3      	bne.n	8009152 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2220      	movs	r2, #32
 800918e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	330c      	adds	r3, #12
 800919e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	e853 3f00 	ldrex	r3, [r3]
 80091a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0310 	bic.w	r3, r3, #16
 80091ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	330c      	adds	r3, #12
 80091b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80091bc:	61fa      	str	r2, [r7, #28]
 80091be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	69b9      	ldr	r1, [r7, #24]
 80091c2:	69fa      	ldr	r2, [r7, #28]
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	617b      	str	r3, [r7, #20]
   return(result);
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e3      	bne.n	8009198 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7f8 fe71 	bl	8001ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091e2:	e023      	b.n	800922c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80091e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <HAL_UART_IRQHandler+0x4f4>
 80091f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 facc 	bl	800979a <UART_Transmit_IT>
    return;
 8009202:	e014      	b.n	800922e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00e      	beq.n	800922e <HAL_UART_IRQHandler+0x51e>
 8009210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009218:	2b00      	cmp	r3, #0
 800921a:	d008      	beq.n	800922e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fb0b 	bl	8009838 <UART_EndTransmit_IT>
    return;
 8009222:	e004      	b.n	800922e <HAL_UART_IRQHandler+0x51e>
    return;
 8009224:	bf00      	nop
 8009226:	e002      	b.n	800922e <HAL_UART_IRQHandler+0x51e>
      return;
 8009228:	bf00      	nop
 800922a:	e000      	b.n	800922e <HAL_UART_IRQHandler+0x51e>
      return;
 800922c:	bf00      	nop
  }
}
 800922e:	37e8      	adds	r7, #232	@ 0xe8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	bc80      	pop	{r7}
 8009244:	4770      	bx	lr

08009246 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr

08009258 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	bc80      	pop	{r7}
 8009268:	4770      	bx	lr

0800926a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	bc80      	pop	{r7}
 800927a:	4770      	bx	lr

0800927c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b09c      	sub	sp, #112	@ 0x70
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009288:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0320 	and.w	r3, r3, #32
 8009294:	2b00      	cmp	r3, #0
 8009296:	d172      	bne.n	800937e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800929a:	2200      	movs	r2, #0
 800929c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800929e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	330c      	adds	r3, #12
 80092a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a8:	e853 3f00 	ldrex	r3, [r3]
 80092ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	330c      	adds	r3, #12
 80092bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80092be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80092c0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092c6:	e841 2300 	strex	r3, r2, [r1]
 80092ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1e5      	bne.n	800929e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3314      	adds	r3, #20
 80092d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092dc:	e853 3f00 	ldrex	r3, [r3]
 80092e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e4:	f023 0301 	bic.w	r3, r3, #1
 80092e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80092ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3314      	adds	r3, #20
 80092f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80092f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80092f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092fa:	e841 2300 	strex	r3, r2, [r1]
 80092fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e5      	bne.n	80092d2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3314      	adds	r3, #20
 800930c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	623b      	str	r3, [r7, #32]
   return(result);
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800931c:	663b      	str	r3, [r7, #96]	@ 0x60
 800931e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3314      	adds	r3, #20
 8009324:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009326:	633a      	str	r2, [r7, #48]	@ 0x30
 8009328:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800932c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e5      	bne.n	8009306 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800933a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800933c:	2220      	movs	r2, #32
 800933e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009346:	2b01      	cmp	r3, #1
 8009348:	d119      	bne.n	800937e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	330c      	adds	r3, #12
 8009350:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	60fb      	str	r3, [r7, #12]
   return(result);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f023 0310 	bic.w	r3, r3, #16
 8009360:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	330c      	adds	r3, #12
 8009368:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800936a:	61fa      	str	r2, [r7, #28]
 800936c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	69b9      	ldr	r1, [r7, #24]
 8009370:	69fa      	ldr	r2, [r7, #28]
 8009372:	e841 2300 	strex	r3, r2, [r1]
 8009376:	617b      	str	r3, [r7, #20]
   return(result);
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e5      	bne.n	800934a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800937e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009380:	2200      	movs	r2, #0
 8009382:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009388:	2b01      	cmp	r3, #1
 800938a:	d106      	bne.n	800939a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800938c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800938e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009390:	4619      	mov	r1, r3
 8009392:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009394:	f7f8 fd96 	bl	8001ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009398:	e002      	b.n	80093a0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800939a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800939c:	f7ff ff53 	bl	8009246 <HAL_UART_RxCpltCallback>
}
 80093a0:	bf00      	nop
 80093a2:	3770      	adds	r7, #112	@ 0x70
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d108      	bne.n	80093d6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093c8:	085b      	lsrs	r3, r3, #1
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	4619      	mov	r1, r3
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f7f8 fd78 	bl	8001ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093d4:	e002      	b.n	80093dc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f7ff ff3e 	bl	8009258 <HAL_UART_RxHalfCpltCallback>
}
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009400:	2b00      	cmp	r3, #0
 8009402:	bf14      	ite	ne
 8009404:	2301      	movne	r3, #1
 8009406:	2300      	moveq	r3, #0
 8009408:	b2db      	uxtb	r3, r3
 800940a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b21      	cmp	r3, #33	@ 0x21
 8009416:	d108      	bne.n	800942a <UART_DMAError+0x46>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2200      	movs	r2, #0
 8009422:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009424:	68b8      	ldr	r0, [r7, #8]
 8009426:	f000 f91b 	bl	8009660 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	bf14      	ite	ne
 8009438:	2301      	movne	r3, #1
 800943a:	2300      	moveq	r3, #0
 800943c:	b2db      	uxtb	r3, r3
 800943e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b22      	cmp	r3, #34	@ 0x22
 800944a:	d108      	bne.n	800945e <UART_DMAError+0x7a>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d005      	beq.n	800945e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2200      	movs	r2, #0
 8009456:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009458:	68b8      	ldr	r0, [r7, #8]
 800945a:	f000 f928 	bl	80096ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009462:	f043 0210 	orr.w	r2, r3, #16
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800946a:	68b8      	ldr	r0, [r7, #8]
 800946c:	f7ff fefd 	bl	800926a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009470:	bf00      	nop
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	603b      	str	r3, [r7, #0]
 8009484:	4613      	mov	r3, r2
 8009486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009488:	e03b      	b.n	8009502 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009490:	d037      	beq.n	8009502 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009492:	f7fb fe6b 	bl	800516c <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	6a3a      	ldr	r2, [r7, #32]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d302      	bcc.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e03a      	b.n	8009522 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d023      	beq.n	8009502 <UART_WaitOnFlagUntilTimeout+0x8a>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b80      	cmp	r3, #128	@ 0x80
 80094be:	d020      	beq.n	8009502 <UART_WaitOnFlagUntilTimeout+0x8a>
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b40      	cmp	r3, #64	@ 0x40
 80094c4:	d01d      	beq.n	8009502 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0308 	and.w	r3, r3, #8
 80094d0:	2b08      	cmp	r3, #8
 80094d2:	d116      	bne.n	8009502 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80094d4:	2300      	movs	r3, #0
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 f8df 	bl	80096ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2208      	movs	r2, #8
 80094f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e00f      	b.n	8009522 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	4013      	ands	r3, r2
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	429a      	cmp	r2, r3
 8009510:	bf0c      	ite	eq
 8009512:	2301      	moveq	r3, #1
 8009514:	2300      	movne	r3, #0
 8009516:	b2db      	uxtb	r3, r3
 8009518:	461a      	mov	r2, r3
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	429a      	cmp	r2, r3
 800951e:	d0b4      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b098      	sub	sp, #96	@ 0x60
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	4613      	mov	r3, r2
 8009538:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	88fa      	ldrh	r2, [r7, #6]
 8009544:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2222      	movs	r2, #34	@ 0x22
 8009550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009558:	4a3e      	ldr	r2, [pc, #248]	@ (8009654 <UART_Start_Receive_DMA+0x128>)
 800955a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009560:	4a3d      	ldr	r2, [pc, #244]	@ (8009658 <UART_Start_Receive_DMA+0x12c>)
 8009562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009568:	4a3c      	ldr	r2, [pc, #240]	@ (800965c <UART_Start_Receive_DMA+0x130>)
 800956a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009570:	2200      	movs	r2, #0
 8009572:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009574:	f107 0308 	add.w	r3, r7, #8
 8009578:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3304      	adds	r3, #4
 8009584:	4619      	mov	r1, r3
 8009586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	88fb      	ldrh	r3, [r7, #6]
 800958c:	f7fc fe74 	bl	8006278 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009590:	2300      	movs	r3, #0
 8009592:	613b      	str	r3, [r7, #16]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	613b      	str	r3, [r7, #16]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	613b      	str	r3, [r7, #16]
 80095a4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d019      	beq.n	80095e2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	330c      	adds	r3, #12
 80095b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	330c      	adds	r3, #12
 80095cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095ce:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80095d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80095d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095d6:	e841 2300 	strex	r3, r2, [r1]
 80095da:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80095dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e5      	bne.n	80095ae <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3314      	adds	r3, #20
 80095e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ec:	e853 3f00 	ldrex	r3, [r3]
 80095f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f4:	f043 0301 	orr.w	r3, r3, #1
 80095f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3314      	adds	r3, #20
 8009600:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009602:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009604:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009606:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800960a:	e841 2300 	strex	r3, r2, [r1]
 800960e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1e5      	bne.n	80095e2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3314      	adds	r3, #20
 800961c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	e853 3f00 	ldrex	r3, [r3]
 8009624:	617b      	str	r3, [r7, #20]
   return(result);
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800962c:	653b      	str	r3, [r7, #80]	@ 0x50
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3314      	adds	r3, #20
 8009634:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009636:	627a      	str	r2, [r7, #36]	@ 0x24
 8009638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	6a39      	ldr	r1, [r7, #32]
 800963c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	61fb      	str	r3, [r7, #28]
   return(result);
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e5      	bne.n	8009616 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3760      	adds	r7, #96	@ 0x60
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	0800927d 	.word	0x0800927d
 8009658:	080093a9 	.word	0x080093a9
 800965c:	080093e5 	.word	0x080093e5

08009660 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009660:	b480      	push	{r7}
 8009662:	b089      	sub	sp, #36	@ 0x24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	330c      	adds	r3, #12
 800966e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	e853 3f00 	ldrex	r3, [r3]
 8009676:	60bb      	str	r3, [r7, #8]
   return(result);
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800967e:	61fb      	str	r3, [r7, #28]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	330c      	adds	r3, #12
 8009686:	69fa      	ldr	r2, [r7, #28]
 8009688:	61ba      	str	r2, [r7, #24]
 800968a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968c:	6979      	ldr	r1, [r7, #20]
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	613b      	str	r3, [r7, #16]
   return(result);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e5      	bne.n	8009668 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2220      	movs	r2, #32
 80096a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80096a4:	bf00      	nop
 80096a6:	3724      	adds	r7, #36	@ 0x24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bc80      	pop	{r7}
 80096ac:	4770      	bx	lr

080096ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b095      	sub	sp, #84	@ 0x54
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	330c      	adds	r3, #12
 80096bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	330c      	adds	r3, #12
 80096d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80096d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e5      	bne.n	80096b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3314      	adds	r3, #20
 80096f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	f023 0301 	bic.w	r3, r3, #1
 8009700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3314      	adds	r3, #20
 8009708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800970a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800970c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1e5      	bne.n	80096ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009722:	2b01      	cmp	r3, #1
 8009724:	d119      	bne.n	800975a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	330c      	adds	r3, #12
 800972c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	60bb      	str	r3, [r7, #8]
   return(result);
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	f023 0310 	bic.w	r3, r3, #16
 800973c:	647b      	str	r3, [r7, #68]	@ 0x44
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	330c      	adds	r3, #12
 8009744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009746:	61ba      	str	r2, [r7, #24]
 8009748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	6979      	ldr	r1, [r7, #20]
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	613b      	str	r3, [r7, #16]
   return(result);
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e5      	bne.n	8009726 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2220      	movs	r2, #32
 800975e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009768:	bf00      	nop
 800976a:	3754      	adds	r7, #84	@ 0x54
 800976c:	46bd      	mov	sp, r7
 800976e:	bc80      	pop	{r7}
 8009770:	4770      	bx	lr

08009772 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800977e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7ff fd6c 	bl	800926a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009792:	bf00      	nop
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800979a:	b480      	push	{r7}
 800979c:	b085      	sub	sp, #20
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b21      	cmp	r3, #33	@ 0x21
 80097ac:	d13e      	bne.n	800982c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097b6:	d114      	bne.n	80097e2 <UART_Transmit_IT+0x48>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d110      	bne.n	80097e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	1c9a      	adds	r2, r3, #2
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	621a      	str	r2, [r3, #32]
 80097e0:	e008      	b.n	80097f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	1c59      	adds	r1, r3, #1
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	6211      	str	r1, [r2, #32]
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	4619      	mov	r1, r3
 8009802:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10f      	bne.n	8009828 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68da      	ldr	r2, [r3, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009816:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68da      	ldr	r2, [r3, #12]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009826:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	e000      	b.n	800982e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800982c:	2302      	movs	r3, #2
  }
}
 800982e:	4618      	mov	r0, r3
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	bc80      	pop	{r7}
 8009836:	4770      	bx	lr

08009838 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68da      	ldr	r2, [r3, #12]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800984e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2220      	movs	r2, #32
 8009854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff fceb 	bl	8009234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08c      	sub	sp, #48	@ 0x30
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b22      	cmp	r3, #34	@ 0x22
 800987a:	f040 80ae 	bne.w	80099da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009886:	d117      	bne.n	80098b8 <UART_Receive_IT+0x50>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d113      	bne.n	80098b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009890:	2300      	movs	r3, #0
 8009892:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009898:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b0:	1c9a      	adds	r2, r3, #2
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80098b6:	e026      	b.n	8009906 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ca:	d007      	beq.n	80098dc <UART_Receive_IT+0x74>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <UART_Receive_IT+0x82>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d106      	bne.n	80098ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	e008      	b.n	80098fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800990a:	b29b      	uxth	r3, r3
 800990c:	3b01      	subs	r3, #1
 800990e:	b29b      	uxth	r3, r3
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	4619      	mov	r1, r3
 8009914:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009916:	2b00      	cmp	r3, #0
 8009918:	d15d      	bne.n	80099d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68da      	ldr	r2, [r3, #12]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f022 0220 	bic.w	r2, r2, #32
 8009928:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	695a      	ldr	r2, [r3, #20]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 0201 	bic.w	r2, r2, #1
 8009948:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2220      	movs	r2, #32
 800994e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800995c:	2b01      	cmp	r3, #1
 800995e:	d135      	bne.n	80099cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	330c      	adds	r3, #12
 800996c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	e853 3f00 	ldrex	r3, [r3]
 8009974:	613b      	str	r3, [r7, #16]
   return(result);
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f023 0310 	bic.w	r3, r3, #16
 800997c:	627b      	str	r3, [r7, #36]	@ 0x24
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	330c      	adds	r3, #12
 8009984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009986:	623a      	str	r2, [r7, #32]
 8009988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	69f9      	ldr	r1, [r7, #28]
 800998c:	6a3a      	ldr	r2, [r7, #32]
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	61bb      	str	r3, [r7, #24]
   return(result);
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e5      	bne.n	8009966 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0310 	and.w	r3, r3, #16
 80099a4:	2b10      	cmp	r3, #16
 80099a6:	d10a      	bne.n	80099be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	60fb      	str	r3, [r7, #12]
 80099bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7f8 fa7d 	bl	8001ec4 <HAL_UARTEx_RxEventCallback>
 80099ca:	e002      	b.n	80099d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff fc3a 	bl	8009246 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	e002      	b.n	80099dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	e000      	b.n	80099dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80099da:	2302      	movs	r3, #2
  }
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3730      	adds	r7, #48	@ 0x30
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68da      	ldr	r2, [r3, #12]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689a      	ldr	r2, [r3, #8]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009a1e:	f023 030c 	bic.w	r3, r3, #12
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	6812      	ldr	r2, [r2, #0]
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	430b      	orrs	r3, r1
 8009a2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	699a      	ldr	r2, [r3, #24]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a2c      	ldr	r2, [pc, #176]	@ (8009af8 <UART_SetConfig+0x114>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d103      	bne.n	8009a54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009a4c:	f7fd fe74 	bl	8007738 <HAL_RCC_GetPCLK2Freq>
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	e002      	b.n	8009a5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009a54:	f7fd fe5c 	bl	8007710 <HAL_RCC_GetPCLK1Freq>
 8009a58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	009a      	lsls	r2, r3, #2
 8009a64:	441a      	add	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a70:	4a22      	ldr	r2, [pc, #136]	@ (8009afc <UART_SetConfig+0x118>)
 8009a72:	fba2 2303 	umull	r2, r3, r2, r3
 8009a76:	095b      	lsrs	r3, r3, #5
 8009a78:	0119      	lsls	r1, r3, #4
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	009a      	lsls	r2, r3, #2
 8009a84:	441a      	add	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a90:	4b1a      	ldr	r3, [pc, #104]	@ (8009afc <UART_SetConfig+0x118>)
 8009a92:	fba3 0302 	umull	r0, r3, r3, r2
 8009a96:	095b      	lsrs	r3, r3, #5
 8009a98:	2064      	movs	r0, #100	@ 0x64
 8009a9a:	fb00 f303 	mul.w	r3, r0, r3
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	011b      	lsls	r3, r3, #4
 8009aa2:	3332      	adds	r3, #50	@ 0x32
 8009aa4:	4a15      	ldr	r2, [pc, #84]	@ (8009afc <UART_SetConfig+0x118>)
 8009aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aaa:	095b      	lsrs	r3, r3, #5
 8009aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ab0:	4419      	add	r1, r3
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	009a      	lsls	r2, r3, #2
 8009abc:	441a      	add	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8009afc <UART_SetConfig+0x118>)
 8009aca:	fba3 0302 	umull	r0, r3, r3, r2
 8009ace:	095b      	lsrs	r3, r3, #5
 8009ad0:	2064      	movs	r0, #100	@ 0x64
 8009ad2:	fb00 f303 	mul.w	r3, r0, r3
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	011b      	lsls	r3, r3, #4
 8009ada:	3332      	adds	r3, #50	@ 0x32
 8009adc:	4a07      	ldr	r2, [pc, #28]	@ (8009afc <UART_SetConfig+0x118>)
 8009ade:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae2:	095b      	lsrs	r3, r3, #5
 8009ae4:	f003 020f 	and.w	r2, r3, #15
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	440a      	add	r2, r1
 8009aee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009af0:	bf00      	nop
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	40013800 	.word	0x40013800
 8009afc:	51eb851f 	.word	0x51eb851f

08009b00 <memset>:
 8009b00:	4603      	mov	r3, r0
 8009b02:	4402      	add	r2, r0
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d100      	bne.n	8009b0a <memset+0xa>
 8009b08:	4770      	bx	lr
 8009b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0e:	e7f9      	b.n	8009b04 <memset+0x4>

08009b10 <strcat>:
 8009b10:	4602      	mov	r2, r0
 8009b12:	b510      	push	{r4, lr}
 8009b14:	7814      	ldrb	r4, [r2, #0]
 8009b16:	4613      	mov	r3, r2
 8009b18:	3201      	adds	r2, #1
 8009b1a:	2c00      	cmp	r4, #0
 8009b1c:	d1fa      	bne.n	8009b14 <strcat+0x4>
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b28:	2a00      	cmp	r2, #0
 8009b2a:	d1f9      	bne.n	8009b20 <strcat+0x10>
 8009b2c:	bd10      	pop	{r4, pc}
	...

08009b30 <__libc_init_array>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	2600      	movs	r6, #0
 8009b34:	4d0c      	ldr	r5, [pc, #48]	@ (8009b68 <__libc_init_array+0x38>)
 8009b36:	4c0d      	ldr	r4, [pc, #52]	@ (8009b6c <__libc_init_array+0x3c>)
 8009b38:	1b64      	subs	r4, r4, r5
 8009b3a:	10a4      	asrs	r4, r4, #2
 8009b3c:	42a6      	cmp	r6, r4
 8009b3e:	d109      	bne.n	8009b54 <__libc_init_array+0x24>
 8009b40:	f000 f822 	bl	8009b88 <_init>
 8009b44:	2600      	movs	r6, #0
 8009b46:	4d0a      	ldr	r5, [pc, #40]	@ (8009b70 <__libc_init_array+0x40>)
 8009b48:	4c0a      	ldr	r4, [pc, #40]	@ (8009b74 <__libc_init_array+0x44>)
 8009b4a:	1b64      	subs	r4, r4, r5
 8009b4c:	10a4      	asrs	r4, r4, #2
 8009b4e:	42a6      	cmp	r6, r4
 8009b50:	d105      	bne.n	8009b5e <__libc_init_array+0x2e>
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b58:	4798      	blx	r3
 8009b5a:	3601      	adds	r6, #1
 8009b5c:	e7ee      	b.n	8009b3c <__libc_init_array+0xc>
 8009b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b62:	4798      	blx	r3
 8009b64:	3601      	adds	r6, #1
 8009b66:	e7f2      	b.n	8009b4e <__libc_init_array+0x1e>
 8009b68:	08009c70 	.word	0x08009c70
 8009b6c:	08009c70 	.word	0x08009c70
 8009b70:	08009c70 	.word	0x08009c70
 8009b74:	08009c74 	.word	0x08009c74

08009b78 <strcpy>:
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b7e:	f803 2b01 	strb.w	r2, [r3], #1
 8009b82:	2a00      	cmp	r2, #0
 8009b84:	d1f9      	bne.n	8009b7a <strcpy+0x2>
 8009b86:	4770      	bx	lr

08009b88 <_init>:
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8a:	bf00      	nop
 8009b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8e:	bc08      	pop	{r3}
 8009b90:	469e      	mov	lr, r3
 8009b92:	4770      	bx	lr

08009b94 <_fini>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr
